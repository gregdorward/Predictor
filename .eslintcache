[{"/Users/gregdorward/Development/football-predictions/src/index.js":"1","/Users/gregdorward/Development/football-predictions/src/App.js":"2","/Users/gregdorward/Development/football-predictions/src/reportWebVitals.js":"3","/Users/gregdorward/Development/football-predictions/src/components/spinner.js":"4","/Users/gregdorward/Development/football-predictions/src/components/showCardPotential.js":"5","/Users/gregdorward/Development/football-predictions/src/components/createBadge.js":"6","/Users/gregdorward/Development/football-predictions/src/components/showBttsData.js":"7","/Users/gregdorward/Development/football-predictions/src/components/radio.js":"8","/Users/gregdorward/Development/football-predictions/src/components/Header.js":"9","/Users/gregdorward/Development/football-predictions/src/logic/getFixtures.js":"10","/Users/gregdorward/Development/football-predictions/src/components/createStatsDiv.js":"11","/Users/gregdorward/Development/football-predictions/src/logic/getForm.js":"12","/Users/gregdorward/Development/football-predictions/src/components/Button.js":"13","/Users/gregdorward/Development/football-predictions/src/logic/getScorePredictions.js":"14","/Users/gregdorward/Development/football-predictions/src/components/CollapsableElement.js":"15","/Users/gregdorward/Development/football-predictions/src/components/TextSection.js":"16","/Users/gregdorward/Development/football-predictions/src/logic/getStats.js":"17","/Users/gregdorward/Development/football-predictions/src/components/Div.js":"18","/Users/gregdorward/Development/football-predictions/src/components/CollapsableDiv.js":"19","/Users/gregdorward/Development/football-predictions/src/components/Increment.js":"20","/Users/gregdorward/Development/football-predictions/src/logic/getBTTSPotential.js":"21","/Users/gregdorward/Development/football-predictions/src/components/OddsRadio.js":"22","/Users/gregdorward/Development/football-predictions/src/logic/getTeamStats.js":"23","/Users/gregdorward/Development/football-predictions/src/components/HeadToHead.js":"24","/Users/gregdorward/Development/football-predictions/src/components/BulletList.js":"25","/Users/gregdorward/Development/football-predictions/src/components/Table.js":"26","/Users/gregdorward/Development/football-predictions/src/components/LeagueTable.js":"27","/Users/gregdorward/Development/football-predictions/src/components/Fixture.js":"28","/Users/gregdorward/Development/football-predictions/src/components/KofiButton.js":"29","/Users/gregdorward/Development/football-predictions/src/components/Chart.js":"30","/Users/gregdorward/Development/football-predictions/src/logic/compareFormTrend.js":"31","/Users/gregdorward/Development/football-predictions/src/components/Toggle.js":"32","/Users/gregdorward/Development/football-predictions/src/components/Carousel.js":"33","/Users/gregdorward/Development/football-predictions/src/components/DayPicker.js":"34","/Users/gregdorward/Development/football-predictions/src/components/DateForm.js":"35","/Users/gregdorward/Development/football-predictions/src/logic/dataSlice.js":"36","/Users/gregdorward/Development/football-predictions/src/logic/store.js":"37","/Users/gregdorward/Development/football-predictions/src/components/Team.js":"38","/Users/gregdorward/Development/football-predictions/src/components/Checkbox.js":"39"},{"size":1066,"mtime":1701947702549,"results":"40","hashOfConfig":"41"},{"size":24162,"mtime":1697812372163,"results":"42","hashOfConfig":"41"},{"size":362,"mtime":1642008106594,"results":"43","hashOfConfig":"41"},{"size":297,"mtime":1611654841360,"results":"44","hashOfConfig":"45"},{"size":0,"mtime":1611654832610,"results":"46","hashOfConfig":"45"},{"size":373,"mtime":1657548030451,"results":"47","hashOfConfig":"41"},{"size":0,"mtime":1611654828618,"results":"48","hashOfConfig":"45"},{"size":963,"mtime":1642008106588,"results":"49","hashOfConfig":"41"},{"size":144,"mtime":1642008106581,"results":"50","hashOfConfig":"41"},{"size":59096,"mtime":1706296577492,"results":"51","hashOfConfig":"41"},{"size":12122,"mtime":1705077962033,"results":"52","hashOfConfig":"41"},{"size":476,"mtime":1701970028062,"results":"53","hashOfConfig":"41"},{"size":293,"mtime":1664526263212,"results":"54","hashOfConfig":"41"},{"size":110184,"mtime":1706894773746,"results":"55","hashOfConfig":"41"},{"size":744,"mtime":1666608861684,"results":"56","hashOfConfig":"41"},{"size":180,"mtime":1642008106585,"results":"57","hashOfConfig":"58"},{"size":57827,"mtime":1706014060018,"results":"59","hashOfConfig":"41"},{"size":203,"mtime":1642008106578,"results":"60","hashOfConfig":"41"},{"size":595,"mtime":1614865093901,"results":"61","hashOfConfig":"45"},{"size":1347,"mtime":1660318811896,"results":"62","hashOfConfig":"41"},{"size":991,"mtime":1702478501516,"results":"63","hashOfConfig":"41"},{"size":930,"mtime":1674565851630,"results":"64","hashOfConfig":"41"},{"size":8044,"mtime":1683908486579,"results":"65","hashOfConfig":"41"},{"size":2973,"mtime":1683902453834,"results":"66","hashOfConfig":"41"},{"size":440,"mtime":1642008106576,"results":"67","hashOfConfig":"58"},{"size":4695,"mtime":1683905601860,"results":"68","hashOfConfig":"41"},{"size":17814,"mtime":1682088677929,"results":"69","hashOfConfig":"41"},{"size":11108,"mtime":1702306022143,"results":"70","hashOfConfig":"41"},{"size":202,"mtime":1667313223726,"results":"71","hashOfConfig":"41"},{"size":6595,"mtime":1695727463584,"results":"72","hashOfConfig":"41"},{"size":10751,"mtime":1689851117090,"results":"73","hashOfConfig":"41"},{"size":386,"mtime":1664378350858,"results":"74","hashOfConfig":"41"},{"size":1034,"mtime":1667553607038,"results":"75","hashOfConfig":"41"},{"size":556,"mtime":1669391554973,"results":"76","hashOfConfig":"41"},{"size":225,"mtime":1669809056859,"results":"77","hashOfConfig":"41"},{"size":848,"mtime":1693584106618,"results":"78","hashOfConfig":"41"},{"size":283,"mtime":1693400578489,"results":"79","hashOfConfig":"41"},{"size":19617,"mtime":1701969980943,"results":"80","hashOfConfig":"41"},{"size":707,"mtime":1697730848306,"results":"81","hashOfConfig":"41"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"85"},"z32ji8",{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"85"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1f0e5p2",{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"85"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"85"},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"85"},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},"1eaajj",{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"85"},{"filePath":"124","messages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"132","messages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"134","messages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"136","messages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"85"},{"filePath":"144","messages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"85"},{"filePath":"147","messages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"85"},{"filePath":"150","messages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"152","messages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"85"},{"filePath":"155","messages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"85"},{"filePath":"158","messages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"161","messages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"85"},{"filePath":"164","messages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"167","messages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"169","messages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"171","messages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"173","messages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"85"},{"filePath":"176","messages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},"/Users/gregdorward/Development/football-predictions/src/index.js",["178","179"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter as Router, Route, Routes, HashRouter } from \"react-router-dom\";\nimport TeamPage from \"./components/Team\";\nimport {Fixture} from \"./components/Fixture\"\nimport { Provider } from \"react-redux\";\nimport store from \"./logic/store\"; // Import your Redux store\n\nReactDOM.render(\n  // <React.StrictMode>\n    <Provider store={store}>\n    <HashRouter>\n        <Routes>\n          <Route path=\"/fixture\" element={<TeamPage />} />\n          <Route path=\"/\" exact element={<App />} />\n          {/* <Route path=\"/\" element={<Fixture />} /> */}\n        </Routes>\n        </HashRouter>\n    </Provider>\n    ,\n  // </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["180","181"],"/Users/gregdorward/Development/football-predictions/src/App.js",["182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198"],"import React, { Fragment } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Header from \"./components/Header\";\nimport { Button } from \"./components/Button\";\nimport OddsRadio from \"./components/OddsRadio\";\nimport { Fixture } from \"./components/Fixture\";\nimport mockedFixtures from \"./data/mockedFixtures.json\";\nimport { selectedOdds } from \"./components/OddsRadio\";\nimport Collapsable from \"./components/CollapsableElement\";\nimport { StyledKofiButton } from \"./components/KofiButton\";\nimport DateField from \"./components/DateForm\";\nimport {\n  FacebookShareButton,\n  FacebookIcon,\n  RedditShareButton,\n  RedditIcon,\n  TelegramShareButton,\n  TelegramIcon,\n  TwitterShareButton,\n  TwitterIcon,\n  WhatsappShareButton,\n  WhatsappIcon,\n} from \"react-share\";\nimport { BrowserRouter as Router, Route, Routes, Link } from \"react-router-dom\";\nimport TeamPage from \"./components/Team\";\nimport { generateFixtures } from \"./logic/getFixtures\";\nimport { selectedOption } from \"./components/radio\";\nimport { ThreeDots } from \"react-loading-icons\";\n// import { Toggles } from \"./components/Toggle\";\nimport reactDom from \"react-dom\";\n// require(\"dotenv\").config();\n\nexport const proxyurl = \"https://safe-caverns-99679.herokuapp.com/\";\nexport var fixtureList = [];\nexport let allLeagueData = [];\n\nexport const availableLeagues = [];\nexport var orderedLeagues = [];\n\nconst leagueOrder = [\n  7432, //World Cup 22\n  9660, //premier league 22/23\n  9663, //championship 22/23\n  9582, //league 1 22/23\n  9581, //league 2 22/23\n  9700, //National league 22/23\n  9665, //La Liga 22/23\n  9636, //Scottish Prem 22/23\n  9655, //Bundesliga 22/23\n  9697, //Serie A 22/23\n  9674, //French Prem 22/23\n  9984, //Portagul Prem 22/23\n  9653, //Dutch Prem 22/23\n  9577, //Belgian Pro League 22/23\n  8737, //sweden 23\n  9545, //Danish Prem 22/23\n  8739, //Norway Prem 23\n  9954, //Austrian Prem 22/23\n  9889, //Greek Prem 22/23\n  9553, //Polish prem 22/23\n  9580, //Swiss prem 22/23\n  8741, //Irish Prem 23\n  9675, //Spanish secunda 22/23\n  9808, //Italy serie B 22/23\n  9656, //Bundesliga 2 22/23\n  9741, //German 3rd tier 22/23\n  9621, //French League 2 22/23\n  9637, //Scottish Championship 22/23\n  9639, //Scottish league 1 22/23\n  9638, //Scottish league 2 22/23\n  9890, //Women's prem 23/24\n  8777, //MLS 23\n  9035, //Brazil prem 23\n  8595, //Argentina prem 23\n  // 6935, //Japan 22\n  9525, //Mexico prem 23/24\n  9972, //National league North and South 22/23\n  10505, //Australian A league 23/24\n  8899, //S Korea 23\n];\n\nlet today;\nlet todayFootyStats;\nlet tomorrow;\nlet tomorrowFootyStats;\nlet date;\nlet dateFootyStats;\nlet value;\nlet yesterday;\nlet yesterdayFootyStats;\nlet lastSaturday;\nlet lastSaturdayFootyStats;\nlet historic;\nlet historicFootyStats;\nlet tomorrowsDate;\nlet yesterdaysDate;\nlet saturdayDate;\nlet historicDate;\nlet string;\nlet dateString;\n\n(async function fetchLeagueData(){\n  let leagueList;\n\n  leagueList = await fetch(`${process.env.REACT_APP_EXPRESS_SERVER}leagueList`);\n\n  let leagueArray;\n  await leagueList.json().then((leagues) => {\n    leagueArray = Array.from(leagues.data);\n  });\n\n  for (let i = 0; i < leagueArray.length; i++) {\n    const league = leagueArray[i];\n    const name = leagueArray[i].name;\n\n    for (let x = 0; x < league.season.length; x++) {\n      const element = league.season[x];\n\n      if (element.year === 2023 || element.year === 20232024) {\n        if (element.id !== 4340 && element.id !== 6935 && element.id !== 7061) {\n          availableLeagues.push({ name: name, element });\n        }\n      }\n    }\n\n    async function mapOrder(array, order, key) {\n      array.sort(function (a, b) {\n        var A = a.element[key],\n          B = b.element[key];\n\n        if (order.indexOf(A) > order.indexOf(B)) {\n          return 1;\n        } else {\n          return -1;\n        }\n      });\n      return array;\n    }\n    //leagues ordered by id\n    orderedLeagues = await mapOrder(availableLeagues, leagueOrder, \"id\");\n  }\n  return orderedLeagues;\n})()\n\nexport async function getLeagueList() {\n  let i = 0;\n  date = new Date();\n  string = \"Today\";\n\n  async function incrementDate(num, date) {\n    i = i + num;\n    value = i + num;\n    date.setDate(date.getDate() + num);\n    [date, dateFootyStats] = await calculateDate(date);\n    string = dateFootyStats;\n    await renderButtons();\n    // return date;\n  }\n\n  async function decrementDate(num, date) {\n    i = i - num;\n    console.log(i);\n    if (i > -60) {\n      value = i - num;\n      date.setDate(date.getDate() - num);\n      [date, dateFootyStats] = await calculateDate(date);\n      string = dateFootyStats;\n      dateString = date;\n      await renderButtons();\n    }\n  }\n\n  async function calculateDate(dateString) {\n    const day = dateString.getDate();\n    const month = dateString.getMonth() + 1;\n    const year = dateString.getFullYear();\n    return [`${month}${day}${year}`, `${year}-${month}-${day}`];\n  }\n\n  [today, todayFootyStats] = await calculateDate(new Date());\n\n  tomorrowsDate = new Date();\n  tomorrowsDate.setDate(tomorrowsDate.getDate() + 1);\n  [tomorrow, tomorrowFootyStats] = await calculateDate(tomorrowsDate);\n\n  yesterdaysDate = new Date();\n  yesterdaysDate.setDate(yesterdaysDate.getDate() - 1);\n  [yesterday, yesterdayFootyStats] = await calculateDate(yesterdaysDate);\n\n  saturdayDate = new Date();\n  saturdayDate.setDate(\n    saturdayDate.getDate() - ((saturdayDate.getDay() + 6) % 7)\n  );\n  saturdayDate.setDate(saturdayDate.getDate() - 2);\n  [lastSaturday, lastSaturdayFootyStats] = await calculateDate(saturdayDate);\n\n  historicDate = new Date();\n  historicDate.setDate(\n    historicDate.getDate() - ((historicDate.getDay() + 6) % 7)\n  );\n  historicDate.setDate(historicDate.getDate() - 9);\n  [historic, historicFootyStats] = await calculateDate(historicDate);\n\n  const text =\n    \"Select a day you would like to retrieve fixtures for from the options above\\n A list of games will be returned once the data has loaded\\n Once all fixtures have loaded, click on “Get Predictions” to see XGTipping's forecasted outcomes for every game\\n If a game has completed, the predictions is displayed on the right and the actual result on the left\\n Each individual fixture is tappable/clickable. By doing so, you can access a range of detailed stats, from comparative charts, granular performance measures to previous meetings.\\n All games are subject to the same automated prediction algorithm with the outcome being a score prediction. Factors that determine the tip include the following, amongst others:\\n - Goal differentials\\n - Expected goal differentials \\n - Attack/Defence performance\\n - Form trends over time\\n - Home/Away records\\n - WDL records\\n - Points per game \\n - A range of other comparative factors\\n  –\\n\";\n\n  const text2 =\n    \"A range of tools are available should you wish to use them\\n Build a multi - Use the '+' or '-' buttons to add or remove a game deemed to be one of XGTIpping's highest confidence tips from the day\\n Exotic of the day: A pre-built exotic multi comprising of XGTipping's highest confidence tips\\n BTTS games: Games where both teams to score is deemed a likely outcome\\n Over 2.5 goals tips: Games where over 2.5 goals are most likely to be scored\\n XG tips: Comprises only games where the expected goal differentials between each team are at their greatest. We believe this shows a true disparity in the form of the two opposing teams\\n Tap the 'How to use' option to hide this text\";\n\n  let textJoined = text.concat(text2);\n\n  let newText = textJoined.split(\"\\n\").map((i) => {\n    return <p>{i}</p>;\n  });\n\n  async function renderButtons() {\n    ReactDOM.render(\n      <div className=\"FixtureButtons\">\n        <div className=\"historicResults\">\n          <Button\n            text={\"Last Saturday\"}\n            className=\"HistoricFixturesButton\"\n            onClickEvent={async () =>\n              fixtureList.push(\n                await generateFixtures(\n                  \"lastSaturday\",\n                  lastSaturday,\n                  selectedOdds,\n                  lastSaturdayFootyStats,\n                  false,\n                  today\n                )\n              )\n            }\n          />\n          {/* <Button\n            text={\"Historic predictions\"}\n            className=\"HistoricFixturesButtonRight\"\n            onClickEvent={async () =>\n              fixtureList.push(\n                await generateFixtures(\n                  \"historic\",\n                  historic,\n                  selectedOdds,\n                  historicFootyStats\n                )\n              )\n            }\n          /> */}\n        </div>\n        <Button\n          text={`<`}\n          className=\"FixturesButton\"\n          // onClickEvent={async () =>\n          //   fixtureList.push(\n          //     await generateFixtures(\n          //       \"yesterdaysFixtures\",\n          //       yesterday,\n          //       selectedOdds,\n          //       yesterdayFootyStats\n          //     )\n          //   )\n          // }\n          onClickEvent={async () => await decrementDate(1, date)}\n        />\n        <Button\n          text={dateFootyStats !== undefined ? dateFootyStats : date}\n          className=\"FixturesButton\"\n          onClickEvent={async () =>\n            fixtureList.push(\n              await generateFixtures(\n                \"todaysFixtures\",\n                dateString,\n                selectedOdds,\n                dateFootyStats,\n                false,\n                today\n              )\n            )\n          }\n        />\n        <Button\n          text={`Today`}\n          className=\"FixturesButtonToday\"\n          onClickEvent={async () =>\n            fixtureList.push(\n              await generateFixtures(\n                \"todaysFixtures\",\n                today,\n                selectedOdds,\n                todayFootyStats,\n                true,\n                today\n              )\n            )\n          }\n        />\n        <Button\n          text={\"Tomorrow\"}\n          className=\"FixturesButton\"\n          onClickEvent={async () =>\n            fixtureList.push(\n              await generateFixtures(\n                \"tomorrowsFixtures\",\n                tomorrow,\n                selectedOdds,\n                tomorrowFootyStats,\n                true,\n                today\n              )\n            )\n          }\n        />\n      </div>,\n      document.getElementById(\"Buttons\")\n    );\n  }\n\n  ReactDOM.render(\n    <div className=\"FixtureButtons\">\n      <div className=\"historicResults\">\n        <Button\n          text={\"Last Saturday\"}\n          className=\"HistoricFixturesButton\"\n          onClickEvent={async () =>\n            fixtureList.push(\n              await generateFixtures(\n                \"lastSaturday\",\n                lastSaturday,\n                selectedOdds,\n                lastSaturdayFootyStats,\n                false,\n                today\n              )\n            )\n          }\n        />\n        {/* <Button\n          text={\"Historic predictions\"}\n          className=\"HistoricFixturesButtonRight\"\n          onClickEvent={async () =>\n            fixtureList.push(\n              await generateFixtures(\n                \"historic\",\n                historic,\n                selectedOdds,\n                historicFootyStats\n              )\n            )\n          }\n        /> */}\n      </div>\n      <Button\n        text={`<`}\n        className=\"FixturesButton\"\n        onClickEvent={async () => await decrementDate(1, date)}\n      />\n      <Button\n        text={`${string}`}\n        className=\"FixturesButtonToday\"\n        onClickEvent={async () =>\n          fixtureList.push(\n            await generateFixtures(\n              \"todaysFixtures\",\n              today,\n              selectedOdds,\n              todayFootyStats,\n              true,\n              today\n            )\n          )\n        }\n      />\n      <Button\n        text={\"Tomorrow\"}\n        className=\"FixturesButton\"\n        onClickEvent={async () =>\n          fixtureList.push(\n            await generateFixtures(\n              \"tomorrowsFixtures\",\n              tomorrow,\n              selectedOdds,\n              tomorrowFootyStats,\n              true,\n              today\n            )\n          )\n        }\n      />\n      <span>\n        *Not enough data to predict games in the first few gameweeks -\n        predictions displayed as 'x - x'\n      </span>\n    </div>,\n    document.getElementById(\"Buttons\")\n  );\n  ReactDOM.render(\n    <div className=\"OddsRadios\">\n      <OddsRadio value=\"Fractional odds\"></OddsRadio>\n      <OddsRadio value=\"Decimal odds\"></OddsRadio>\n    </div>,\n    document.getElementById(\"Checkbox\")\n  );\n  ReactDOM.render(\n    <Fragment>\n      <Collapsable\n        // className={\"HowToUse\"}\n        buttonText={\"How to use\"}\n        element={newText}\n      />\n    </Fragment>,\n    document.getElementById(\"XGDiff\")\n  );\n\n  // ReactDOM.render(\n  //   <Button\n  //     text={\"Lowest scoring leagues\"}\n  //     className={\"Under25TeamsButton\"}\n  //     onClickEvent={async () => {\n  //       let leagues = await getLowestScoringLeagues();\n  //       const leagueList = [];\n\n  //       leagues.forEach(async (league) =>\n  //         leagueList.push(\n  //           <ul className=\"GlobalStat\">\n  //             <p className=\"TeamName\">\n  //               {league.league} ({league.leagueCountry})\n  //             </p>\n  //             <li>Average goals: {league.averageGoals}</li>\n  //             <li>Under 2.5 goals %: {league.under25Percentage}%</li>\n  //           </ul>\n  //         )\n  //       );\n\n  //       reactDom.render(\n  //         <div>\n  //           <h3>Leagues with the lowest scoring games</h3>\n  //           <ul>{leagueList}</ul>\n  //         </div>,\n  //         document.getElementById(\"Under25Games\")\n  //       );\n  //     }}\n  //   ></Button>,\n  //   document.getElementById(\"Under25Games\")\n  // );\n\n  // ReactDOM.render(\n  //   <Button\n  //     text={\"Highest scoring leagues\"}\n  //     className={\"Over25TeamsButton\"}\n  //     onClickEvent={async () => {\n  //       let leagues = await getHighestScoringLeagues();\n  //       const leagueList = [];\n\n  //       leagues.forEach(async (league) =>\n  //         leagueList.push(\n  //           <ul className=\"GlobalStat\">\n  //             <p className=\"TeamName\">\n  //               {league.league} ({league.leagueCountry})\n  //             </p>\n  //             <li>Average goals: {league.averageGoals}</li>\n  //             <li>Over 2.5 goals %: {league.over25Percentage}%</li>\n  //           </ul>\n  //         )\n  //       );\n\n  //       reactDom.render(\n  //         <div>\n  //           <h3>Leagues with the highest scoring games</h3>\n  //           <ul>{leagueList}</ul>\n  //         </div>,\n  //         document.getElementById(\"Over25Games\")\n  //       );\n  //     }}\n  //   ></Button>,\n  //   document.getElementById(\"Over25Games\")\n  // );\n};\n\nasync function getHighestScoringLeagues() {\n  let teamsList = await fetch(`${process.env.REACT_APP_EXPRESS_SERVER}over25`);\n  let arr = [];\n  await teamsList.json().then(async (leagues) => {\n    for (let index = 0; index < 215; index++) {\n      const league = {\n        league: leagues.data.top_leagues.data[index].name,\n        leagueCountry: leagues.data.top_leagues.data[index].country,\n        averageGoals: leagues.data.top_leagues.data[index].seasonAVG_overall,\n        over25Percentage:\n          leagues.data.top_leagues.data[index].seasonOver25Percentage_overall,\n        division: leagues.data.top_leagues.data[index].division,\n        leagueId: leagues.data.top_leagues.data[index].id,\n      };\n      arr.push(league);\n    }\n  });\n\n  const finalArray = arr.filter(\n    (league) =>\n      leagueOrder.find((element) => element === league.leagueId) &&\n      league.averageGoals >= 2.5\n  );\n\n  let sortedArray = finalArray.sort((a, b) => b.averageGoals - a.averageGoals);\n\n  return sortedArray;\n}\n\nasync function getLowestScoringLeagues() {\n  let teamsList = await fetch(`${process.env.REACT_APP_EXPRESS_SERVER}under25`);\n  let arr = [];\n  await teamsList.json().then(async (leagues) => {\n    for (let index = 0; index < 215; index++) {\n      const league = {\n        league: leagues.data.top_leagues.data[index].name,\n        leagueCountry: leagues.data.top_leagues.data[index].country,\n        averageGoals: leagues.data.top_leagues.data[index].seasonAVG_overall,\n        under25Percentage:\n          leagues.data.top_leagues.data[index].seasonUnder25Percentage_overall,\n        leagueId: leagues.data.top_leagues.data[index].id,\n      };\n      arr.push(league);\n    }\n  });\n\n  const finalArray = arr.filter(\n    (league) =>\n      leagueOrder.find((element) => element === league.leagueId) &&\n      league.averageGoals < 2.5\n  );\n\n  let sortedArray = finalArray.sort((a, b) => a.averageGoals - b.averageGoals);\n\n  return sortedArray;\n}\n\nconst welcomeTextUnsplitOne = `Welcome to XGTipping. Your go-to resource for all things football, from predictions, comprehensive head to head stats, results, xg scores, odds, league tables, form, and bespoke multi-builders underpinned by expected goal (XG) data.\\n `;\nlet welcomeTextOne = welcomeTextUnsplitOne.split(\"\\n\").map((i) => {\n  return <p>{i}</p>;\n});\n\nconst welcomeTextUnsplitTwo = `XGTipping is completely independent and free to use, relying on a donation model to support running costs. For feedback or feature ideas, get in touch at @TippingXg.`;\nlet welcomeTextTwo = welcomeTextUnsplitTwo.split(\"\\n\").map((i) => {\n  return <p>{i}</p>;\n});\n\n\nfunction App() {\n  getLeagueList();\n  return (\n    <>\n      <div className=\"App\">\n        <Header />\n        <a\n          className=\"SocialLink\"\n          href=\"https://www.reddit.com/r/xgtipping/\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          r/xgtipping\n        </a>\n        <div id=\"LoadingContainer\" className=\"LoadingContainer\" />\n        <div id=\"RadioContainer\" className=\"RadioContainer\">\n          <div id=\"RadioText\" />\n          <div id=\"RadioButtons\" />\n        </div>\n        <div id=\"Day\" />\n        <div id=\"Checkbox\" />\n        <div id=\"ExplainerText\" />\n        <div id=\"Loading\" className=\"Loading\"></div>\n        <div id=\"Buttons\" className=\"Buttons\">\n          <ThreeDots className=\"MainLoading\" fill=\"#030061\" />\n          <div>Loading all fixture and form data...</div>\n        </div>\n        <div id=\"GeneratePredictions\" className=\"GeneratePredictions\" />\n        <div id=\"bestPredictions\" className=\"bestPredictions\" />\n        <div id=\"exoticOfTheDay\" className=\"exoticOfTheDay\" />\n        <div id=\"successMeasure2\" />\n        <div id=\"RowOneContainer\" className=\"RowOneContainer\">\n          <div id=\"BTTS\" className=\"RowOne\" />\n          <div id=\"longShots\" className=\"RowOne\" />\n          <div id=\"draws\" className=\"RowOne\" />\n        </div>\n        <div id=\"insights\" />\n        <div id=\"successMeasure\" />\n        <div id=\"tables\" />\n        <div id=\"homeBadge\" />\n        <div id=\"FixtureContainerHeaders\"></div>\n        {/* <StyledKofiButton buttonText=\"Donations\"></StyledKofiButton> */}\n        <div id=\"XGDiff\" />\n        <div id=\"FixtureContainer\">\n          <h6 className=\"WelcomeText\">{welcomeTextOne}</h6>\n          <h6 className=\"GetMatchStatText\">\n            Below is an example of our tips/results overview for you to\n            familiarise yourself with. Get real fixtures using the date buttons,\n            above. When loaded, tap on one to see full match stats\n          </h6>\n          <div className=\"ExplainerContainer\">\n            <span className=\"oddsHomeExplainer\">Home odds</span>\n            <span className=\"emptyHomeTeam\"></span>\n            <span className=\"scoreExplainer\">Result / KO Time</span>\n            <span className=\"predictionExplainer\">Our Prediction</span>\n            <span className=\"emptyAwayTeam\"></span>\n            <span className=\"oddsAwayExplainer\">Away odds</span>\n          </div>\n          <Fixture\n            fixtures={mockedFixtures.matches}\n            // result={false}\n            mock={true}\n            className={\"individualFixture\"}\n          />\n          <div>\n            <h6 className=\"WelcomeText\">{welcomeTextTwo}</h6>\n            <h6 className=\"WelcomeText\">\n              We cover a range of leagues, including\n              <ul className=\"AllLeagues\">\n                <li className=\"League\">Premier League</li>\n                <li className=\"League\">English Football League</li>\n                <li className=\"League\">La Liga</li>\n                <li className=\"League\">Serie A</li>\n                <li className=\"League\">Bundesliga</li>\n                <li className=\"League\">Ligue 1</li>\n                <li className=\"League\">MLS</li>\n                <li className=\"League\">Primeira Liga</li>\n                <li className=\"League\">Loads more...</li>\n              </ul>\n            </h6>\n          </div>\n          <div>\n            <div className=\"DataText\">Raw data from</div>\n            <a\n              className=\"DataLink\"\n              href=\"https://www.footystats.org\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              footystats.org\n            </a>\n          </div>\n          <div className=\"bitcoin\" id=\"bitcoin\">\n            We aim to remain free to use, contributions are always appreciated\n            though:\n            <a\n              href=\"https://www.ko-fi.com/xgtipping\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              Donations\n            </a>\n            <span className=\"bitcoinSymbol\">&#x20bf;itcoin address</span>\n            <span className=\"bitcoinAddress\">\n              bc1q7j62txkvhfu0dt3l0s07saze6pjnyzs26wfgp0\n            </span>\n          </div>\n        </div>\n        <div className=\"Social\">\n          <TwitterShareButton\n            url={\"www.xgtipping.com\"}\n            title={\"#XGTipping\"}\n            className=\"ShareButton\"\n            style={{\n              backgroundColor: \"white\",\n              boxShadow: \"none\",\n              padding: \"0.5em\",\n            }}\n          >\n            <TwitterIcon size={\"3em\"} round={true} />\n          </TwitterShareButton>\n          <RedditShareButton\n            url={\"www.xgtipping.com\"}\n            title={\"XGTipping\"}\n            className=\"ShareButton\"\n            style={{\n              backgroundColor: \"white\",\n              boxShadow: \"none\",\n              padding: \"0.5em\",\n            }}\n          >\n            <RedditIcon size={\"3em\"} round={true} />\n          </RedditShareButton>\n          <FacebookShareButton\n            url={\"www.xgtipping.com\"}\n            quote={\"XGTipping - data-driven football predictions\"}\n            className=\"ShareButton\"\n            style={{\n              backgroundColor: \"white\",\n              boxShadow: \"none\",\n              padding: \"0.5em\",\n            }}\n          >\n            <FacebookIcon size={\"3em\"} round={true} />\n          </FacebookShareButton>\n          <WhatsappShareButton\n            url={\"www.xgtipping.com\"}\n            title={\"XGTipping\"}\n            separator=\": \"\n            className=\"ShareButton\"\n            style={{\n              backgroundColor: \"white\",\n              boxShadow: \"none\",\n              padding: \"0.5em\",\n            }}\n          >\n            <WhatsappIcon size={\"3em\"} round={true} />\n          </WhatsappShareButton>\n          <TelegramShareButton\n            url={\"XGTipping\"}\n            title={\"XGTipping\"}\n            className=\"ShareButton\"\n            style={{\n              backgroundColor: \"white\",\n              boxShadow: \"none\",\n              padding: \"0.5em\",\n            }}\n          >\n            <TelegramIcon size={\"3em\"} round={true} />\n          </TelegramShareButton>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n\n// import React from \"react\";\n// import { BrowserRouter as Router, Route, Routes, Link } from \"react-router-dom\";\n// import HomePage from \"./components/HomePage\";\n// import TeamPage from \"./components/Team\";\n\n// const App = () => {\n//   return (\n//     <Router>\n//       <Routes>\n//       <Route path=\"/team\" element={<TeamPage />} />\n//         <Route path=\"/\" element={<HomePage />} />\n//         {/* Add more routes */}\n//       </Routes>\n//     </Router>\n//   );\n// };\n\n// export default App;\n","/Users/gregdorward/Development/football-predictions/src/reportWebVitals.js",[],"/Users/gregdorward/Development/football-predictions/src/components/spinner.js",[],"/Users/gregdorward/Development/football-predictions/src/components/showCardPotential.js",[],"/Users/gregdorward/Development/football-predictions/src/components/createBadge.js",[],"/Users/gregdorward/Development/football-predictions/src/components/showBttsData.js",[],"/Users/gregdorward/Development/football-predictions/src/components/radio.js",[],"/Users/gregdorward/Development/football-predictions/src/components/Header.js",[],"/Users/gregdorward/Development/football-predictions/src/logic/getFixtures.js",["199","200","201"],"import React, { Fragment } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { orderedLeagues } from \"../App\";\nimport { getForm } from \"./getForm\";\nimport { Fixture } from \"../components/Fixture\";\nimport { Button } from \"../components/Button\";\nimport { getScorePrediction } from \"../logic/getScorePredictions\";\nimport { ThreeDots } from \"react-loading-icons\";\nimport { selectedOdds } from \"../components/OddsRadio\";\nimport LeagueTable from \"../components/LeagueTable\";\nimport { getPointsFromLastX } from \"../logic/getScorePredictions\";\n\nvar oddslib = require(\"oddslib\");\n\n// require(\"dotenv\").config();\n\nvar fixtureResponse;\nvar fixtureArray = [];\nexport var matches = [];\nexport var resultedMatches = [];\nvar league;\nvar leagueID;\nvar leagueGames = [];\nexport var leagueArray = [];\nvar leagueIdArray = [];\nexport var leagueStatsArray = [];\nexport let leagueInstance;\nexport let groupInstance;\nexport let allLeagueResultsArrayOfObjects = [];\nvar lastThreeFormHome;\nvar lastThreeFormAway;\nvar lastFiveFormHome;\nvar lastFiveFormAway;\nvar lastSixFormHome;\nvar lastSixFormAway;\nvar lastTenFormHome;\nvar lastTenFormAway;\nvar leagueOrAll;\nvar formRunHome;\nvar formRunAway;\nlet WDLinLeagueHome;\nlet WDLinLeagueAway;\nlet HomeAverageGoals;\nlet homeAverageGoals;\nlet HomeAverageConceded;\nlet homeAverageConceded;\nlet AwayAverageGoals;\nlet awayAverageGoals;\nlet AwayAverageConceded;\nlet awayAverageConceded;\n\n// export var [currentDay, month, year] = new Date()\n//   .toLocaleDateString(\"en-US\", { timeZone: \"Europe/London\" })\n//   .split(\"/\");\n\nexport async function diff(a, b) {\n  return parseFloat(a - b).toFixed(2);\n}\n\nexport let allForm = [];\nexport let tableArray = [];\nexport let worldCupArray = [];\ngroupInstance = [];\nleagueInstance = [];\n\nasync function convertTimestamp(timestamp) {\n  let newDate = new Date(timestamp * 1000);\n  let [day, month, year] = newDate.toLocaleDateString(\"en-US\").split(\"/\");\n\n  let converted = `${year}-${day}-${month}`;\n\n  return converted;\n}\n\nexport async function generateTables(a, leagueIdArray, allResults) {\n  // leagueIdArray = [];\n  tableArray = [];\n  worldCupArray = [];\n  let i = 0;\n  leagueArray.forEach(function (league) {\n    let currentLeagueId = leagueIdArray[i];\n    i++;\n    leagueInstance = [];\n    //Skip MLS which has a weird format\n    if (\n      !league.data.specific_tables[0].groups &&\n      currentLeagueId !== 6969 &&\n      league.data.specific_tables[0].table\n    ) {\n      for (\n        let index = 0;\n        index < league.data.specific_tables[0].table.length;\n        index++\n      ) {\n        let currentTeam = league.data.specific_tables[0].table[index];\n        let last5;\n        if (currentTeam.wdl_record.length < 5) {\n          last5 = currentTeam.wdl_record\n            .slice(`-${currentTeam.wdl_record.length}`)\n            .toUpperCase();\n        } else {\n          last5 = currentTeam.wdl_record.slice(-5).toUpperCase();\n        }\n\n        const team = {\n          LeagueID: currentLeagueId,\n          Position: index + 1,\n          Name: currentTeam.cleanName,\n          ID: currentTeam.id,\n          Played: currentTeam.matchesPlayed,\n          Wins: currentTeam.seasonWins_overall,\n          Draws: currentTeam.seasonDraws_overall,\n          Losses: currentTeam.seasonLosses_overall,\n          For: currentTeam.seasonGoals,\n          Against:\n            currentTeam.seasonConceded_home + currentTeam.seasonConceded_away,\n          GoalDifference: currentTeam.seasonGoalDifference,\n          Form: last5,\n          LastXPoints: getPointsFromLastX(last5.split(\"\")),\n          Points: currentTeam.points,\n          wdl: currentTeam.wdl_record,\n          seasonGoals: currentTeam.seasonGoals,\n          seasonConceded: currentTeam.seasonConceded,\n        };\n        leagueInstance.push(team);\n      }\n      tableArray.push({ id: currentLeagueId, table: leagueInstance });\n    } else if (currentLeagueId === 7432) {\n      // for (let x = 0; x < league.data.specific_tables[0].groups.length; x++) {\n      // for (\n      //   let index = 0;\n      //   index < league.data.specific_tables[0].groups[x].table.length;\n      //   index++\n      // )\n      league.data.specific_tables[0].groups.forEach((group) => {\n        leagueInstance = [];\n        for (let index = 0; index < group.table.length; index++) {\n          let currentTeam = group.table[index];\n          let last5 = \"N/A\";\n          const team = {\n            LeagueID: currentLeagueId,\n            Position: index + 1,\n            Name: currentTeam.cleanName,\n            ID: currentTeam.id,\n            Played: currentTeam.matchesPlayed,\n            Wins: currentTeam.seasonWins_overall,\n            Draws: currentTeam.seasonDraws_overall,\n            Losses: currentTeam.seasonLosses_overall,\n            For: currentTeam.seasonGoals,\n            Against:\n              currentTeam.seasonConceded_home + currentTeam.seasonConceded_away,\n            GoalDifference: currentTeam.seasonGoalDifference,\n            Form: last5,\n            LastXPoints: getPointsFromLastX(last5.split(\"\")),\n            Points: currentTeam.points,\n            wdl: currentTeam.wdl_record,\n            seasonGoals: currentTeam.seasonGoals,\n            seasonConceded: currentTeam.seasonConceded,\n          };\n          leagueInstance.push(team);\n        }\n        worldCupArray.push({\n          group: group.name,\n          table: leagueInstance,\n        });\n      });\n    } else if (league.data.league_table === null) {\n      for (\n        let index = 0;\n        index < league.data.all_matches_table_overall.length;\n        index++\n      ) {\n        let currentTeam = league.data.all_matches_table_overall[index];\n        let last5 = \"N/A\";\n        const team = {\n          LeagueID: currentLeagueId,\n          Position: index + 1,\n          Name: currentTeam.cleanName,\n          ID: currentTeam.id,\n          Played: currentTeam.matchesPlayed,\n          Wins: currentTeam.seasonWins_overall,\n          Draws: currentTeam.seasonDraws_overall,\n          Losses: currentTeam.seasonLosses_overall,\n          For: currentTeam.seasonGoals,\n          Against:\n            currentTeam.seasonConceded_home + currentTeam.seasonConceded_away,\n          GoalDifference: currentTeam.seasonGoalDifference,\n          Form: last5,\n          LastXPoints: getPointsFromLastX(last5.split(\"\")),\n          Points: currentTeam.points,\n          wdl: currentTeam.wdl_record,\n          seasonGoals: currentTeam.seasonGoals,\n          seasonConceded: currentTeam.seasonConceded,\n        };\n        leagueInstance.push(team);\n      }\n\n      tableArray.push({ id: currentLeagueId, table: leagueInstance });\n    }\n  });\n}\n\nasync function getTableLayout(arr, statistics) {\n  let tableArray = [];\n  for (let i = 0; i < arr.length; i++) {\n    tableArray.push(\n      <LeagueTable\n        Teams={arr[i].table}\n        Key={`Group${arr[i].group}`}\n        Stats={statistics}\n        GamesPlayed={statistics.game_week}\n      />\n    );\n  }\n  return tableArray;\n}\n\nasync function sorted(league) {\n  const sortedByForm = league.sort((a, b) => b.LastXPoints - a.LastXPoints);\n  return sortedByForm;\n}\n\nexport async function renderTable(index, results, id) {\n  let league;\n  //World cup table rendering\n\n  // let mostRecentGame = results.fixtures.pop();\n  let mostRecentGame = results.fixtures.pop();\n\n  let mostRecentGameweek = \"Latest\";\n\n  const gameweeksResults = results.fixtures.filter(\n    (games) => games.game_week === mostRecentGame.game_week\n  );\n\n  // const lastGameweeksResults = results.fixtures.filter(\n  //   (games) => games.game_week === mostRecentGameweek - 1\n  // );\n\n  const leagueTable = tableArray.filter((table) => table.id === id);\n\n  league = leagueTable[0].table;\n\n  let statistics;\n  let leagueStatistics = await fetch(\n    `${process.env.REACT_APP_EXPRESS_SERVER}leagueStats/${id}`\n  );\n  await leagueStatistics.json().then((stats) => {\n    statistics = stats.data;\n  });\n\n  if (league !== undefined) {\n    ReactDOM.render(\n      <LeagueTable\n        Teams={league}\n        Stats={statistics}\n        Key={`League${index}`}\n        GamesPlayed={statistics.game_week}\n        Results={gameweeksResults}\n        mostRecentGameweek={mostRecentGameweek}\n      />,\n      document.getElementById(`leagueName${id}`)\n    );\n  }\n}\n\nasync function createFixture(match, result, mockBool) {\n  let roundedHomeOdds;\n  let roundedAwayOdds;\n  let roundedBTTSOdds;\n  let homeFraction;\n  let awayFraction;\n  let bttsFraction;\n\n  if (selectedOdds === \"Fractional odds\") {\n    if (match.homeOdds !== 0 && match.awayOdds !== 0) {\n      roundedHomeOdds = (Math.round(match.homeOdds * 5) / 5).toFixed(1);\n      roundedAwayOdds = (Math.round(match.awayOdds * 5) / 5).toFixed(1);\n\n      if (roundedHomeOdds < 1.1) {\n        roundedHomeOdds = 1.1;\n      }\n      if (roundedAwayOdds < 1.1) {\n        roundedAwayOdds = 1.1;\n      }\n\n      if (match.homeOdds === 0.1 && match.awayOdds === 0.1) {\n        match.homeOdds = 3;\n        roundedHomeOdds = 3;\n        match.awayOdds = 3;\n        roundedAwayOdds = 3;\n      }\n\n      try {\n        homeFraction = oddslib\n          .from(\"decimal\", roundedHomeOdds)\n          .to(\"fractional\", { precision: 1 });\n        awayFraction = oddslib\n          .from(\"decimal\", roundedAwayOdds)\n          .to(\"fractional\", { precision: 1 });\n      } catch (error) {\n        console.log(error);\n      }\n    } else {\n      homeFraction = \"N/A\";\n      awayFraction = \"N/A\";\n    }\n\n    if (match.bttsOdds !== 0) {\n      roundedBTTSOdds = (Math.round(match.bttsOdds * 5) / 5).toFixed(1);\n\n      if (roundedBTTSOdds < 1.1) {\n        roundedBTTSOdds = 1.1;\n      }\n\n      try {\n        bttsFraction = oddslib\n          .from(\"decimal\", roundedBTTSOdds)\n          .to(\"fractional\", { precision: 1 });\n      } catch (error) {\n        console.log(error);\n      }\n    } else {\n      bttsFraction = \"N/A\";\n    }\n  } else if (selectedOdds === \"Decimal odds\") {\n    if (match.homeOdds !== 0 && match.awayOdds !== 0) {\n      homeFraction = match.homeOdds;\n      awayFraction = match.awayOdds;\n    } else {\n      homeFraction = \"N/A\";\n      awayFraction = \"N/A\";\n    }\n\n    if (match.bttsOdds !== 0) {\n      bttsFraction = match.bttsOdds;\n    } else {\n      bttsFraction = \"N/A\";\n    }\n  }\n\n  match.homeTeamWinsPercentage = match.homeTeamWinPercentage;\n  match.homeTeamLossesPercentage = match.homeTeamLossPercentage;\n  match.homeTeamDrawsPercentage = match.homeTeamDrawPercentage;\n\n  match.awayTeamWinsPercentage = match.awayTeamWinPercentage;\n  match.awayTeamLossesPercentage = match.awayTeamLossPercentage;\n  match.awayTeamDrawsPercentage = match.awayTeamDrawPercentage;\n  match.fractionHome = homeFraction;\n  match.fractionAway = awayFraction;\n\n  match.bttsFraction = bttsFraction;\n\n  match.game = match.homeTeam + \" v \" + match.awayTeam;\n\n  // ReactDOM.render(\n  //   <Fixture\n  //     fixtures={matches}\n  //     result={result}\n  //     mock={mockBool}\n  //     className={\"individualFixture\"}\n  //   />,\n  //   document.getElementById(\"FixtureContainer\")\n  // );\n}\n\nexport function RenderAllFixtures(props) {\n  return (\n    <Fixture\n      fixtures={props.matches}\n      result={props.result}\n      mock={false}\n      className={\"individualFixture\"}\n    />\n  );\n}\n//     document.getElementById(\"FixtureContainer\")\n\nvar myHeaders = new Headers();\nmyHeaders.append(\"Origin\", \"https://gregdorward.github.io\");\n\nlet isFunctionRunning = false;\n\nexport async function generateFixtures(\n  day,\n  date,\n  selectedOdds,\n  footyStatsFormattedDate,\n  current,\n  todaysDate\n) {\n  if (!isFunctionRunning) {\n    isFunctionRunning = true;\n\n    // const randomInt = Math.random() * 10\n\n    // if(randomInt >= 7){\n    //   alert(\"XGTipping is now serving over 2000 users a month,1 relying on donations to cover increasing running costs. If you can afford to do so and like what we do, please, help us stay subscription fee today by tapping to Donation button at the bottom of the page\")\n    // }\n\n    ReactDOM.render(\n      <div>\n        <div className=\"LoadingText\">\n          Loading all league, fixture & form data, please be patient...\n        </div>\n        <ThreeDots height=\"3em\" fill=\"#030061\" />\n      </div>,\n      document.getElementById(\"Loading\")\n    );\n\n    //cleanup if different day is selected\n    ReactDOM.render(\n      <div></div>,\n      document.getElementById(\"GeneratePredictions\")\n    );\n    ReactDOM.render(<div></div>, document.getElementById(\"successMeasure2\"));\n    ReactDOM.render(<div></div>, document.getElementById(\"bestPredictions\"));\n    ReactDOM.render(<div></div>, document.getElementById(\"exoticOfTheDay\"));\n    ReactDOM.render(<div></div>, document.getElementById(\"insights\"));\n    ReactDOM.render(<div></div>, document.getElementById(\"longShots\"));\n    ReactDOM.render(<div></div>, document.getElementById(\"BTTS\"));\n    ReactDOM.render(<div></div>, document.getElementById(\"draws\"));\n\n    const url = `${process.env.REACT_APP_EXPRESS_SERVER}matches/${footyStatsFormattedDate}`;\n    const formUrl = `${process.env.REACT_APP_EXPRESS_SERVER}form/${date}`;\n\n    matches = [];\n    fixtureArray = [];\n\n    league = await fetch(\n      `${process.env.REACT_APP_EXPRESS_SERVER}leagues/${todaysDate}`\n    );\n\n    ReactDOM.render(<div></div>, document.getElementById(\"FixtureContainer\"));\n\n    fixtureResponse = await fetch(url);\n\n    await fixtureResponse.json().then((fixtures) => {\n      fixtureArray = Array.from(fixtures.data);\n    });\n\n    let form;\n    let formArray = [];\n    allForm = [];\n    var isFormStored;\n    var isStoredLocally;\n    var leaguesStored = false;\n    let storedForm = await fetch(formUrl);\n    if (storedForm.status === 201 || storedForm.status === 200) {\n      await storedForm.json().then((form) => {\n        formArray = Array.from(form.allForm);\n        isFormStored = true;\n        isStoredLocally = true;\n        allForm = formArray;\n      });\n    } else {\n      isFormStored = false;\n      isStoredLocally = false;\n    }\n\n    leagueIdArray = [];\n    for (let i = 0; i < orderedLeagues.length; i++) {\n      leagueID = orderedLeagues[i].element.id;\n      leagueIdArray.push(leagueID);\n    }\n\n    var leaguePositions = [];\n    leagueArray = [];\n\n    let allLeagueResults;\n\n    allLeagueResults = await fetch(\n      `${process.env.REACT_APP_EXPRESS_SERVER}results`\n    );\n\n    if (league.status === 200 && allLeagueResults.status === 201) {\n      console.log(\"Not fetching leagues\");\n      await league.json().then((leagues) => {\n        leagueArray = Array.from(leagues.leagueArray);\n      });\n      updateResults(false);\n\n      await allLeagueResults.json().then((allGames) => {\n        allLeagueResultsArrayOfObjects = Array.from(allGames);\n      });\n\n      leaguesStored = true;\n      generateTables(\n        leagueArray,\n        leagueIdArray,\n        allLeagueResultsArrayOfObjects\n      );\n    } else {\n      allLeagueResultsArrayOfObjects = [];\n      console.log(\"Fetching leagues\");\n      for (let i = 0; i < orderedLeagues.length; i++) {\n        league = await fetch(\n          `${process.env.REACT_APP_EXPRESS_SERVER}tables/${orderedLeagues[i].element.id}/${date}`\n        );\n        // eslint-disable-next-line no-loop-func\n        await league.json().then((table) => {\n          leagueArray.push(table);\n        });\n        leaguesStored = false;\n      }\n\n      //set variable for date X amount of days in the past and use that to filter the results\n\n      let startDate = (new Date().getTime() / 1000).toFixed(0);\n      // deduct 3 months\n      let targetDate = startDate - 15778463;\n\n      for (const orderedLeague of orderedLeagues) {\n        let fixtures = await fetch(\n          `${process.env.REACT_APP_EXPRESS_SERVER}leagueFixtures/${orderedLeague.element.id}`\n        );\n\n        let games = await fixtures.json();\n        let gamesFiltered = games.data.filter(\n          (game) => game.status === \"complete\"\n        );\n\n        if (current) {\n          let mostRecentResults = gamesFiltered.filter(\n            (game) => game.date_unix > targetDate\n          );\n          gamesFiltered = mostRecentResults;\n        }\n\n        // let mostRecentResults = gamesFiltered.filter(\n        //   (game) => game.date_unix > targetDate\n        // );\n\n        const shortenedResults = gamesFiltered.map(\n          ({\n            home_name,\n            away_name,\n            homeGoalCount,\n            awayGoalCount,\n            date_unix,\n            team_a_xg,\n            team_b_xg,\n            odds_ft_1,\n            odds_ft_2,\n            team_a_shots,\n            team_b_shots,\n            team_a_corners,\n            team_b_corners,\n            team_a_shotsOnTarget,\n            team_b_shotsOnTarget,\n            team_a_red_cards,\n            team_b_red_cards,\n            team_a_possession,\n            team_b_possession,\n            team_a_dangerous_attacks,\n            team_b_dangerous_attacks,\n            pre_match_teamA_overall_ppg,\n            pre_match_teamB_overall_ppg,\n            game_week,\n          }) => ({\n            home_name,\n            away_name,\n            homeGoalCount,\n            awayGoalCount,\n            date_unix,\n            team_a_xg,\n            team_b_xg,\n            odds_ft_1,\n            odds_ft_2,\n            team_a_shots,\n            team_b_shots,\n            team_a_corners,\n            team_b_corners,\n            team_a_shotsOnTarget,\n            team_b_shotsOnTarget,\n            team_a_red_cards,\n            team_b_red_cards,\n            team_a_possession,\n            team_b_possession,\n            team_a_dangerous_attacks,\n            team_b_dangerous_attacks,\n            pre_match_teamA_overall_ppg,\n            pre_match_teamB_overall_ppg,\n            game_week,\n          })\n        );        \n\n        let leagueObj = {\n          // leagueObject[orderedLeague] = {\n          name: orderedLeague.name,\n          id: orderedLeague.element.id,\n          fixtures: shortenedResults,\n        };\n\n        allLeagueResultsArrayOfObjects.push(leagueObj);\n      }\n      updateResults(true);\n      generateTables(\n        leagueArray,\n        leagueIdArray,\n        allLeagueResultsArrayOfObjects\n      );\n    }\n\n    let teamPositionPrefix;\n\n    async function getPrefix(position) {\n      switch (position) {\n        case 1:\n        case 21:\n        case 31:\n        case 41:\n          teamPositionPrefix = \"st\";\n          break;\n        case 2:\n        case 22:\n        case 32:\n        case 42:\n          teamPositionPrefix = \"nd\";\n          break;\n        case 3:\n        case 23:\n        case 33:\n        case 43:\n          teamPositionPrefix = \"rd\";\n          break;\n        case 4:\n        case 5:\n        case 6:\n        case 7:\n        case 8:\n        case 9:\n        case 10:\n        case 11:\n        case 12:\n        case 13:\n        case 14:\n        case 15:\n        case 16:\n        case 17:\n        case 18:\n        case 19:\n        case 20:\n        case 24:\n        case 25:\n        case 26:\n        case 27:\n        case 28:\n        case 29:\n        case 30:\n        case 34:\n        case 35:\n        case 36:\n        case 37:\n        case 38:\n        case 39:\n        case 40:\n        case 44:\n        case 45:\n        case 46:\n        case 47:\n        case 48:\n          teamPositionPrefix = \"th\";\n          break;\n        default:\n          break;\n      }\n      return teamPositionPrefix;\n    }\n\n    for (let i = 0; i < leagueArray.length; i++) {\n      let leagueInstance;\n      let homeLeague;\n      let awayLeague;\n\n      if (leagueArray[i].data.league_table !== null) {\n        leagueInstance = leagueArray[i].data.league_table;\n        homeLeague = leagueArray[i].data.all_matches_table_home;\n        awayLeague = leagueArray[i].data.all_matches_table_away;\n      } else {\n        leagueInstance = leagueArray[i].data.all_matches_table_overall;\n        homeLeague = leagueArray[i].data.all_matches_table_home;\n        awayLeague = leagueArray[i].data.all_matches_table_away;\n      }\n\n      for (let x = 0; x < leagueInstance.length; x++) {\n        let regularSeason = leagueArray[i].data.specific_tables.find(\n          (season) =>\n            season.round === \"Regular Season\" ||\n            season.round === \"2023\" ||\n            season.round === \"2023/2024\" ||\n            season.round === \"Apertura\" ||\n            season.round === \"1st Phase\"\n          // season.round === \"North\" ||\n          // season.round === \"South\"\n        );\n        let string;\n\n        if (regularSeason !== undefined && regularSeason.table) {\n          string = regularSeason.table[x];\n          homeLeague = leagueArray[i].data.all_matches_table_home;\n          awayLeague = leagueArray[i].data.all_matches_table_away;\n        } else {\n          string = leagueArray[i].data.all_matches_table_overall[x];\n          homeLeague = leagueArray[i].data.all_matches_table_home;\n          awayLeague = leagueArray[i].data.all_matches_table_away;\n        }\n\n        let stringHome = homeLeague[x];\n        let stringAway = awayLeague[x];\n\n        leaguePositions.push({\n          name: string.cleanName,\n          position: x + 1,\n          rawPosition: x + 1,\n          homeFormName: stringHome ? stringHome.cleanName : string.cleanName,\n          awayFormName: stringAway ? stringAway.cleanName : string.cleanName,\n          homeSeasonWinPercentage: stringHome\n            ? stringHome.seasonWins\n            : string.seasonWins,\n          awaySeasonWinPercentage: stringAway\n            ? stringAway.seasonWins\n            : string.seasonWins,\n          homeSeasonLossPercentage: stringHome\n            ? stringHome.seasonLosses_home\n            : string.seasonLosses_home,\n          awaySeasonLossPercentage: stringAway\n            ? stringAway.seasonLosses_away\n            : string.seasonLosses_away,\n          homeSeasonDrawPercentage: stringHome\n            ? stringHome.seasonDraws\n            : string.seasonDraws,\n          awaySeasonDrawPercentage: stringAway\n            ? stringAway.seasonDraws\n            : string.seasonDraws,\n          homeSeasonMatchesPlayed: stringHome\n            ? stringHome.matchesPlayed\n            : string.matchesPlayed,\n          awaySeasonMatchesPlayed: stringAway\n            ? stringAway.matchesPlayed\n            : string.matchesPlayed,\n          ppg: string.points / string.matchesPlayed,\n          wdl: string.wdl_record ? string.wdl_record : \"\",\n          played: string.matchesPlayed,\n          seasonGoals: string.seasonGoals,\n          seasonConceded: string.seasonConceded,\n        });\n      }\n    }\n\n    let previousLeagueName;\n    const val = \"prediction\";\n    const exists =\n      matches.filter(function (o) {\n        return o.hasOwnProperty(val);\n      }).length > 0;\n\n    for (let i = 0; i < orderedLeagues.length; i++) {\n      leagueID = orderedLeagues[i].element.id;\n      leagueGames = fixtureArray.filter(\n        (game) => game.competition_id === orderedLeagues[i].element.id\n      );\n\n      for (const fixture of leagueGames) {\n        const unixTimestamp = fixture.date_unix;\n        const milliseconds = unixTimestamp * 1000;\n        const dateObject = new Date(milliseconds);\n\n        let match = {};\n        if (orderedLeagues[i].name !== previousLeagueName) {\n          match.leagueName = orderedLeagues[i].name;\n          match.leagueIndex = i;\n          match.leagueID = leagueID;\n        } else {\n          match.leagueName = null;\n          match.leagueIndex = i;\n          match.leagueID = leagueID;\n        }\n        match.id = fixture.id;\n        match.competition_id = fixture.competition_id;\n        match.date = fixture.date_unix;\n        match.time = dateObject.toLocaleString(\"en-GB\", {\n          hour: \"2-digit\",\n          minute: \"2-digit\",\n        });\n        match.homeTeam = fixture.home_name;\n        match.awayTeam = fixture.away_name;\n        match.homeOdds = +(fixture.odds_ft_1).toFixed(2);\n        match.awayOdds = +(fixture.odds_ft_2).toFixed(2);\n        match.drawOdds = +(fixture.odds_ft_x).toFixed(2);\n        match.homeDoubleChance = fixture.odds_doublechance_1x;\n        match.awayDoubleChance = fixture.odds_doublechance_x2;\n        match.bttsOdds = fixture.odds_btts_yes;\n        match.homeId = fixture.homeID;\n        match.awayId = fixture.awayID;\n        match.form = [];\n        match.homeTeamInfo = [];\n        match.awayTeamInfo = [];\n        match.btts = false;\n\n        previousLeagueName = orderedLeagues[i].name;\n\n        let homeTeaminLeague;\n        let awayTeaminLeague;\n        let teamPositionHome;\n        let teamPositionHomeTable;\n        let teamPositionAwayTable;\n        let homeTeamWinPercentageHome;\n        let awayTeamWinPercentageAway;\n        let homeTeamLossPercentageHome;\n        let awayTeamLossPercentageAway;\n        let homeTeamDrawPercentageHome;\n        let awayTeamDrawPercentageAway;\n        let teamPositionAway;\n        let homePrefix;\n        let homePrefixHomeTable;\n        let awayPrefix;\n        let awayPrefixAwayTable;\n        let homeSeasonPPG;\n        let awaySeasonPPG;\n\n        try {\n          homeTeaminLeague = leaguePositions.find(\n            (team) => team.name === match.homeTeam\n          );\n\n          let homeTeaminHomeLeague = leaguePositions.find(\n            (team) => team.homeFormName === match.homeTeam\n          );\n          teamPositionHome = homeTeaminLeague.position;\n          teamPositionHomeTable = homeTeaminHomeLeague.position;\n\n          WDLinLeagueHome = Array.from(homeTeaminLeague.wdl.toUpperCase());\n          HomeAverageGoals =\n            homeTeaminLeague.seasonGoals / homeTeaminLeague.played;\n          HomeAverageConceded =\n            homeTeaminLeague.seasonConceded / homeTeaminLeague.played;\n\n          homeTeamWinPercentageHome =\n            (homeTeaminHomeLeague.homeSeasonWinPercentage /\n              homeTeaminHomeLeague.homeSeasonMatchesPlayed) *\n            100;\n\n          homeTeamLossPercentageHome =\n            (homeTeaminHomeLeague.homeSeasonLossPercentage /\n              homeTeaminHomeLeague.homeSeasonMatchesPlayed) *\n            100;\n\n          homeTeamDrawPercentageHome =\n            (homeTeaminHomeLeague.homeSeasonDrawPercentage /\n              homeTeaminHomeLeague.homeSeasonMatchesPlayed) *\n            100;\n\n          homePrefix = await getPrefix(teamPositionHome);\n          homePrefixHomeTable = await getPrefix(teamPositionHomeTable);\n\n          homeSeasonPPG = homeTeaminLeague.ppg.toFixed(2);\n        } catch (error) {\n          console.log(error);\n          teamPositionHome = \"N/A\";\n          homePrefix = \"\";\n          homePrefixHomeTable = \"\";\n          homeSeasonPPG = \"N/A\";\n          homeTeaminLeague = {\n            rawPosition: \"N/A\",\n          };\n          WDLinLeagueHome = \"N/A\";\n        }\n\n        try {\n          awayTeaminLeague = leaguePositions.find(\n            (team) => team.name === match.awayTeam\n          );\n\n          let awayTeaminAwayLeague = leaguePositions.find(\n            (team) => team.awayFormName === match.awayTeam\n          );\n\n          teamPositionAway = awayTeaminLeague.position;\n          teamPositionAwayTable = awayTeaminAwayLeague.position;\n\n          WDLinLeagueAway = Array.from(awayTeaminLeague.wdl.toUpperCase());\n          AwayAverageGoals =\n            awayTeaminLeague.seasonGoals / awayTeaminLeague.played;\n          AwayAverageConceded =\n            awayTeaminLeague.seasonConceded / awayTeaminLeague.played;\n\n          awayTeamWinPercentageAway =\n            (awayTeaminAwayLeague.awaySeasonWinPercentage /\n              awayTeaminAwayLeague.awaySeasonMatchesPlayed) *\n            100;\n\n          awayTeamLossPercentageAway =\n            (awayTeaminAwayLeague.awaySeasonLossPercentage /\n              awayTeaminAwayLeague.awaySeasonMatchesPlayed) *\n            100;\n\n          awayTeamDrawPercentageAway =\n            (awayTeaminAwayLeague.awaySeasonDrawPercentage /\n              awayTeaminAwayLeague.awaySeasonMatchesPlayed) *\n            100;\n\n          awayPrefix = await getPrefix(teamPositionAway);\n          awayPrefixAwayTable = await getPrefix(teamPositionAwayTable);\n\n          awaySeasonPPG = awayTeaminLeague.ppg.toFixed(2);\n        } catch (error) {\n          console.log(error);\n          teamPositionAway = \"N/A\";\n          awayPrefix = \"\";\n          awaySeasonPPG = \"N/A\";\n          awayTeaminLeague = {\n            rawPosition: \"N/A\",\n          };\n          WDLinLeagueAway = \"N/A\";\n        }\n\n        if (!isFormStored) {\n          form = await getForm(match);\n\n          let homeFormString5 =\n            form[0].data[0].stats.additional_info.formRun_overall.toUpperCase();\n          let awayFormString5 =\n            form[1].data[0].stats.additional_info.formRun_overall.toUpperCase();\n          let homeFormString6 =\n            form[0].data[1].stats.additional_info.formRun_overall.toUpperCase();\n          let awayFormString6 =\n            form[1].data[1].stats.additional_info.formRun_overall.toUpperCase();\n          let homeFormString10 =\n            form[0].data[2].stats.additional_info.formRun_overall.toUpperCase();\n          let awayFormString10 =\n            form[1].data[2].stats.additional_info.formRun_overall.toUpperCase();\n\n          let homeFormRun =\n            form[0].data[2].stats.additional_info.formRun_home.toUpperCase();\n          let awayFormRun =\n            form[1].data[2].stats.additional_info.formRun_away.toUpperCase();\n\n          if (WDLinLeagueHome.length >= 10) {\n            lastThreeFormHome = WDLinLeagueHome.slice(-3);\n            lastFiveFormHome = WDLinLeagueHome.slice(-5);\n            lastSixFormHome = WDLinLeagueHome.slice(-6);\n            lastTenFormHome = WDLinLeagueHome.slice(-10);\n            lastThreeFormAway = WDLinLeagueAway.slice(-3);\n            lastFiveFormAway = WDLinLeagueAway.slice(-5);\n            lastSixFormAway = WDLinLeagueAway.slice(-6);\n            lastTenFormAway = WDLinLeagueAway.slice(-10);\n            leagueOrAll = \"League\";\n            homeAverageGoals = HomeAverageGoals;\n            homeAverageConceded = HomeAverageConceded;\n            awayAverageGoals = AwayAverageGoals;\n            awayAverageConceded = AwayAverageConceded;\n          } else if (WDLinLeagueHome.length >= 6) {\n            lastThreeFormHome = WDLinLeagueHome.slice(-3);\n            lastFiveFormHome = WDLinLeagueHome.slice(-5);\n            lastSixFormHome = WDLinLeagueHome.slice(-6);\n            lastTenFormHome = Array.from(homeFormString10);\n            lastThreeFormAway = WDLinLeagueAway.slice(-3);\n            lastFiveFormAway = WDLinLeagueAway.slice(-5);\n            lastSixFormAway = WDLinLeagueAway.slice(-6);\n            lastTenFormAway = Array.from(awayFormString10);\n            leagueOrAll = \"League\";\n\n            homeAverageGoals = HomeAverageGoals;\n            homeAverageConceded = HomeAverageConceded;\n            awayAverageGoals = AwayAverageGoals;\n            awayAverageConceded = AwayAverageConceded;\n          } else if (WDLinLeagueHome.length >= 5) {\n            lastThreeFormHome = WDLinLeagueHome.slice(-3);\n            lastFiveFormHome = WDLinLeagueHome.slice(-5);\n            lastSixFormHome = Array.from(homeFormString6);\n            lastTenFormHome = Array.from(homeFormString10);\n            lastThreeFormAway = WDLinLeagueAway.slice(-3);\n            lastFiveFormAway = WDLinLeagueAway.slice(-5);\n            lastSixFormAway = Array.from(awayFormString6);\n            lastTenFormAway = Array.from(awayFormString10);\n            leagueOrAll = \"League\";\n\n            homeAverageGoals = HomeAverageGoals;\n            homeAverageConceded = HomeAverageConceded;\n            awayAverageGoals = AwayAverageGoals;\n            awayAverageConceded = AwayAverageConceded;\n          } else {\n            lastThreeFormHome = [\n              homeFormString5[2],\n              homeFormString5[3],\n              homeFormString5[4],\n            ];\n            lastFiveFormHome = Array.from(homeFormString5);\n            lastSixFormHome = Array.from(homeFormString6);\n            lastTenFormHome = Array.from(homeFormString10);\n            lastThreeFormAway = [\n              awayFormString5[2],\n              awayFormString5[3],\n              awayFormString5[4],\n            ];\n\n            lastFiveFormAway = Array.from(awayFormString5);\n            lastSixFormAway = Array.from(awayFormString6);\n            lastTenFormAway = Array.from(awayFormString10);\n\n            leagueOrAll = \"All\";\n\n            homeAverageGoals = undefined;\n            homeAverageConceded = undefined;\n            awayAverageGoals = undefined;\n            awayAverageConceded = undefined;\n          }\n\n          formRunHome = Array.from(homeFormRun);\n          formRunAway = Array.from(awayFormRun);\n\n          if (\n            teamPositionHome === 0 ||\n            form[0].data[0].season_format !== \"Domestic League\"\n          ) {\n            teamPositionHome = \"N/A\";\n            teamPositionHomeTable = \"N/A\";\n            homePrefix = \"\";\n            homePrefixHomeTable = \"\";\n          }\n\n          if (\n            teamPositionAway === 0 ||\n            form[0].data[0].season_format !== \"Domestic League\"\n          ) {\n            teamPositionAway = \"N/A\";\n            teamPositionAwayTable = \"N/A\";\n            awayPrefix = \"\";\n            awayPrefixAwayTable = \"\";\n          }\n\n          allForm.push({\n            id: match.id,\n            teamIDHome: match.homeId,\n            teamIDAway: match.awayId,\n            leagueId: leagueID,\n            home: {\n              teamName: match.homeTeam,\n              0: {\n                XGOverall: parseFloat(form[0].data[0].stats.xg_for_avg_overall),\n                XG: parseFloat(form[0].data[0].stats.xg_for_avg_home),\n                ScoredOverall: parseFloat(\n                  form[0].data[0].stats.seasonScoredNum_overall\n                ),\n                ScoredAverage: parseFloat(\n                  form[0].data[0].stats.seasonScoredAVG_home\n                ),\n                PlayedHome: parseFloat(\n                  form[0].data[0].stats.seasonMatchesPlayed_home\n                ),\n                PlayedAway: parseFloat(\n                  form[0].data[0].stats.seasonMatchesPlayed_away\n                ),\n                ConcededOverall: parseFloat(\n                  form[0].data[0].stats.seasonConcededNum_overall\n                ),\n                ConcededAverage: parseFloat(\n                  form[0].data[0].stats.seasonConcededAVG_home\n                ),\n                XGAgainstAvgOverall: parseFloat(\n                  form[0].data[0].stats.xg_against_avg_overall\n                ),\n                XGAgainstAverage: parseFloat(\n                  form[0].data[0].stats.xg_against_avg_home\n                ),\n                CleanSheetPercentage: parseFloat(\n                  form[0].data[0].stats.seasonCSPercentage_overall\n                ),\n                AveragePossessionOverall: parseFloat(\n                  form[0].data[0].stats.possessionAVG_overall\n                ),\n                AveragePossession: parseFloat(\n                  form[0].data[0].stats.possessionAVG_home\n                ),\n                AverageShotsOnTargetOverall: parseFloat(\n                  form[0].data[0].stats.shotsOnTargetAVG_overall\n                ),\n                AverageShotsOnTarget: parseFloat(\n                  form[0].data[0].stats.shotsOnTargetAVG_home\n                ),\n                AverageDangerousAttacksOverall: parseFloat(\n                  form[0].data[0].stats.dangerous_attacks_avg_overall\n                ),\n                PPG: parseFloat(form[0].data[0].stats.seasonPPG_overall),\n                AttacksHome: parseFloat(form[0].data[0].stats.attacks_avg_home),\n                AttacksAway: parseFloat(form[0].data[0].stats.attacks_avg_away),\n                AverageDangerousAttacks: parseFloat(\n                  form[0].data[0].stats.dangerous_attacks_avg_home\n                ),\n                homeAttackAdvantage: parseFloat(\n                  form[0].data[0].stats.homeAttackAdvantage\n                ),\n                homeDefenceAdvantage: parseFloat(\n                  form[0].data[0].stats.homeDefenceAdvantage\n                ),\n                BTTSPercentage: parseInt(\n                  form[0].data[0].stats.seasonBTTSPercentage_home\n                ),\n                LeagueOrAll: leagueOrAll,\n                LeaguePosition: `${teamPositionHome}${homePrefix}`,\n                homeRawPosition: homeTeaminLeague.rawPosition\n                  ? homeTeaminLeague.rawPosition\n                  : 0,\n                homeTeamHomePositionRaw: teamPositionHomeTable,\n                LeagueAverageGoals: homeAverageGoals,\n                LeagueAverageConceded: homeAverageConceded,\n              },\n              1: {\n                XGOverall: parseFloat(form[0].data[1].stats.xg_for_avg_overall),\n                XG: parseFloat(form[0].data[1].stats.xg_for_avg_home),\n                ScoredOverall: parseFloat(\n                  form[0].data[1].stats.seasonScoredNum_overall\n                ),\n                ScoredAverage: parseFloat(\n                  form[0].data[1].stats.seasonScoredAVG_home\n                ),\n                PlayedHome: parseFloat(\n                  form[0].data[1].stats.seasonMatchesPlayed_home\n                ),\n                PlayedAway: parseFloat(\n                  form[0].data[1].stats.seasonMatchesPlayed_away\n                ),\n                ConcededOverall: parseFloat(\n                  form[0].data[1].stats.seasonConcededNum_overall\n                ),\n                ConcededAverage: parseFloat(\n                  form[0].data[1].stats.seasonConcededAVG_home\n                ),\n                XGAgainstAvgOverall: parseFloat(\n                  form[0].data[1].stats.xg_against_avg_overall\n                ),\n                XGAgainstAverage: parseFloat(\n                  form[0].data[1].stats.xg_against_avg_home\n                ),\n                CleanSheetPercentage: parseFloat(\n                  form[0].data[1].stats.seasonCSPercentage_overall\n                ),\n                AveragePossessionOverall: parseFloat(\n                  form[0].data[1].stats.possessionAVG_overall\n                ),\n                AveragePossession: parseFloat(\n                  form[0].data[1].stats.possessionAVG_home\n                ),\n                AverageShotsOnTargetOverall: parseFloat(\n                  form[0].data[1].stats.shotsOnTargetAVG_overall\n                ),\n                AverageShotsOnTarget: parseFloat(\n                  form[0].data[1].stats.shotsOnTargetAVG_home\n                ),\n                AverageDangerousAttacksOverall: parseFloat(\n                  form[0].data[1].stats.dangerous_attacks_avg_overall\n                ),\n                PPG: parseFloat(form[0].data[1].stats.seasonPPG_overall),\n                AttacksHome: parseFloat(form[0].data[1].stats.attacks_avg_home),\n                AttacksAway: parseFloat(form[0].data[1].stats.attacks_avg_away),\n                AverageDangerousAttacks: parseFloat(\n                  form[0].data[1].stats.dangerous_attacks_avg_home\n                ),\n                homeAttackAdvantage: parseFloat(\n                  form[0].data[1].stats.homeAttackAdvantage\n                ),\n                homeDefenceAdvantage: parseFloat(\n                  form[0].data[1].stats.homeDefenceAdvantage\n                ),\n                BTTSPercentage: parseInt(\n                  form[0].data[1].stats.seasonBTTSPercentage_home\n                ),\n                LeagueOrAll: leagueOrAll,\n                LeaguePosition: `${teamPositionHome}${homePrefix}`,\n                homeRawPosition: homeTeaminLeague.rawPosition\n                  ? homeTeaminLeague.rawPosition\n                  : 0,\n                homeTeamHomePositionRaw: teamPositionHomeTable,\n                LeagueAverageGoals: homeAverageGoals,\n                LeagueAverageConceded: homeAverageConceded,\n              },\n              2: {\n                XGOverall: parseFloat(form[0].data[2].stats.xg_for_avg_overall),\n                XG: parseFloat(form[0].data[2].stats.xg_for_avg_home),\n                ScoredOverall: parseFloat(\n                  form[0].data[2].stats.seasonScoredNum_overall\n                ),\n                ScoredAverage: parseFloat(\n                  form[0].data[2].stats.seasonScoredAVG_home\n                ),\n                PlayedHome: parseFloat(\n                  form[0].data[2].stats.seasonMatchesPlayed_home\n                ),\n                PlayedAway: parseFloat(\n                  form[0].data[2].stats.seasonMatchesPlayed_away\n                ),\n                ConcededOverall: parseFloat(\n                  form[0].data[2].stats.seasonConcededNum_overall\n                ),\n                ConcededAverage: parseFloat(\n                  form[0].data[2].stats.seasonConcededAVG_home\n                ),\n                XGAgainstAvgOverall: parseFloat(\n                  form[0].data[2].stats.xg_against_avg_overall\n                ),\n                XGAgainstAverage: parseFloat(\n                  form[0].data[2].stats.xg_against_avg_home\n                ),\n                CleanSheetPercentage: parseFloat(\n                  form[0].data[2].stats.seasonCSPercentage_overall\n                ),\n                AveragePossessionOverall: parseFloat(\n                  form[0].data[2].stats.possessionAVG_overall\n                ),\n                AveragePossession: parseFloat(\n                  form[0].data[2].stats.possessionAVG_home\n                ),\n                AverageShotsOnTargetOverall: parseFloat(\n                  form[0].data[2].stats.shotsOnTargetAVG_overall\n                ),\n                AverageShotsOnTarget: parseFloat(\n                  form[0].data[2].stats.shotsOnTargetAVG_home\n                ),\n                AverageShots: parseFloat(\n                  form[0].data[2].stats.shotsAVG_overall\n                ),\n                AverageShotsHomeOrAway: parseFloat(\n                  form[0].data[2].stats.shotsAVG_home\n                ),\n                AverageDangerousAttacksOverall: parseFloat(\n                  form[0].data[2].stats.dangerous_attacks_avg_overall\n                ),\n                PPG: parseFloat(form[0].data[2].stats.seasonPPG_overall),\n                AttacksHome: parseFloat(form[0].data[2].stats.attacks_avg_home),\n                AttacksAway: parseFloat(form[0].data[2].stats.attacks_avg_away),\n                AverageDangerousAttacks: parseFloat(\n                  form[0].data[2].stats.dangerous_attacks_avg_home\n                ),\n                homeAttackAdvantage: parseFloat(\n                  form[0].data[2].stats.homeAttackAdvantage\n                ),\n                homeDefenceAdvantage: parseFloat(\n                  form[0].data[2].stats.homeDefenceAdvantage\n                ),\n                BTTSPercentage: parseInt(\n                  form[0].data[2].stats.seasonBTTSPercentage_home\n                ),\n                lastThreeForm: lastThreeFormHome,\n                LastFiveForm: lastFiveFormHome,\n                LastSixForm: lastSixFormHome,\n                LastTenForm: lastTenFormHome,\n                LeagueOrAll: leagueOrAll,\n                LeaguePosition: `${teamPositionHome}${homePrefix}`,\n                homeRawPosition: homeTeaminLeague.rawPosition\n                  ? homeTeaminLeague.rawPosition\n                  : 0,\n                homeTeamHomePositionRaw: teamPositionHomeTable,\n                SeasonPPG: homeSeasonPPG,\n                WinPercentage: homeTeamWinPercentageHome,\n                LossPercentage: homeTeamLossPercentageHome,\n                DrawPercentage: homeTeamDrawPercentageHome,\n                formRun: formRunHome,\n                goalDifference:\n                  form[0].data[2].stats.seasonGoalDifference_overall,\n                goalDifferenceHomeOrAway:\n                  form[0].data[2].stats.seasonGoalDifference_home,\n                BttsPercentage:\n                  form[0].data[2].stats.seasonBTTSPercentage_overall,\n                BttsPercentageHomeOrAway:\n                  form[0].data[2].stats.seasonBTTSPercentage_home,\n                CardsTotal: form[0].data[2].stats.cardsTotal_overall,\n                CornersAverage: form[0].data[2].stats.cornersAVG_overall,\n                ScoredBothHalvesPercentage:\n                  form[0].data[2].stats.scoredBothHalvesPercentage_overall,\n                LastMatch: await convertTimestamp(\n                  form[0].data[0].last_updated_match_timestamp\n                ),\n                WDLRecord: WDLinLeagueHome,\n                LeagueAverageGoals: homeAverageGoals,\n                LeagueAverageConceded: homeAverageConceded,\n              },\n            },\n            away: {\n              teamName: match.awayTeam,\n              0: {\n                XGOverall: parseFloat(form[1].data[0].stats.xg_for_avg_overall),\n                XG: parseFloat(form[1].data[0].stats.xg_for_avg_away),\n                ScoredOverall: parseFloat(\n                  form[1].data[0].stats.seasonScoredNum_overall\n                ),\n                ScoredAverage: parseFloat(\n                  form[1].data[0].stats.seasonScoredAVG_away\n                ),\n                PlayedHome: parseFloat(\n                  form[1].data[0].stats.seasonMatchesPlayed_home\n                ),\n                PlayedAway: parseFloat(\n                  form[1].data[0].stats.seasonMatchesPlayed_away\n                ),\n                ConcededOverall: parseFloat(\n                  form[1].data[0].stats.seasonConcededNum_overall\n                ),\n                ConcededAverage: parseFloat(\n                  form[1].data[0].stats.seasonConcededAVG_away\n                ),\n                XGAgainstAvgOverall: parseFloat(\n                  form[1].data[0].stats.xg_against_avg_overall\n                ),\n                XGAgainstAverage: parseFloat(\n                  form[1].data[0].stats.xg_against_avg_away\n                ),\n                CleanSheetPercentage: parseFloat(\n                  form[1].data[0].stats.seasonCSPercentage_overall\n                ),\n                AveragePossessionOverall: parseFloat(\n                  form[1].data[0].stats.possessionAVG_overall\n                ),\n                AveragePossession: parseFloat(\n                  form[1].data[0].stats.possessionAVG_away\n                ),\n                AverageShotsOnTargetOverall: parseFloat(\n                  form[1].data[0].stats.shotsOnTargetAVG_overall\n                ),\n                AverageShotsOnTarget: parseFloat(\n                  form[1].data[0].stats.shotsOnTargetAVG_away\n                ),\n                AverageDangerousAttacksOverall: parseFloat(\n                  form[1].data[0].stats.dangerous_attacks_avg_overall\n                ),\n                PPG: parseFloat(form[1].data[0].stats.seasonPPG_overall),\n                AttacksAverage: parseFloat(\n                  form[1].data[0].stats.attacks_avg_away\n                ),\n                AverageDangerousAttacks: parseFloat(\n                  form[1].data[0].stats.dangerous_attacks_avg_away\n                ),\n                BTTSPercentage: parseInt(\n                  form[1].data[0].stats.seasonBTTSPercentage_away\n                ),\n                LeagueOrAll: leagueOrAll,\n                LeaguePosition: `${teamPositionAway}${awayPrefix}`,\n                awayRawPosition: awayTeaminLeague.rawPosition\n                  ? awayTeaminLeague.rawPosition\n                  : 0,\n                awayTeamAwayPositionRaw: teamPositionAwayTable,\n                LeagueAverageGoals: awayAverageGoals,\n                LeagueAverageConceded: awayAverageConceded,\n              },\n              1: {\n                XGOverall: parseFloat(form[1].data[1].stats.xg_for_avg_overall),\n                XG: parseFloat(form[1].data[1].stats.xg_for_avg_away),\n                ScoredOverall: parseFloat(\n                  form[1].data[1].stats.seasonScoredNum_overall\n                ),\n                ScoredAverage: parseFloat(\n                  form[1].data[1].stats.seasonScoredAVG_away\n                ),\n                PlayedHome: parseFloat(\n                  form[1].data[1].stats.seasonMatchesPlayed_home\n                ),\n                PlayedAway: parseFloat(\n                  form[1].data[1].stats.seasonMatchesPlayed_away\n                ),\n                ConcededOverall: parseFloat(\n                  form[1].data[1].stats.seasonConcededNum_overall\n                ),\n                ConcededAverage: parseFloat(\n                  form[1].data[1].stats.seasonConcededAVG_away\n                ),\n                XGAgainstAvgOverall: parseFloat(\n                  form[1].data[1].stats.xg_against_avg_overall\n                ),\n                XGAgainstAverage: parseFloat(\n                  form[1].data[1].stats.xg_against_avg_away\n                ),\n                CleanSheetPercentage: parseFloat(\n                  form[1].data[1].stats.seasonCSPercentage_overall\n                ),\n                AveragePossessionOverall: parseFloat(\n                  form[1].data[1].stats.possessionAVG_overall\n                ),\n                AveragePossession: parseFloat(\n                  form[1].data[1].stats.possessionAVG_away\n                ),\n                AverageShotsOnTargetOverall: parseFloat(\n                  form[1].data[1].stats.shotsOnTargetAVG_overall\n                ),\n                AverageShotsOnTarget: parseFloat(\n                  form[1].data[1].stats.shotsOnTargetAVG_away\n                ),\n                AverageDangerousAttacksOverall: parseFloat(\n                  form[1].data[1].stats.dangerous_attacks_avg_overall\n                ),\n                PPG: parseFloat(form[1].data[1].stats.seasonPPG_overall),\n                AttacksAverage: parseFloat(\n                  form[1].data[1].stats.attacks_avg_away\n                ),\n                AverageDangerousAttacks: parseFloat(\n                  form[1].data[1].stats.dangerous_attacks_avg_away\n                ),\n                BTTSPercentage: parseInt(\n                  form[1].data[1].stats.seasonBTTSPercentage_away\n                ),\n                LeagueOrAll: leagueOrAll,\n                LeaguePosition: `${teamPositionAway}${awayPrefix}`,\n                awayRawPosition: awayTeaminLeague.rawPosition\n                  ? awayTeaminLeague.rawPosition\n                  : 0,\n                awayTeamAwayPositionRaw: teamPositionAwayTable,\n                LeagueAverageGoals: awayAverageGoals,\n                LeagueAverageConceded: awayAverageConceded,\n              },\n              2: {\n                XGOverall: parseFloat(form[1].data[2].stats.xg_for_avg_overall),\n                XG: parseFloat(form[1].data[2].stats.xg_for_avg_away),\n                ScoredOverall: parseFloat(\n                  form[1].data[2].stats.seasonScoredNum_overall\n                ),\n                ScoredAverage: parseFloat(\n                  form[1].data[2].stats.seasonScoredAVG_away\n                ),\n                PlayedHome: parseFloat(\n                  form[1].data[2].stats.seasonMatchesPlayed_home\n                ),\n                PlayedAway: parseFloat(\n                  form[1].data[2].stats.seasonMatchesPlayed_away\n                ),\n                ConcededOverall: parseFloat(\n                  form[1].data[2].stats.seasonConcededNum_overall\n                ),\n                ConcededAverage: parseFloat(\n                  form[1].data[2].stats.seasonConcededAVG_away\n                ),\n                XGAgainstAvgOverall: parseFloat(\n                  form[1].data[2].stats.xg_against_avg_overall\n                ),\n                XGAgainstAverage: parseFloat(\n                  form[1].data[2].stats.xg_against_avg_away\n                ),\n                CleanSheetPercentage: parseFloat(\n                  form[1].data[2].stats.seasonCSPercentage_overall\n                ),\n                AveragePossessionOverall: parseFloat(\n                  form[1].data[2].stats.possessionAVG_overall\n                ),\n                AveragePossession: parseFloat(\n                  form[1].data[2].stats.possessionAVG_away\n                ),\n                AverageShotsOnTargetOverall: parseFloat(\n                  form[1].data[2].stats.shotsOnTargetAVG_overall\n                ),\n                AverageShotsOnTarget: parseFloat(\n                  form[1].data[2].stats.shotsOnTargetAVG_away\n                ),\n                AverageShots: parseFloat(\n                  form[1].data[2].stats.shotsAVG_overall\n                ),\n                AverageShotsHomeOrAway: parseFloat(\n                  form[1].data[2].stats.shotsAVG_away\n                ),\n                AverageDangerousAttacksOverall: parseFloat(\n                  form[1].data[2].stats.dangerous_attacks_avg_overall\n                ),\n                PPG: parseFloat(form[1].data[2].stats.seasonPPG_overall),\n                AttacksAverage: parseFloat(\n                  form[1].data[2].stats.attacks_avg_away\n                ),\n                AverageDangerousAttacks: parseFloat(\n                  form[1].data[2].stats.dangerous_attacks_avg_away\n                ),\n                BTTSPercentage: parseInt(\n                  form[1].data[2].stats.seasonBTTSPercentage_away\n                ),\n                lastThreeForm: lastThreeFormAway,\n                LastFiveForm: lastFiveFormAway,\n                LastSixForm: lastSixFormAway,\n                LastTenForm: lastTenFormAway,\n                LeagueOrAll: leagueOrAll,\n                LeaguePosition: `${teamPositionAway}${awayPrefix}`,\n                awayRawPosition: awayTeaminLeague.rawPosition\n                  ? awayTeaminLeague.rawPosition\n                  : 0,\n                awayTeamAwayPositionRaw: teamPositionAwayTable,\n                SeasonPPG: awaySeasonPPG,\n                WinPercentage: awayTeamWinPercentageAway,\n                LossPercentage: awayTeamLossPercentageAway,\n                DrawPercentage: awayTeamDrawPercentageAway,\n                formRun: formRunAway,\n                goalDifference:\n                  form[1].data[2].stats.seasonGoalDifference_overall,\n                goalDifferenceHomeOrAway:\n                  form[1].data[2].stats.seasonGoalDifference_away,\n                BttsPercentage:\n                  form[1].data[2].stats.seasonBTTSPercentage_overall,\n                BttsPercentageHomeOrAway:\n                  form[1].data[2].stats.seasonBTTSPercentage_away,\n                CardsTotal: form[1].data[2].stats.cardsTotal_overall,\n                CornersAverage: form[1].data[2].stats.cornersAVG_overall,\n                ScoredBothHalvesPercentage:\n                  form[1].data[2].stats.scoredBothHalvesPercentage_overall,\n                LastMatch: await convertTimestamp(\n                  form[1].data[0].last_updated_match_timestamp\n                ),\n                WDLRecord: WDLinLeagueAway,\n                LeagueAverageGoals: awayAverageGoals,\n                LeagueAverageConceded: awayAverageConceded,\n              },\n            },\n          });\n        }\n\n        match.homeBadge = fixture.home_image;\n        match.awayBadge = fixture.away_image;\n\n        match.homePpg = fixture.home_ppg.toFixed(2);\n        match.awayPpg = fixture.away_ppg.toFixed(2);\n\n        match.lastFiveFormHome = lastFiveFormHome;\n        match.lastFiveFormAway = lastFiveFormAway;\n\n        match.homeRawPosition = homeTeaminLeague.rawPosition;\n        match.awayRawPosition = awayTeaminLeague.rawPosition;\n\n        match.homeTeamHomePosition = `${teamPositionHomeTable}${homePrefixHomeTable}`;\n        match.awayTeamAwayPosition = `${teamPositionAwayTable}${awayPrefixAwayTable}`;\n\n        match.homeTeamHomePositionRaw = teamPositionHomeTable;\n        match.awayTeamAwayPositionRaw = teamPositionAwayTable;\n\n        match.homeTeamWinPercentage = homeTeamWinPercentageHome;\n        match.awayTeamWinPercentage = awayTeamWinPercentageAway;\n\n        match.homeTeamLossPercentage = homeTeamLossPercentageHome;\n        match.awayTeamLossPercentage = awayTeamLossPercentageAway;\n\n        match.homeTeamDrawPercentage = homeTeamDrawPercentageHome;\n        match.awayTeamDrawPercentage = awayTeamDrawPercentageAway;\n        match.status = fixture.status;\n        match.over25Odds = fixture.odds_ft_over25;\n        match.btts_potential = fixture.btts_potential;\n        match.game = match.homeTeam + \" v \" + match.awayTeam;\n        match.stadium = fixture.stadium_name;\n        match.homeGoals = fixture.homeGoalCount;\n        match.awayGoals = fixture.awayGoalCount;\n\n        match.expectedGoalsHomeToDate = fixture.team_a_xg_prematch;\n        match.expectedGoalsAwayToDate = fixture.team_b_xg_prematch;\n        match.game_week = fixture.game_week;\n\n        if (match.status !== \"canceled\" || match.status !== \"suspended\") {\n          matches.push(match);\n          await createFixture(match, false);\n        }\n      }\n\n      if (matches.length > 0) {\n        ReactDOM.render(\n          <Fragment>\n            <Button\n              text={\"Get Predictions & League stats\"}\n              onClickEvent={() => getScorePrediction(day)}\n              className={\"GeneratePredictions\"}\n            />\n            <div className=\"Version\">Prediction engine v3.0.14 (19/01/26)</div>\n          </Fragment>,\n          document.getElementById(\"GeneratePredictions\")\n        );\n      }\n\n      // }\n    }\n\n    ReactDOM.render(\n      <div>\n        <div className=\"LoadingText\"></div>\n      </div>,\n      document.getElementById(\"Loading\")\n    );\n\n    async function updateResults(bool) {\n      console.log(\"updating results\");\n      if (allLeagueResultsArrayOfObjects.length > 0 && bool === true) {\n        await fetch(`${process.env.REACT_APP_EXPRESS_SERVER}results`, {\n          method: \"DELETE\",\n          headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n          },\n        }).then(async () => {\n          await fetch(`${process.env.REACT_APP_EXPRESS_SERVER}results`, {\n            method: \"POST\",\n            headers: {\n              Accept: \"application/json\",\n              \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(allLeagueResultsArrayOfObjects),\n          });\n        });\n      }\n      else {\n        console.log(\"EMPTY RESULTS\");\n      }\n    }\n\n    if (!isStoredLocally) {\n      await fetch(`${process.env.REACT_APP_EXPRESS_SERVER}allForm/${date}`, {\n        method: \"POST\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ allForm }),\n      });\n      await updateResults(true);\n    }\n    if (!leaguesStored) {\n      await fetch(\n        `${process.env.REACT_APP_EXPRESS_SERVER}leagues/${todaysDate}`,\n        {\n          method: \"POST\",\n          headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({ leagueArray }),\n        }\n      );\n    }\n    // const allFixtures = await RenderAllFixtures(matches, false)\n    ReactDOM.render(\n      <RenderAllFixtures matches={matches} result={false} bool={false} />,\n      document.getElementById(\"FixtureContainer\")\n    );\n    // ReactDOM.render(<RenderAllFixtures matches={matches} bool={false}/>),document.getElementById(\"FixtureContainer\")\n    setTimeout(() => {\n      isFunctionRunning = false;\n    }, 3000);\n  }\n}\n","/Users/gregdorward/Development/football-predictions/src/components/createStatsDiv.js",["202"],"import React, { Fragment } from \"react\";\n\nfunction Stats(props) {\n  let shouldOpen = props.clicked\n  function styleForm(formIndicator) {\n    let className;\n    if (formIndicator === \"W\") {\n      className = \"win\";\n    } else if (formIndicator === \"D\") {\n      className = \"draw\";\n    } else if (formIndicator === \"L\") {\n      className = \"loss\";\n    }\n    return className;\n  }\n\n  function styleBTTS(BTTSBoolean) {\n    let className;\n    if (BTTSBoolean === \"\\u2714\") {\n      className = \"BTTSTrue\";\n    } else if (BTTSBoolean === \"\\u2718\") {\n      className = \"BTTSFalse\";\n    }\n    return className;\n  }\n\n  if (props.formRun) {\n    return (\n      <Fragment>\n        <ul className={props.className} style={props.style}>\n          <li className=\"FormSummaryHome\">{props.FormTextString}</li>\n          <li className=\"FavouriteSummaryHome\">{props.FavouriteRecord}</li>\n          <li className=\"FormHeader\">\n            League results (most recent on right)\n          </li>\n          <li key={`last5League`} className=\"last5League\">\n          <span className={styleForm(props.Results[5])}>\n              {props.Results[5]}\n            </span>\n            <span className={styleForm(props.Results[4])}>\n              {props.Results[4]}\n            </span>\n            <span className={styleForm(props.Results[3])}>\n              {props.Results[3]}\n            </span>\n            <span className={styleForm(props.Results[2])}>\n              {props.Results[2]}\n            </span>\n            <span className={styleForm(props.Results[1])}>\n              {props.Results[1]}\n            </span>\n            <span className={styleForm(props.Results[0])}>\n              {props.Results[0]}\n            </span>\n          </li>\n          <li className=\"FormHeader\">\n            {props.homeOrAway} form (most recent on right)\n          </li>\n          <li key={`last5${props.homeOrAwayResults}`} className=\"FormHomeOrAway\">\n          <span className={styleForm(props.homeOrAwayResults[5])}>\n              {props.homeOrAwayResults[5]}\n            </span>\n            <span className={styleForm(props.homeOrAwayResults[4])}>\n              {props.homeOrAwayResults[4]}\n            </span>\n            <span className={styleForm(props.homeOrAwayResults[3])}>\n              {props.homeOrAwayResults[3]}\n            </span>\n            <span className={styleForm(props.homeOrAwayResults[2])}>\n              {props.homeOrAwayResults[2]}\n            </span>\n            <span className={styleForm(props.homeOrAwayResults[1])}>\n              {props.homeOrAwayResults[1]}\n            </span>\n            <span className={styleForm(props.homeOrAwayResults[0])}>\n              {props.homeOrAwayResults[0]}\n            </span>\n          </li>\n          <li\n            key=\"BTTSArrayHomeOrAway\"\n            className=\"BTTSArrayHomeOrAway\"\n            data-cy={props.name + \"BTTSArrayHomeOrAway\"}\n          >\n            <div className=\"BTTSResults\">BTTS</div>\n            <span className={styleBTTS(props.BTTSArray[5])}>{props.BTTSArray[5]}</span>\n            <span className={styleBTTS(props.BTTSArray[4])}>{props.BTTSArray[4]}</span>\n            <span className={styleBTTS(props.BTTSArray[3])}>{props.BTTSArray[3]}</span>\n            <span className={styleBTTS(props.BTTSArray[2])}>{props.BTTSArray[2]}</span>\n            <span className={styleBTTS(props.BTTSArray[1])}>{props.BTTSArray[1]}</span>\n            <span className={styleBTTS(props.BTTSArray[0])}>{props.BTTSArray[0]}</span>\n          </li>\n          <li\n            key=\"TeamScored\"\n            className=\"TeamScored\"\n            data-cy={props.name + \"teamScored\"}\n          >\n            {`Avg goals scored - ${props.goals}`}\n          </li>\n          <li\n            key=\"TeamConceeded\"\n            className=\"TeamConceeded\"\n            data-cy={props.name + \"teamConceded\"}\n          >\n            {`Avg goals conceeded - ${props.conceeded}`}\n          </li>\n          <li\n            key=\"TeamPossession\"\n            className=\"TeamPossession\"\n            data-cy={props.name + \"teamPossession\"}\n          >\n            {`Avg possession - ${props.possession}%`}\n          </li>\n          <li key=\"TeamXG\" className=\"TeamXG\" data-cy={props.name + \"teamXG\"}>\n            {`Avg XG - ${props.XG}`}\n          </li>\n          <li\n            key=\"TeamXGConceded\"\n            className=\"TeamXGConceded\"\n            data-cy={props.name + \"teamXGConceded\"}\n          >\n            {`Avg XG conceded - ${props.XGConceded}`}\n          </li>\n          <li\n            key=\"goalDifference\"\n            className=\"goalDifference\"\n            data-cy={props.name + \"goalDifference\"}\n          >\n            {`Goal difference : `}\n            <span>{props.goalDifference}</span>\n          </li>\n          <li\n            key=\"goalDifferenceHorA\"\n            className=\"goalDifferenceHorA\"\n            data-cy={props.name + \"goalDifference\"}\n          >\n            {`Goal difference ${props.homeOrAway} : ${props.goalDifferenceHomeOrAway}`}\n          </li>\n          <li\n            key=\"AverageSOT\"\n            className=\"AverageSOT\"\n            data-cy={props.name + \"averageSOT\"}\n          >\n            {`Avg shots on target - ${props.sot}`}\n          </li>\n          <li\n            key=\"DangerousAttacks\"\n            className=\"DangerousAttacks\"\n            data-cy={props.name + \"dangerousAttacks\"}\n          >\n            {`Avg dangerous attacks - ${props.dangerousAttacks}`}\n          </li>\n          <li\n            key=\"LeaguePosition\"\n            className=\"LeaguePosition\"\n            data-cy={props.name + \"leaguePosition\"}\n          >\n            {`League position - ${props.leaguePosition}`}\n          </li>\n\n          <li\n            key=\"LeaguePositionHomeOrAway\"\n            className=\"LeaguePositionHomeOrAway\"\n            data-cy={props.name + \"LeaguePositionHomeOrAway\"}\n          >\n            {`Position (${props.homeOrAway} only) - ${props.homeOrAwayLeaguePosition}`}\n          </li>\n          <li\n            key=\"WinPercentage\"\n            className=\"WinPercentage\"\n            data-cy={props.name + \"WinPercentage\"}\n          >\n            {`${props.homeOrAway} wins - ${props.winPercentage.toFixed(1)}%`}\n          </li>\n          <li\n            key=\"DrawPercentage\"\n            className=\"DrawPercentage\"\n            data-cy={props.name + \"DrawPercentage\"}\n          >\n            {`${props.homeOrAway} draws - ${props.drawPercentage.toFixed(1)}%`}\n          </li>\n          <li\n            key=\"LossPercentage\"\n            className=\"LossPercentage\"\n            data-cy={props.name + \"LossPercentage\"}\n          >\n            {`${props.homeOrAway} losses - ${props.lossPercentage.toFixed(1)}%`}\n          </li>\n          <li key=\"PPG\" className=\"PPG\" data-cy={props.name + \"PPG\"}>\n            {`Season PPG - ${props.ppg}`}\n          </li>\n          <li\n            key=\"FormTrend10a\"\n            className=\"FormTrend\"\n            data-cy={props.name + \"FormTrend10\"}\n          >\n            {`Last 10 PPG: ${props.formTrend[0]}`}\n          </li>\n          <li\n            key=\"FormTrend10b\"\n            className=\"FormTrend\"\n            data-cy={props.name + \"FormTrend10\"}\n          >\n            {`Last 6 PPG: ${props.formTrend[1]}`}\n          </li>\n          <li\n            key=\"FormTrend10c\"\n            className=\"FormTrend\"\n            data-cy={props.name + \"FormTrend10\"}\n          >\n            {`Last 5 PPG: ${props.formTrend[2]}.`}\n          </li>\n          <li\n            key=\"CardsTotal\"\n            className=\"CardsTotal\"\n            data-cy={props.name + \"CardsTotal\"}\n          >\n            {`Cards total: ${props.CardsTotal}`}\n          </li>\n          <li\n            key=\"CornersAverage\"\n            className=\"CornersAverage\"\n            data-cy={props.name + \"CornersAverage\"}\n          >\n            {`Corners average: ${props.CornersAverage}`}\n          </li>\n        </ul>\n        <div id=\"h2hStats\"></div>\n      </Fragment>\n    );\n  } else {\n    return (\n      <Fragment>\n        <ul className={props.className} style={props.style}>\n          <li className=\"FormSummaryHome\">{props.FormTextString}</li>\n          <li className=\"FavouriteSummaryAway\">{props.FavouriteRecord}</li>\n          <li\n            key=\"TeamScored\"\n            className=\"TeamScored\"\n            data-cy={props.name + \"teamScored\"}\n          >\n            {`Avg goals scored - ${props.goals}`}\n          </li>\n          <li\n            key=\"TeamConceeded\"\n            className=\"TeamConceeded\"\n            data-cy={props.name + \"teamConceded\"}\n          >\n            {`Avg goals conceeded - ${props.conceeded}`}\n          </li>\n          <li\n            key=\"TeamPossession\"\n            className=\"TeamPossession\"\n            data-cy={props.name + \"teamPossession\"}\n          >\n            {`Avg possession - ${props.possession}%`}\n          </li>\n          <li key=\"TeamXG\" className=\"TeamXG\" data-cy={props.name + \"teamXG\"}>\n            {`Avg XG - ${props.XG}`}\n          </li>\n          <li\n            key=\"TeamXGConceded\"\n            className=\"TeamXGConceded\"\n            data-cy={props.name + \"teamXGConceded\"}\n          >\n            {`Avg XG conceded - ${props.XGConceded}`}\n          </li>\n          <li\n            key=\"AverageSOT\"\n            className=\"AverageSOT\"\n            data-cy={props.name + \"averageSOT\"}\n          >\n            {`Avg shots on target - ${props.sot}`}\n          </li>\n          <li\n            key=\"DangerousAttacks\"\n            className=\"DangerousAttacks\"\n            data-cy={props.name + \"dangerousAttacks\"}\n          >\n            {`Avg dangerous attacks - ${props.dangerousAttacks}`}\n          </li>\n          <li\n            key=\"LeaguePosition\"\n            className=\"LeaguePosition\"\n            data-cy={props.name + \"leaguePosition\"}\n          >\n            {`League position - ${props.leaguePosition}`}\n          </li>\n\n          <li\n            key=\"LeaguePositionHomeOrAway\"\n            className=\"LeaguePositionHomeOrAway\"\n            data-cy={props.name + \"LeaguePositionHomeOrAway\"}\n          >\n            {`Position (${props.homeOrAway} only) - ${props.homeOrAwayLeaguePosition}`}\n          </li>\n          <li\n            key=\"WinPercentage\"\n            className=\"WinPercentage\"\n            data-cy={props.name + \"WinPercentage\"}\n          >\n            {`${props.homeOrAway} wins - ${props.winPercentage.toFixed(1)}%`}\n          </li>\n          <li\n            key=\"DrawPercentage\"\n            className=\"DrawPercentage\"\n            data-cy={props.name + \"DrawPercentage\"}\n          >\n            {`${props.homeOrAway} draws - ${props.drawPercentage.toFixed(1)}%`}\n          </li>\n          <li\n            key=\"LossPercentage\"\n            className=\"LossPercentage\"\n            data-cy={props.name + \"LossPercentage\"}\n          >\n            {`${props.homeOrAway} losses - ${props.lossPercentage.toFixed(1)}%`}\n          </li>\n          <li key=\"PPG\" className=\"PPG\" data-cy={props.name + \"PPG\"}>\n            {`Season PPG - ${props.ppg}`}\n          </li>\n          <li\n            key=\"FormTrend10a\"\n            className=\"FormTrend\"\n            data-cy={props.name + \"FormTrend10\"}\n          >\n            {`Last 10 PPG: ${props.formTrend[0]}`}\n          </li>\n          <li\n            key=\"FormTrend10b\"\n            className=\"FormTrend\"\n            data-cy={props.name + \"FormTrend10\"}\n          >\n            {`Last 6 PPG: ${props.formTrend[1]}`}\n          </li>\n          <li\n            key=\"FormTrend10c\"\n            className=\"FormTrend\"\n            data-cy={props.name + \"FormTrend10\"}\n          >\n            {`Last 5 PPG: ${props.formTrend[2]}.`}\n          </li>\n          <li\n            key=\"CardsTotal\"\n            className=\"CardsTotal\"\n            data-cy={props.name + \"CardsTotal\"}\n          >\n            {`Cards total: ${props.CardsTotal}`}\n          </li>\n          <li\n            key=\"CornersAverage\"\n            className=\"CornersAverage\"\n            data-cy={props.name + \"CornersAverage\"}\n          >\n            {`Corners average: ${props.CornersAverage}`}\n          </li>\n        </ul>\n        <div id=\"h2hStats\"></div>\n      </Fragment>\n    );\n  }\n}\n\nexport default Stats;\n","/Users/gregdorward/Development/football-predictions/src/logic/getForm.js",[],"/Users/gregdorward/Development/football-predictions/src/components/Button.js",[],"/Users/gregdorward/Development/football-predictions/src/logic/getScorePredictions.js",["203","204","205","206","207","208","209","210","211","212","213","214","215","216"],"/Users/gregdorward/Development/football-predictions/src/components/CollapsableElement.js",["217"],"import React, { Component } from \"react\";\nimport Collapsible from \"react-collapsible\";\n\nconst Collapsable = (props) => {\n  return (\n    <Collapsible transitionTime={300} trigger={<button className={props.classNameButton}>{props.buttonText}</button>} className={props.className? props.className: \"Collapsable\"}>\n      <div className={props.classNameFlex? props.classNameFlex: \"\"}>\n      <span className={props.classNameTwo? props.classNameTwo: props.buttonText} style={props.style} key={`123${props.buttonText}`}>{props.element}</span>\n      <span className={props.classNameThree? props.classNameTwo: props.buttonText} key={`456${props.buttonText}`}>{props.elementTwo}</span>\n      </div>\n    </Collapsible>\n  );\n};\n\n\nexport default Collapsable;","/Users/gregdorward/Development/football-predictions/src/components/TextSection.js",[],["218","219"],"/Users/gregdorward/Development/football-predictions/src/logic/getStats.js",["220","221","222","223","224","225","226","227","228","229","230","231","232","233"],"import ReactDOM from \"react-dom\";\nimport { Button } from \"../components/Button\";\nimport Stats from \"../components/createStatsDiv\";\nimport Div from \"../components/Div\";\nimport { allForm, allLeagueResultsArrayOfObjects } from \"../logic/getFixtures\";\nimport { getTeamStats } from \"../logic/getTeamStats\";\nimport { getPointsFromLastX } from \"../logic/getScorePredictions\";\nimport { CreateBadge } from \"../components/createBadge\";\nimport { Fragment } from \"react\";\nimport GenerateFormSummary from \"../logic/compareFormTrend\";\nimport { Chart, RadarChart, BarChart } from \"../components/Chart\";\nimport Collapsable from \"../components/CollapsableElement\";\nimport { clicked } from \"../logic/getScorePredictions\";\n\nexport async function calculateAttackingStrength(stats) {\n  // Define weights for each metric (you can adjust these based on your preference)\n  const weights = {\n    // averagePossession: 0.15,\n    \"Average Dangerous Attacks\": 0.15,\n    \"Average Shots\": 0.1,\n    \"Average Shots On Target\": 0.15,\n    \"Average Expected Goals\": 0.15,\n    \"Recent XG\": 0.15,\n    \"Average Goals\": 0.3,\n  };\n\n  // Define the ranges for normalization\n  const ranges = {\n    // averagePossession: { min: 25, max: 75 },\n    \"Average Dangerous Attacks\": { min: 30, max: 75 }, // Adjust the max value as needed\n    \"Average Shots\": { min: 5, max: 17 }, // Adjust the max value as needed\n    \"Average Shots On Target\": { min: 2, max: 9 }, // Adjust the max value as needed\n    \"Average Expected Goals\": { min: 0, max: 3 }, // Adjust the max value as needed\n    \"Recent XG\": { min: 0, max: 3 }, // Adjust the max value as needed\n    \"Average Goals\": { min: 0, max: 3 }, // Adjust the max value as needed\n  };\n\n  // Normalize each metric value and calculate the weighted sum\n  let weightedSum = 0;\n  for (const metric in stats) {\n    if (\n      stats.hasOwnProperty(metric) &&\n      weights.hasOwnProperty(metric) &&\n      ranges.hasOwnProperty(metric)\n    ) {\n      const normalizedValue =\n        (stats[metric] - ranges[metric].min) /\n        (ranges[metric].max - ranges[metric].min);\n      weightedSum += normalizedValue * weights[metric];\n    } else {\n      console.log(metric);\n    }\n  }\n\n  return parseFloat(weightedSum.toFixed(2));\n}\n\nexport async function calculateDefensiveStrength(stats) {\n  // Define weights for each metric (you can adjust these based on your preference)\n  const weights = {\n    \"Clean Sheet Percentage\": 0.3,\n    \"Average XG Against\": 0.2,\n    \"Recent XG Against\": 0.2,\n    \"Average Goals Against\": 0.3,\n  };\n\n  // Define the ranges for normalization\n  const ranges = {\n    \"Clean Sheet Percentage\": { min: 0, max: 100 },\n    \"Average XG Against\": { min: 0, max: 3 }, // Adjust the max value as needed\n    \"Recent XG Against\": { min: 0, max: 3 },\n    \"Average Goals Against\": { min: 0, max: 3 }, // Adjust the max value as needed\n  };\n\n  // Normalize each metric value and calculate the weighted sum\n  let weightedSum = 0;\n  for (const metric in stats) {\n    if (\n      stats.hasOwnProperty(metric) &&\n      weights.hasOwnProperty(metric) &&\n      ranges.hasOwnProperty(metric)\n    ) {\n      const normalizedValue =\n        1 -\n        (stats[metric] - ranges[metric].min) /\n          (ranges[metric].max - ranges[metric].min);\n      weightedSum += normalizedValue * weights[metric];\n    }\n  }\n\n  return parseFloat(weightedSum.toFixed(2));\n}\n\nexport async function calculateMetricStrength(metricName, metricValue) {\n  // Define weights for each metric (you can adjust these based on your preference)\n  const weights = {\n    averagePossession: 1,\n    xgFor: 1,\n    xgAgainst: 1,\n    directnessOverall: 1,\n    accuracyOverall: 1,\n  };\n\n  // Define the ranges for normalization\n  const ranges = {\n    averagePossession: { min: 20, max: 80 },\n    xgFor: { min: 0.1, max: 3 },\n    xgAgainst: { min: 0.1, max: 3 },\n    directnessOverall: { min: 0.5, max: 4 },\n    accuracyOverall: { min: 2, max: 10 },\n  };\n\n  // Ensure the metric is valid and exists in the weights and ranges objects\n  if (\n    !weights.hasOwnProperty(metricName) ||\n    !ranges.hasOwnProperty(metricName)\n  ) {\n    throw new Error(\"Invalid metric name or missing normalization range.\");\n  }\n\n  // Normalize the metric value\n  const normalizedValue =\n    (metricValue - ranges[metricName].min) /\n    (ranges[metricName].max - ranges[metricName].min);\n\n  // Calculate the weighted score\n  const weightedScore = normalizedValue * weights[metricName];\n\n  return parseFloat(weightedScore.toFixed(2));\n}\n\n// export async function getDefenceStrength(goalsAgainst) {\n//   let strength;\n//   switch (true) {\n//     case goalsAgainst >= 2.8:\n//       strength = 1;\n//       break;\n//     case goalsAgainst >= 2.5 && goalsAgainst < 2.8:\n//       strength = 2;\n//       break;\n//     case goalsAgainst >= 2.2 && goalsAgainst < 2.5:\n//       strength = 3;\n//       break;\n//     case goalsAgainst >= 1.9 && goalsAgainst < 2.2:\n//       strength = 4;\n//       break;\n//     case goalsAgainst >= 1.6 && goalsAgainst < 1.9:\n//       strength = 5;\n//       break;\n//     case goalsAgainst >= 1.3 && goalsAgainst < 1.6:\n//       strength = 6;\n//       break;\n//     case goalsAgainst >= 1 && goalsAgainst < 1.3:\n//       strength = 7;\n//       break;\n//     case goalsAgainst >= 0.7 && goalsAgainst < 1:\n//       strength = 8;\n//       break;\n//     case goalsAgainst >= 0.4 && goalsAgainst < 0.7:\n//       strength = 9;\n//       break;\n//     case goalsAgainst < 0.4:\n//       strength = 10;\n//       break;\n//     default:\n//       break;\n//   }\n//   return strength;\n// }\n\n// export async function getPossessionStrength(possession) {\n//   let strength;\n//   switch (true) {\n//     case possession >= 68:\n//       strength = 10;\n//       break;\n//     case possession >= 64 && possession < 68:\n//       strength = 9;\n//       break;\n//     case possession >= 60 && possession < 64:\n//       strength = 8;\n//       break;\n//     case possession >= 56 && possession < 60:\n//       strength = 7;\n//       break;\n//     case possession >= 52 && possession < 56:\n//       strength = 6;\n//       break;\n//     case possession >= 48 && possession < 52:\n//       strength = 5;\n//       break;\n//     case possession >= 44 && possession < 48:\n//       strength = 4;\n//       break;\n//     case possession >= 40 && possession < 44:\n//       strength = 3;\n//       break;\n//     case possession >= 35 && possession < 40:\n//       strength = 2;\n//       break;\n//     case possession < 35:\n//       strength = 1;\n//       break;\n//     default:\n//       break;\n//   }\n//   return strength;\n// }\n\n// export async function getShotsStrength(Shots) {\n//   let strength;\n//   switch (true) {\n//     case Shots >= 15:\n//       strength = 10;\n//       break;\n//     case Shots >= 14.25 && Shots < 15:\n//       strength = 9;\n//       break;\n//     case Shots >= 13.5 && Shots < 14.25:\n//       strength = 8;\n//       break;\n//     case Shots >= 12.75 && Shots < 13.5:\n//       strength = 7;\n//       break;\n//     case Shots >= 12 && Shots < 12.75:\n//       strength = 6;\n//       break;\n//     case Shots >= 11.25 && Shots < 12:\n//       strength = 5;\n//       break;\n//     case Shots >= 10.5 && Shots < 11.25:\n//       strength = 4;\n//       break;\n//     case Shots >= 9.75 && Shots < 10.5:\n//       strength = 3;\n//       break;\n//     case Shots >= 9 && Shots < 9.75:\n//       strength = 2;\n//       break;\n//     case Shots < 9:\n//       strength = 1;\n//       break;\n//     default:\n//       break;\n//   }\n//   return strength;\n// }\n\n// export async function getShotsStrengthHorA(Shots) {\n//   let strength;\n//   switch (true) {\n//     case Shots >= 19.5:\n//       strength = 10;\n//       break;\n//     case Shots >= 18 && Shots < 19.5:\n//       strength = 9;\n//       break;\n//     case Shots >= 17 && Shots < 18:\n//       strength = 8;\n//       break;\n//     case Shots >= 15.5 && Shots < 17:\n//       strength = 7;\n//       break;\n//     case Shots >= 14 && Shots < 15.5:\n//       strength = 6;\n//       break;\n//     case Shots >= 12.5 && Shots < 14:\n//       strength = 5;\n//       break;\n//     case Shots >= 11 && Shots < 12.5:\n//       strength = 4;\n//       break;\n//     case Shots >= 9.5 && Shots < 11:\n//       strength = 3;\n//       break;\n//     case Shots >= 8 && Shots < 9.5:\n//       strength = 2;\n//       break;\n//     case Shots < 8:\n//       strength = 1;\n//       break;\n//     default:\n//       break;\n//   }\n//   return strength;\n// }\n\n// export async function getXGForStrength(XG) {\n//   let strength;\n//   switch (true) {\n//     case XG >= 2.9:\n//       strength = 10;\n//       break;\n//     case XG >= 2.6 && XG < 2.9:\n//       strength = 9;\n//       break;\n//     case XG >= 2.3 && XG < 2.6:\n//       strength = 8;\n//       break;\n//     case XG >= 2 && XG < 2.3:\n//       strength = 7;\n//       break;\n//     case XG >= 1.7 && XG < 2:\n//       strength = 6;\n//       break;\n//     case XG >= 1.4 && XG < 1.7:\n//       strength = 5;\n//       break;\n//     case XG >= 1.1 && XG < 1.4:\n//       strength = 4;\n//       break;\n//     case XG >= 0.8 && XG < 1.1:\n//       strength = 3;\n//       break;\n//     case XG >= 0.5 && XG < 0.8:\n//       strength = 2;\n//       break;\n//     case XG < 0.5:\n//       strength = 1;\n//       break;\n//     default:\n//       break;\n//   }\n//   return strength;\n// }\n\n// export async function getXGAgainstStrength(XGAgainst) {\n//   let strength;\n//   switch (true) {\n//     case XGAgainst >= 2.9:\n//       strength = 1;\n//       break;\n//     case XGAgainst >= 2.6 && XGAgainst < 2.9:\n//       strength = 2;\n//       break;\n//     case XGAgainst >= 2.3 && XGAgainst < 2.6:\n//       strength = 3;\n//       break;\n//     case XGAgainst >= 2 && XGAgainst < 2.3:\n//       strength = 4;\n//       break;\n//     case XGAgainst >= 1.7 && XGAgainst < 2:\n//       strength = 5;\n//       break;\n//     case XGAgainst >= 1.4 && XGAgainst < 1.7:\n//       strength = 6;\n//       break;\n//     case XGAgainst >= 1.1 && XGAgainst < 1.4:\n//       strength = 7;\n//       break;\n//     case XGAgainst >= 0.8 && XGAgainst < 1.1:\n//       strength = 8;\n//       break;\n//     case XGAgainst >= 0.5 && XGAgainst < 0.8:\n//       strength = 9;\n//       break;\n//     case XGAgainst < 0.5:\n//       strength = 10;\n//       break;\n//     default:\n//       break;\n//   }\n//   return strength;\n// }\n\n// export async function getXGDifferentialStrength(XGDiff) {\n//   let strength;\n//   switch (true) {\n//     case XGDiff >= 1.5:\n//       strength = 10;\n//       break;\n//     case XGDiff >= 1 && XGDiff < 1.5:\n//       strength = 9;\n//       break;\n//     case XGDiff >= 0.5 && XGDiff < 1:\n//       strength = 8;\n//       break;\n//     case XGDiff >= 0.25 && XGDiff < 0.5:\n//       strength = 7;\n//       break;\n//     case XGDiff > 0 && XGDiff < 0.25:\n//       strength = 6;\n//       break;\n//     case XGDiff <= 0 && XGDiff > -0.25:\n//       strength = 5;\n//       break;\n//     case XGDiff <= -0.25 && XGDiff > -0.5:\n//       strength = 4;\n//       break;\n//     case XGDiff <= -0.5 && XGDiff > -1:\n//       strength = 3;\n//       break;\n//     case XGDiff <= -1 && XGDiff > -1.5:\n//       strength = 2;\n//       break;\n//     case XGDiff <= -1.5:\n//       strength = 1;\n//       break;\n//     default:\n//       console.log(\"default clause triggered\");\n//       break;\n//   }\n//   return strength;\n// }\n\nexport async function getXGtoActualDifferentialStrength(XGDiff) {\n  let strength;\n  switch (true) {\n    case XGDiff >= 1.5:\n      strength = 10;\n      break;\n    case XGDiff >= 1 && XGDiff < 1.5:\n      strength = 9;\n      break;\n    case XGDiff >= 0.5 && XGDiff < 1:\n      strength = 8;\n      break;\n    case XGDiff >= 0.25 && XGDiff < 0.5:\n      strength = 7;\n      break;\n    case XGDiff > 0 && XGDiff < 0.25:\n      strength = 6;\n      break;\n    case XGDiff <= 0 && XGDiff > -0.25:\n      strength = 5;\n      break;\n    case XGDiff <= -0.25 && XGDiff > -0.5:\n      strength = 4;\n      break;\n    case XGDiff <= -0.5 && XGDiff > -1:\n      strength = 3;\n      break;\n    case XGDiff <= -1 && XGDiff > -1.5:\n      strength = 2;\n      break;\n    case XGDiff <= -1.5:\n      strength = 1;\n      break;\n    default:\n      console.log(\"default clause triggered\");\n      break;\n  }\n  return strength;\n}\n\nasync function diff(a, b) {\n  return parseFloat(a - b).toFixed(2);\n}\n\nlet rollingGoalDiffTotalHome = [];\nlet rollingGoalDiffTotalAway = [];\n\nexport async function createStatsDiv(game, displayBool) {\n  console.log(displayBool);\n  if (game.status !== \"void\") {\n    // takes the displayBool boolean from the fixture onClick and sets the styling of the stats div from there\n    function styling(testBool) {\n      let bool = testBool;\n      if (bool === true && clicked === true) {\n        // set stats element to display flex\n        return { display: \"block\" };\n      } else {\n        // set stats element to display none\n        return { display: \"none\" };\n      }\n    }\n    let style = styling(displayBool);\n\n    if (clicked === false) {\n      alert(\"Tap Get Predictions to fetch all game stats first\");\n    } else {\n      let index = 2;\n      let divider = 10;\n\n      let gameStats = allForm.find((match) => match.id === game.id);\n      const gameArrayHome = [];\n      const gameArrayAway = [];\n      const gameArrayHomeTeamHomeGames = [];\n      const gameArrayAwayTeamAwayGames = [];\n      let goalDiffArrayHome;\n      let goalDiffArrayAway;\n      let goalDiffHomeMovingAv = [];\n      let goalDiffAwayMovingAv = [];\n      let latestHomeGoalDiff;\n      let latestAwayGoalDiff;\n\n      var getEMA = (a, r) =>\n        a.reduce(\n          (p, n, i) =>\n            i\n              ? p.concat(\n                  (2 * n) / (r + 1) + (p[p.length - 1] * (r - 1)) / (r + 1)\n                )\n              : p,\n          [a[0]]\n        );\n\n      if (displayBool === true) {\n        let fixtures = await fetch(\n          `${process.env.REACT_APP_EXPRESS_SERVER}leagueFixtures/${gameStats.leagueId}`\n        );\n\n        await fixtures.json().then((matches) => {\n          const resultHome = matches.data.filter(\n            (game) =>\n              (game.homeID === gameStats.teamIDHome ||\n                game.awayID === gameStats.teamIDHome) &&\n              game.status === \"complete\"\n          );\n\n          const resultHomeOnly = matches.data.filter(\n            (game) =>\n              game.homeID === gameStats.teamIDHome && game.status === \"complete\"\n          );\n\n          resultHomeOnly.sort((a, b) => b.date_unix - a.date_unix);\n\n          for (let i = 0; i < resultHome.length; i++) {\n            let unixTimestamp = resultHome[i].date_unix;\n            let milliseconds = unixTimestamp * 1000;\n            let dateObject = new Date(milliseconds).toLocaleString(\"en-GB\", {\n              timeZone: \"UTC\",\n            });\n\n            let won;\n            let goalsScored;\n            let goalsConceeded;\n\n            if (resultHome[i].winningTeam === gameStats.teamIDHome) {\n              won = \"W\";\n              if (resultHome[i].homeGoalCount > resultHome[i].awayGoalCount) {\n                goalsScored = resultHome[i].homeGoalCount;\n                goalsConceeded = resultHome[i].awayGoalCount;\n              } else {\n                goalsScored = resultHome[i].awayGoalCount;\n                goalsConceeded = resultHome[i].homeGoalCount;\n              }\n            } else if (resultHome[i].winningTeam === -1) {\n              won = \"D\";\n              goalsScored = resultHome[i].awayGoalCount;\n              goalsConceeded = resultHome[i].awayGoalCount;\n            } else {\n              won = \"L\";\n              if (resultHome[i].homeGoalCount > resultHome[i].awayGoalCount) {\n                goalsScored = resultHome[i].awayGoalCount;\n                goalsConceeded = resultHome[i].homeGoalCount;\n              } else {\n                goalsScored = resultHome[i].homeGoalCount;\n                goalsConceeded = resultHome[i].awayGoalCount;\n              }\n            }\n\n            gameArrayHome.push({\n              id: resultHome[i].id,\n              date: dateObject,\n              homeTeam: resultHome[i].home_name,\n              homeGoals: resultHome[i].homeGoalCount,\n              homeXG: resultHome[i].team_a_xg,\n              homeOdds: resultHome[i].odds_ft_1,\n              awayTeam: resultHome[i].away_name,\n              awayGoals: resultHome[i].awayGoalCount,\n              awayXG: resultHome[i].team_b_xg,\n              awayOdds: resultHome[i].odds_ft_2,\n              won: won,\n              homeShots: resultHome[i].team_a_shots,\n              awayShots: resultHome[i].team_b_shots,\n              homeSot: resultHome[i].team_a_shotsOnTarget,\n              awaySot: resultHome[i].team_b_shotsOnTarget,\n              homeRed: resultHome[i].team_a_red_cards,\n              awayRed: resultHome[i].team_b_red_cards,\n              homePossession: resultHome[i].team_a_possession,\n              awayPossession: resultHome[i].team_b_possession,\n              homeDangerousAttacks: resultHome[i].team_a_dangerous_attacks,\n              awayDangerousAttacks: resultHome[i].team_b_dangerous_attacks,\n              homePPG: resultHome[i].pre_match_teamA_overall_ppg,\n              awayPPG: resultHome[i].pre_match_teamB_overall_ppg,\n              unixTimestamp: resultHome[i].date_unix,\n              goalsFor: goalsScored,\n              goalsAgainst: goalsConceeded,\n              btts: resultHome[i].btts === true ? \"\\u2714\" : \"\\u2718\",\n            });\n          }\n\n          for (let i = 0; i < resultHomeOnly.length; i++) {\n            let wonHomeOrAwayOnly;\n\n            if (resultHomeOnly[i].winningTeam === gameStats.teamIDHome) {\n              wonHomeOrAwayOnly = \"W\";\n              gameArrayHomeTeamHomeGames.push(wonHomeOrAwayOnly);\n            } else if (resultHomeOnly[i].winningTeam === -1) {\n              wonHomeOrAwayOnly = \"D\";\n              gameArrayHomeTeamHomeGames.push(wonHomeOrAwayOnly);\n            } else {\n              wonHomeOrAwayOnly = \"L\";\n              gameArrayHomeTeamHomeGames.push(wonHomeOrAwayOnly);\n            }\n          }\n\n          goalDiffArrayHome = gameArrayHome.map(\n            (a) => a.goalsFor - a.goalsAgainst\n          );\n\n          let r = 5;\n\n          goalDiffHomeMovingAv = getEMA(\n            goalDiffArrayHome,\n            goalDiffArrayHome.length < 5 ? goalDiffArrayHome.length : r\n          );\n\n          const cumulativeSumHome = (\n            (sum) => (value) =>\n              (sum += value)\n          )(0);\n\n          gameArrayHome.sort((a, b) => b.unixTimestamp - a.unixTimestamp);\n\n          rollingGoalDiffTotalHome = goalDiffArrayHome.map(cumulativeSumHome);\n\n          const resultAway = matches.data.filter(\n            (game) =>\n              (game.homeID === gameStats.teamIDAway ||\n                game.awayID === gameStats.teamIDAway) &&\n              game.status === \"complete\"\n          );\n\n          const resultAwayOnly = matches.data.filter(\n            (game) =>\n              game.awayID === gameStats.teamIDAway && game.status === \"complete\"\n          );\n\n          resultAwayOnly.sort((a, b) => b.date_unix - a.date_unix);\n\n          for (let i = 0; i < resultAway.length; i++) {\n            let unixTimestamp = resultAway[i].date_unix;\n            let milliseconds = unixTimestamp * 1000;\n            let dateObject = new Date(milliseconds).toLocaleString(\"en-GB\", {\n              timeZone: \"UTC\",\n            });\n\n            let won;\n            let goalsScored;\n            let goalsConceeded;\n            let wonHomeOrAwayOnly;\n            let goalsScoredHomeOrAwayOnly;\n            let goalsConceededHomeOrAwayOnly;\n\n            if (resultAway[i].winningTeam === gameStats.teamIDAway) {\n              won = \"W\";\n              if (resultAway[i].homeGoalCount > resultAway[i].awayGoalCount) {\n                goalsScored = resultAway[i].homeGoalCount;\n                goalsConceeded = resultAway[i].awayGoalCount;\n              } else {\n                goalsScored = resultAway[i].awayGoalCount;\n                goalsConceeded = resultAway[i].homeGoalCount;\n              }\n            } else if (resultAway[i].winningTeam === -1) {\n              won = \"D\";\n              goalsScored = resultAway[i].awayGoalCount;\n              goalsConceeded = resultAway[i].awayGoalCount;\n            } else {\n              won = \"L\";\n              if (resultAway[i].homeGoalCount > resultAway[i].awayGoalCount) {\n                goalsScored = resultAway[i].awayGoalCount;\n                goalsConceeded = resultAway[i].homeGoalCount;\n              } else {\n                goalsScored = resultAway[i].homeGoalCount;\n                goalsConceeded = resultAway[i].awayGoalCount;\n              }\n            }\n\n            gameArrayAway.push({\n              id: resultAway[i].id,\n              date: dateObject,\n              homeTeam: resultAway[i].home_name,\n              homeGoals: resultAway[i].homeGoalCount,\n              homeXG: resultAway[i].team_a_xg,\n              homeOdds: resultAway[i].odds_ft_1,\n              awayTeam: resultAway[i].away_name,\n              awayGoals: resultAway[i].awayGoalCount,\n              awayXG: resultAway[i].team_b_xg,\n              awayOdds: resultAway[i].odds_ft_2,\n              won: won,\n              homeShots: resultAway[i].team_a_shots,\n              awayShots: resultAway[i].team_b_shots,\n              homeSot: resultAway[i].team_a_shotsOnTarget,\n              awaySot: resultAway[i].team_b_shotsOnTarget,\n              homeRed: resultAway[i].team_a_red_cards,\n              awayRed: resultAway[i].team_b_red_cards,\n              homePossession: resultAway[i].team_a_possession,\n              awayPossession: resultAway[i].team_b_possession,\n              homeDangerousAttacks: resultAway[i].team_a_dangerous_attacks,\n              awayDangerousAttacks: resultAway[i].team_b_dangerous_attacks,\n              homePPG: resultAway[i].pre_match_teamA_overall_ppg,\n              awayPPG: resultAway[i].pre_match_teamB_overall_ppg,\n              unixTimestamp: resultAway[i].date_unix,\n              goalsFor: goalsScored,\n              goalsAgainst: goalsConceeded,\n              btts: resultAway[i].btts === true ? \"\\u2714\" : \"\\u2718\",\n            });\n          }\n\n          for (let i = 0; i < resultAwayOnly.length; i++) {\n            let wonHomeOrAwayOnly;\n\n            if (resultAwayOnly[i].winningTeam === gameStats.teamIDAway) {\n              wonHomeOrAwayOnly = \"W\";\n              gameArrayAwayTeamAwayGames.push(wonHomeOrAwayOnly);\n            } else if (resultAwayOnly[i].winningTeam === -1) {\n              wonHomeOrAwayOnly = \"D\";\n              gameArrayAwayTeamAwayGames.push(wonHomeOrAwayOnly);\n            } else {\n              wonHomeOrAwayOnly = \"L\";\n              gameArrayAwayTeamAwayGames.push(wonHomeOrAwayOnly);\n            }\n          }\n\n          goalDiffArrayAway = gameArrayAway.map(\n            (a) => a.goalsFor - a.goalsAgainst\n          );\n\n          goalDiffAwayMovingAv = getEMA(\n            goalDiffArrayAway,\n            goalDiffArrayAway.length < 5 ? goalDiffArrayAway.length : r\n          );\n\n          const cumulativeSumAway = (\n            (sum) => (value) =>\n              (sum += value)\n          )(0);\n\n          gameArrayAway.sort((a, b) => b.unixTimestamp - a.unixTimestamp);\n\n          rollingGoalDiffTotalAway = goalDiffArrayAway.map(cumulativeSumAway);\n\n          latestHomeGoalDiff =\n            goalDiffHomeMovingAv[goalDiffHomeMovingAv.length - 1];\n          latestAwayGoalDiff =\n            goalDiffAwayMovingAv[goalDiffAwayMovingAv.length - 1];\n        });\n      }\n\n      const bttsArrayHome = Array.from(gameArrayHome, (x) => x.btts);\n      const bttsArrayAway = Array.from(gameArrayAway, (x) => x.btts);\n      const resultsArrayHome = Array.from(gameArrayHome, (x) => x.won);\n      const resultsArrayAway = Array.from(gameArrayAway, (x) => x.won);\n\n      let homeTeam = gameStats.home.teamName;\n      let awayTeam = gameStats.away.teamName;\n\n      let time = game.time;\n\n      const homeForm = gameStats.home[index];\n      const awayForm = gameStats.away[index];\n\n      if (homeForm.last3Points === undefined) {\n        homeForm.last3Points = getPointsFromLastX(homeForm.lastThreeForm);\n\n        homeForm.last5Points = getPointsFromLastX(homeForm.LastFiveForm);\n\n        homeForm.last6Points = getPointsFromLastX(homeForm.LastSixForm);\n\n        homeForm.last10Points = getPointsFromLastX(homeForm.LastTenForm);\n\n        awayForm.last3Points = getPointsFromLastX(awayForm.lastThreeForm);\n\n        awayForm.last5Points = getPointsFromLastX(awayForm.LastFiveForm);\n\n        awayForm.last6Points = getPointsFromLastX(awayForm.LastSixForm);\n\n        awayForm.last10Points = getPointsFromLastX(awayForm.LastTenForm);\n      }\n\n      async function getPointAverage(pointTotal, games) {\n        return pointTotal / games;\n      }\n\n      // let homeThreeGameAverage = await getPointAverage(\n      //   homeForm.last3Points,\n      //   3\n      // );\n\n      let homeFiveGameAverage = await getPointAverage(homeForm.last5Points, 5);\n\n      let homeSixGameAverage = await getPointAverage(homeForm.last6Points, 6);\n\n      let homeTenGameAverage = await getPointAverage(homeForm.last10Points, 10);\n\n      // let awayThreeGameAverage = await getPointAverage(\n      //   awayForm.last3Points,\n      //   3\n      // );\n\n      let awayFiveGameAverage = await getPointAverage(awayForm.last5Points, 5);\n\n      let awaySixGameAverage = await getPointAverage(awayForm.last6Points, 6);\n\n      let awayTenGameAverage = await getPointAverage(awayForm.last10Points, 10);\n\n      async function getPointsFromGames(formArr) {\n        const pairings = {\n          W: 3,\n          D: 1,\n          L: 0,\n        };\n        let newArr = [];\n        let arrayOfIndividualPoints = [];\n        let sum = 0;\n\n        for (let i = 0; i < formArr.length; i++) {\n          sum = sum + pairings[formArr[i]];\n          newArr.push(sum);\n          arrayOfIndividualPoints.push(pairings[formArr[i]]);\n        }\n        return [newArr, arrayOfIndividualPoints];\n      }\n\n      async function getLastGameResult(lastGame) {\n        let text;\n        switch (true) {\n          case lastGame === \"L\":\n            text = \"Lost\";\n            break;\n          case lastGame === \"D\":\n            text = \"Drew\";\n            break;\n          case lastGame === \"W\":\n            text = \"Won\";\n            break;\n          default:\n            break;\n        }\n        return text;\n      }\n\n      let homeFormTrend = [\n        homeFiveGameAverage.toFixed(2),\n        homeTenGameAverage.toFixed(2),\n      ];\n\n      let awayFormTrend = [\n        awayFiveGameAverage.toFixed(2),\n        awayTenGameAverage.toFixed(2),\n      ];\n\n      let formTextStringHome;\n      let formTextStringAway;\n\n      if (displayBool === true && gameStats.home[2].LeagueOrAll === \"League\") {\n        formTextStringHome = await GenerateFormSummary(\n          gameStats.home[2],\n          homeFormTrend,\n          gameStats.home[0]\n        );\n        formTextStringAway = await GenerateFormSummary(\n          gameStats.away[2],\n          awayFormTrend,\n          gameStats.away[0]\n        );\n      } else {\n        formTextStringHome = \"\";\n        formTextStringAway = \"\";\n      }\n\n      console.log(game);\n      console.log(awayForm)\n      const favouriteRecordHome =\n        game.homeOdds < game.awayOdds || game.homeOdds === game.awayOdds\n          ? `${\n              homeForm.teamName\n            } have been favourites ${homeForm.favouriteCount} times. Of these games, they have Won: ${homeForm.oddsReliabilityWin.toFixed(\n              0\n            )}%, Drawn:  ${homeForm.oddsReliabilityDraw.toFixed(\n              0\n            )}%, Lost:  ${homeForm.oddsReliabilityLose.toFixed(0)}%`\n          : `${\n              homeForm.teamName\n            } have been underdogs ${homeForm.underdogCount} times. Of these games, they have Won: ${homeForm.oddsReliabilityWinAsUnderdog.toFixed(\n              0\n            )}%, Drawn:  ${homeForm.oddsReliabilityDrawAsUnderdog.toFixed(\n              0\n            )}%, Lost:  ${homeForm.oddsReliabilityLoseAsUnderdog.toFixed(0)}%`;\n      const favouriteRecordAway =\n        game.homeOdds > game.awayOdds || game.homeOdds === game.awayOdds\n          ? `${\n              awayForm.teamName\n            } have been favourites ${awayForm.favouriteCount} times. Of these games, they have Won: ${awayForm.oddsReliabilityWin.toFixed(\n              0\n            )}%, Drawn:  ${awayForm.oddsReliabilityDraw.toFixed(\n              0\n            )}%, Lost:  ${awayForm.oddsReliabilityLose.toFixed(0)}%`\n          : `${\n              awayForm.teamName\n            } have been underdogs ${awayForm.underdogCount} times. Of these games, they have Won: ${awayForm.oddsReliabilityWinAsUnderdog.toFixed(\n              0\n            )}%, Drawn:  ${awayForm.oddsReliabilityDrawAsUnderdog.toFixed(\n              0\n            )}%, Lost:  ${awayForm.oddsReliabilityLoseAsUnderdog.toFixed(0)}%`;\n\n      let homeLastGame = await getLastGameResult(homeForm.LastFiveForm[4]);\n      let awayLastGame = await getLastGameResult(awayForm.LastFiveForm[4]);\n\n      // let homeAttackStrength = await getAttackStrength(\n      //   homeForm.ScoredOverall / 10\n      // );\n\n      const attackingMetricsHome = {\n        // averagePossession: homeForm.AveragePossessionOverall,\n        \"Average Dangerous Attacks\": homeForm.AverageDangerousAttacksOverall,\n        \"Average Shots\": homeForm.AverageShots,\n        \"Average Shots On Target\": homeForm.AverageShotsOnTargetOverall,\n        \"Average Expected Goals\": homeForm.XGOverall,\n        \"Recent XG\": homeForm.XGlast5 ? homeForm.XGlast5 : homeForm.XGOverall,\n        \"Average Goals\":\n          homeForm.averageScoredLeague !== undefined &&\n          homeForm.averageScoredLeague !== null\n            ? homeForm.averageScoredLeague\n            : homeForm.ScoredOverall / 10,\n      };\n      const attackingMetricsAway = {\n        // averagePossession: awayForm.AveragePossessionOverall,\n        \"Average Dangerous Attacks\": awayForm.AverageDangerousAttacksOverall,\n        \"Average Shots\": awayForm.AverageShots,\n        \"Average Shots On Target\": awayForm.AverageShotsOnTargetOverall,\n        \"Average Expected Goals\": awayForm.XGOverall,\n        \"Recent XG\": awayForm.XGlast5 ? awayForm.XGlast5 : awayForm.XGOverall,\n        \"Average Goals\":\n          awayForm.averageScoredLeague !== undefined &&\n          awayForm.averageScoredLeague !== null\n            ? awayForm.averageScoredLeague\n            : awayForm.ScoredOverall / 10,\n      };\n\n      const defensiveMetricsHome = {\n        \"Clean Sheet Percentage\": 100 - homeForm.CleanSheetPercentage,\n        \"Average XG Against\": homeForm.XGAgainstAvgOverall,\n        \"Recent XG Against\": homeForm.XGAgainstlast5\n          ? homeForm.XGAgainstlast5\n          : homeForm.XGAgainstAvgOverall,\n        \"Average Goals Against\":\n          homeForm.averageConceededLeague !== undefined &&\n          homeForm.averageConceededLeague !== null\n            ? homeForm.averageConceededLeague\n            : homeForm.ConcededOverall / 10,\n      };\n\n      const defensiveMetricsAway = {\n        \"Clean Sheet Percentage\": 100 - awayForm.CleanSheetPercentage,\n        \"Average XG Against\": awayForm.XGAgainstAvgOverall,\n        \"Recent XG Against\": awayForm.XGAgainstlast5\n          ? awayForm.XGAgainstlast5\n          : awayForm.XGAgainstAvgOverall,\n        \"Average Goals Against\":\n          awayForm.averageConceededLeague !== undefined &&\n          awayForm.averageConceededLeague !== null\n            ? awayForm.averageConceededLeague\n            : awayForm.ConcededOverall / 10,\n      };\n\n      let homeAttackStrength;\n      let homeDefenceStrength;\n      let homePossessionStrength;\n      let homeXGForStrength;\n      let homeXGAgainstStrength;\n      let awayAttackStrength;\n      let awayDefenceStrength;\n      let awayPossessionStrength;\n      let awayXGForStrength;\n      let awayXGAgainstStrength;\n      let homeDirectnessStrength;\n      let awayDirectnessStrength;\n      let homeAccuracyOverallStrength;\n      let awayAccuracyOverallStrength;\n\n      if (homeForm.xgForStrength) {\n        console.log(\"not calculating\");\n        homeAttackStrength = homeForm.attackingStrength;\n        homeDefenceStrength = homeForm.defensiveStrength;\n        homePossessionStrength = homeForm.possessionStrength;\n        homeXGForStrength = homeForm.xgForStrength;\n        homeXGAgainstStrength = homeForm.xgAgainstStrength;\n        homeDirectnessStrength = homeForm.directnessOverallStrength;\n        homeAccuracyOverallStrength = homeForm.accuracyOverallStrength;\n\n        awayAttackStrength = awayForm.attackingStrength;\n        awayDefenceStrength = awayForm.defensiveStrength;\n        awayPossessionStrength = awayForm.possessionStrength;\n        awayXGForStrength = awayForm.xgForStrength;\n        awayXGAgainstStrength = awayForm.xgAgainstStrength;\n        awayDirectnessStrength = awayForm.directnessOverallStrength;\n        awayAccuracyOverallStrength = awayForm.accuracyOverallStrength;\n      } else {\n        homeAttackStrength = await calculateAttackingStrength(\n          attackingMetricsHome\n        );\n\n        homeDefenceStrength = await calculateDefensiveStrength(\n          defensiveMetricsHome\n        );\n\n        homePossessionStrength = await calculateMetricStrength(\n          \"averagePossession\",\n          homeForm.AveragePossessionOverall\n        );\n\n        homeXGForStrength = await calculateMetricStrength(\n          \"xgFor\",\n          gameStats.home[2].XGOverall\n        );\n\n        homeXGAgainstStrength = await calculateMetricStrength(\n          \"xgAgainst\",\n          3 - gameStats.home[2].XGAgainstAvgOverall\n        );\n        homeDirectnessStrength = await calculateMetricStrength(\n          \"directnessOverall\",\n          homeForm.directnessOverall\n        );\n        homeAccuracyOverallStrength = await calculateMetricStrength(\n          \"accuracyOverall\",\n          homeForm.shootingAccuracy\n        );\n\n        awayAttackStrength = await calculateAttackingStrength(\n          attackingMetricsAway\n        );\n        awayDefenceStrength = await calculateDefensiveStrength(\n          defensiveMetricsAway\n        );\n        awayPossessionStrength = await calculateMetricStrength(\n          \"averagePossession\",\n          awayForm.AveragePossessionOverall\n        );\n        awayXGForStrength = await calculateMetricStrength(\n          \"xgFor\",\n          gameStats.away[2].XGOverall\n        );\n\n        awayXGAgainstStrength = await calculateMetricStrength(\n          \"xgAgainst\",\n          3 - gameStats.away[2].XGAgainstAvgOverall\n        );\n        awayDirectnessStrength = await calculateMetricStrength(\n          \"directnessOverall\",\n          awayForm.directnessOverall\n        );\n        awayAccuracyOverallStrength = await calculateMetricStrength(\n          \"accuracyOverall\",\n          awayForm.shootingAccuracy\n        );\n      }\n\n      let [formPointsHome, testArrayHome] = await getPointsFromGames(\n        gameStats.home[2].WDLRecord\n      );\n      let [formPointsAway, testArrayAway] = await getPointsFromGames(\n        gameStats.away[2].WDLRecord\n      );\n\n      let rollingGoalDiffHome = [\n        (gameStats.home[0].ScoredOverall - gameStats.home[0].ConcededOverall) /\n          10,\n        (gameStats.home[1].ScoredOverall - gameStats.home[1].ConcededOverall) /\n          6,\n        (gameStats.home[2].ScoredOverall - gameStats.home[2].ConcededOverall) /\n          5,\n      ];\n\n      let rollingGoalDiffAway = [\n        (gameStats.away[0].ScoredOverall - gameStats.away[0].ConcededOverall) /\n          10,\n        (gameStats.away[1].ScoredOverall - gameStats.away[1].ConcededOverall) /\n          6,\n        (gameStats.away[2].ScoredOverall - gameStats.away[2].ConcededOverall) /\n          5,\n      ];\n\n      const formDataMatch = [];\n\n      formDataMatch.push({\n        btts: game.btts_potential,\n      });\n\n      const formDataHome = [];\n\n      formDataHome.push({\n        name: game.homeTeam,\n        Last5: gameStats.home[2].LastFiveForm,\n        LeagueOrAll: gameStats.home[2].LeagueOrAll,\n        AverageGoals: homeForm.ScoredOverall / 10,\n        AverageConceeded: homeForm.ConcededOverall / 10,\n        AverageXG: homeForm.XGOverall,\n        AverageXGConceded: homeForm.XGAgainstAvgOverall,\n        AveragePossession: homeForm.AveragePossessionOverall,\n        AverageShotsOnTarget: homeForm.AverageShotsOnTargetOverall,\n        AverageDangerousAttacks: homeForm.AverageDangerousAttacksOverall,\n        homeOrAway: \"Home\",\n        leaguePosition: homeForm.LeaguePosition,\n        Last5PPG: homeForm.PPG,\n        SeasonPPG: homeForm.SeasonPPG,\n        lastGame: homeLastGame,\n        formRun: homeForm.formRun,\n        goalDifference: homeForm.goalDifference,\n        goalDifferenceHomeOrAway: homeForm.goalDifferenceHomeOrAway,\n        // BttsPercentage: homeForm.BttsPercentage || \"-\",\n        // BttsPercentageHomeOrAway: homeForm.BttsPercentageHomeOrAway || \"-\",\n        CardsTotal: homeForm.CardsTotal || \"-\",\n        CornersAverage: homeForm.AverageCorners || \"-\",\n        FormTextStringHome: formTextStringHome,\n        FavouriteRecord: favouriteRecordHome + `. ${homeForm.reliabilityString}`,\n        BTTSArray: bttsArrayHome,\n        Results: resultsArrayHome,\n        // BTTSAll: homeForm.last10btts,\n        // BTTSHorA: homeForm.last10bttsHome,\n      });\n\n      const formDataAway = [];\n\n      formDataAway.push({\n        name: game.awayTeam,\n        Last5: gameStats.away[2].LastFiveForm,\n        LeagueOrAll: gameStats.away[2].LeagueOrAll,\n        AverageGoals: awayForm.ScoredOverall / 10,\n        AverageConceeded: awayForm.ConcededOverall / 10,\n        AverageXG: awayForm.XGOverall,\n        AverageXGConceded: awayForm.XGAgainstAvgOverall,\n        AveragePossession: awayForm.AveragePossessionOverall,\n        AverageShotsOnTarget: awayForm.AverageShotsOnTargetOverall,\n        AverageDangerousAttacks: awayForm.AverageDangerousAttacksOverall,\n        homeOrAway: \"Away\",\n        leaguePosition: awayForm.LeaguePosition,\n        Last5PPG: awayForm.PPG,\n        SeasonPPG: awayForm.SeasonPPG,\n        lastGame: awayLastGame,\n        formRun: awayForm.formRun,\n        goalDifference: awayForm.goalDifference,\n        goalDifferenceHomeOrAway: awayForm.goalDifferenceHomeOrAway,\n        // BttsPercentage: awayForm.BttsPercentage || \"-\",\n        // BttsPercentageHomeOrAway: awayForm.BttsPercentageHomeOrAway || \"-\",\n        CardsTotal: awayForm.CardsTotal || \"-\",\n        CornersAverage: awayForm.AverageCorners || \"-\",\n        FormTextStringAway: formTextStringAway,\n        FavouriteRecord: favouriteRecordAway + `. ${awayForm.reliabilityString}`,\n        BTTSArray: bttsArrayAway,\n        Results: resultsArrayAway,\n        ResultsHomeOrAway: resultsArrayAway,\n        // BTTSAll: awayForm.last10btts,\n        // BTTSHorA: awayForm.last10bttsAway,\n      });\n\n      let formArrayHome;\n      let formArrayAway;\n      let chartType;\n\n      if (formPointsHome.length > 1) {\n        formArrayHome = formPointsHome;\n        formArrayAway = formPointsAway;\n        chartType = \"Points over time\";\n      } else {\n        formArrayHome = [\n          homeTenGameAverage,\n          homeSixGameAverage,\n          homeFiveGameAverage,\n        ];\n        formArrayAway = [\n          awayTenGameAverage,\n          awaySixGameAverage,\n          awayFiveGameAverage,\n        ];\n        chartType = \"Rolling average points over last 10\";\n      }\n\n      ReactDOM.render(\n        <div style={style}>\n          <div className=\"H2HStats\" id={`H2HStats${game.id}`}></div>\n          <div className=\"TrendsHome\" id={`TrendsHome${game.id}`}></div>\n          <div className=\"TrendsAway\" id={`TrendsAway${game.id}`}></div>\n        </div>,\n        document.getElementById(\"history\" + homeTeam)\n      );\n\n      //This tournament does not have league positions\n      if (game.leagueName === \"Europe UEFA Women's Euro\") {\n        game.homeTeamHomePosition = \"N/A\";\n        game.awayTeamAwayPosition = \"N/A\";\n      }\n\n      function singleResult(game) {\n        return (\n          <div>\n            <div className=\"ResultRowSmall\">\n              <span className=\"column\">{game.homeXG}</span>\n              <span className=\"column\">XG</span>\n              <span className=\"column\">{game.awayXG}</span>\n            </div>\n            <div className=\"ResultRowSmall\">\n              <span className=\"column\">{game.homeShots}</span>\n              <span className=\"column\">Shots</span>\n              <span className=\"column\">{game.awayShots}</span>\n            </div>\n            <div className=\"ResultRowSmall\">\n              <span className=\"column\">{game.homeSot}</span>\n              <span className=\"column\">SOT</span>\n              <span className=\"column\">{game.awaySot}</span>\n            </div>\n            <div className=\"ResultRowSmall\">\n              <span className=\"column\">{game.homeDangerousAttacks}</span>\n              <span className=\"column\">Dangerous Attacks</span>\n              <span className=\"column\">{game.awayDangerousAttacks}</span>\n            </div>\n            <div className=\"ResultRowSmall\">\n              <span className=\"column\">{game.homePossession}%</span>\n              <span className=\"column\">Possession</span>\n              <span className=\"column\">{game.awayPossession}%</span>\n            </div>\n            <div className=\"ResultRowSmall\">\n              <span className=\"column\">{game.homeRed}</span>\n              <span className=\"column\">Red cards</span>\n              <span className=\"column\">{game.awayRed}</span>\n            </div>\n            <div className=\"ResultRowSmall\">\n              <span className=\"column\">{game.homePPG}</span>\n              <span className=\"column\">PPG (pre-match)</span>\n              <span className=\"column\">{game.awayPPG}</span>\n            </div>\n          </div>\n        );\n      }\n\n      const overviewHome = gameArrayHome.slice(0, 10).map((game) => (\n        <div>\n          <Collapsable\n            classNameButton=\"ResultButton\"\n            buttonText={\n              <div className=\"ResultRowOverviewSmall\">\n                <div className=\"columnOverviewHomeSmall\">{game.homeTeam}</div>\n                <span className=\"columnOverviewScoreSmall\">\n                  {game.homeGoals} : {game.awayGoals}\n                </span>\n                <div className=\"columnOverviewAwaySmall\">{game.awayTeam}</div>\n              </div>\n            }\n            element={singleResult(game)}\n          />\n        </div>\n      ));\n\n      const overviewAway = gameArrayAway.slice(0, 10).map((game) => (\n        <div>\n          <Collapsable\n            classNameButton=\"ResultButton\"\n            buttonText={\n              <div className=\"ResultRowOverviewSmall\">\n                <div className=\"columnOverviewHomeSmall\">{game.homeTeam}</div>\n                <span className=\"columnOverviewScoreSmall\">\n                  {game.homeGoals} : {game.awayGoals}\n                </span>\n                <div className=\"columnOverviewAwaySmall\">{game.awayTeam}</div>\n              </div>\n            }\n            element={singleResult(game)}\n          />\n        </div>\n      ));\n\n      function StatsHome() {\n        return (\n          <div className=\"flex-childOne\">\n            <ul style={style}>\n              <Stats\n                style={style}\n                homeOrAway=\"Home\"\n                gameCount={divider}\n                key={formDataHome[0].name}\n                last5={formDataHome[0].Last5}\n                homeOrAwayResults={gameArrayHomeTeamHomeGames}\n                LeagueOrAll={formDataHome[0].LeagueOrAll}\n                className={\"KeyStatsHome\"}\n                name={formDataHome[0].name}\n                goals={\n                  homeForm.averageScoredLeague !== undefined &&\n                  homeForm.averageScoredLeague !== null\n                    ? homeForm.averageScoredLeague.toFixed(2)\n                    : formDataHome[0].AverageGoals\n                }\n                conceeded={\n                  homeForm.averageConceededLeague !== undefined &&\n                  homeForm.averageConceededLeague !== null\n                    ? homeForm.averageConceededLeague.toFixed(2)\n                    : formDataHome[0].AverageConceeded\n                }\n                XG={formDataHome[0].AverageXG}\n                XGConceded={formDataHome[0].AverageXGConceded}\n                possession={formDataHome[0].AveragePossession}\n                sot={formDataHome[0].AverageShotsOnTarget}\n                dangerousAttacks={formDataHome[0].AverageDangerousAttacks}\n                leaguePosition={\n                  formDataHome[0].leaguePosition\n                    ? formDataHome[0].leaguePosition\n                    : 0\n                }\n                rawPosition={game.homeRawPosition ? game.homeRawPosition : 0}\n                homeOrAwayLeaguePosition={\n                  game.homeTeamHomePosition ? game.homeTeamHomePosition : 0\n                }\n                winPercentage={\n                  game.homeTeamWinPercentage ? game.homeTeamWinPercentage : 0\n                }\n                lossPercentage={\n                  game.homeTeamLossPercentage ? game.homeTeamLossPercentage : 0\n                }\n                drawPercentage={\n                  game.homeTeamDrawPercentage ? game.homeTeamDrawPercentage : 0\n                }\n                ppg={formDataHome[0].SeasonPPG}\n                formTrend={[\n                  homeTenGameAverage.toFixed(2),\n                  homeSixGameAverage.toFixed(2),\n                  homeFiveGameAverage.toFixed(2),\n                ]}\n                lastGame={homeLastGame}\n                formRun={formDataHome[0].formRun}\n                goalDifference={formDataHome[0].goalDifference}\n                goalDifferenceHomeOrAway={\n                  formDataHome[0].goalDifferenceHomeOrAway\n                }\n                BttsPercentage={formDataHome[0].BttsPercentage}\n                BttsPercentageHomeOrAway={\n                  formDataHome[0].BttsPercentageHomeOrAway\n                }\n                // BTTSAll={\n                //   formDataHome[0].BTTSAll\n                //     ? formDataHome[0].BTTSAll\n                //     : '\"Get Predictions\" first'\n                // }\n                // BTTSHorA={\n                //   formDataHome[0].BTTSHorA\n                //     ? formDataHome[0].BTTSHorA\n                //     : '\"Get Predictions\" first'\n                // }\n                BTTSArray={formDataHome[0].BTTSArray}\n                Results={formDataHome[0].Results}\n                ResultsHomeOrAway={formDataHome[0].wonHomeOrAwayOnly}\n                CardsTotal={formDataHome[0].CardsTotal}\n                CornersAverage={formDataHome[0].CornersAverage}\n                ScoredBothHalvesPercentage={\n                  formDataHome[0].ScoredBothHalvesPercentage\n                }\n                FormTextString={formDataHome[0].FormTextStringHome}\n                FavouriteRecord={formDataHome[0].FavouriteRecord}\n              />\n            </ul>\n          </div>\n        );\n      }\n\n      function StatsAway() {\n        return (\n          <div className=\"flex-childTwo\">\n            <ul style={style}>\n              <Stats\n                style={style}\n                homeOrAway=\"Away\"\n                gameCount={divider}\n                key={formDataAway[0].name}\n                last5={formDataAway[0].Last5}\n                homeOrAwayResults={gameArrayAwayTeamAwayGames}\n                LeagueOrAll={formDataAway[0].LeagueOrAll}\n                className={\"KeyStatsAway\"}\n                name={formDataAway[0].name}\n                goals={\n                  awayForm.averageScoredLeague !== undefined &&\n                  awayForm.averageScoredLeague !== null\n                    ? awayForm.averageScoredLeague.toFixed(2)\n                    : formDataAway[0].AverageGoals\n                }\n                conceeded={\n                  awayForm.averageConceededLeague !== undefined &&\n                  awayForm.averageConceededLeague !== null\n                    ? awayForm.averageConceededLeague.toFixed(2)\n                    : formDataAway[0].AverageConceeded\n                }\n                XG={formDataAway[0].AverageXG}\n                XGConceded={formDataAway[0].AverageXGConceded}\n                //todo add goal diff and btts percentages\n                possession={formDataAway[0].AveragePossession}\n                rawPosition={game.awayRawPosition ? game.awayRawPosition : 0}\n                sot={formDataAway[0].AverageShotsOnTarget}\n                dangerousAttacks={formDataAway[0].AverageDangerousAttacks}\n                leaguePosition={\n                  formDataAway[0].leaguePosition\n                    ? formDataAway[0].leaguePosition\n                    : 0\n                }\n                homeOrAwayLeaguePosition={\n                  game.awayTeamAwayPosition ? game.awayTeamAwayPosition : 0\n                }\n                winPercentage={\n                  game.awayTeamWinPercentage ? game.awayTeamWinPercentage : 0\n                }\n                lossPercentage={\n                  game.awayTeamLossPercentage ? game.awayTeamLossPercentage : 0\n                }\n                drawPercentage={\n                  game.awayTeamDrawPercentage ? game.awayTeamDrawPercentage : 0\n                }\n                ppg={formDataAway[0].SeasonPPG}\n                formTrend={[\n                  awayTenGameAverage.toFixed(2),\n                  awaySixGameAverage.toFixed(2),\n                  awayFiveGameAverage.toFixed(2),\n                ]}\n                lastGame={awayLastGame}\n                formRun={formDataAway[0].formRun}\n                goalDifference={formDataAway[0].goalDifference}\n                goalDifferenceHomeOrAway={\n                  formDataAway[0].goalDifferenceHomeOrAway\n                }\n                BttsPercentage={formDataAway[0].BttsPercentage}\n                BttsPercentageHomeOrAway={\n                  formDataAway[0].BttsPercentageHomeOrAway\n                }\n                // BTTSAll={\n                //   formDataAway[0].BTTSAll\n                //     ? formDataAway[0].BTTSAll\n                //     : '\"Get Predictions\" first'\n                // }\n                // BTTSHorA={\n                //   formDataAway[0].BTTSHorA\n                //     ? formDataAway[0].BTTSHorA\n                //     : '\"Get Predictions\" first'\n                // }\n                BTTSArray={formDataAway[0].BTTSArray}\n                Results={formDataAway[0].Results}\n                CardsTotal={formDataAway[0].CardsTotal}\n                CornersAverage={formDataAway[0].CornersAverage}\n                ScoredBothHalvesPercentage={\n                  formDataAway[0].ScoredBothHalvesPercentage\n                }\n                FormTextString={formDataAway[0].FormTextStringAway}\n                FavouriteRecord={formDataAway[0].FavouriteRecord}\n              />\n            </ul>\n          </div>\n        );\n      }\n\n      const pointsHome = getPointsFromLastX(formDataHome[0].Last5);\n      const pointsHomeAv = await getPointAverage(pointsHome, 5);\n      const pointsAway = getPointsFromLastX(formDataAway[0].Last5);\n      const pointsAwayAv = await getPointAverage(pointsAway, 5);\n\n      ReactDOM.render(\n        <div style={style}>\n          <div className=\"Chart\" id={`Chart${game.id}`} style={style}>\n            <RadarChart\n              data={[\n                homeAttackStrength,\n                homeDefenceStrength,\n                homePossessionStrength,\n                homeXGForStrength,\n                homeXGAgainstStrength,\n                homeDirectnessStrength,\n                homeAccuracyOverallStrength,\n              ]}\n              data2={[\n                awayAttackStrength,\n                awayDefenceStrength,\n                awayPossessionStrength,\n                awayXGForStrength,\n                awayXGAgainstStrength,\n                awayDirectnessStrength,\n                awayAccuracyOverallStrength,\n              ]}\n              team1={game.homeTeam}\n              team2={game.awayTeam}\n            ></RadarChart>\n            <BarChart\n              data1={[\n                homeForm.averageScoredLeague !== undefined &&\n                homeForm.averageScoredLeague !== null\n                  ? homeForm.averageScoredLeague.toFixed(2)\n                  : formDataHome[0].AverageGoals,\n                awayForm.averageConceededLeague !== undefined &&\n                awayForm.averageConceededLeague !== null\n                  ? awayForm.averageConceededLeague.toFixed(2)\n                  : formDataAway[0].AverageConceeded,\n                pointsHomeAv,\n                formDataHome[0].AverageXG,\n                formDataAway[0].AverageXGConceded,\n                formDataHome[0].AverageShotsOnTarget,\n                formDataHome[0].AverageDangerousAttacks / 7.5,\n                formDataHome[0].AveragePossession / 7.5,\n                formDataHome[0].goalDifferenceHomeOrAway / 5,\n                formDataHome[0].CornersAverage,\n              ]}\n              data2={[\n                awayForm.averageScoredLeague !== undefined &&\n                awayForm.averageScoredLeague !== null\n                  ? awayForm.averageScoredLeague.toFixed(2)\n                  : formDataAway[0].AverageGoals,\n                homeForm.averageConceededLeague !== undefined &&\n                homeForm.averageConceededLeague !== null\n                  ? homeForm.averageConceededLeague.toFixed(2)\n                  : formDataHome[0].AverageConceeded,\n                pointsAwayAv,\n                formDataAway[0].AverageXG,\n                formDataHome[0].AverageXGConceded,\n                formDataAway[0].AverageShotsOnTarget,\n                formDataAway[0].AverageDangerousAttacks / 7.5,\n                formDataAway[0].AveragePossession / 7.5,\n                formDataAway[0].goalDifferenceHomeOrAway / 5,\n                formDataAway[0].CornersAverage,\n              ]}\n            ></BarChart>\n            <Chart\n              height={3}\n              depth={0}\n              data1={formArrayHome}\n              data2={formArrayAway}\n              team1={game.homeTeam}\n              team2={game.awayTeam}\n              type={chartType}\n              tension={0}\n            ></Chart>\n            <Chart\n              height={\n                Math.max(\n                  rollingGoalDiffTotalHome[rollingGoalDiffTotalHome.length - 1],\n                  rollingGoalDiffTotalAway[rollingGoalDiffTotalAway.length - 1]\n                ) > 2\n                  ? Math.max(\n                      rollingGoalDiffTotalHome[\n                        rollingGoalDiffTotalHome.length - 1\n                      ],\n                      rollingGoalDiffTotalAway[\n                        rollingGoalDiffTotalAway.length - 1\n                      ]\n                    )\n                  : 2\n              }\n              depth={\n                Math.min(\n                  rollingGoalDiffTotalHome[rollingGoalDiffTotalHome.length - 1],\n                  rollingGoalDiffTotalAway[rollingGoalDiffTotalAway.length - 1]\n                ) < -2\n                  ? Math.min(\n                      rollingGoalDiffTotalHome[\n                        rollingGoalDiffTotalHome.length - 1\n                      ],\n                      rollingGoalDiffTotalAway[\n                        rollingGoalDiffTotalAway.length - 1\n                      ]\n                    )\n                  : -2\n              }\n              data1={rollingGoalDiffTotalHome}\n              data2={rollingGoalDiffTotalAway}\n              team1={game.homeTeam}\n              team2={game.awayTeam}\n              type={\"Goal difference over time\"}\n              tension={0.3}\n            ></Chart>\n          </div>\n          <div style={style}>\n            <Div className=\"MatchTime\" text={`Kick off: ${time} GMT`}></Div>\n            <Div\n              text={`Last league games (most recent first)`}\n              className={\"LastGameHeader\"}\n            ></Div>\n          </div>\n          <div className=\"flex-container\">\n            <div className=\"flex-childOneOverviewSmall\">{overviewHome}</div>\n            <div className=\"flex-childTwoOverviewSmall\">{overviewAway}</div>\n          </div>\n          {/* <Collapsable\n            className={\"Detail\"}\n            classNameTwo={\"flex-childOneOverview\"}\n            classNameThree={\"flex-childTwoOverview\"}\n            classNameFlex={\"flex-element\"}\n            classNameButton={\"DetailedFixtures\"}\n            buttonText={\"Detailed results\"}\n            newText={\"Detailed results\"}\n            element={contentHome}\n            elementTwo={contentAway}\n            // style={style}\n          /> */}\n          <div className=\"flex-container\">\n            <StatsHome />\n            <StatsAway />\n          </div>\n          <input type=\"hidden\" name=\"IL_IN_ARTICLE\" />\n          <Button\n            className=\"MoreStats\"\n            onClickEvent={() =>\n              getTeamStats(\n                game.id,\n                game.homeTeam,\n                game.awayTeam,\n                formDataHome[0].BttsPercentage,\n                formDataHome[0].BttsPercentageHomeOrAway,\n                formDataAway[0].BttsPercentage,\n                formDataAway[0].BttsPercentageHomeOrAway\n              )\n            }\n            text={\"Fixture trends\"}\n          ></Button>\n        </div>,\n        document.getElementById(\"stats\" + homeTeam)\n      );\n    }\n\n    // ReactDOM.render(\n    //   <Button\n    //     className=\"MoreStats\"\n    //     style={style}\n    //     onClickEvent={() =>\n    //       getTeamStats(\n    //         game.id,\n    //         game.homeTeam,\n    //         game.awayTeam,\n    //         formDataHome[0].BttsPercentage,\n    //         formDataHome[0].BttsPercentageHomeOrAway,\n    //         formDataAway[0].BttsPercentage,\n    //         formDataAway[0].BttsPercentageHomeOrAway\n    //       )\n    //     }\n    //     text={\"Fixture trends\"}\n    //   ></Button>,\n    //   document.getElementById(`H2HStats${game.id}`)\n    // );\n  }\n}\n","/Users/gregdorward/Development/football-predictions/src/components/Div.js",[],"/Users/gregdorward/Development/football-predictions/src/components/CollapsableDiv.js",[],"/Users/gregdorward/Development/football-predictions/src/components/Increment.js",[],"/Users/gregdorward/Development/football-predictions/src/logic/getBTTSPotential.js",[],"/Users/gregdorward/Development/football-predictions/src/components/OddsRadio.js",[],"/Users/gregdorward/Development/football-predictions/src/logic/getTeamStats.js",[],"/Users/gregdorward/Development/football-predictions/src/components/HeadToHead.js",[],"/Users/gregdorward/Development/football-predictions/src/components/BulletList.js",[],["234","235"],"/Users/gregdorward/Development/football-predictions/src/components/Table.js",["236"],"import React from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\n\nconst StyledTableCell = withStyles((theme) => ({\n  head: {\n    // backgroundColor: \"#dedddd\",\n    padding: 10,\n    textAlign: \"center\",\n    fontSize: \"2em\",\n    fontFamily: 'inherit',\n    // border: \"none\",\n    margin: \"none\",\n    color: 'white',\n    lineHeight: '2em',\n    backgroundColor: '#030061',\n  },\n  body: {\n    fontSize: \"2em\",\n    fontFamily: 'inherit',\n    padding: 10,\n    color: 'white',\n    // border: \"none\",\n    margin: \"none\",\n    backgroundColor: '#030061',\n  },\n}))(TableCell);\n\nconst StyledTableRow = withStyles((theme) => ({\n  root: {\n    \"&:nth-of-type(odd)\": {\n      backgroundColor: \"#030061\",\n      textAlign: \"center\",\n    },\n    \"&:nth-of-type(even)\": {\n      backgroundColor: \"#030052\",\n      textAlign: \"center\",\n    },\n  },\n}))(TableRow);\n\n\nexport default function CustomizedTables(props) {\n\n\n  return (\n    <TableContainer className=\"StatsTable\">\n      <Table aria-label=\"customized table\">\n        <TableHead>\n          <TableRow>\n            <StyledTableCell>Stat</StyledTableCell>\n            <StyledTableCell>H2H history</StyledTableCell>\n            <StyledTableCell>XGTipping forecast</StyledTableCell>\n            <StyledTableCell>Odds (yes)</StyledTableCell>\n            <StyledTableCell>Odds (no)</StyledTableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n        <StyledTableRow key=\"O05\">\n            <StyledTableCell component=\"th\" scope=\"row\" align=\"center\" padding=\"5\">\n              Over 0.5 Goals %\n            </StyledTableCell>\n            <StyledTableCell component=\"th\" scope=\"row\" align=\"center\">\n              {`${props.o05Stat}%`}\n            </StyledTableCell>\n            <StyledTableCell align=\"center\">{\"-\"}</StyledTableCell>\n            <StyledTableCell align=\"center\">{props.o05Odds}</StyledTableCell>\n            <StyledTableCell align=\"center\">{props.u05Odds}</StyledTableCell>\n          </StyledTableRow>\n          <StyledTableRow key=\"O15\">\n            <StyledTableCell component=\"th\" scope=\"row\" align=\"center\" padding=\"5\">\n              Over 1.5 Goals %\n            </StyledTableCell>\n            <StyledTableCell component=\"th\" scope=\"row\" align=\"center\">\n              {`${props.o15Stat}%`}\n            </StyledTableCell>\n            <StyledTableCell align=\"center\">{\"-\"}</StyledTableCell>\n            <StyledTableCell align=\"center\">{props.o15Odds}</StyledTableCell>\n            <StyledTableCell align=\"center\">{props.u15Odds}</StyledTableCell>\n          </StyledTableRow>\n          <StyledTableRow key=\"O25\">\n            <StyledTableCell component=\"th\" scope=\"row\" align=\"center\">\n              Over 2.5 Goals %\n            </StyledTableCell>\n            <StyledTableCell component=\"th\" scope=\"row\" align=\"center\">\n              {`${props.o25Stat}%`}\n            </StyledTableCell>\n            <StyledTableCell align=\"center\">{\"-\"}</StyledTableCell>\n            <StyledTableCell align=\"center\">{props.o25Odds}</StyledTableCell>\n            <StyledTableCell align=\"center\">{props.u25Odds}</StyledTableCell>\n          </StyledTableRow>\n          <StyledTableRow key=\"O35\">\n            <StyledTableCell component=\"th\" scope=\"row\" align=\"center\">\n              Over 3.5 Goals %\n            </StyledTableCell>\n            <StyledTableCell component=\"th\" scope=\"row\" align=\"center\">\n              {`${props.o35Stat}%`}\n            </StyledTableCell>\n            <StyledTableCell align=\"center\">{\"-\"}</StyledTableCell>\n            <StyledTableCell align=\"center\">{props.o35Odds}</StyledTableCell>\n            <StyledTableCell align=\"center\">{props.u35Odds}</StyledTableCell>\n          </StyledTableRow>\n          <StyledTableRow key=\"BTTS\" className=\"BTTSStats\">\n            <StyledTableCell component=\"th\" scope=\"row\" align=\"center\">\n              BTTS %\n            </StyledTableCell>\n            <StyledTableCell component=\"th\" scope=\"row\" align=\"center\">\n              {`${props.BTTSStat}%`}\n            </StyledTableCell>\n            <StyledTableCell align=\"center\">{props.BTTSForecast}</StyledTableCell>\n            <StyledTableCell align=\"center\">{props.BTTSOdds}</StyledTableCell>\n            <StyledTableCell align=\"center\">{props.BTTSOddsNo}</StyledTableCell>\n          </StyledTableRow>\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}\n","/Users/gregdorward/Development/football-predictions/src/components/LeagueTable.js",["237","238"],"import React, { useState } from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Collapsable from \"../components/CollapsableElement\";\nimport { CreateBadge } from \"./createBadge\";\nimport { Button } from \"./Button\";\nexport var toggleState = false;\nexport var setIsOff = false;\n\nconst upArrow = \"\\u{25B2}\";\n\nconst StyledTableCell2 = withStyles((theme) => ({\n  head: {\n    backgroundColor: \"rgba(226, 226, 226, 1)\",\n    color: \"white\",\n    padding: \"0.35em\",\n    paddingTop: \"0.75em\",\n    paddingBottom: \"0.75em\",\n    textAlign: \"left\",\n    fontSize: \"1.9em\",\n    fontFamily: \"inherit\",\n    // border: \"none\",\n    margin: \"none\",\n  },\n  body: {\n    fontSize: \"1.9em\",\n    textAlign: \"left\",\n    fontFamily: \"inherit\",\n    padding: \"0.5em\",\n    paddingTop: \"0.75em\",\n    paddingBottom: \"0.75em\",\n    // border: \"none\",\n    margin: \"none\",\n    color: \"#030061\",\n  },\n}))(TableCell);\n\nconst StyledTableCell = withStyles((theme) => ({\n  head: {\n    backgroundColor: \"white\",\n    color: \"#030061\",\n    padding: \"0.5em\",\n    paddingTop: \"1em\",\n    paddingBottom: \"1em\",\n    textAlign: \"center\",\n    fontSize: \"1.9em\",\n    fontFamily: \"inherit\",\n    // border: \"none\",\n    margin: \"none\",\n  },\n  body: {\n    // backgroundColor: \"#030061\",\n    fontSize: \"1.9em\",\n    textAlign: \"center\",\n    fontFamily: \"inherit\",\n    padding: \"0.35em\",\n    paddingTop: \"1em\",\n    paddingBottom: \"1em\",\n    // border: \"none\",\n    margin: \"none\",\n    color: \"#030061\",\n  },\n}))(TableCell);\n\nconst StyledTableRow = withStyles((theme) => ({\n  root: {\n    \"&:nth-of-type(odd)\": {\n      backgroundColor: \"#rgba(226, 226, 226, 0.424)\",\n      textAlign: \"center\",\n    },\n    \"&:nth-of-type(even)\": {\n      backgroundColor: \"#rgba(226, 226, 226, 1)\",\n      textAlign: \"center\",\n    },\n  },\n}))(TableRow);\n\nfunction styleForm(formIndicator) {\n  let className;\n  if (formIndicator === \"W\") {\n    className = \"winLeague\";\n  } else if (formIndicator === \"D\") {\n    className = \"drawLeague\";\n  } else if (formIndicator === \"L\") {\n    className = \"lossLeague\";\n  }\n  return className;\n}\n\nexport default function LeagueTable(props) {\n  [toggleState, setIsOff] = useState(false);\n\n  let rows = props.Teams.map((team, i) => (\n    <StyledTableRow key={`${props.Key}row${i}`}>\n      <StyledTableCell component=\"th\" scope=\"row\">\n        {`${i + 1}`}\n      </StyledTableCell>\n      <StyledTableCell2 component=\"th\" scope=\"row\" style={{ width: \"15em\" }}>\n        {`${team.Name}`}\n      </StyledTableCell2>\n      <StyledTableCell component=\"th\" scope=\"row\">\n        {`${team.Played}`}\n      </StyledTableCell>\n      <StyledTableCell component=\"th\" scope=\"row\">\n        {`${team.Wins}`}\n      </StyledTableCell>\n      <StyledTableCell component=\"th\" scope=\"row\">\n        {`${team.Draws}`}\n      </StyledTableCell>\n      <StyledTableCell component=\"th\" scope=\"row\">\n        {`${team.Losses}`}\n      </StyledTableCell>\n      <StyledTableCell component=\"th\" scope=\"row\">\n        {`${team.For}`}\n      </StyledTableCell>\n      <StyledTableCell component=\"th\" scope=\"row\">\n        {`${team.Against}`}\n      </StyledTableCell>\n      <StyledTableCell component=\"th\" scope=\"row\">\n        {`${team.GoalDifference}`}\n      </StyledTableCell>\n      <StyledTableCell component=\"th\" scope=\"row\">\n        {`${team.Points}`}\n      </StyledTableCell>\n      <StyledTableCell\n        component=\"th\"\n        scope=\"row\"\n        style={{ textAlign: \"center\" }}\n      >\n        <span className={styleForm(team.Form[0])}>\n          {team.Form[0] !== undefined ? team.Form[0] : \"\"}\n        </span>\n        <span className={styleForm(team.Form[1])}>\n          {team.Form[1] !== undefined ? team.Form[1] : \"\"}\n        </span>\n        <span className={styleForm(team.Form[2])}>\n          {team.Form[2] !== undefined ? team.Form[2] : \"\"}\n        </span>\n        <span className={styleForm(team.Form[3])}>\n          {team.Form[3] !== undefined ? team.Form[3] : \"\"}\n        </span>\n        <span className={styleForm(team.Form[4])}>\n          {team.Form[4] !== undefined ? team.Form[4] : \"\"}\n        </span>\n      </StyledTableCell>\n    </StyledTableRow>\n  ));\n\n  const leagueResults = [];\n  let singleResult;\n  if (props.Results) {\n    props.Results.forEach((result) => {\n      singleResult = (\n        <div>\n          <div className=\"ResultRow\">\n            <span className=\"column\">{result.team_a_xg}</span>\n            <span className=\"column\">XG</span>\n            <span className=\"column\">{result.team_b_xg}</span>\n          </div>\n          <div className=\"ResultRow\">\n            <span className=\"column\">{result.team_a_shots}</span>\n            <span className=\"column\">Shots</span>\n            <span className=\"column\">{result.team_b_shots}</span>\n          </div>\n          <div className=\"ResultRow\">\n            <span className=\"column\">{result.team_a_shotsOnTarget}</span>\n            <span className=\"column\">SOT</span>\n            <span className=\"column\">{result.team_b_shotsOnTarget}</span>\n          </div>\n          <div className=\"ResultRow\">\n            <span className=\"column\">{result.team_a_dangerous_attacks}</span>\n            <span className=\"column\">Dangerous Attacks</span>\n            <span className=\"column\">{result.team_b_dangerous_attacks}</span>\n          </div>\n          <div className=\"ResultRow\">\n            <span className=\"column\">{result.team_a_possession}%</span>\n            <span className=\"column\">Possession</span>\n            <span className=\"column\">{result.team_b_possession}%</span>\n          </div>\n          <div className=\"ResultRow\">\n            <span className=\"column\">{result.team_a_red_cards}</span>\n            <span className=\"column\">Red cards</span>\n            <span className=\"column\">{result.team_b_red_cards}</span>\n          </div>\n          <div className=\"ResultRow\">\n            <span className=\"column\">{result.odds_ft_1}</span>\n            <span className=\"column\">Odds (pre-match)</span>\n            <span className=\"column\">{result.odds_ft_2}</span>\n          </div>\n        </div>\n      );\n\n      leagueResults.push(\n        <Collapsable\n          classNameButton=\"ResultButton\"\n          buttonText={\n            <div className=\"ResultRowOverview\">\n              <div className=\"columnOverviewHome\">{result.home_name}</div>\n              <span className=\"columnOverviewScore\">\n                {result.homeGoalCount} : {result.awayGoalCount}\n              </span>\n              <div className=\"columnOverviewAway\">{result.away_name}</div>\n            </div>\n          }\n          element={singleResult}\n        />\n      );\n    });\n  }\n\n  const leagueResultsOlder = [];\n  if (props.LastWeeksResults) {\n    props.LastWeeksResults.forEach((result) => {\n      singleResult = (\n        <div>\n          <div className=\"ResultRow\">\n            <span className=\"column\">{result.team_a_xg}</span>\n            <span className=\"column\">XG</span>\n            <span className=\"column\">{result.team_b_xg}</span>\n          </div>\n          <div className=\"ResultRow\">\n            <span className=\"column\">{result.team_a_shots}</span>\n            <span className=\"column\">Shots</span>\n            <span className=\"column\">{result.team_b_shots}</span>\n          </div>\n          <div className=\"ResultRow\">\n            <span className=\"column\">{result.team_a_shotsOnTarget}</span>\n            <span className=\"column\">SOT</span>\n            <span className=\"column\">{result.team_b_shotsOnTarget}</span>\n          </div>\n          <div className=\"ResultRow\">\n            <span className=\"column\">{result.team_a_dangerous_attacks}</span>\n            <span className=\"column\">Dangerous Attacks</span>\n            <span className=\"column\">{result.team_b_dangerous_attacks}</span>\n          </div>\n          <div className=\"ResultRow\">\n            <span className=\"column\">{result.team_a_possession}</span>\n            <span className=\"column\">Possession</span>\n            <span className=\"column\">{result.team_b_possession}</span>\n          </div>\n          <div className=\"ResultRow\">\n            <span className=\"column\">{result.team_a_red_cards}</span>\n            <span className=\"column\">Red cards</span>\n            <span className=\"column\">{result.team_b_red_cards}</span>\n          </div>\n          <div className=\"ResultRow\">\n            <span className=\"column\">{result.odds_ft_1}</span>\n            <span className=\"column\">Odds (pre-match)</span>\n            <span className=\"column\">{result.odds_ft_2}</span>\n          </div>\n        </div>\n      );\n\n      leagueResultsOlder.push(\n        <Collapsable\n          classNameButton=\"ResultButton\"\n          buttonText={\n            <div className=\"ResultRowOverview\">\n              <div className=\"columnOverviewHome\">{result.home_name}</div>\n              <span className=\"columnOverviewScore\">\n                {result.homeGoalCount} : {result.awayGoalCount}\n              </span>\n              <div className=\"columnOverviewAway\">{result.away_name}</div>\n            </div>\n          }\n          element={singleResult}\n        />\n      );\n    });\n  }\n\n  function getTopScorersTeam(id) {\n    let found = props.Teams.find((team) => team.ID === id);\n    return found.Name;\n  }\n\n  async function sorted(league, value, order) {\n    let sortedByForm;\n    if (order === \"desc\") {\n      sortedByForm = league.sort((a, b) => b[value] - a[value]);\n    } else {\n      sortedByForm = league.sort((a, b) => a[value] - b[value]);\n    }\n    setIsOff(!toggleState);\n    return sortedByForm;\n  }\n\n  if (\n    props.GamesPlayed > 3 &&\n    props.Teams[0].LeagueID !== 7956 &&\n    props.Teams[0].LeagueID !== 6969 &&\n    props.Teams[0].LeagueID !== 7432\n  ) {\n    for (let i = 0; i < props.Teams.length; i++) {\n      return (\n        <TableContainer component={Paper} className=\"StatsTable\">\n          <Table\n            className=\"Table\"\n            aria-label=\"customized table\"\n            key={props.Key}\n            style={{ marginTop: \"2em\", marginBottom: \"1em\" }}\n          >\n            <TableHead>\n              <TableRow>\n                <StyledTableCell></StyledTableCell>\n                <StyledTableCell></StyledTableCell>\n                <StyledTableCell>Pld</StyledTableCell>\n                <StyledTableCell>W</StyledTableCell>\n                <StyledTableCell>D</StyledTableCell>\n                <StyledTableCell>L</StyledTableCell>\n                <StyledTableCell>GF</StyledTableCell>\n                <StyledTableCell>GA</StyledTableCell>\n                <StyledTableCell>GD</StyledTableCell>\n                <td>\n                  <button\n                    className=\"SortedColumn\"\n                    style={{ textAlign: \"center\" }}\n                    onClick={() => sorted(props.Teams, \"Points\", \"desc\")}\n                  >\n                    Pts {upArrow}\n                  </button>\n                </td>\n                <td>\n                  <button\n                    className=\"SortedColumn\"\n                    style={{ textAlign: \"center\" }}\n                    onClick={() => sorted(props.Teams, \"LastXPoints\", \"desc\")}\n                  >\n                    Last 5 {upArrow}\n                  </button>\n                </td>\n              </TableRow>\n            </TableHead>\n            <TableBody>{rows}</TableBody>\n          </Table>\n          <h5>{`${props.mostRecentGameweek} results`}</h5>\n          <div className=\"ResultsList\" id=\"ResultsList\">\n            <ul>{leagueResults}</ul>\n          </div>\n          <div className=\"LeagueStatisticsHeader\">League Statistics</div>\n          <div className=\"LeagueStatistics\">\n            <ul className=\"LeagueStatsColumn\">\n              <li>Average home goals: {props.Stats.seasonAVG_home}</li>\n              <li>Average away goals: {props.Stats.seasonAVG_away}</li>\n              <li>BTTS: {props.Stats.seasonBTTSPercentage}%</li>\n              <li>\n                Over 0.5 goals: {props.Stats.seasonOver05Percentage_overall}%\n              </li>\n              <li>\n                Over 1.5 goals: {props.Stats.seasonOver15Percentage_overall}%\n              </li>\n              <li>\n                Over 2.5 goals: {props.Stats.seasonOver25Percentage_overall}%\n              </li>\n              <li>\n                Over 3.5 goals: {props.Stats.seasonOver35Percentage_overall}%\n              </li>\n              <li>\n                Over 4.5 goals: {props.Stats.seasonOver45Percentage_overall}%\n              </li>\n            </ul>\n            <ul className=\"LeagueStatsColumn\">\n              <li>\n                Over 7.5 corners: {props.Stats.over75CornersPercentage_overall}%\n              </li>\n              <li>\n                Over 8.5 corners: {props.Stats.over85CornersPercentage_overall}%\n              </li>\n              <li>\n                Over 9.5 corners: {props.Stats.over95CornersPercentage_overall}%\n              </li>\n              <li>\n                Over 10.5 corners:{\" \"}\n                {props.Stats.over105CornersPercentage_overall}%\n              </li>\n              <li>\n                Over 11.5 corners:{\" \"}\n                {props.Stats.over115CornersPercentage_overall}%\n              </li>\n              <li>\n                Over 12.5 corners:{\" \"}\n                {props.Stats.over125CornersPercentage_overall}%\n              </li>\n              <li>Corners average: {props.Stats.cornersAVG_overall}</li>\n              <li>Cards average: {props.Stats.cardsAVG_overall}</li>\n            </ul>\n            <ul className=\"TopScorersColumn\">\n              <h4>Top scorers</h4>\n              <li>\n                {props.Stats.top_scorers[0].known_as} (\n                {getTopScorersTeam(props.Stats.top_scorers[0].club_team_id)}):{\" \"}\n                {props.Stats.top_scorers[0].goals_overall}\n              </li>\n              <li>\n                {props.Stats.top_scorers[1].known_as} (\n                {getTopScorersTeam(props.Stats.top_scorers[1].club_team_id)}):{\" \"}\n                {props.Stats.top_scorers[1].goals_overall}\n              </li>\n              <li>\n                {props.Stats.top_scorers[2].known_as} (\n                {getTopScorersTeam(props.Stats.top_scorers[2].club_team_id)}):{\" \"}\n                {props.Stats.top_scorers[2].goals_overall}\n              </li>\n              <li>\n                {props.Stats.top_scorers[3].known_as} (\n                {getTopScorersTeam(props.Stats.top_scorers[3].club_team_id)}):{\" \"}\n                {props.Stats.top_scorers[3].goals_overall}\n              </li>\n              <li>\n                {props.Stats.top_scorers[4].known_as} (\n                {getTopScorersTeam(props.Stats.top_scorers[4].club_team_id)}):{\" \"}\n                {props.Stats.top_scorers[4].goals_overall}\n              </li>\n              <li>\n                {props.Stats.top_scorers[5].known_as} (\n                {getTopScorersTeam(props.Stats.top_scorers[5].club_team_id)}):{\" \"}\n                {props.Stats.top_scorers[5].goals_overall}\n              </li>\n              <li>\n                {props.Stats.top_scorers[6].known_as} (\n                {getTopScorersTeam(props.Stats.top_scorers[6].club_team_id)}):{\" \"}\n                {props.Stats.top_scorers[6].goals_overall}\n              </li>\n              <li>\n                {props.Stats.top_scorers[7].known_as} (\n                {getTopScorersTeam(props.Stats.top_scorers[7].club_team_id)}):{\" \"}\n                {props.Stats.top_scorers[7].goals_overall}\n              </li>\n              <li>\n                {props.Stats.top_scorers[8].known_as} (\n                {getTopScorersTeam(props.Stats.top_scorers[8].club_team_id)}):{\" \"}\n                {props.Stats.top_scorers[8].goals_overall}\n              </li>\n              <li>\n                {props.Stats.top_scorers[9].known_as} (\n                {getTopScorersTeam(props.Stats.top_scorers[9].club_team_id)}):{\" \"}\n                {props.Stats.top_scorers[9].goals_overall}\n              </li>\n            </ul>\n          </div>\n        </TableContainer>\n      );\n    }\n  } else if (props.Teams[0].LeagueID === 4340) {\n    return null;\n  } else {\n    for (let i = 0; i < props.Teams.length; i++) {\n      return (\n        <TableContainer component={Paper} className=\"StatsTable\">\n          <Table aria-label=\"customized table\" key={props.Key}>\n            <TableHead>\n              <TableRow>\n                <button\n                  className=\"SortedColumn\"\n                  style={{ textAlign: \"center\" }}\n                  onClick={() => sorted(props.Teams, \"Position\")}\n                >\n                  {upArrow}\n                </button>{\" \"}\n                <StyledTableCell></StyledTableCell>\n                <StyledTableCell>Pld</StyledTableCell>\n                <StyledTableCell>W</StyledTableCell>\n                <StyledTableCell>D</StyledTableCell>\n                <StyledTableCell>L</StyledTableCell>\n                <StyledTableCell>GF</StyledTableCell>\n                <StyledTableCell>GA</StyledTableCell>\n                <StyledTableCell>GD</StyledTableCell>\n                <StyledTableCell>Pts</StyledTableCell>\n                <td>\n                  <button\n                    className=\"SortedColumn\"\n                    style={{ textAlign: \"center\" }}\n                    onClick={() => sorted(props.Teams, \"LastXPoints\", \"desc\")}\n                  >\n                    Last 5 {upArrow}\n                  </button>\n                </td>\n              </TableRow>\n            </TableHead>\n            <TableBody>{rows}</TableBody>\n          </Table>\n        </TableContainer>\n      );\n    }\n  }\n}\n","/Users/gregdorward/Development/football-predictions/src/components/Fixture.js",["239","240","241","242","243","244"],"import React, { Fragment, useState } from \"react\";\nimport { CreateBadge } from \"./createBadge\";\nimport Collapsable from \"../components/CollapsableElement\";\nimport { Checkbox } from \"./Checkbox\";\nimport { createStatsDiv } from \"../logic/getStats\";\nimport { renderTable } from \"../logic/getFixtures\";\nimport { allLeagueResultsArrayOfObjects } from \"../logic/getFixtures\";\nimport { json, useNavigate } from \"react-router-dom\";\nimport { Zoom } from \"swiper\";\nimport { useDispatch } from \"react-redux\";\nimport { setData } from \"../logic/dataSlice\";\nimport { Provider } from \"react-redux\";\nimport store from \"../logic/store\"; // Import your Redux store\nimport { formObjectHome } from \"../logic/getScorePredictions\";\nimport { clicked } from \"../logic/getScorePredictions\";\n\nlet resultValue;\nvar count;\nlet mockValue;\nvar setCount;\n\nfunction toggle(bool) {\n  count = !bool;\n  return count;\n}\n\nfunction GetDivider(fixture, mock) {\n  const matchStatus = fixture.status;\n  let isPrediction = resultValue;\n\n  if (mockValue === true && matchStatus === \"complete\") {\n    isPrediction = false;\n    return (\n      <Fragment>\n        <div className=\"Result\">{`${fixture.fixture.homeGoals} - ${fixture.fixture.awayGoals}`}</div>\n        <div\n          className=\"CorrectScore\"\n          key={fixture.fixture.homeTeam}\n          data-cy={\"score-\" + fixture.fixture.id}\n        >{`${fixture.fixture.goalsA} - ${fixture.fixture.goalsB}`}</div>\n      </Fragment>\n    );\n  } else if (mockValue === true && matchStatus !== \"complete\") {\n    isPrediction = true;\n    return (\n      <Fragment>\n        <div className=\"KOTime\">{`${fixture.fixture.time}`}</div>\n        <div\n          className=\"score\"\n          key={fixture.fixture.awayTeam}\n        >{`${fixture.fixture.goalsA} - ${fixture.fixture.goalsB}`}</div>\n      </Fragment>\n    );\n  } else if (isPrediction === false && matchStatus !== \"complete\") {\n    return (\n      <div className=\"divider\" data-cy={\"divider-\" + fixture.fixture.id}>\n        {\"V\"}\n      </div>\n    );\n  } else if (isPrediction === false && matchStatus === \"complete\") {\n    return (\n      <div\n        className=\"Result\"\n        data-cy={\"result-\" + fixture.fixture.id}\n      >{`${fixture.fixture.homeGoals} - ${fixture.fixture.awayGoals}`}</div>\n    );\n  } else if (isPrediction === true && matchStatus === \"complete\") {\n    let outcome;\n    let prediction;\n\n    switch (true) {\n      case fixture.fixture.homeGoals > fixture.fixture.awayGoals:\n        outcome = 0;\n        fixture.fixture.winner = fixture.fixture.homeTeam;\n        fixture.fixture.outcome = \"homeWin\";\n        break;\n      case fixture.fixture.homeGoals === fixture.fixture.awayGoals:\n        outcome = 1;\n        fixture.fixture.winner = \"draw\";\n        fixture.fixture.outcome = \"draw\";\n\n        break;\n      case fixture.fixture.homeGoals < fixture.fixture.awayGoals:\n        outcome = 2;\n        fixture.fixture.winner = fixture.fixture.awayTeam;\n        fixture.fixture.outcome = \"awayWin\";\n\n        break;\n      default:\n        break;\n    }\n\n    switch (true) {\n      case fixture.fixture.goalsA > fixture.fixture.goalsB:\n        prediction = 0;\n        break;\n      case fixture.fixture.goalsA === fixture.fixture.goalsB:\n        prediction = 1;\n        break;\n      case fixture.fixture.goalsA < fixture.fixture.goalsB:\n        prediction = 2;\n        break;\n      default:\n        break;\n    }\n    if (outcome === prediction) {\n      if (fixture.fixture.homeOdds !== 0) {\n        switch (true) {\n          case outcome === 0:\n            fixture.fixture.profit = fixture.fixture.homeOdds;\n            break;\n          case outcome === 1:\n            fixture.fixture.profit = fixture.fixture.drawOdds;\n            break;\n          case outcome === 2:\n            fixture.fixture.profit = fixture.fixture.awayOdds;\n            break;\n          default:\n            break;\n        }\n      } else fixture.fixture.profit = 1;\n\n      if (\n        fixture.fixture.goalsA === fixture.fixture.homeGoals &&\n        fixture.fixture.goalsB === fixture.fixture.awayGoals\n      ) {\n        fixture.fixture.exactScore = true;\n        return (\n          <Fragment>\n            <div className=\"Result\">{`${fixture.fixture.homeGoals} - ${fixture.fixture.awayGoals}`}</div>\n            <div\n              className=\"ExactScore\"\n              key={fixture.fixture.homeTeam}\n              data-cy={\"score-\" + fixture.fixture.id}\n            >{`${fixture.fixture.goalsA} - ${fixture.fixture.goalsB}`}</div>\n          </Fragment>\n        );\n      } else {\n        fixture.fixture.exactScore = false;\n        return (\n          <Fragment>\n            <div className=\"Result\">{`${fixture.fixture.homeGoals} - ${fixture.fixture.awayGoals}`}</div>\n            <div\n              className=\"CorrectScore\"\n              key={fixture.fixture.homeTeam}\n              data-cy={\"score-\" + fixture.fixture.id}\n            >{`${fixture.fixture.goalsA} - ${fixture.fixture.goalsB}`}</div>\n          </Fragment>\n        );\n      }\n    } else if (outcome !== prediction) {\n      if (fixture.fixture.homeOdds !== 0) {\n        fixture.fixture.profit = 0;\n      } else {\n        fixture.fixture.profit = 1;\n      }\n      fixture.fixture.exactScore = false;\n      return (\n        <Fragment>\n          <div className=\"Result\">{`${fixture.fixture.homeGoals} - ${fixture.fixture.awayGoals}`}</div>\n          <div\n            className=\"IncorrectScore\"\n            key={fixture.fixture.awayTeam}\n          >{`${fixture.fixture.goalsA} - ${fixture.fixture.goalsB}`}</div>\n        </Fragment>\n      );\n    }\n  } else {\n    return (\n      <Fragment>\n        <div className=\"KOTime\">{`${fixture.fixture.time}`}</div>\n        <div\n          className=\"score\"\n          key={fixture.fixture.awayTeam}\n        >{`${fixture.fixture.goalsA} - ${fixture.fixture.goalsB}`}</div>\n      </Fragment>\n    );\n  }\n}\n\nfunction renderLeagueName(fixture, mock) {\n  mockValue = mock;\n\n  let name = fixture.leagueName;\n  let id =\n    allLeagueResultsArrayOfObjects.length > 0\n      ? allLeagueResultsArrayOfObjects[fixture.leagueIndex].id\n      : null;\n  if (name === null || mock === true) {\n    return <div></div>;\n  } else {\n    return (\n      <div>\n        <div\n          className=\"leagueName\"\n          id={`league${id}`}\n          key={`leagueName${id}div`}\n          onClick={() =>\n            renderTable(\n              fixture.leagueIndex,\n              allLeagueResultsArrayOfObjects[fixture.leagueIndex],\n              id\n            )\n          }\n        >\n          {fixture.leagueName} &#9776;\n        </div>\n        <div\n          className=\"LeagueTable\"\n          key={`leagueName${id}`}\n          id={`leagueName${id}`}\n        ></div>\n      </div>\n    );\n  }\n}\n\nconst downArrow = \"\\u{2195}\";\nconst rightArrow = \"\\u{29C9}\";\n\nexport let testing;\n\nfunction SingleFixture({ fixture, count, mock }) {\n  const dispatch = useDispatch();\n  function StoreData(){\n\n    const fixtureDetails = {\n      id: fixture.id,\n      homeTeamName: fixture.homeTeam,\n      homeId: fixture.homeId,\n      homeTeamBadge: fixture.homeBadge,\n      awayTeamName: fixture.awayTeam,\n      awayId: fixture.awayId,\n      awayTeamBadge: fixture.awayBadge,\n      stadium: fixture.stadium,\n      time: fixture.time,\n      homeGoals: fixture.goalsA,\n      awayGoals: fixture.goalsB\n    }\n\n    const homeDetails = {\n      \"Attacking Strength\": fixture.formHome.attackingStrength,\n      \"Defensive Strength\": fixture.formHome.defensiveStrength\n    }\n\n    const awayDetails = {\n      \"Attacking Strength\": fixture.formAway.attackingStrength,\n      \"Defensive Strength\": fixture.formAway.defensiveStrength\n    }\n\n    const dataToSend = {\n      key1: 'value1',\n      key2: 'value2',\n    };\n    fixture.formHome.defensiveMetrics[\"Clean Sheet Percentage\"] = fixture.formHome.CleanSheetPercentage\n    fixture.formAway.defensiveMetrics[\"Clean Sheet Percentage\"] = fixture.formAway.CleanSheetPercentage\n\n    localStorage.setItem('homeForm', JSON.stringify(fixture.formHome.attackingMetrics));\n    localStorage.setItem('homeFormDef', JSON.stringify(fixture.formHome.defensiveMetrics));\n    localStorage.setItem('allTeamResultsHome', JSON.stringify(fixture.formHome.allTeamResults));\n    localStorage.setItem('homeDetails', JSON.stringify(homeDetails));\n\n\n    localStorage.setItem('awayForm', JSON.stringify(fixture.formAway.attackingMetrics));\n    localStorage.setItem('awayFormDef', JSON.stringify(fixture.formAway.defensiveMetrics));\n    localStorage.setItem('allTeamResultsAway', JSON.stringify(fixture.formAway.allTeamResults));\n    localStorage.setItem('awayDetails', JSON.stringify(awayDetails));\n\n    localStorage.setItem('fixtureDetails', JSON.stringify(fixtureDetails))\n\n    dispatch(setData(dataToSend));\n  }\n\n\n  async function handleButtonClick(game) {\n    if(clicked === true){\n      StoreData(formObjectHome)\n      window.open(\"/#/fixture\");\n    }\n    else return\n  }\n  return (\n    <div key={fixture.game}>\n      {renderLeagueName(fixture, mock)}\n      <div className=\"individualFixtureContainer\">\n        <li\n          className={\"individualFixture\"}\n          key={fixture.id}\n          data-cy={fixture.id}\n        >\n          <div className=\"HomeOdds\">{fixture.fractionHome}</div>\n          <div className=\"homeTeam\">\n            {fixture.homeTeam}\n          </div>\n          <GetDivider\n            result={resultValue}\n            status={fixture.status}\n            fixture={fixture}\n          />\n          {/* <div className=\"divider\">{\"V\"}</div> */}\n          <div className=\"awayTeam\">{fixture.awayTeam}</div>\n          <CreateBadge\n            image={fixture.homeBadge}\n            ClassName=\"HomeBadge\"\n            alt=\"Home team badge\"\n            flexShrink={5}\n          />\n          <CreateBadge\n            image={fixture.awayBadge}\n            ClassName=\"AwayBadge\"\n            alt=\"Away team badge\"\n          />\n          <div className=\"AwayOdds\">{fixture.fractionAway}</div>\n        </li>\n        <button\n          className=\"GameStats\"\n          onClick={() =>\n            mock === false ? createStatsDiv(fixture, count) : null\n          }\n          onMouseDown={() => (count = toggle(count))}\n        >\n          Game overview {downArrow}\n        </button>\n        <button className=\"GameStatsTwo\" onClick={() => handleButtonClick(fixture)}>More detail {rightArrow}</button>\n        {/* <Checkbox/> */}\n      </div>\n      <div id={\"stats\" + fixture.homeTeam} />\n      <div className=\"MatchHistory\" id={\"history\" + fixture.homeTeam} />\n    </div>\n  );\n}\n\nconst List = ({ fixtures, mock }) => (\n  <div>\n    <div id=\"Headers\"></div>\n    <ul className=\"FixtureList\" id=\"FixtureList\">\n      {fixtures.map((fixture, i) => (\n        <SingleFixture\n          fixture={fixture}\n          key={fixture.game}\n          count={count}\n          mock={mock}\n        />\n      ))}\n    </ul>\n  </div>\n);\n\nexport function Fixture(props) {\n  [count, setCount] = useState(false);\n  resultValue = props.result;\n  return (\n    <Provider store={store}>\n      <List\n        fixtures={props.fixtures}\n        result={resultValue}\n        count={count}\n        mock={props.mock}\n      />\n    </Provider>\n  );\n}\n","/Users/gregdorward/Development/football-predictions/src/components/KofiButton.js",[],"/Users/gregdorward/Development/football-predictions/src/components/Chart.js",["245"],"// import { light } from \"@material-ui/core/styles/createPalette\";\n// import { toBePartiallyChecked } from \"@testing-library/jest-dom/dist/matchers\";\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  RadialLinearScale,\n  PointElement,\n  ArcElement,\n  LineElement,\n  Filler,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n} from \"chart.js\";\nimport { Line, Radar, Bar } from \"react-chartjs-2\";\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  RadialLinearScale,\n  PointElement,\n  ArcElement,\n  Filler,\n  BarElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\nexport function Chart(props) {\n  let length;\n  let depth;\n\n  if (props.type === \"Points over time\") {\n    length = props.data1.length * 3;\n    depth = 0;\n  } else if (props.type === \"Rolling average points over last 10\") {\n    length = Math.abs(props.height);\n    depth = 0;\n  } else if (Math.abs(props.height) > Math.abs(props.depth)) {\n    length = Math.abs(props.height);\n    depth = -Math.abs(props.height);\n  } else if (Math.abs(props.height) < Math.abs(props.depth)) {\n    length = Math.abs(props.depth);\n    depth = -Math.abs(props.depth);\n  } else {\n    length = Math.abs(props.depth);\n    depth = -Math.abs(props.depth);\n  }\n\n  const options = {\n    color: \"black\",\n    responsive: true,\n    aspectRatio: 1.2,\n    maintainAspectRatio: true,\n    layout: {\n      padding: 3,\n    },\n    elements: {\n      point: {\n        radius: 0,\n      },\n    },\n    scales: {\n      y: {\n        suggestedMin: depth,\n        suggestedMax: length,\n        // suggestedMax: Math.max(...props.data1) > 3 ? Math.max(...props.data1) : 3,\n        grid: {\n          borderWidth: 1,\n          borderColor: \"black\",\n        },\n        ticks: {\n          font: {\n            size: 12,\n          },\n        },\n      },\n      x: {\n        title: {\n          display: false,\n          text: \"Last X Games\",\n          font: {\n            size: 10,\n          },\n        },\n        grid: {\n          borderWidth: 1,\n          borderColor: \"black\",\n        },\n        ticks: {\n          display: false,\n          font: {\n            size: 12,\n          },\n        },\n      },\n    },\n    plugins: {\n      legend: {\n        position: \"top\",\n\n        labels: {\n          boxHeight: 5,\n        },\n      },\n      title: {\n        display: true,\n        text: props.type,\n        font: {\n          size: 14,\n          color: \"black\",\n        },\n      },\n    },\n  };\n\n  const labels = Array.from(props.data1.keys());\n\n  let data = {\n    labels,\n    datasets: [\n      {\n        label: props.team1,\n        font: {\n          color: \"black\",\n        },\n        data: props.data1,\n        borderColor: \"#030061\",\n        borderWidth: 2,\n        backgroundColor: \"#030061\",\n        tension: props.tension,\n      },\n      {\n        label: props.team2,\n        data: props.data2,\n        borderColor: \"#970d00\",\n        borderWidth: 2,\n        backgroundColor: \"#970d00\",\n        tension: props.tension,\n      },\n    ],\n  };\n\n  return <Line options={options} data={data} />;\n}\n\nexport function RadarChart(props) {\n  const options = {\n    color: \"black\",\n    scales: {\n      r: {\n        angleLines: {\n          display: false,\n        },\n        suggestedMin: 0,\n        suggestedMax: 1,\n        ticks: {\n          precision: 0,\n          display: false,\n        },\n        // grid: {\n        //     circular: true,\n        //   }\n      },\n    },\n    plugins: {\n      legend: {\n        position: \"top\",\n\n        labels: {\n          boxHeight: 10,\n        },\n      },\n      title: {\n        display: true,\n        text: \"XG Tipping Strength Ratings\",\n        font: {\n          size: 14,\n        },\n      },\n    },\n  };\n\n  let data = {\n    labels: [\"Attack rating\", \"Defence rating\", \"Ball retention\", \"XG For\", \"XG Against\", \"Directness\", \"Attacking precision\"],\n    datasets: [\n      {\n        label: props.team1,\n        data: props.data,\n        fill: true,\n        backgroundColor: \"rgba(54, 162, 235, 0.2)\",\n        borderColor: \"#030061\",\n        pointBackgroundColor: \"#030061\",\n        pointBorderColor: \"#fff\",\n        pointHoverBackgroundColor: \"#fff\",\n        pointHoverBorderColor: \"rgb(255, 99, 132)\",\n        borderWidth: 2,\n      },\n      {\n        label: props.team2,\n        data: props.data2,\n        fill: true,\n        backgroundColor: \"rgba(255, 99, 132, 0.2)\",\n        borderColor: \"#970d00\",\n        pointBackgroundColor: \"#970d00\",\n        pointBorderColor: \"#fff\",\n        pointHoverBackgroundColor: \"#fff\",\n        pointHoverBorderColor: \"rgb(54, 162, 235)\",\n        borderWidth: 2,\n      },\n    ],\n  };\n\n  return <Radar options={options} data={data} />;\n}\n\nexport function BarChart(props) {\n  const datasetOne = props.data1;\n  const datasetTwo = props.data2;\n  const sum = datasetTwo.map(function (num, idx) {\n    return num - datasetOne[idx];\n  });\n\n  const max = Math.max(...sum);\n  const min = Math.min(...sum);\n\n  const largest = findLargestNum(max, min);\n\n  function findLargestNum(numOne, numTwo) {\n    const tempArr = [];\n    const firstNum = Math.abs(numOne);\n    const secondNum = Math.abs(numTwo);\n    tempArr.push(firstNum, secondNum);\n\n    return Math.max(...tempArr);\n  }\n\n  const options = {\n    indexAxis: \"y\",\n    // Elements options apply to all of the options unless overridden in a dataset\n    // In this case, we are setting the border of each horizontal bar to be 2px wide\n    aspectRatio: 1.3,\n    elements: {\n      bar: {\n        borderWidth: 2,\n      },\n    },\n    scales: {\n      x: {\n        min: -4,\n        max: 4,\n        ticks: {\n          display: false,\n        },\n      },\n      y: {\n        ticks: {\n          font: {\n            size: 10,\n          },\n        },\n      },\n    },\n    responsive: true,\n    plugins: {\n      legend: {\n        display: false,\n      },\n      tooltip: {\n        enabled: false,\n      },\n      title: {\n        display: true,\n        text: \"Comparison - Home Team | Away Team \",\n      },\n    },\n  };\n\n  const labels = [\n    \"Highest Goals\",\n    \"Fewest Conceeded\",\n    \"Last 5 PPG\",\n    \"Highest XG\",\n    \"Fewest XG Conceeded\",\n    \"Shots On Target\",\n    \"Dangerous Attacks\",\n    \"Av. Possession\",\n    \"Home/Away Goal Diff\",\n    \"Corners\",\n  ];\n\n  const data = {\n    labels,\n    datasets: [\n      {\n        // label: 'Dataset 1',\n        legend: {\n          display: false,\n        },\n        data: sum,\n        backgroundColor(context) {\n          const index = context.dataIndex;\n          const value = context.dataset.data[index];\n          return value < 0 ? \"#030061\" : \"#970d00\";\n        },\n      },\n    ],\n  };\n\n  return <Bar options={options} data={data} />;\n}\n","/Users/gregdorward/Development/football-predictions/src/logic/compareFormTrend.js",["246"],"import { parse } from \"dotenv\";\n\nasync function getOverOrUnderText(xgSum) {\n  let overUnderAchievingSum = xgSum;\n  let text;\n  switch (true) {\n    case overUnderAchievingSum > 1.5:\n      text =\n        \"Underachieving drastically against their expected goal difference.\";\n      break;\n    case overUnderAchievingSum > 1.25 && overUnderAchievingSum <= 1.5:\n      text =\n        \"Underachieving to a large degree against their expected goal difference.\";\n      break;\n    case overUnderAchievingSum > 1 && overUnderAchievingSum <= 1.25:\n      text = \"Underachieving against their expected goal difference.\";\n      break;\n    case overUnderAchievingSum > 0.75 && overUnderAchievingSum <= 1:\n      text =\n        \"Underachieving to a small degree against their expected goal difference.\";\n      break;\n    case overUnderAchievingSum > 0.4 && overUnderAchievingSum <= 0.75:\n      text =\n        \"Underachieving slighly against their expected goal difference.\";\n      break;\n    case overUnderAchievingSum > -0.4 && overUnderAchievingSum <= 0.4:\n      text =\n        \"Roughly tracking on par with their expected goal difference.\";\n      break;\n\n    case overUnderAchievingSum < -0.4 && overUnderAchievingSum >= -0.75:\n      text =\n        \"Overachieving slighly against their expected goal difference.\";\n      break;\n    case overUnderAchievingSum < -0.75 && overUnderAchievingSum >= -1:\n      text =\n        \"Overachieving to a small degree against their expected goal difference.\";\n      break;\n    case overUnderAchievingSum < -1 && overUnderAchievingSum >= -1.25:\n      text = \"Overachieving against their expected goal difference.\";\n      break;\n    case overUnderAchievingSum < -1.25 && overUnderAchievingSum >= -1.5:\n      text =\n        \"Overachieving to a large degree against their expected goal difference.\";\n      break;\n    case overUnderAchievingSum < -1.5:\n      text =\n        \"Overachieving drastically against their expected goal difference.\";\n      break;\n    default:\n      text = \"\";\n      break;\n  }\n  return text;\n}\n\nexport async function diff(a, b) {\n  return parseFloat(a - b).toFixed(2);\n}\n\nasync function getXGDifferential(xgFor, xgAgainst, goalsFor, goalsAgainst) {\n  let xgDiff = xgFor - xgAgainst;\n  let goalDiff = goalsFor - goalsAgainst;\n  let compareXgAndGoalDiff = await diff(xgDiff, goalDiff);\n\n  return compareXgAndGoalDiff;\n}\n\nasync function getAttackingSummary(goalsRecent, goalsLongTerm) {\n\n  let text;\n  if (goalsRecent >= 3) {\n    switch (true) {\n      case goalsRecent > goalsLongTerm:\n        text = \"Free scoring and improving in front of goal recently.\";\n        break;\n      case goalsRecent === goalsLongTerm:\n        text = \"Free scoring and consistent in front of goal.\";\n        break;\n      case goalsRecent < goalsLongTerm:\n        text = \"Free scoring but less so recently.\";\n        break;\n      default:\n        break;\n    }\n  } else if (goalsRecent < 3 && goalsRecent >= 2) {\n    switch (true) {\n      case goalsRecent > goalsLongTerm:\n        text =\n          \"Impressive scoring stats and improving in front of goal recently.\";\n        break;\n      case goalsRecent === goalsLongTerm:\n        text = \"Impressive scoring stats and consistent in front of goal.\";\n        break;\n      case goalsRecent < goalsLongTerm:\n        console.log(goalsRecent)\n        console.log(goalsLongTerm)\n        text = \"Impressive scoring stats but less so recently.\";\n        break;\n      default:\n        break;\n    }\n  } else if (goalsRecent < 2 && goalsRecent >= 1) {\n    switch (true) {\n      case goalsRecent > goalsLongTerm:\n        text = \"Decent scoring stats and improving in front of goal recently.\";\n        break;\n      case goalsRecent === goalsLongTerm:\n        text = \"Decent scoring stats and consistent in front of goal.\";\n        break;\n      case goalsRecent < goalsLongTerm:\n        text = \"Decent scoring stats but less so recently.\";\n        break;\n      default:\n        break;\n    }\n  } else if (goalsRecent < 1 && goalsRecent > 0) {\n    switch (true) {\n      case goalsRecent > goalsLongTerm:\n        text = \"Poor scoring stats but improving in front of goal recently.\";\n        break;\n      case goalsRecent === goalsLongTerm:\n        text = \"Poor scoring stats and consistently poor in front of goal.\";\n        break;\n      case goalsRecent < goalsLongTerm:\n        text = \"Poor scoring stats showing no signs of improvement.\";\n        break;\n      default:\n        break;\n    }\n  } else if (goalsRecent === 0) {\n    switch (true) {\n      case goalsRecent === 0:\n        text = \"Woeful goal stats in recent games.\";\n        break;\n      default:\n        text = \"\";\n        break;\n    }\n  }\n  return text;\n}\n\nasync function getDefenceSummary(cleansheetStat) {\n  let text;\n  switch (true) {\n    case cleansheetStat > 80:\n      text = `Incredibly strong defensively, with ${cleansheetStat}% of their games ending in a cleansheet`;\n      break;\n    case cleansheetStat > 60 && cleansheetStat <= 80:\n      text = `Very strong defensively, with ${cleansheetStat}% of their games ending in a cleansheet`;\n      break;\n    case cleansheetStat > 40 && cleansheetStat <= 60:\n      text = `Defensively impressive, with ${cleansheetStat}% of their games ending in a cleansheet`;\n      break;\n    case cleansheetStat > 20 && cleansheetStat <= 40:\n      text = `Defensively, ${cleansheetStat}% of their games have ended in a cleansheet`;\n      break;\n    case cleansheetStat > 1 && cleansheetStat <= 20:\n      text = `Defensively frail, with only ${cleansheetStat}% of their games ending in a cleansheet`;\n      break;\n      case cleansheetStat === 0:\n        text = `Defensively weak, with ${cleansheetStat}% of their games ending in a cleansheet`;\n        break;\n    default:\n      break;\n  }\n  return text;\n}\n\nasync function GenerateFormSummary(form, lastx, recentForm) {\n  let text;\n  // let six = lastx[2];\n  let ten = lastx[1];\n  let five = lastx[0];\n\n  let xgSum = await getXGDifferential(\n    form.XGOverall,\n    form.XGAgainstAvgOverall,\n    form.ScoredOverall / 10,\n    form.ConcededOverall / 10\n  );\n  let xgText = await getOverOrUnderText(xgSum);\n  let attackString = await getAttackingSummary(\n    form.last5Goals,\n    form.last10Goals\n  );\n  let defenceString = await getDefenceSummary(form.CleanSheetPercentage);\n  let pointsAverageTotal =\n    (parseFloat(five) + parseFloat(ten)) / 2;\n\n  if (pointsAverageTotal >= 2.6) {\n    switch (true) {\n      case five > ten:\n        text =\n          \"Outstanding recent form with improvement over last 5 games.\";\n        break;\n      case five === ten:\n        text =\n          \"Outstanding recent form which has remained steady over the past 10 games.\";\n        break;\n      case five < ten:\n        text = \"Outstanding recent form which has worsened in the last 5.\";\n        break;\n      default:\n        break;\n    }\n  } else if (pointsAverageTotal >= 2.3) {\n    switch (true) {\n      case five > ten:\n        text =\n          \"Excellent recent form with improvement over last 5 games.\";\n        break;\n      case five === ten:\n        text =\n          \"Excellent recent form which has remained steady over the past 10 games.\";\n        break;\n      case five < ten:\n        text = \"Excellent recent form which has worsened in the last 5.\";\n        break;\n      default:\n        break;\n    }\n  } else if (pointsAverageTotal >= 2) {\n    switch (true) {\n      case five > ten:\n        text =\n          \"Very good recent form with improvement over last 5 games.\";\n        break;\n      case five === ten:\n        text =\n          \"Very good recent form which has remained steady over the past 10 games.\";\n        break;\n      case five < ten:\n        text = \"Very good recent form which has worsened in the last 5.\";\n        break;\n      default:\n        break;\n    }\n  } else if (pointsAverageTotal >= 1.7) {\n    switch (true) {\n      case five > ten:\n        text =\n          \"Good recent form with improvement over last 5 games.\";\n        break;\n      case five === ten:\n        text =\n          \"Good recent form which has remained steady over the past 10 games.\";\n        break;\n      case five < ten:\n        text = \"Good recent form which has worsened in the last 5.\";\n        break;\n      default:\n        break;\n    }\n  } else if (pointsAverageTotal >= 1.4) {\n    switch (true) {\n      case five > ten:\n        text =\n          \"Fairly good recent form with improvement over last 5 games.\";\n        break;\n      case five === ten:\n        text =\n          \"Fairly good recent form which has remained steady over the past 10 games.\";\n        break;\n      case five < ten:\n        text = \"Fairly good recent form which has worsened in the last 5.\";\n        break;\n      default:\n        break;\n    }\n  } else if (pointsAverageTotal >= 1.1) {\n    console.log(2);\n    switch (true) {\n      case five > ten:\n        text =\n          \"Average recent form with improvement over last 5 games.\";\n        break;\n      case five === ten:\n        text =\n          \"Average recent form which has remained steady over the past 10 games.\";\n        break;\n      case five < ten:\n        text = \"Average recent form which has worsened in the last 5.\";\n        break;\n      default:\n        break;\n    }\n  } else if (pointsAverageTotal >= 0.8) {\n    switch (true) {\n      case five > ten:\n        text =\n          \"Poor recent form with improvement over last 5 games.\";\n        break;\n      case five === ten:\n        text =\n          \"Poor recent form which has remained steady over the past 10 games.\";\n        break;\n      case five < ten:\n        text = \"Poor recent form which has worsened in the last 5.\";\n        break;\n      default:\n        break;\n    }\n  } else if (pointsAverageTotal >= 0.5) {\n    switch (true) {\n      case five > ten:\n        text =\n          \"Very poor recent form with improvement over last 5 games.\";\n        break;\n      case five === ten:\n        text =\n          \"Very poor recent form which has remained steady over the past 10 games.\";\n        break;\n      case five < ten:\n        text = \"Very poor recent form which has worsened in the last 5.\";\n        break;\n      default:\n        break;\n    }\n  } else if (pointsAverageTotal < 0.5) {\n    switch (true) {\n      case five > ten:\n        text =\n          \"Terrible recent form with improvement over last 5 games.\";\n        break;\n      case five === ten:\n        text =\n          \"Terrible recent form which has remained steady over the past 10 games.\";\n        break;\n      case five < ten:\n        text = \"Terrible recent form which has worsened in the last 5.\";\n        break;\n      default:\n        break;\n    }\n  } else {\n    console.log(pointsAverageTotal);\n  }\n  return text + ` ${xgText} ${attackString} ${defenceString}`;\n}\n\nexport default GenerateFormSummary;\n","/Users/gregdorward/Development/football-predictions/src/components/Toggle.js",[],["247","248"],"/Users/gregdorward/Development/football-predictions/src/components/Carousel.js",["249"],"import { getThemeProps } from \"@material-ui/styles\";\nimport SwiperCore, { EffectCoverflow, Pagination } from \"swiper\";\nimport { Swiper, SwiperSlide } from \"swiper/react\";\nimport \"swiper/swiper-bundle.min.css\";\nimport \"swiper/swiper.min.css\";\n\nSwiperCore.use([EffectCoverflow, Pagination]);\n\nexport const Slider = (props) => {\n  return (\n    <Swiper\n      effect={\"coverflow\"}\n      autoHeight={true}\n      grabCursor={true}\n      centeredSlides={true}\n      slidesPerView={1}\n      coverflowEffect={{\n        rotate: 50,\n        stretch: 0,\n        depth: 100,\n        modifier: 1,\n        slideShadows: false,\n      }}\n      pagination={{ clickable: true }}\n      className=\"mySwiper\"\n    >\n      <SwiperSlide>\n       {props.element}\n      </SwiperSlide>\n      <SwiperSlide>\n      {props.element2}\n      </SwiperSlide>\n      <SwiperSlide>\n      {props.element3}\n      </SwiperSlide>\n      <SwiperSlide>\n      {props.element4}\n      </SwiperSlide>\n      <SwiperSlide>\n      {props.element5}\n      </SwiperSlide>\n    </Swiper>\n  );\n};\n","/Users/gregdorward/Development/football-predictions/src/components/DayPicker.js",[],["250","251"],"/Users/gregdorward/Development/football-predictions/src/components/DateForm.js",[],"/Users/gregdorward/Development/football-predictions/src/logic/dataSlice.js",[],"/Users/gregdorward/Development/football-predictions/src/logic/store.js",[],"/Users/gregdorward/Development/football-predictions/src/components/Team.js",["252","253"],"import React, { useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { CreateBadge } from \"./createBadge\";\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n} from \"chart.js\";\nimport { Bar } from \"react-chartjs-2\";\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\nlet stadium;\n\n// async function getGameDetails(id){\n// const gameDetails = await fetch(`${process.env.REACT_APP_EXPRESS_SERVER}match/${id}`)\n// await gameDetails.json().then((game) => {\n//   console.log(game.data)\n//   stadium = game.data.stadium_name\n// });\n// }\n\nfunction TeamPage() {\n  const [dataState, setData] = useState([]);\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    try {\n      const responseHome = await fetch(\n        `${process.env.REACT_APP_EXPRESS_SERVER}team/${storedFixtureDetailsJson.homeId}`\n      );\n      const resultHome = await responseHome.json();\n\n      const responseAway = await fetch(\n        `${process.env.REACT_APP_EXPRESS_SERVER}team/${storedFixtureDetailsJson.awayId}`\n      );\n      const resultAway = await responseAway.json();\n      // setData(result.data.stadium_name);\n\n      let indexHome = resultHome.data.findIndex(\n        (x) => x.season_format === \"Domestic League\"\n      );\n      let indexAway = resultAway.data.findIndex(\n        (x) => x.season_format === \"Domestic League\"\n      );\n\n      setData((test) => ({\n        ...test,\n        scoredOverallHome:\n          resultHome.data[indexHome].stats.seasonScoredNum_overall,\n        playedHomeOnly:\n          resultHome.data[indexHome].stats.seasonMatchesPlayed_home,\n        scoredOverallHomeOnly:\n          resultHome.data[indexHome].stats.seasonScoredNum_home,\n        conceededOverallHome:\n          resultHome.data[indexHome].stats.seasonConcededNum_overall,\n        conceededOverallHomeOnly:\n          resultHome.data[indexHome].stats.seasonConcededNum_home,\n\n        PPGOverallHome: resultHome.data[indexHome].stats.seasonPPG_overall,\n        PPGOverallHomeOnly: resultHome.data[indexHome].stats.seasonPPG_home,\n        leaguePosition_overallHome:\n          resultHome.data[indexHome].stats.leaguePosition_overall,\n        leaguePosition_HomeOnly:\n          resultHome.data[indexHome].stats.leaguePosition_home,\n        averageAttendance:\n          resultHome.data[indexHome].stats.average_attendance_home,\n        BTTSPercentage_overallHome:\n          resultHome.data[indexHome].stats.seasonBTTSPercentage_overall,\n        BTTSAndWinPercentage_Home:\n          resultHome.data[indexHome].stats.BTTS_and_win_percentage_overall,\n        BTTSAndLosePercentage_Home:\n          resultHome.data[indexHome].stats.BTTS_and_lose_percentage_overall,\n        BTTSBothHalvesHome:\n          resultHome.data[indexHome].stats.BTTS_both_halves_percentage_overall,\n        GoalDifferenceHT_overall_Home:\n          resultHome.data[indexHome].stats.GoalDifferenceHT_overall,\n        GD_2hg_overall_Home: resultHome.data[indexHome].stats.gd_2hg_overall,\n        leadingAtHTPercentage_overallHome:\n          resultHome.data[indexHome].stats.leadingAtHTPercentage_overall,\n        seasonOver15Percentage_overallHome:\n          resultHome.data[indexHome].stats.seasonOver15Percentage_overall,\n        seasonOver25Percentage_overallHome:\n          resultHome.data[indexHome].stats.seasonOver25Percentage_overall,\n        seasonOver35Percentage_overallHome:\n          resultHome.data[indexHome].stats.seasonOver35Percentage_overall,\n        seasonOver45Percentage_overallHome:\n          resultHome.data[indexHome].stats.seasonOver45Percentage_overall,\n        scoredBothHalvesPercentage_overallHome:\n          resultHome.data[indexHome].stats.scoredBothHalvesPercentage_overall,\n        shots_on_target_per_goals_scored_overallHome:\n          resultHome.data[indexHome].stats.additional_info\n            .shots_on_target_per_goals_scored_overall,\n        cornersTotalAVG_overallHome:\n          resultHome.data[indexHome].stats.cornersTotalAVG_overall,\n        cardsAVG_overallHome: resultHome.data[indexHome].stats.cardsAVG_overall,\n        foulsAVG_overallHome: resultHome.data[indexHome].stats.foulsAVG_overall,\n        penalties_won_per_match_overallHome:\n          resultHome.data[indexHome].stats.additional_info\n            .penalties_won_per_match_overall,\n        penalty_in_a_match_percentage_overallHome:\n          resultHome.data[indexHome].stats.additional_info\n            .penalty_in_a_match_percentage_overall,\n\n        scoredOverallAway:\n          resultAway.data[indexAway].stats.seasonScoredNum_overall,\n        playedAwayOnly:\n          resultAway.data[indexAway].stats.seasonMatchesPlayed_away,\n        scoredOverallAwayOnly:\n          resultAway.data[indexAway].stats.seasonScoredNum_away,\n        conceededOverallAway:\n          resultAway.data[indexAway].stats.seasonConcededNum_overall,\n        conceededOverallAwayOnly:\n          resultAway.data[indexAway].stats.seasonConcededNum_away,\n\n        PPGOverallAway: resultAway.data[indexAway].stats.seasonPPG_overall,\n        PPGOverallAwayOnly: resultAway.data[indexAway].stats.seasonPPG_away,\n        leaguePosition_overallAway:\n          resultAway.data[indexAway].stats.leaguePosition_overall,\n        leaguePosition_AwayOnly:\n          resultAway.data[indexAway].stats.leaguePosition_away,\n        BTTSPercentage_overallAway:\n          resultAway.data[indexAway].stats.seasonBTTSPercentage_overall,\n        BTTSAndWinPercentage_Away:\n          resultAway.data[indexAway].stats.BTTS_and_win_percentage_overall,\n        BTTSAndLosePercentage_Away:\n          resultAway.data[indexAway].stats.BTTS_and_lose_percentage_overall,\n        BTTSBothHalvesAway:\n          resultAway.data[indexAway].stats.BTTS_both_halves_percentage_overall,\n        GoalDifferenceHT_overall_Away:\n          resultAway.data[indexAway].stats.GoalDifferenceHT_overall,\n        GD_2hg_overall_Away: resultAway.data[indexAway].stats.gd_2hg_overall,\n        leadingAtHTPercentage_overallAway:\n          resultAway.data[indexAway].stats.leadingAtHTPercentage_overall,\n        seasonOver15Percentage_overallAway:\n          resultAway.data[indexAway].stats.seasonOver15Percentage_overall,\n        seasonOver25Percentage_overallAway:\n          resultAway.data[indexAway].stats.seasonOver25Percentage_overall,\n        seasonOver35Percentage_overallAway:\n          resultAway.data[indexAway].stats.seasonOver35Percentage_overall,\n        seasonOver45Percentage_overallAway:\n          resultAway.data[indexAway].stats.seasonOver45Percentage_overall,\n        scoredBothHalvesPercentage_overallAway:\n          resultAway.data[indexAway].stats.scoredBothHalvesPercentage_overall,\n        shots_on_target_per_goals_scored_overallAway:\n          resultAway.data[indexAway].stats.additional_info\n            .shots_on_target_per_goals_scored_overall,\n\n        cornersTotalAVG_overallAway:\n          resultAway.data[indexAway].stats.cornersTotalAVG_overall,\n        cardsAVG_overallAway: resultAway.data[indexAway].stats.cardsAVG_overall,\n        foulsAVG_overallAway: resultAway.data[indexAway].stats.foulsAVG_overall,\n        penalties_won_per_match_overallAway:\n          resultAway.data[indexAway].stats.additional_info\n            .penalties_won_per_match_overall,\n        penalty_in_a_match_percentage_overallAway:\n          resultAway.data[indexAway].stats.additional_info\n            .penalty_in_a_match_percentage_overall,\n      }));\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    }\n  };\n\n  // useEffect(() => {\n  //   async function apiCall() {\n  //     const apiResponse = await fetch(`${process.env.REACT_APP_EXPRESS_SERVER}match/${storedFixtureDetailsJson.id}`);\n  //     await apiResponse.json().then((game) => {\n  //         console.log(game.data)\n  //         stadium = game.data.stadium_name\n  //         console.log(stadium)\n  //       });\n  //   }\n  //   apiCall();\n  // });\n\n  const storedDataHome = useSelector((state) => state.data.dataHome);\n  const jsonDataHome = JSON.parse(storedDataHome);\n  const propertyNamesHome = Object.entries(jsonDataHome);\n\n  const storedDataHomeDef = useSelector((state) => state.data.dataHomeDef);\n  const jsonDataHomeDef = JSON.parse(storedDataHomeDef);\n  const propertyNamesHomeDef = Object.entries(jsonDataHomeDef);\n\n  const storedDataallTeamResultsHome = useSelector(\n    (state) => state.data.allTeamResultsHome\n  );\n  const jsonDataallTeamResultsHome = JSON.parse(storedDataallTeamResultsHome);\n  const propertyNamesallTeamResultsHome = Object.values(\n    jsonDataallTeamResultsHome\n  );\n\n  const homeDetails = useSelector((state) => state.data.homeDetails);\n  const jsonHomeDetails = JSON.parse(homeDetails);\n\n  const storedDataAway = useSelector((state) => state.data.dataAway);\n  const jsonDataAway = JSON.parse(storedDataAway);\n  const propertyNamesAway = Object.entries(jsonDataAway);\n\n  const storedDataAwayDef = useSelector((state) => state.data.dataAwayDef);\n  const jsonDataAwayDef = JSON.parse(storedDataAwayDef);\n  const propertyNamesAwayDef = Object.entries(jsonDataAwayDef);\n\n  const storedDataallTeamResultsAway = useSelector(\n    (state) => state.data.allTeamResultsAway\n  );\n  const jsonDataallTeamResultsAway = JSON.parse(storedDataallTeamResultsAway);\n  const propertyNamesallTeamResultsAway = Object.values(\n    jsonDataallTeamResultsAway\n  );\n\n  const awayDetails = useSelector((state) => state.data.awayDetails);\n  const jsonAwayDetails = JSON.parse(awayDetails);\n\n  const storedFixtureDetails = useSelector(\n    (state) => state.data.fixtureDetails\n  );\n  const storedFixtureDetailsJson = JSON.parse(storedFixtureDetails);\n\n  const options = {\n    plugins: {\n      title: {\n        display: true,\n        text: \"Team comparison\",\n      },\n    },\n    aspectRatio: 0.5,\n    maintainAspectRatio: true,\n    responsive: true,\n    scales: {\n      x: {\n        stacked: true,\n      },\n      y: {\n        stacked: true,\n        display: false,\n      },\n    },\n  };\n  const labels = [\n    storedFixtureDetailsJson.homeTeamName,\n    storedFixtureDetailsJson.awayTeamName,\n  ];\n\n  const data = {\n    labels,\n    datasets: [\n      {\n        data: [\n          jsonHomeDetails[\"Attacking Strength\"],\n          [jsonAwayDetails[\"Attacking Strength\"]],\n        ],\n        label: \"Attacking Strength\",\n        backgroundColor: \"#030061\",\n      },\n      {\n        data: [\n          jsonHomeDetails[\"Defensive Strength\"],\n          [jsonAwayDetails[\"Defensive Strength\"]],\n        ],\n        label: \"Defensive Strength\",\n        backgroundColor: \"#CC3314\",\n      },\n    ],\n  };\n\n  return (\n    <div className=\"TeamStatsContainer\">\n      <div className=\"FixtureHeadingContiner\">\n        <CreateBadge\n          image={storedFixtureDetailsJson.homeTeamBadge}\n          ClassName=\"HomeTeamBadge\"\n          alt=\"Home team badge\"\n        ></CreateBadge>\n        {`${storedFixtureDetailsJson.homeTeamName} v ${storedFixtureDetailsJson.awayTeamName}`}\n        <CreateBadge\n          image={storedFixtureDetailsJson.awayTeamBadge}\n          ClassName=\"AwayTeamBadge\"\n          alt=\"Away team badge\"\n        ></CreateBadge>\n      </div>\n      <h3>\n        {storedFixtureDetailsJson.stadium} KO: {storedFixtureDetailsJson.time} |\n        Average Attendance: {dataState.averageAttendance}\n      </h3>\n      <h3>\n        XGTipping Prediction: {storedFixtureDetailsJson.homeGoals} -{\" \"}\n        {storedFixtureDetailsJson.awayGoals}\n      </h3>\n      <div className=\"TeamStats\">\n        <ul className=\"HomeTeamStats\">\n          <h3>{storedFixtureDetailsJson.homeTeamName}</h3>\n          {propertyNamesHome.map(([key, value], index) => (\n            <li key={index}>\n              <strong>{key}:</strong>{\" \"}\n              {typeof value === \"object\" ? JSON.stringify(value) : value}\n            </li>\n          ))}\n          <ul className=\"HomeTeamStats\">\n            {propertyNamesHomeDef.map(([key, value], index) => (\n              <li key={index}>\n                <strong>{key}:</strong>{\" \"}\n                {typeof value === \"object\" ? JSON.stringify(value) : value}\n              </li>\n            ))}\n          </ul>\n          <li>Scored overall: {dataState.scoredOverallHome}</li>\n          <li>Conceeded overall: {dataState.conceededOverallHome}</li>\n          <li>\n            Average scored home only:{\" \"}\n            {(\n              dataState.scoredOverallHomeOnly / dataState.playedHomeOnly\n            ).toFixed(2)}\n          </li>\n          <li>\n            Average conceeded home only:{\" \"}\n            {(\n              dataState.conceededOverallHomeOnly / dataState.playedHomeOnly\n            ).toFixed(2)}\n          </li>\n          <li>PPG overall: {dataState.PPGOverallHome}</li>\n          <li>PPG home only: {dataState.PPGOverallHomeOnly}</li>\n          <li>League position: {dataState.leaguePosition_overallHome}</li>\n          <li>\n            League position home only: {dataState.leaguePosition_HomeOnly}\n          </li>\n          <li>BTTS {dataState.BTTSPercentage_overallHome}%</li>\n          <li>BTTS and win: {dataState.BTTSAndWinPercentage_Home}%</li>\n          <li>BTTS and lose: {dataState.BTTSAndLosePercentage_Home}%</li>\n          <li>BTTS both halves: {dataState.BTTSBothHalvesHome}%</li>\n          <li>\n            Goal diff 1st half only: {dataState.GoalDifferenceHT_overall_Home}\n          </li>\n          <li>Goal diff 2nd half only: {dataState.GD_2hg_overall_Home}</li>\n          <li>\n            Leading at half time: {dataState.leadingAtHTPercentage_overallHome}%\n          </li>\n          <li>\n            Over 1.5 goals in games:{\" \"}\n            {dataState.seasonOver15Percentage_overallHome}%\n          </li>\n          <li>\n            Over 2.5 goals in games:{\" \"}\n            {dataState.seasonOver25Percentage_overallHome}%\n          </li>\n          <li>\n            Over 3.5 goals in games:{\" \"}\n            {dataState.seasonOver35Percentage_overallHome}%\n          </li>\n          <li>\n            Over 4.5 goals in games:{\" \"}\n            {dataState.seasonOver45Percentage_overallHome}%\n          </li>\n          <li>\n            Scored both halves:{\" \"}\n            {dataState.scoredBothHalvesPercentage_overallHome}%\n          </li>\n          <li>\n            SOTs per goal:{\" \"}\n            {dataState.shots_on_target_per_goals_scored_overallHome}\n          </li>\n          <li>Corners in game avg: {dataState.cornersTotalAVG_overallHome}</li>\n          <li>Cards avg: {dataState.cardsAVG_overallHome}</li>\n          <li>Fouls against avg: {dataState.foulsAVG_overallHome}</li>\n          <li>\n            Penalties won avg: {dataState.penalties_won_per_match_overallHome}\n          </li>\n          <li>\n            Penalties in match:{\" \"}\n            {dataState.penalty_in_a_match_percentage_overallHome}%\n          </li>\n        </ul>\n        <ul className=\"AwayTeamStats\">\n          <h3>{storedFixtureDetailsJson.awayTeamName}</h3>\n          {propertyNamesAway.map(([key, value], index) => (\n            <li key={index}>\n              <strong>{key}:</strong>{\" \"}\n              {typeof value === \"object\" ? JSON.stringify(value) : value}\n            </li>\n          ))}\n          <ul className=\"AwayTeamStats\">\n            {propertyNamesAwayDef.map(([key, value], index) => (\n              <li key={index}>\n                <strong>{key}:</strong>{\" \"}\n                {typeof value === \"object\" ? JSON.stringify(value) : value}\n              </li>\n            ))}\n          </ul>\n          <li>Scored overall: {dataState.scoredOverallAway}</li>\n          <li>Conceeded overall: {dataState.conceededOverallAway}</li>\n          <li>\n            Average scored away only:{\" \"}\n            {(\n              dataState.scoredOverallAwayOnly / dataState.playedAwayOnly\n            ).toFixed(2)}\n          </li>\n          <li>\n            Average conceeded away only:{\" \"}\n            {(\n              dataState.conceededOverallAwayOnly / dataState.playedAwayOnly\n            ).toFixed(2)}\n          </li>\n          <li>PPG overall: {dataState.PPGOverallAway}</li>\n          <li>PPG away only: {dataState.PPGOverallAwayOnly}</li>\n          <li>League position: {dataState.leaguePosition_overallAway}</li>\n          <li>\n            League position away only: {dataState.leaguePosition_AwayOnly}\n          </li>\n          <li>BTTS: {dataState.BTTSPercentage_overallAway}%</li>\n          <li>BTTS and win: {dataState.BTTSAndWinPercentage_Away}%</li>\n          <li>BTTS and lose: {dataState.BTTSAndLosePercentage_Away}%</li>\n          <li>BTTS both halves: {dataState.BTTSBothHalvesAway}%</li>\n          <li>\n            Goal diff 1st half only: {dataState.GoalDifferenceHT_overall_Away}\n          </li>\n          <li>Goal diff 2nd half only: {dataState.GD_2hg_overall_Away}</li>\n          <li>\n            Leading at half time: {dataState.leadingAtHTPercentage_overallAway}%\n          </li>\n          <li>\n            Over 1.5 goals in games:{\" \"}\n            {dataState.seasonOver15Percentage_overallAway}%\n          </li>\n          <li>\n            Over 2.5 goals in games:{\" \"}\n            {dataState.seasonOver25Percentage_overallAway}%\n          </li>\n          <li>\n            Over 3.5 goals in games:{\" \"}\n            {dataState.seasonOver35Percentage_overallAway}%\n          </li>\n          <li>\n            Over 4.5 goals in games:{\" \"}\n            {dataState.seasonOver45Percentage_overallAway}%\n          </li>\n          <li>\n            Scored both halves:{\" \"}\n            {dataState.scoredBothHalvesPercentage_overallAway}%\n          </li>\n          <li>\n            SOTs per goal:{\" \"}\n            {dataState.shots_on_target_per_goals_scored_overallAway}\n          </li>\n          <li>Corners in game avg: {dataState.cornersTotalAVG_overallAway}</li>\n          <li>Cards avg: {dataState.cardsAVG_overallAway}</li>\n          <li>Fouls against avg: {dataState.foulsAVG_overallAway}</li>\n          <li>\n            Penalties won avg: {dataState.penalties_won_per_match_overallAway}\n          </li>\n          <li>\n            Penalties in match:{\" \"}\n            {dataState.penalty_in_a_match_percentage_overallAway}%\n          </li>\n        </ul>\n        <div className=\"ChartContainer\">\n          <span className=\"Spacer\"></span>\n          <Bar options={options} data={data} className=\"ComparisonBar\" />\n          <span className=\"Spacer\"></span>\n        </div>\n        <ul className=\"HomeTeamResults\">\n          {propertyNamesallTeamResultsHome.map((match, index) => (\n            <>\n              <div className=\"MatchDate\">{match.date}</div>\n              <div className=\"ResultRowOverviewSmall\">\n                <div className=\"columnOverviewHomeSmall\">{match.homeTeam}</div>\n                <span className=\"columnOverviewScoreSmall\">\n                  {match.homeGoals} : {match.awayGoals}\n                </span>\n                <div className=\"columnOverviewAwaySmall\">{match.awayTeam}</div>\n              </div>\n            </>\n          ))}\n        </ul>\n        <ul className=\"AwayTeamResults\">\n          {propertyNamesallTeamResultsAway.map((match, index) => (\n            <>\n              <div className=\"MatchDate\">{match.date}</div>\n              <div className=\"ResultRowOverviewSmall\">\n                <div className=\"columnOverviewHomeSmall\">{match.homeTeam}</div>\n                <span className=\"columnOverviewScoreSmall\">\n                  {match.homeGoals} : {match.awayGoals}\n                </span>\n                <div className=\"columnOverviewAwaySmall\">{match.awayTeam}</div>\n              </div>\n            </>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default TeamPage;\n","/Users/gregdorward/Development/football-predictions/src/components/Checkbox.js",[],{"ruleId":"254","severity":1,"message":"255","line":6,"column":27,"nodeType":"256","messageId":"257","endLine":6,"endColumn":33},{"ruleId":"254","severity":1,"message":"258","line":8,"column":9,"nodeType":"256","messageId":"257","endLine":8,"endColumn":16},{"ruleId":"259","replacedBy":"260"},{"ruleId":"261","replacedBy":"262"},{"ruleId":"254","severity":1,"message":"263","line":10,"column":10,"nodeType":"256","messageId":"257","endLine":10,"endColumn":26},{"ruleId":"254","severity":1,"message":"264","line":11,"column":8,"nodeType":"256","messageId":"257","endLine":11,"endColumn":17},{"ruleId":"254","severity":1,"message":"255","line":24,"column":27,"nodeType":"256","messageId":"257","endLine":24,"endColumn":33},{"ruleId":"254","severity":1,"message":"265","line":24,"column":35,"nodeType":"256","messageId":"257","endLine":24,"endColumn":40},{"ruleId":"254","severity":1,"message":"266","line":24,"column":42,"nodeType":"256","messageId":"257","endLine":24,"endColumn":48},{"ruleId":"254","severity":1,"message":"267","line":24,"column":50,"nodeType":"256","messageId":"257","endLine":24,"endColumn":54},{"ruleId":"254","severity":1,"message":"268","line":25,"column":8,"nodeType":"256","messageId":"257","endLine":25,"endColumn":16},{"ruleId":"254","severity":1,"message":"269","line":27,"column":10,"nodeType":"256","messageId":"257","endLine":27,"endColumn":24},{"ruleId":"254","severity":1,"message":"270","line":30,"column":8,"nodeType":"256","messageId":"257","endLine":30,"endColumn":16},{"ruleId":"254","severity":1,"message":"271","line":88,"column":5,"nodeType":"256","messageId":"257","endLine":88,"endColumn":10},{"ruleId":"254","severity":1,"message":"272","line":89,"column":5,"nodeType":"256","messageId":"257","endLine":89,"endColumn":14},{"ruleId":"254","severity":1,"message":"273","line":90,"column":5,"nodeType":"256","messageId":"257","endLine":90,"endColumn":24},{"ruleId":"254","severity":1,"message":"274","line":93,"column":5,"nodeType":"256","messageId":"257","endLine":93,"endColumn":13},{"ruleId":"254","severity":1,"message":"275","line":94,"column":5,"nodeType":"256","messageId":"257","endLine":94,"endColumn":23},{"ruleId":"254","severity":1,"message":"276","line":150,"column":18,"nodeType":"256","messageId":"257","endLine":150,"endColumn":31},{"ruleId":"254","severity":1,"message":"277","line":480,"column":16,"nodeType":"256","messageId":"257","endLine":480,"endColumn":40},{"ruleId":"254","severity":1,"message":"278","line":509,"column":16,"nodeType":"256","messageId":"257","endLine":509,"endColumn":39},{"ruleId":"254","severity":1,"message":"279","line":203,"column":16,"nodeType":"256","messageId":"257","endLine":203,"endColumn":30},{"ruleId":"254","severity":1,"message":"280","line":218,"column":16,"nodeType":"256","messageId":"257","endLine":218,"endColumn":22},{"ruleId":"254","severity":1,"message":"281","line":753,"column":11,"nodeType":"256","messageId":"257","endLine":753,"endColumn":17},{"ruleId":"254","severity":1,"message":"282","line":4,"column":7,"nodeType":"256","messageId":"257","endLine":4,"endColumn":17},{"ruleId":"254","severity":1,"message":"258","line":4,"column":10,"nodeType":"256","messageId":"257","endLine":4,"endColumn":17},{"ruleId":"254","severity":1,"message":"283","line":8,"column":19,"nodeType":"256","messageId":"257","endLine":8,"endColumn":28},{"ruleId":"254","severity":1,"message":"284","line":62,"column":5,"nodeType":"256","messageId":"257","endLine":62,"endColumn":13},{"ruleId":"254","severity":1,"message":"285","line":293,"column":11,"nodeType":"256","messageId":"257","endLine":293,"endColumn":21},{"ruleId":"254","severity":1,"message":"286","line":611,"column":5,"nodeType":"256","messageId":"257","endLine":611,"endColumn":11},{"ruleId":"254","severity":1,"message":"287","line":852,"column":16,"nodeType":"256","messageId":"257","endLine":852,"endColumn":33},{"ruleId":"254","severity":1,"message":"288","line":1069,"column":9,"nodeType":"256","messageId":"257","endLine":1069,"endColumn":24},{"ruleId":"254","severity":1,"message":"289","line":1074,"column":9,"nodeType":"256","messageId":"257","endLine":1074,"endColumn":28},{"ruleId":"254","severity":1,"message":"290","line":1106,"column":9,"nodeType":"256","messageId":"257","endLine":1106,"endColumn":50},{"ruleId":"254","severity":1,"message":"291","line":1137,"column":5,"nodeType":"256","messageId":"257","endLine":1137,"endColumn":18},{"ruleId":"254","severity":1,"message":"292","line":1288,"column":7,"nodeType":"256","messageId":"257","endLine":1288,"endColumn":16},{"ruleId":"254","severity":1,"message":"293","line":1311,"column":5,"nodeType":"256","messageId":"257","endLine":1311,"endColumn":6},{"ruleId":"254","severity":1,"message":"294","line":1933,"column":9,"nodeType":"256","messageId":"257","endLine":1933,"endColumn":40},{"ruleId":"254","severity":1,"message":"295","line":1937,"column":9,"nodeType":"256","messageId":"257","endLine":1937,"endColumn":40},{"ruleId":"254","severity":1,"message":"296","line":1,"column":17,"nodeType":"256","messageId":"257","endLine":1,"endColumn":26},{"ruleId":"259","replacedBy":"297"},{"ruleId":"261","replacedBy":"298"},{"ruleId":"254","severity":1,"message":"299","line":5,"column":19,"nodeType":"256","messageId":"257","endLine":5,"endColumn":49},{"ruleId":"254","severity":1,"message":"300","line":8,"column":10,"nodeType":"256","messageId":"257","endLine":8,"endColumn":21},{"ruleId":"254","severity":1,"message":"301","line":9,"column":10,"nodeType":"256","messageId":"257","endLine":9,"endColumn":18},{"ruleId":"254","severity":1,"message":"302","line":446,"column":16,"nodeType":"256","messageId":"257","endLine":446,"endColumn":20},{"ruleId":"254","severity":1,"message":"303","line":484,"column":11,"nodeType":"256","messageId":"257","endLine":484,"endColumn":29},{"ruleId":"254","severity":1,"message":"304","line":485,"column":11,"nodeType":"256","messageId":"257","endLine":485,"endColumn":29},{"ruleId":"254","severity":1,"message":"305","line":643,"column":17,"nodeType":"256","messageId":"257","endLine":643,"endColumn":34},{"ruleId":"254","severity":1,"message":"306","line":644,"column":17,"nodeType":"256","messageId":"257","endLine":644,"endColumn":42},{"ruleId":"254","severity":1,"message":"307","line":645,"column":17,"nodeType":"256","messageId":"257","endLine":645,"endColumn":45},{"ruleId":"254","severity":1,"message":"308","line":748,"column":11,"nodeType":"256","messageId":"257","endLine":748,"endColumn":19},{"ruleId":"254","severity":1,"message":"309","line":1052,"column":28,"nodeType":"256","messageId":"257","endLine":1052,"endColumn":41},{"ruleId":"254","severity":1,"message":"310","line":1055,"column":28,"nodeType":"256","messageId":"257","endLine":1055,"endColumn":41},{"ruleId":"254","severity":1,"message":"311","line":1059,"column":11,"nodeType":"256","messageId":"257","endLine":1059,"endColumn":30},{"ruleId":"254","severity":1,"message":"312","line":1068,"column":11,"nodeType":"256","messageId":"257","endLine":1068,"endColumn":30},{"ruleId":"259","replacedBy":"313"},{"ruleId":"261","replacedBy":"314"},{"ruleId":"254","severity":1,"message":"315","line":9,"column":8,"nodeType":"256","messageId":"257","endLine":9,"endColumn":13},{"ruleId":"254","severity":1,"message":"300","line":11,"column":10,"nodeType":"256","messageId":"257","endLine":11,"endColumn":21},{"ruleId":"254","severity":1,"message":"316","line":12,"column":10,"nodeType":"256","messageId":"257","endLine":12,"endColumn":16},{"ruleId":"254","severity":1,"message":"317","line":3,"column":8,"nodeType":"256","messageId":"257","endLine":3,"endColumn":19},{"ruleId":"254","severity":1,"message":"318","line":4,"column":10,"nodeType":"256","messageId":"257","endLine":4,"endColumn":18},{"ruleId":"254","severity":1,"message":"319","line":8,"column":10,"nodeType":"256","messageId":"257","endLine":8,"endColumn":14},{"ruleId":"254","severity":1,"message":"320","line":8,"column":16,"nodeType":"256","messageId":"257","endLine":8,"endColumn":27},{"ruleId":"254","severity":1,"message":"321","line":9,"column":10,"nodeType":"256","messageId":"257","endLine":9,"endColumn":14},{"ruleId":"254","severity":1,"message":"322","line":20,"column":5,"nodeType":"256","messageId":"257","endLine":20,"endColumn":13},{"ruleId":"254","severity":1,"message":"323","line":231,"column":9,"nodeType":"256","messageId":"257","endLine":231,"endColumn":16},{"ruleId":"254","severity":1,"message":"324","line":1,"column":10,"nodeType":"256","messageId":"257","endLine":1,"endColumn":15},{"ruleId":"259","replacedBy":"325"},{"ruleId":"261","replacedBy":"326"},{"ruleId":"254","severity":1,"message":"327","line":1,"column":10,"nodeType":"256","messageId":"257","endLine":1,"endColumn":23},{"ruleId":"259","replacedBy":"328"},{"ruleId":"261","replacedBy":"329"},{"ruleId":"254","severity":1,"message":"330","line":23,"column":5,"nodeType":"256","messageId":"257","endLine":23,"endColumn":12},{"ruleId":"331","severity":1,"message":"332","line":38,"column":6,"nodeType":"333","endLine":38,"endColumn":8,"suggestions":"334"},"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'Fixture' is defined but never used.","no-native-reassign",["335"],"no-negated-in-lhs",["336"],"'StyledKofiButton' is defined but never used.","'DateField' is defined but never used.","'Route' is defined but never used.","'Routes' is defined but never used.","'Link' is defined but never used.","'TeamPage' is defined but never used.","'selectedOption' is defined but never used.","'reactDom' is defined but never used.","'value' is assigned a value but never used.","'yesterday' is assigned a value but never used.","'yesterdayFootyStats' is assigned a value but never used.","'historic' is assigned a value but never used.","'historicFootyStats' is assigned a value but never used.","'incrementDate' is defined but never used.","'getHighestScoringLeagues' is defined but never used.","'getLowestScoringLeagues' is defined but never used.","'getTableLayout' is defined but never used.","'sorted' is defined but never used.","'exists' is assigned a value but never used.","'shouldOpen' is assigned a value but never used.","'dateStamp' is defined but never used.","'userTips' is assigned a value but never used.","'totalCount' is assigned a value but never used.","'getEMA' is assigned a value but never used.","'getOddsMultiplier' is defined but never used.","'xgForComparison' is assigned a value but never used.","'xgAgainstComparison' is assigned a value but never used.","'dangerousAttacksWithConverstionComparison' is assigned a value but never used.","'oddsWeighting' is assigned a value but never used.","'remainder' is assigned a value but never used.","'i' is assigned a value but never used.","'homeLeagueOrAllFormAverageGoals' is assigned a value but never used.","'awayLeagueOrAllFormAverageGoals' is assigned a value but never used.","'Component' is defined but never used.",["335"],["336"],"'allLeagueResultsArrayOfObjects' is defined but never used.","'CreateBadge' is defined but never used.","'Fragment' is defined but never used.","'diff' is defined but never used.","'latestHomeGoalDiff' is assigned a value but never used.","'latestAwayGoalDiff' is assigned a value but never used.","'wonHomeOrAwayOnly' is defined but never used.","'goalsScoredHomeOrAwayOnly' is defined but never used.","'goalsConceededHomeOrAwayOnly' is defined but never used.","'awayTeam' is assigned a value but never used.","'testArrayHome' is assigned a value but never used.","'testArrayAway' is assigned a value but never used.","'rollingGoalDiffHome' is assigned a value but never used.","'rollingGoalDiffAway' is assigned a value but never used.",["335"],["336"],"'Paper' is defined but never used.","'Button' is defined but never used.","'Collapsable' is defined but never used.","'Checkbox' is defined but never used.","'json' is defined but never used.","'useNavigate' is defined but never used.","'Zoom' is defined but never used.","'setCount' is assigned a value but never used.","'largest' is assigned a value but never used.","'parse' is defined but never used.",["335"],["336"],"'getThemeProps' is defined but never used.",["335"],["336"],"'stadium' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.","ArrayExpression",["337"],"no-global-assign","no-unsafe-negation",{"desc":"338","fix":"339"},"Update the dependencies array to be: [fetchData]",{"range":"340","text":"341"},[775,777],"[fetchData]"]