[{"/Users/gregdorward/Development/football-predictions/src/index.js":"1","/Users/gregdorward/Development/football-predictions/src/App.js":"2","/Users/gregdorward/Development/football-predictions/src/reportWebVitals.js":"3","/Users/gregdorward/Development/football-predictions/src/components/spinner.js":"4","/Users/gregdorward/Development/football-predictions/src/components/showCardPotential.js":"5","/Users/gregdorward/Development/football-predictions/src/components/createBadge.js":"6","/Users/gregdorward/Development/football-predictions/src/components/showBttsData.js":"7","/Users/gregdorward/Development/football-predictions/src/components/radio.js":"8","/Users/gregdorward/Development/football-predictions/src/components/Header.js":"9","/Users/gregdorward/Development/football-predictions/src/logic/getFixtures.js":"10","/Users/gregdorward/Development/football-predictions/src/components/createStatsDiv.js":"11","/Users/gregdorward/Development/football-predictions/src/logic/getForm.js":"12","/Users/gregdorward/Development/football-predictions/src/components/Button.js":"13","/Users/gregdorward/Development/football-predictions/src/logic/getScorePredictions.js":"14","/Users/gregdorward/Development/football-predictions/src/components/CollapsableElement.js":"15","/Users/gregdorward/Development/football-predictions/src/components/TextSection.js":"16","/Users/gregdorward/Development/football-predictions/src/logic/getStats.js":"17","/Users/gregdorward/Development/football-predictions/src/components/Div.js":"18","/Users/gregdorward/Development/football-predictions/src/components/Fixture.js":"19","/Users/gregdorward/Development/football-predictions/src/components/Checkbox.js":"20","/Users/gregdorward/Development/football-predictions/src/components/CollapsableDiv.js":"21","/Users/gregdorward/Development/football-predictions/src/components/Increment.js":"22","/Users/gregdorward/Development/football-predictions/src/logic/getBTTSPotential.js":"23"},{"size":500,"mtime":1615459825016,"results":"24","hashOfConfig":"25"},{"size":4966,"mtime":1620991070002,"results":"26","hashOfConfig":"25"},{"size":362,"mtime":1612138266385,"results":"27","hashOfConfig":"25"},{"size":297,"mtime":1611654841360,"results":"28","hashOfConfig":"25"},{"size":0,"mtime":1611654832610,"results":"29","hashOfConfig":"25"},{"size":252,"mtime":1612138266381,"results":"30","hashOfConfig":"25"},{"size":0,"mtime":1611654828618,"results":"31","hashOfConfig":"25"},{"size":963,"mtime":1615289257224,"results":"32","hashOfConfig":"25"},{"size":137,"mtime":1619709402519,"results":"33","hashOfConfig":"25"},{"size":29985,"mtime":1620896474031,"results":"34","hashOfConfig":"25"},{"size":2275,"mtime":1619618859306,"results":"35","hashOfConfig":"25"},{"size":1138,"mtime":1619707864135,"results":"36","hashOfConfig":"25"},{"size":245,"mtime":1615546574902,"results":"37","hashOfConfig":"25"},{"size":55019,"mtime":1620991075497,"results":"38","hashOfConfig":"25"},{"size":650,"mtime":1616070225969,"results":"39","hashOfConfig":"25"},{"size":180,"mtime":1612138266381,"results":"40","hashOfConfig":"25"},{"size":4378,"mtime":1620663292239,"results":"41","hashOfConfig":"25"},{"size":179,"mtime":1614855364341,"results":"42","hashOfConfig":"25"},{"size":6585,"mtime":1620816099049,"results":"43","hashOfConfig":"25"},{"size":862,"mtime":1612542954027,"results":"44","hashOfConfig":"25"},{"size":595,"mtime":1614865093901,"results":"45","hashOfConfig":"25"},{"size":1294,"mtime":1620748830350,"results":"46","hashOfConfig":"25"},{"size":1488,"mtime":1620314707831,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"1f0e5p2",{"filePath":"51","messages":"52","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"50"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"50"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"50"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"50"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"/Users/gregdorward/Development/football-predictions/src/index.js",[],["99","100"],"/Users/gregdorward/Development/football-predictions/src/App.js",["101","102","103","104","105","106","107","108","109"],"/Users/gregdorward/Development/football-predictions/src/reportWebVitals.js",[],"/Users/gregdorward/Development/football-predictions/src/components/spinner.js",[],"/Users/gregdorward/Development/football-predictions/src/components/showCardPotential.js",[],"/Users/gregdorward/Development/football-predictions/src/components/createBadge.js",[],"/Users/gregdorward/Development/football-predictions/src/components/showBttsData.js",[],"/Users/gregdorward/Development/football-predictions/src/components/radio.js",[],"/Users/gregdorward/Development/football-predictions/src/components/Header.js",[],"/Users/gregdorward/Development/football-predictions/src/logic/getFixtures.js",["110"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { orderedLeagues, proxyurl } from \"../App\";\nimport { getForm, applyColour } from \"./getForm\";\nimport { Fixture } from \"../components/Fixture\";\nimport { Button } from \"../components/Button\";\nimport { getScorePrediction } from \"../logic/getScorePredictions\";\nimport { ThreeDots } from 'react-loading-icons'\nvar oddslib = require(\"oddslib\");\n\nrequire(\"dotenv\").config();\n\nvar fixtureResponse;\nvar fixtureArray;\nexport const matches = [];\nexport const resultedMatches = [];\nvar league;\nvar leagueGames = [];\nexport var leagueArray = [];\nvar lastFiveFormHome;\nvar lastFiveFormAway;\n\nexport const [currentDay, month, year] = new Date()\n  .toLocaleDateString(\"en-US\")\n  .split(\"/\");\nlet tomorrowsDate = new Date();\ntomorrowsDate.setDate(new Date().getDate() + 1);\nlet [\n  tomorrowDay,\n  tomorrowMonth,\n  tomorrowYear,\n] = tomorrowsDate.toLocaleDateString(\"en-US\").split(\"/\");\n\nlet yesterdaysDate = new Date();\nyesterdaysDate.setDate(new Date().getDate() - 1);\nlet [\n  yesterdayDay,\n  yesterdayMonth,\n  yesterdayYear,\n] = yesterdaysDate.toLocaleDateString(\"en-US\").split(\"/\");\n\nexport const yesterday = `${process.env.REACT_APP_EXPRESS_SERVER}matches/${yesterdayYear}-${yesterdayDay}-${yesterdayMonth}`;\nexport const today = `${process.env.REACT_APP_EXPRESS_SERVER}matches/${year}-${currentDay}-${month}`;\nexport const tomorrow = `${process.env.REACT_APP_EXPRESS_SERVER}matches/${tomorrowYear}-${tomorrowDay}-${tomorrowMonth}`;\n\nexport function getRadioState(state) {\n  let radioState = state;\n  return radioState;\n}\n\nexport async function diff(a, b) {\n  return parseFloat(a - b).toFixed(2);\n}\n\nexport let allForm = [];\n\nasync function createFixture(match, result) {\n  let roundedHomeOdds;\n  let roundedAwayOdds;\n  let roundedBTTSOdds;\n  let homeFraction;\n  let awayFraction;\n  let bttsFraction;\n\n  if (match.homeOdds !== 0 && match.awayOdds !== 0) {\n    roundedHomeOdds = (Math.round(match.homeOdds * 5) / 5).toFixed(1);\n    roundedAwayOdds = (Math.round(match.awayOdds * 5) / 5).toFixed(1);\n\n    if (roundedHomeOdds < 1.1) {\n      roundedHomeOdds = 1.1;\n    }\n    if (roundedAwayOdds < 1.1) {\n      roundedAwayOdds = 1.1;\n    }\n\n    try {\n      homeFraction = oddslib\n        .from(\"decimal\", roundedHomeOdds)\n        .to(\"fractional\", { precision: 1 });\n      awayFraction = oddslib\n        .from(\"decimal\", roundedAwayOdds)\n        .to(\"fractional\", { precision: 1 });\n    } catch (error) {\n      console.log(error);\n    }\n  } else {\n    homeFraction = \"N/A\";\n    awayFraction = \"N/A\";\n  }\n\n  match.fractionHome = homeFraction;\n  match.fractionAway = awayFraction;\n\n\n  if (match.bttsOdds !== 0) {\n    roundedBTTSOdds = (Math.round(match.bttsOdds * 5) / 5).toFixed(1);\n    \n\n    if (roundedBTTSOdds < 1.1) {\n      roundedBTTSOdds = 1.1;\n    }\n\n    try {\n      bttsFraction = oddslib\n        .from(\"decimal\", roundedBTTSOdds)\n        .to(\"fractional\", { precision: 1 });\n    } catch (error) {\n      console.log(error);\n    }\n  } else {\n    bttsFraction = \"N/A\";\n  }\n\n  match.bttsFraction = bttsFraction;\n\n\n\n\n\n  match.game = match.homeTeam + \" v \" + match.awayTeam;\n\n  ReactDOM.render(\n    \n    <Fixture\n      fixtures={matches}\n      result={result}\n      className={\"individualFixture\"}\n    />,\n    document.getElementById(\"FixtureContainer\")\n  );\n}\n\nvar myHeaders = new Headers();\nmyHeaders.append(\"Origin\", \"https://gregdorward.github.io\");\n\nexport async function generateFixtures(day, radioState) {\n  let url;\n  switch (day) {\n    case \"yesterdaysFixtures\":\n      url = yesterday;\n      break;\n    case \"todaysFixtures\":\n      url = today;\n      break;\n    case \"tomorrowsFixtures\":\n      url = tomorrow;\n      break;\n    default:\n      break;\n  }\n\n\n  fixtureResponse = await fetch(url);\n\n  await fixtureResponse.json().then((fixtures) => {\n    console.log(fixtures)\n    fixtureArray = Array.from(fixtures.data);\n  });\n\n\n  let form;\n  let formArray;\n  var isFormStored;\n  var isStoredLocally;\n  let storedForm = await fetch(\n    `${process.env.REACT_APP_EXPRESS_SERVER}form${day}`,\n    {\n      method: \"GET\",\n      headers: {\n        Accept: \"application/json\",\n      },\n    }\n  );\n  if (storedForm.status === 201) {\n    await storedForm.json().then((form) => {\n      console.log(201)\n      formArray = Array.from(form.allForm);\n      isFormStored = true;\n      isStoredLocally = false;\n      allForm = formArray;\n    });\n  } else if (storedForm.status === 200) {\n    await storedForm.json().then((form) => {\n      console.log(200)\n      formArray = Array.from(form.allForm);\n      isFormStored = true;\n      isStoredLocally = false;\n      allForm = formArray;\n    });\n  } else {\n    isFormStored = false;\n    isStoredLocally = false;\n  }\n\n  console.log(`isFormStored ${isFormStored}`)\n  console.log(`isStoredLocally ${isStoredLocally}`)\n\n  ReactDOM.render(\n    <div>\n    <div className=\"LoadingText\">Loading all league data</div>\n    <ThreeDots height=\"3em\"/>\n    </div>,\n    document.getElementById(\"Buttons\")\n  );\n\n  league = await fetch(\n    `${process.env.REACT_APP_EXPRESS_SERVER}leagues/${currentDay}${month}${year}`\n  );\n\n\n\n\n  var leaguePositions = [];\n\n  if (league.status === 200) {\n    await league.json().then((leagues) => {\n      leagueArray = Array.from(leagues.leagueArray);\n      console.log(leagueArray)\n\n    });\n  } else {\n    for (let i = 0; i < orderedLeagues.length; i++) {\n      league = await fetch(\n        `${process.env.REACT_APP_EXPRESS_SERVER}tables/${orderedLeagues[i].element.id}/${currentDay}${month}${year}`\n      );\n      // eslint-disable-next-line no-loop-func\n      await league.json().then((table) => {\n        leagueArray.push(table);\n\n      });\n      console.log(leagueArray)\n    }\n  }\n\n\n\n  for (let i = 0; i < 20; i++) {\n    for (\n      let x = 0;\n      x < leagueArray[i].data.all_matches_table_overall.length;\n      x++\n    ) {\n      let string = leagueArray[i].data.all_matches_table_overall[x];\n\n\n      leaguePositions.push({\n        name: string.cleanName,\n        position: string.position,\n        ppg: string.ppg_overall,\n      });\n    }\n  }\n\n\n  for (let i = 0; i < orderedLeagues.length; i++) {\n    leagueGames = fixtureArray.filter(\n      (game) => game.competition_id === orderedLeagues[i].element.id\n    );\n\n    for (const fixture of leagueGames) {\n      const unixTimestamp = fixture.date_unix;\n      const milliseconds = unixTimestamp * 1000;\n      const dateObject = new Date(milliseconds);\n\n\n      // if(fixture.status !== \"suspended\" && fixture.status !== \"canceled\"){\n\n\n      let match = {};\n      match.id = fixture.id;\n      match.competition_id = fixture.competition_id;\n      match.time = dateObject.toLocaleString(\"en-US\", { hour: \"numeric\" });\n      match.homeTeam = fixture.home_name;\n      match.awayTeam = fixture.away_name;\n      match.homeOdds = fixture.odds_ft_1;\n      match.awayOdds = fixture.odds_ft_2;\n      match.drawOdds = fixture.odds_ft_x;\n      match.bttsOdds = fixture.odds_btts_yes;\n      match.homeId = fixture.homeID;\n      match.awayId = fixture.awayID;\n      match.form = [];\n      match.homeTeamInfo = [];\n      match.awayTeamInfo = [];\n      match.btts = false;\n\n      let homeTeaminLeague;\n      let awayTeaminLeague;\n      let teamPositionHome;\n      let teamPositionAway;\n      let teamPositionPrefix;\n      let homePrefix;\n      let awayPrefix;\n      let homeSeasonPPG;\n      let awaySeasonPPG;\n\n      async function getPrefix(position) {\n        switch (position) {\n          case 1:\n          case 21:\n            teamPositionPrefix = \"st\";\n            break;\n          case 2:\n          case 22:\n            teamPositionPrefix = \"nd\";\n            break;\n          case 3:\n          case 23:\n            teamPositionPrefix = \"rd\";\n            break;\n          case 4:\n          case 5:\n          case 6:\n          case 7:\n          case 8:\n          case 9:\n          case 10:\n          case 11:\n          case 12:\n          case 13:\n          case 14:\n          case 15:\n          case 16:\n          case 17:\n          case 18:\n          case 19:\n          case 20:\n          case 24:\n            teamPositionPrefix = \"th\";\n            break;\n          default:\n            break;\n        }\n        return teamPositionPrefix;\n      }\n\n      try {\n        homeTeaminLeague = leaguePositions.find(\n          (team) => team.name === match.homeTeam\n        );\n        teamPositionHome = homeTeaminLeague.position;\n        homePrefix = await getPrefix(teamPositionHome);\n        homeSeasonPPG = homeTeaminLeague.ppg.toFixed(2);\n      } catch (error) {\n        console.log(error);\n        teamPositionHome = \"N/A\";\n        homePrefix = \"\";\n        homeSeasonPPG = \"N/A\";\n      }\n\n      try {\n        awayTeaminLeague = leaguePositions.find(\n          (team) => team.name === match.awayTeam\n        );\n        teamPositionAway = awayTeaminLeague.position;\n        awayPrefix = await getPrefix(teamPositionAway);\n        awaySeasonPPG = awayTeaminLeague.ppg.toFixed(2);\n      } catch (error) {\n        console.log(error);\n        teamPositionAway = \"N/A\";\n        awayPrefix = \"\";\n        awaySeasonPPG = \"N/A\";\n      }\n\n      if (!isFormStored) {\n        form = await getForm(match);\n\n        //get the last 5 games stats from a big block of text\n        var homeExtract = form[0].data[0].stats.additional_info.replace(\n          /[\"']/g,\n          \"\"\n        );\n\n        var slug = homeExtract.split(\",53:\").pop().toUpperCase();\n        lastFiveFormHome = [...slug.substring(0, 5)];\n\n        var awayExtract = form[1].data[0].stats.additional_info.replace(\n          /[\"']/g,\n          \"\"\n        );\n\n        var slugAway = awayExtract.split(\",53:\").pop().toUpperCase();\n        lastFiveFormAway = [...slugAway.substring(0, 5)];\n\n        allForm.push({\n          id: match.id,\n          home: {\n            teamName: match.homeTeam,\n            0: {\n              XG: parseFloat(form[0].data[0].stats.xg_for_avg_overall),\n              XGHome: parseFloat(form[0].data[0].stats.xg_for_avg_home),\n              XGAway: parseFloat(form[0].data[0].stats.xg_for_avg_away),\n              ScoredOverall: parseFloat(\n                form[0].data[0].stats.seasonScoredNum_overall\n              ),\n              ScoredHome: parseFloat(\n                form[0].data[0].stats.seasonScoredNum_home\n              ),\n              ScoredAway: parseFloat(\n                form[0].data[0].stats.seasonScoredNum_away\n              ),\n              PlayedHome: parseFloat(\n                form[0].data[0].stats.seasonMatchesPlayed_home\n              ),\n              PlayedAway: parseFloat(\n                form[0].data[0].stats.seasonMatchesPlayed_away\n              ),\n              ConcededOverall: parseFloat(\n                form[0].data[0].stats.seasonConcededNum_overall\n              ),\n              ConcededHome: parseFloat(\n                form[0].data[0].stats.seasonConcededNum_home\n              ),\n              ConcededAway: parseFloat(\n                form[0].data[0].stats.seasonConcededNum_away\n              ),\n              XGAgainstAvg: parseFloat(\n                form[0].data[0].stats.xg_against_avg_overall\n              ),\n              XGAgainstHome: parseFloat(\n                form[0].data[0].stats.xg_against_avg_home\n              ),\n              XGAgainstAway: parseFloat(\n                form[0].data[0].stats.xg_against_avg_away\n              ),\n              CleanSheetPercentage: parseFloat(\n                form[0].data[0].stats.seasonCSPercentage_overall\n              ),\n              AveragePossession: parseFloat(\n                form[0].data[0].stats.possessionAVG_overall\n              ),\n              AverageShotsOnTarget: parseFloat(\n                form[0].data[0].stats.shotsOnTargetAVG_overall\n              ),\n              AverageDangerousAttacks: parseFloat(\n                form[0].data[0].stats.dangerous_attacks_avg_overall\n              ),\n              PPG: parseFloat(form[0].data[0].stats.seasonPPG_overall),\n              AttacksHome: parseFloat(form[0].data[0].stats.attacks_avg_home),\n              AttacksAway: parseFloat(form[0].data[0].stats.attacks_avg_away),\n              DangerousAttacksHome: parseFloat(\n                form[0].data[0].stats.dangerous_attacks_avg_home\n              ),\n              DangerousAttacksAway: parseFloat(\n                form[0].data[0].stats.dangerous_attacks_avg_away\n              ),\n              homeAttackAdvantage: parseFloat(\n                form[0].data[0].stats.homeAttackAdvantage\n              ),\n              homeDefenceAdvantage: parseFloat(\n                form[0].data[0].stats.homeDefenceAdvantage\n              ),\n              BTTSPercentage: parseInt(\n                form[0].data[0].stats.seasonBTTSPercentage_overall\n              ),\n              LastFiveForm: lastFiveFormHome,\n              LeaguePosition: `${teamPositionHome}${homePrefix}`,\n              SeasonPPG: homeSeasonPPG,\n            },\n            1: {\n              XG: parseFloat(form[0].data[1].stats.xg_for_avg_overall),\n              XGHome: parseFloat(form[0].data[1].stats.xg_for_avg_home),\n              XGAway: parseFloat(form[0].data[1].stats.xg_for_avg_away),\n              ScoredOverall: parseFloat(\n                form[0].data[1].stats.seasonScoredNum_overall\n              ),\n              ScoredHome: parseFloat(\n                form[0].data[1].stats.seasonScoredNum_home\n              ),\n              ScoredAway: parseFloat(\n                form[0].data[1].stats.seasonScoredNum_away\n              ),\n              PlayedHome: parseFloat(\n                form[0].data[1].stats.seasonMatchesPlayed_home\n              ),\n              PlayedAway: parseFloat(\n                form[0].data[1].stats.seasonMatchesPlayed_away\n              ),\n              ConcededOverall: parseFloat(\n                form[0].data[1].stats.seasonConcededNum_overall\n              ),\n              ConcededHome: parseFloat(\n                form[0].data[1].stats.seasonConcededNum_home\n              ),\n              ConcededAway: parseFloat(\n                form[0].data[1].stats.seasonConcededNum_away\n              ),\n              XGAgainstAvg: parseFloat(\n                form[0].data[1].stats.xg_against_avg_overall\n              ),\n              XGAgainstHome: parseFloat(\n                form[0].data[1].stats.xg_against_avg_home\n              ),\n              XGAgainstAway: parseFloat(\n                form[0].data[1].stats.xg_against_avg_away\n              ),\n              CleanSheetPercentage: parseFloat(\n                form[0].data[1].stats.seasonCSPercentage_overall\n              ),\n              AveragePossession: parseFloat(\n                form[0].data[1].stats.possessionAVG_overall\n              ),\n              AverageShotsOnTarget: parseFloat(\n                form[0].data[1].stats.shotsOnTargetAVG_overall\n              ),\n              AverageDangerousAttacks: parseFloat(\n                form[0].data[1].stats.dangerous_attacks_avg_overall\n              ),\n              PPG: parseFloat(form[0].data[1].stats.seasonPPG_overall),\n              AttacksHome: parseFloat(form[0].data[1].stats.attacks_avg_home),\n              AttacksAway: parseFloat(form[0].data[1].stats.attacks_avg_away),\n              DangerousAttacksHome: parseFloat(\n                form[0].data[1].stats.dangerous_attacks_avg_home\n              ),\n              DangerousAttacksAway: parseFloat(\n                form[0].data[1].stats.dangerous_attacks_avg_away\n              ),\n              homeAttackAdvantage: parseFloat(\n                form[0].data[1].stats.homeAttackAdvantage\n              ),\n              homeDefenceAdvantage: parseFloat(\n                form[0].data[1].stats.homeDefenceAdvantage\n              ),\n              BTTSPercentage: parseInt(\n                form[0].data[1].stats.seasonBTTSPercentage_overall\n              ),\n              LastFiveForm: lastFiveFormHome,\n              LeaguePosition: `${teamPositionHome}${homePrefix}`,\n              SeasonPPG: homeSeasonPPG,\n            },\n            2: {\n              XG: parseFloat(form[0].data[2].stats.xg_for_avg_overall),\n              XGHome: parseFloat(form[0].data[2].stats.xg_for_avg_home),\n              XGAway: parseFloat(form[0].data[2].stats.xg_for_avg_away),\n              ScoredOverall: parseFloat(\n                form[0].data[2].stats.seasonScoredNum_overall\n              ),\n              ScoredHome: parseFloat(\n                form[0].data[2].stats.seasonScoredNum_home\n              ),\n              ScoredAway: parseFloat(\n                form[0].data[2].stats.seasonScoredNum_away\n              ),\n              PlayedHome: parseFloat(\n                form[0].data[2].stats.seasonMatchesPlayed_home\n              ),\n              PlayedAway: parseFloat(\n                form[0].data[2].stats.seasonMatchesPlayed_away\n              ),\n              ConcededOverall: parseFloat(\n                form[0].data[2].stats.seasonConcededNum_overall\n              ),\n              ConcededHome: parseFloat(\n                form[0].data[2].stats.seasonConcededNum_home\n              ),\n              ConcededAway: parseFloat(\n                form[0].data[2].stats.seasonConcededNum_away\n              ),\n              XGAgainstAvg: parseFloat(\n                form[0].data[2].stats.xg_against_avg_overall\n              ),\n              XGAgainstHome: parseFloat(\n                form[0].data[2].stats.xg_against_avg_home\n              ),\n              XGAgainstAway: parseFloat(\n                form[0].data[2].stats.xg_against_avg_away\n              ),\n              CleanSheetPercentage: parseFloat(\n                form[0].data[2].stats.seasonCSPercentage_overall\n              ),\n              AveragePossession: parseFloat(\n                form[0].data[2].stats.possessionAVG_overall\n              ),\n              AverageShotsOnTarget: parseFloat(\n                form[0].data[2].stats.shotsOnTargetAVG_overall\n              ),\n              AverageDangerousAttacks: parseFloat(\n                form[0].data[2].stats.dangerous_attacks_avg_overall\n              ),\n              PPG: parseFloat(form[0].data[2].stats.seasonPPG_overall),\n              AttacksHome: parseFloat(form[0].data[2].stats.attacks_avg_home),\n              AttacksAway: parseFloat(form[0].data[2].stats.attacks_avg_away),\n              DangerousAttacksHome: parseFloat(\n                form[0].data[2].stats.dangerous_attacks_avg_home\n              ),\n              DangerousAttacksAway: parseFloat(\n                form[0].data[2].stats.dangerous_attacks_avg_away\n              ),\n              homeAttackAdvantage: parseFloat(\n                form[0].data[2].stats.homeAttackAdvantage\n              ),\n              homeDefenceAdvantage: parseFloat(\n                form[0].data[2].stats.homeDefenceAdvantage\n              ),\n              BTTSPercentage: parseInt(\n                form[0].data[2].stats.seasonBTTSPercentage_overall\n              ),\n              LastFiveForm: lastFiveFormHome,\n              LeaguePosition: `${teamPositionHome}${homePrefix}`,\n              SeasonPPG: homeSeasonPPG,\n            },\n          },\n          away: {\n            teamName: match.awayTeam,\n            0: {\n              XG: parseFloat(form[1].data[0].stats.xg_for_avg_overall),\n              XGHome: parseFloat(form[1].data[0].stats.xg_for_avg_home),\n              XGAway: parseFloat(form[1].data[0].stats.xg_for_avg_away),\n              ScoredOverall: parseFloat(\n                form[1].data[0].stats.seasonScoredNum_overall\n              ),\n              ScoredHome: parseFloat(\n                form[1].data[0].stats.seasonScoredNum_home\n              ),\n              ScoredAway: parseFloat(\n                form[1].data[0].stats.seasonScoredNum_away\n              ),\n              PlayedHome: parseFloat(\n                form[1].data[0].stats.seasonMatchesPlayed_home\n              ),\n              PlayedAway: parseFloat(\n                form[1].data[0].stats.seasonMatchesPlayed_away\n              ),\n              ConcededOverall: parseFloat(\n                form[1].data[0].stats.seasonConcededNum_overall\n              ),\n              ConcededHome: parseFloat(\n                form[1].data[0].stats.seasonConcededNum_home\n              ),\n              ConcededAway: parseFloat(\n                form[1].data[0].stats.seasonConcededNum_away\n              ),\n              XGAgainstAvg: parseFloat(\n                form[1].data[0].stats.xg_against_avg_overall\n              ),\n              XGAgainstHome: parseFloat(\n                form[1].data[0].stats.xg_against_avg_home\n              ),\n              XGAgainstAway: parseFloat(\n                form[1].data[0].stats.xg_against_avg_away\n              ),\n              CleanSheetPercentage: parseFloat(\n                form[1].data[0].stats.seasonCSPercentage_overall\n              ),\n              AveragePossession: parseFloat(\n                form[1].data[0].stats.possessionAVG_overall\n              ),\n              AverageShotsOnTarget: parseFloat(\n                form[1].data[0].stats.shotsOnTargetAVG_overall\n              ),\n              AverageDangerousAttacks: parseFloat(\n                form[1].data[0].stats.dangerous_attacks_avg_overall\n              ),\n              PPG: parseFloat(form[1].data[0].stats.seasonPPG_overall),\n              AttacksHome: parseFloat(form[1].data[0].stats.attacks_avg_home),\n              AttacksAway: parseFloat(form[1].data[0].stats.attacks_avg_away),\n              DangerousAttacksHome: parseFloat(\n                form[1].data[0].stats.dangerous_attacks_avg_home\n              ),\n              DangerousAttacksAway: parseFloat(\n                form[1].data[0].stats.dangerous_attacks_avg_away\n              ),\n              homeAttackAdvantage: parseFloat(\n                form[1].data[0].stats.homeAttackAdvantage\n              ),\n              homeDefenceAdvantage: parseFloat(\n                form[1].data[0].stats.homeDefenceAdvantage\n              ),\n              BTTSPercentage: parseInt(\n                form[1].data[0].stats.seasonBTTSPercentage_overall\n              ),\n              LastFiveForm: lastFiveFormAway,\n              LeaguePosition: `${teamPositionAway}${awayPrefix}`,\n              SeasonPPG: awaySeasonPPG,\n            },\n            1: {\n              XG: parseFloat(form[1].data[1].stats.xg_for_avg_overall),\n              XGHome: parseFloat(form[1].data[1].stats.xg_for_avg_home),\n              XGAway: parseFloat(form[1].data[1].stats.xg_for_avg_away),\n              ScoredOverall: parseFloat(\n                form[1].data[1].stats.seasonScoredNum_overall\n              ),\n              ScoredHome: parseFloat(\n                form[1].data[1].stats.seasonScoredNum_home\n              ),\n              ScoredAway: parseFloat(\n                form[1].data[1].stats.seasonScoredNum_away\n              ),\n              PlayedHome: parseFloat(\n                form[1].data[1].stats.seasonMatchesPlayed_home\n              ),\n              PlayedAway: parseFloat(\n                form[1].data[1].stats.seasonMatchesPlayed_away\n              ),\n              ConcededOverall: parseFloat(\n                form[1].data[1].stats.seasonConcededNum_overall\n              ),\n              ConcededHome: parseFloat(\n                form[1].data[1].stats.seasonConcededNum_home\n              ),\n              ConcededAway: parseFloat(\n                form[1].data[1].stats.seasonConcededNum_away\n              ),\n              XGAgainstAvg: parseFloat(\n                form[1].data[1].stats.xg_against_avg_overall\n              ),\n              XGAgainstHome: parseFloat(\n                form[1].data[1].stats.xg_against_avg_home\n              ),\n              XGAgainstAway: parseFloat(\n                form[1].data[1].stats.xg_against_avg_away\n              ),\n              CleanSheetPercentage: parseFloat(\n                form[1].data[1].stats.seasonCSPercentage_overall\n              ),\n              AveragePossession: parseFloat(\n                form[1].data[1].stats.possessionAVG_overall\n              ),\n              AverageShotsOnTarget: parseFloat(\n                form[1].data[1].stats.shotsOnTargetAVG_overall\n              ),\n              AverageDangerousAttacks: parseFloat(\n                form[1].data[1].stats.dangerous_attacks_avg_overall\n              ),\n              PPG: parseFloat(form[1].data[1].stats.seasonPPG_overall),\n              AttacksHome: parseFloat(form[1].data[1].stats.attacks_avg_home),\n              AttacksAway: parseFloat(form[1].data[1].stats.attacks_avg_away),\n              DangerousAttacksHome: parseFloat(\n                form[1].data[1].stats.dangerous_attacks_avg_home\n              ),\n              DangerousAttacksAway: parseFloat(\n                form[1].data[1].stats.dangerous_attacks_avg_away\n              ),\n              homeAttackAdvantage: parseFloat(\n                form[1].data[1].stats.homeAttackAdvantage\n              ),\n              homeDefenceAdvantage: parseFloat(\n                form[1].data[1].stats.homeDefenceAdvantage\n              ),\n              BTTSPercentage: parseInt(\n                form[1].data[1].stats.seasonBTTSPercentage_overall\n              ),\n              LastFiveForm: lastFiveFormAway,\n              LeaguePosition: `${teamPositionAway}${awayPrefix}`,\n              SeasonPPG: awaySeasonPPG,\n            },\n            2: {\n              XG: parseFloat(form[1].data[2].stats.xg_for_avg_overall),\n              XGHome: parseFloat(form[1].data[2].stats.xg_for_avg_home),\n              XGAway: parseFloat(form[1].data[2].stats.xg_for_avg_away),\n              ScoredOverall: parseFloat(\n                form[1].data[2].stats.seasonScoredNum_overall\n              ),\n              ScoredHome: parseFloat(\n                form[1].data[2].stats.seasonScoredNum_home\n              ),\n              ScoredAway: parseFloat(\n                form[1].data[2].stats.seasonScoredNum_away\n              ),\n              PlayedHome: parseFloat(\n                form[1].data[2].stats.seasonMatchesPlayed_home\n              ),\n              PlayedAway: parseFloat(\n                form[1].data[2].stats.seasonMatchesPlayed_away\n              ),\n              ConcededOverall: parseFloat(\n                form[1].data[2].stats.seasonConcededNum_overall\n              ),\n              ConcededHome: parseFloat(\n                form[1].data[2].stats.seasonConcededNum_home\n              ),\n              ConcededAway: parseFloat(\n                form[1].data[2].stats.seasonConcededNum_away\n              ),\n              XGAgainstAvg: parseFloat(\n                form[1].data[2].stats.xg_against_avg_overall\n              ),\n              XGAgainstHome: parseFloat(\n                form[1].data[2].stats.xg_against_avg_home\n              ),\n              XGAgainstAway: parseFloat(\n                form[1].data[2].stats.xg_against_avg_away\n              ),\n              CleanSheetPercentage: parseFloat(\n                form[1].data[2].stats.seasonCSPercentage_overall\n              ),\n              AveragePossession: parseFloat(\n                form[1].data[2].stats.possessionAVG_overall\n              ),\n              AverageShotsOnTarget: parseFloat(\n                form[1].data[2].stats.shotsOnTargetAVG_overall\n              ),\n              AverageDangerousAttacks: parseFloat(\n                form[1].data[2].stats.dangerous_attacks_avg_overall\n              ),\n              PPG: parseFloat(form[1].data[2].stats.seasonPPG_overall),\n              AttacksHome: parseFloat(form[1].data[2].stats.attacks_avg_home),\n              AttacksAway: parseFloat(form[1].data[2].stats.attacks_avg_away),\n              DangerousAttacksHome: parseFloat(\n                form[1].data[2].stats.dangerous_attacks_avg_home\n              ),\n              DangerousAttacksAway: parseFloat(\n                form[1].data[2].stats.dangerous_attacks_avg_away\n              ),\n              homeAttackAdvantage: parseFloat(\n                form[1].data[2].stats.homeAttackAdvantage\n              ),\n              homeDefenceAdvantage: parseFloat(\n                form[1].data[2].stats.homeDefenceAdvantage\n              ),\n              BTTSPercentage: parseInt(\n                form[0].data[2].stats.seasonBTTSPercentage_overall\n              ),\n              LastFiveForm: lastFiveFormAway,\n              LeaguePosition: `${teamPositionAway}${awayPrefix}`,\n              SeasonPPG: awaySeasonPPG,\n            },\n          },\n        });\n      }\n\n      match.homeBadge = fixture.home_image;\n      match.awayBadge = fixture.away_image;\n\n      match.homePpg = fixture.home_ppg.toFixed(2);\n      match.homeFormColour = await applyColour(match.homePpg);\n\n      match.awayPpg = fixture.away_ppg.toFixed(2);\n      match.awayFormColour = await applyColour(match.awayPpg);\n\n      match.lastFiveFormHome = lastFiveFormHome;\n      match.lastFiveFormAway = lastFiveFormAway;\n\n      match.status = fixture.status;\n\n      match.btts_potential = fixture.btts_potential;\n      match.game = match.homeTeam + \" v \" + match.awayTeam;\n\n      match.homeGoals = fixture.homeGoalCount;\n      match.awayGoals = fixture.awayGoalCount;\n\n      match.expectedGoalsHomeToDate = fixture.team_a_xg_prematch\n      match.expectedGoalsAwayToDate = fixture.team_b_xg_prematch\n\n      matches.push(match);\n\n      // console.log(allForm)\n\n      await createFixture(match, false);\n    }\n  // }\n    ReactDOM.render(\n      <Button\n        text={\"Get Predictions\"}\n        onClickEvent={() => getScorePrediction(day)}\n      />,\n      document.getElementById(\"Buttons\")\n    );\n  }\n  if (!isStoredLocally) {\n    await fetch(`${process.env.REACT_APP_EXPRESS_SERVER}allForm${day}`, {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ allForm }),\n    });\n  }\n  await fetch(\n    `${process.env.REACT_APP_EXPRESS_SERVER}leagues/${currentDay}${month}${year}`,\n    {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ leagueArray }),\n    }\n  );\n}\n","/Users/gregdorward/Development/football-predictions/src/components/createStatsDiv.js",["111"],"import React, { Fragment } from \"react\";\n\nfunction Stats(props) {\n  function styleForm(formIndicator) {\n    let className;\n    if (formIndicator === \"W\") {\n      className = \"win\";\n    } else if (formIndicator === \"D\") {\n      className = \"draw\";\n    } else if (formIndicator === \"L\") {\n      className = \"loss\";\n    }\n    return className\n  }\n\n  return (\n    <ul className={props.className} style={props.style}>\n      <li key={props.name}>{`${props.name} form`}</li>\n      <li key=\"last5\">\n        <span\n          className={\n            styleForm(props.last5[0])\n          }\n        >\n          {props.last5[0]}\n        </span>\n        <span className={\n            styleForm(props.last5[1])\n          }>{props.last5[1]}</span>\n        <span className={\n            styleForm(props.last5[2])\n          }>{props.last5[2]}</span>\n        <span className={\n            styleForm(props.last5[3])\n          }>{props.last5[3]}</span>\n        <span className={\n            styleForm(props.last5[4])\n          }>{props.last5[4]}</span>\n      </li>\n\n      <li key=\"TeamScored\" className=\"TeamScored\" data-cy={props.name + \"teamScored\"}>\n        {`Avg goals scored - ${props.goals}`}\n      </li>\n      <li key=\"TeamConceeded\" className=\"TeamConceeded\" data-cy={props.name + \"teamConceded\"}>\n        {`Avg goals conceeded - ${props.conceeded}`}\n      </li>\n      <li key=\"TeamPossession\" className=\"TeamPossession\" data-cy={props.name + \"teamPossession\"}>\n        {`Avg possession - ${props.possession}%`}\n      </li>\n      <li key=\"TeamXG\" className=\"TeamXG\" data-cy={props.name + \"teamXG\"}>\n        {`Avg XG - ${props.XG}`}\n      </li>\n      <li key=\"AverageSOT\" className=\"AverageSOT\" data-cy={props.name + \"averageSOT\"}>\n        {`Avg shots on target - ${props.sot}`}\n      </li>\n      <li key=\"DangerousAttacks\" className=\"DangerousAttacks\" data-cy={props.name + \"dangerousAttacks\"}>\n        {`Avg dangerous attacks - ${props.dangerousAttacks}`}\n      </li>\n      <li key=\"LeaguePosition\" className=\"LeaguePosition\" data-cy={props.name + \"leaguePosition\"}>\n        {`League position - ${props.leaguePosition}`}\n      </li>\n      <li key=\"PPG\" className=\"PPG\" data-cy={props.name + \"PPG\"}>\n        {`Season PPG - ${props.ppg}`}\n      </li>\n    </ul>\n  );\n}\n\nexport default Stats;\n","/Users/gregdorward/Development/football-predictions/src/logic/getForm.js",["112","113"],"import { proxyurl } from \"../App\";\n\nconst allTeamForm = [];\n\nexport async function applyColour(value) {\n  let colour;\n  switch (true) {\n    case value < 0.49:\n      colour = \"#CD5C5C\";\n      break;\n    case value >= 0.5 && value <= 1:\n      colour = \"#F08080\";\n      break;\n    case value >= 1.01 && value <= 1.25:\n      colour = \"#FFA07A\";\n      break;\n    case value >= 1.26 && value <= 1.5:\n      colour = \"#FFFFE0\";\n      break;\n    case value >= 1.51 && value <= 2:\n      colour = \"#CFDBC5\";\n      break;\n    case value >= 2.01 && value <= 2.5:\n      colour = \"#8AA37B\";\n      break;\n    case value >= 2.51 && value <= 3:\n      colour = \"#3F6826\";\n      break;\n    default:\n      colour = \"white\";\n      break;\n  }\n  return colour;\n}\n\nexport async function getForm(match) {\n  const teams = [match.homeId, match.awayId];\n  const fixtureForm = [];\n\n  for (let i = 0; i < teams.length; i++) {\n    const team = teams[i];\n\n    let response = await fetch(\n      `${process.env.REACT_APP_EXPRESS_SERVER}form/${team}`\n    );\n    await response.json().then((formData) => {\n      fixtureForm[i] = formData;\n    });\n  }\n  return fixtureForm;\n}\n","/Users/gregdorward/Development/football-predictions/src/components/Button.js",[],"/Users/gregdorward/Development/football-predictions/src/logic/getScorePredictions.js",["114","115","116","117","118","119","120","121","122"],"/Users/gregdorward/Development/football-predictions/src/components/CollapsableElement.js",[],"/Users/gregdorward/Development/football-predictions/src/components/TextSection.js",[],"/Users/gregdorward/Development/football-predictions/src/logic/getStats.js",[],"/Users/gregdorward/Development/football-predictions/src/components/Div.js",[],"/Users/gregdorward/Development/football-predictions/src/components/Fixture.js",[],"/Users/gregdorward/Development/football-predictions/src/components/Checkbox.js",["123"],"import React, { useState } from \"react\";\nimport { Checkbox } from \"@material-ui/core\";\nimport { orderedLeagues } from \"../App\";\n\n\nclass CheckBox extends React.Component {\n  state = { isChecked: true };\n\n  toggle = () => {\n    this.setState((prevState) => ({ isChecked: !prevState.isChecked }));\n  };\n\n  render() {\n    const items = [];\n\n    for (let i = 0; i < orderedLeagues.length; i++) {\n        const element = orderedLeagues[i];\n        console.log(element)\n        items.push(\n            <div className=\"Checkbox\">\n              <Checkbox className=\"LeagueCheckboxes\" checked={this.state.isChecked} onChange={this.toggle} />\n              <label className=\"LeagueOption\" onClick={this.toggle}>\n                {element.name}\n              </label>\n            </div>\n          );\n    }\n    return (\n    <div>{items}</div>\n    )\n}\n}\nexport default CheckBox","/Users/gregdorward/Development/football-predictions/src/components/CollapsableDiv.js",[],"/Users/gregdorward/Development/football-predictions/src/components/Increment.js",[],"/Users/gregdorward/Development/football-predictions/src/logic/getBTTSPotential.js",[],{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","severity":1,"message":"129","line":7,"column":3,"nodeType":"130","messageId":"131","endLine":7,"endColumn":8},{"ruleId":"128","severity":1,"message":"132","line":9,"column":3,"nodeType":"130","messageId":"131","endLine":9,"endColumn":24},{"ruleId":"128","severity":1,"message":"133","line":10,"column":3,"nodeType":"130","messageId":"131","endLine":10,"endColumn":11},{"ruleId":"128","severity":1,"message":"134","line":11,"column":3,"nodeType":"130","messageId":"131","endLine":11,"endColumn":12},{"ruleId":"128","severity":1,"message":"135","line":15,"column":8,"nodeType":"130","messageId":"131","endLine":15,"endColumn":19},{"ruleId":"128","severity":1,"message":"136","line":16,"column":8,"nodeType":"130","messageId":"131","endLine":16,"endColumn":16},{"ruleId":"128","severity":1,"message":"137","line":22,"column":5,"nodeType":"130","messageId":"131","endLine":22,"endColumn":17},{"ruleId":"128","severity":1,"message":"138","line":118,"column":7,"nodeType":"130","messageId":"131","endLine":118,"endColumn":15},{"ruleId":"128","severity":1,"message":"139","line":119,"column":7,"nodeType":"130","messageId":"131","endLine":119,"endColumn":19},{"ruleId":"128","severity":1,"message":"140","line":3,"column":26,"nodeType":"130","messageId":"131","endLine":3,"endColumn":34},{"ruleId":"128","severity":1,"message":"141","line":1,"column":17,"nodeType":"130","messageId":"131","endLine":1,"endColumn":25},{"ruleId":"128","severity":1,"message":"140","line":1,"column":10,"nodeType":"130","messageId":"131","endLine":1,"endColumn":18},{"ruleId":"128","severity":1,"message":"142","line":3,"column":7,"nodeType":"130","messageId":"131","endLine":3,"endColumn":18},{"ruleId":"128","severity":1,"message":"143","line":12,"column":10,"nodeType":"130","messageId":"131","endLine":12,"endColumn":19},{"ruleId":"128","severity":1,"message":"144","line":1031,"column":11,"nodeType":"130","messageId":"131","endLine":1031,"endColumn":20},{"ruleId":"128","severity":1,"message":"145","line":1128,"column":11,"nodeType":"130","messageId":"131","endLine":1128,"endColumn":30},{"ruleId":"128","severity":1,"message":"146","line":1130,"column":11,"nodeType":"130","messageId":"131","endLine":1130,"endColumn":30},{"ruleId":"128","severity":1,"message":"147","line":1145,"column":9,"nodeType":"130","messageId":"131","endLine":1145,"endColumn":27},{"ruleId":"128","severity":1,"message":"148","line":1149,"column":9,"nodeType":"130","messageId":"131","endLine":1149,"endColumn":27},{"ruleId":"128","severity":1,"message":"149","line":1156,"column":9,"nodeType":"130","messageId":"131","endLine":1156,"endColumn":29},{"ruleId":"128","severity":1,"message":"150","line":1159,"column":9,"nodeType":"130","messageId":"131","endLine":1159,"endColumn":29},{"ruleId":"128","severity":1,"message":"151","line":1474,"column":7,"nodeType":"130","messageId":"131","endLine":1474,"endColumn":14},{"ruleId":"128","severity":1,"message":"152","line":1,"column":17,"nodeType":"130","messageId":"131","endLine":1,"endColumn":25},"no-native-reassign",["153"],"no-negated-in-lhs",["154"],"no-unused-vars","'today' is defined but never used.","Identifier","unusedVar","'generatePriorFixtures' is defined but never used.","'tomorrow' is defined but never used.","'yesterday' is defined but never used.","'Collapsable' is defined but never used.","'CheckBox' is defined but never used.","'leagueObject' is defined but never used.","'response' is defined but never used.","'responseBody' is defined but never used.","'proxyurl' is defined but never used.","'Fragment' is defined but never used.","'allTeamForm' is assigned a value but never used.","'ThreeDots' is defined but never used.","'remainder' is assigned a value but never used.","'XGAdjustedHomeGoals' is assigned a value but never used.","'XGAdjustedAwayGoals' is assigned a value but never used.","'goalsBasedOnHomeXG' is assigned a value but never used.","'goalsBasedOnAwayXG' is assigned a value but never used.","'homeGoalsBasedOnOdds' is assigned a value but never used.","'awayGoalsBasedOnOdds' is assigned a value but never used.","'sumLoss' is assigned a value but never used.","'useState' is defined but never used.","no-global-assign","no-unsafe-negation"]