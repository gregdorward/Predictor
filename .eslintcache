[{"/Users/gregdorward/Development/football-predictions/src/index.js":"1","/Users/gregdorward/Development/football-predictions/src/App.js":"2","/Users/gregdorward/Development/football-predictions/src/reportWebVitals.js":"3","/Users/gregdorward/Development/football-predictions/src/components/spinner.js":"4","/Users/gregdorward/Development/football-predictions/src/components/showCardPotential.js":"5","/Users/gregdorward/Development/football-predictions/src/components/createBadge.js":"6","/Users/gregdorward/Development/football-predictions/src/components/showBttsData.js":"7","/Users/gregdorward/Development/football-predictions/src/components/radio.js":"8","/Users/gregdorward/Development/football-predictions/src/components/Header.js":"9","/Users/gregdorward/Development/football-predictions/src/logic/getFixtures.js":"10","/Users/gregdorward/Development/football-predictions/src/components/createStatsDiv.js":"11","/Users/gregdorward/Development/football-predictions/src/logic/getForm.js":"12","/Users/gregdorward/Development/football-predictions/src/components/Button.js":"13","/Users/gregdorward/Development/football-predictions/src/logic/getScorePredictions.js":"14","/Users/gregdorward/Development/football-predictions/src/components/CollapsableElement.js":"15","/Users/gregdorward/Development/football-predictions/src/components/TextSection.js":"16","/Users/gregdorward/Development/football-predictions/src/logic/getStats.js":"17","/Users/gregdorward/Development/football-predictions/src/components/Div.js":"18","/Users/gregdorward/Development/football-predictions/src/components/Fixture.js":"19","/Users/gregdorward/Development/football-predictions/src/components/Checkbox.js":"20","/Users/gregdorward/Development/football-predictions/src/components/CollapsableDiv.js":"21","/Users/gregdorward/Development/football-predictions/src/components/Increment.js":"22","/Users/gregdorward/Development/football-predictions/src/logic/getBTTSPotential.js":"23"},{"size":500,"mtime":1615459825016,"results":"24","hashOfConfig":"25"},{"size":5476,"mtime":1621871096552,"results":"26","hashOfConfig":"25"},{"size":362,"mtime":1612138266385,"results":"27","hashOfConfig":"25"},{"size":297,"mtime":1611654841360,"results":"28","hashOfConfig":"25"},{"size":0,"mtime":1611654832610,"results":"29","hashOfConfig":"25"},{"size":252,"mtime":1612138266381,"results":"30","hashOfConfig":"25"},{"size":0,"mtime":1611654828618,"results":"31","hashOfConfig":"25"},{"size":963,"mtime":1621262249615,"results":"32","hashOfConfig":"25"},{"size":137,"mtime":1619709402519,"results":"33","hashOfConfig":"25"},{"size":29977,"mtime":1621872651942,"results":"34","hashOfConfig":"25"},{"size":2596,"mtime":1621872329459,"results":"35","hashOfConfig":"25"},{"size":1138,"mtime":1619707864135,"results":"36","hashOfConfig":"25"},{"size":245,"mtime":1615546574902,"results":"37","hashOfConfig":"25"},{"size":59054,"mtime":1621847434346,"results":"38","hashOfConfig":"25"},{"size":650,"mtime":1616070225969,"results":"39","hashOfConfig":"25"},{"size":180,"mtime":1612138266381,"results":"40","hashOfConfig":"25"},{"size":4820,"mtime":1621872286185,"results":"41","hashOfConfig":"25"},{"size":179,"mtime":1614855364341,"results":"42","hashOfConfig":"25"},{"size":6656,"mtime":1621872373726,"results":"43","hashOfConfig":"25"},{"size":862,"mtime":1612542954027,"results":"44","hashOfConfig":"25"},{"size":595,"mtime":1614865093901,"results":"45","hashOfConfig":"25"},{"size":1294,"mtime":1620748830350,"results":"46","hashOfConfig":"25"},{"size":1656,"mtime":1621286418521,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1f0e5p2",{"filePath":"50","messages":"51","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"60"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"60"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"/Users/gregdorward/Development/football-predictions/src/index.js",[],"/Users/gregdorward/Development/football-predictions/src/App.js",["97","98","99","100","101","102"],"/Users/gregdorward/Development/football-predictions/src/reportWebVitals.js",[],"/Users/gregdorward/Development/football-predictions/src/components/spinner.js",[],"/Users/gregdorward/Development/football-predictions/src/components/showCardPotential.js",[],"/Users/gregdorward/Development/football-predictions/src/components/createBadge.js",[],["103","104"],"/Users/gregdorward/Development/football-predictions/src/components/showBttsData.js",[],"/Users/gregdorward/Development/football-predictions/src/components/radio.js",[],"/Users/gregdorward/Development/football-predictions/src/components/Header.js",[],"/Users/gregdorward/Development/football-predictions/src/logic/getFixtures.js",["105"],"/Users/gregdorward/Development/football-predictions/src/components/createStatsDiv.js",["106"],"/Users/gregdorward/Development/football-predictions/src/logic/getForm.js",["107","108"],"import { proxyurl } from \"../App\";\n\nconst allTeamForm = [];\n\nexport async function applyColour(value) {\n  let colour;\n  switch (true) {\n    case value < 0.49:\n      colour = \"#CD5C5C\";\n      break;\n    case value >= 0.5 && value <= 1:\n      colour = \"#F08080\";\n      break;\n    case value >= 1.01 && value <= 1.25:\n      colour = \"#FFA07A\";\n      break;\n    case value >= 1.26 && value <= 1.5:\n      colour = \"#FFFFE0\";\n      break;\n    case value >= 1.51 && value <= 2:\n      colour = \"#CFDBC5\";\n      break;\n    case value >= 2.01 && value <= 2.5:\n      colour = \"#8AA37B\";\n      break;\n    case value >= 2.51 && value <= 3:\n      colour = \"#3F6826\";\n      break;\n    default:\n      colour = \"white\";\n      break;\n  }\n  return colour;\n}\n\nexport async function getForm(match) {\n  const teams = [match.homeId, match.awayId];\n  const fixtureForm = [];\n\n  for (let i = 0; i < teams.length; i++) {\n    const team = teams[i];\n\n    let response = await fetch(\n      `${process.env.REACT_APP_EXPRESS_SERVER}form/${team}`\n    );\n    await response.json().then((formData) => {\n      fixtureForm[i] = formData;\n    });\n  }\n  return fixtureForm;\n}\n","/Users/gregdorward/Development/football-predictions/src/components/Button.js",[],"/Users/gregdorward/Development/football-predictions/src/logic/getScorePredictions.js",["109","110","111","112","113","114","115","116"],"import React, { Fragment } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { matches, diff } from \"./getFixtures\";\nimport { Fixture } from \"../components/Fixture\";\nimport { selectedOption } from \"../components/radio\";\nimport Div from \"../components/Div\";\nimport Collapsable from \"../components/CollapsableElement\";\nimport { allForm } from \"../logic/getFixtures\";\nimport Increment from \"../components/Increment\";\nimport { incrementValue } from \"../components/Increment\";\nimport { getBTTSPotential } from \"../logic/getBTTSPotential\";\nimport { ThreeDots } from \"react-loading-icons\";\n\nvar myHeaders = new Headers();\nmyHeaders.append(\"Origin\", \"https://gregdorward.github.io\");\n\nlet finalHomeGoals;\nlet finalAwayGoals;\nlet rawFinalHomeGoals;\nlet rawFinalAwayGoals;\nlet totalGoals = 0;\nlet numberOfGames = 0;\nexport var renderPredictions;\n\nfunction getPointsFromLastFive(last5) {\n  let points = 0;\n  let pointsAddition;\n\n  last5.forEach((game) => {\n    switch (true) {\n      case game === \"W\":\n        pointsAddition = 3;\n        break;\n      case game === \"D\":\n        pointsAddition = 1;\n        break;\n      case game === \"L\":\n        pointsAddition = 0;\n        break;\n      default:\n        break;\n    }\n\n    points = points + pointsAddition;\n  });\n  return points;\n}\n\nasync function getOverOrUnderAchievingResult(index, overUnderAchievingSum) {\n  let result;\n  let multiplier;\n\n  switch (true) {\n    case index === 0:\n      switch (true) {\n        case overUnderAchievingSum <= -0.9:\n          result = \"overachievingDrastically\";\n          multiplier = 0.75\n          break;\n        case overUnderAchievingSum < -0.2 && overUnderAchievingSum > -0.9:\n          result = \"overachieving\";\n          multiplier = 0.9\n          break;\n        case overUnderAchievingSum > 0.2 && overUnderAchievingSum < 0.9:\n          result = \"underachieving\";\n          multiplier = 1.1\n          break;\n        case overUnderAchievingSum > 0.9:\n          result = \"underachievingDrastically\";\n          multiplier = 1.25\n          break;\n        default:\n          result = \"onPar\";\n          multiplier = 1\n          break;\n      }\n\n      break;\n\n    case index === 1:\n      switch (true) {\n        case overUnderAchievingSum <= -0.85:\n          result = \"overachievingDrastically\";\n          multiplier = 0.75\n          break;\n        case overUnderAchievingSum < -0.2 && overUnderAchievingSum > -0.85:\n          result = \"overachieving\";\n          multiplier = 0.9\n          break;\n        case overUnderAchievingSum > 0.2 && overUnderAchievingSum < 0.85:\n          result = \"underachieving\";\n          multiplier = 1.1\n          break;\n        case overUnderAchievingSum > 0.85:\n          result = \"underachievingDrastically\";\n          multiplier = 1.25\n          break;\n        default:\n          result = \"onPar\";\n          multiplier = 1\n          break;\n      }\n\n      break;\n\n    case index === 2:\n      switch (true) {\n        case overUnderAchievingSum <= -0.8:\n          result = \"overachievingDrastically\";\n          multiplier = 0.75\n          break;\n        case overUnderAchievingSum < -0.1 && overUnderAchievingSum > -0.8:\n          result = \"overachieving\";\n          multiplier = 0.9\n          break;\n        case overUnderAchievingSum > 0.1 && overUnderAchievingSum < 0.8:\n          result = \"underachieving\";\n          multiplier = 1.1\n          break;\n        case overUnderAchievingSum > 0.8:\n          result = \"underachievingDrastically\";\n          multiplier = 1.25\n          break;\n        default:\n          result = \"onPar\";\n          multiplier = 1\n          break;\n      }\n\n      break;\n    default:\n      break;\n  }\n  return [result, multiplier];\n}\n\nasync function getClinicalRating(form) {\n  let rating;\n  let score;\n  switch (true) {\n    case form.dangerousAttackConversion <= 15:\n      rating = \"excellent\";\n      score = 1.3;\n      break;\n\n    case form.dangerousAttackConversion > 15 &&\n      form.dangerousAttackConversion <= 20:\n      rating = \"great\";\n      score = 1.2;\n      break;\n\n    case form.dangerousAttackConversion > 20 &&\n      form.dangerousAttackConversion <= 25:\n      rating = \"very good\";\n      score = 1.15;\n      break;\n\n    case form.dangerousAttackConversion > 25 &&\n      form.dangerousAttackConversion <= 30:\n      rating = \"good\";\n      score = 1.1;\n      break;\n\n    case form.dangerousAttackConversion > 30 &&\n      form.dangerousAttackConversion <= 35:\n      rating = \"above average\";\n      score = 1.05;\n      break;\n\n    case form.dangerousAttackConversion > 35 &&\n      form.dangerousAttackConversion <= 40:\n      rating = \"average\";\n      score = 1;\n      break;\n\n    case form.dangerousAttackConversion > 40 &&\n      form.dangerousAttackConversion <= 45:\n      rating = \"below average\";\n      score = 0.95;\n      break;\n\n    case form.dangerousAttackConversion > 45 &&\n      form.dangerousAttackConversion <= 50:\n      rating = \"poor\";\n      score = 0.9;\n      break;\n\n    case form.dangerousAttackConversion > 50 &&\n      form.dangerousAttackConversion <= 55:\n      rating = \"very poor\";\n      score = 0.85;\n      break;\n\n    case form.dangerousAttackConversion > 55 &&\n      form.dangerousAttackConversion <= 60:\n      rating = \"terrible\";\n      score = 0.8;\n      break;\n\n    case form.dangerousAttackConversion > 60:\n      rating = \"awful\";\n      score = 0.7;\n      break;\n\n    default:\n      break;\n  }\n\n  return [rating, score];\n}\n\nasync function getQualityOfAttacksScore(score) {\n  let creativityScore;\n\n  switch (true) {\n    case score <= 0.1:\n      creativityScore = 0.7;\n      break;\n    case score <= 0.2 && score > 0.1:\n      creativityScore = 0.8;\n      break;\n    case score <= 0.3 && score > 0.2:\n      creativityScore = 0.9;\n      break;\n    case score <= 0.4 && score > 0.3:\n      creativityScore = 1;\n      break;\n    case score <= 0.5 && score > 0.4:\n      creativityScore = 1.1;\n      break;\n    case score <= 0.6 && score > 0.5:\n      creativityScore = 1.2;\n      break;\n    case score <= 0.7 && score > 0.6:\n      creativityScore = 1.3;\n      break;\n    case score <= 0.8 && score > 0.7:\n      creativityScore = 1.4;\n      break;\n    case score <= 0.9 && score > 0.8:\n      creativityScore = 1.5;\n      break;\n    case score <= 1 && score > 0.9:\n      creativityScore = 1.6;\n      break;\n    default:\n      creativityScore = 1;\n      break;\n  }\n  return creativityScore;\n}\n\nasync function getPointsDifferential(pointsHome, pointsAway) {\n  const differential = await diff(pointsHome, pointsAway);\n  return differential;\n}\n\nasync function getPointWeighting(pointsDiff) {\n  let last5WeightingHome;\n  let last5WeightingAway;\n\n  switch (true) {\n    case pointsDiff >= 12:\n      last5WeightingHome = 0.3;\n      last5WeightingAway = -0.3;\n      break;\n    case pointsDiff >= 10 && pointsDiff < 12:\n      last5WeightingHome = 0.2;\n      last5WeightingAway = -0.2;\n      break;\n    case pointsDiff >= 8 && pointsDiff < 10:\n      last5WeightingHome = 0.15;\n      last5WeightingAway = -0.15;\n      break;\n    case pointsDiff >= 6 && pointsDiff < 8:\n      last5WeightingHome = 0.1;\n      last5WeightingAway = -0.1;\n      break;\n    case pointsDiff >= 4 && pointsDiff < 6:\n      last5WeightingHome = 0.05;\n      last5WeightingAway = -0.05;\n      break;\n    case pointsDiff >= 2 && pointsDiff < 4:\n      last5WeightingHome = 0.01;\n      last5WeightingAway = -0.01;\n      break;\n    case pointsDiff >= 0 && pointsDiff < 2:\n      last5WeightingHome = 0.005;\n      last5WeightingAway = -0.005;\n      break;\n    case pointsDiff < 0 && pointsDiff > -2:\n      last5WeightingHome = -0.005;\n      last5WeightingAway = 0.005;\n      break;\n    case pointsDiff <= -2 && pointsDiff > -4:\n      last5WeightingHome = -0.01;\n      last5WeightingAway = 0.01;\n      break;\n    case pointsDiff <= -4 && pointsDiff > -6:\n      last5WeightingHome = -0.05;\n      last5WeightingAway = 0.05;\n      break;\n    case pointsDiff <= -6 && pointsDiff > -8:\n      last5WeightingHome = -0.1;\n      last5WeightingAway = 0.1;\n      break;\n    case pointsDiff <= -8 && pointsDiff > -10:\n      last5WeightingHome = -0.15;\n      last5WeightingAway = 0.15;\n      break;\n    case pointsDiff <= -10 && pointsDiff > -12:\n      last5WeightingHome = -0.2;\n      last5WeightingAway = 0.2;\n      break;\n    case pointsDiff <= -12:\n      last5WeightingHome = -0.3;\n      last5WeightingAway = 0.3;\n      break;\n    default:\n      last5WeightingHome = 0;\n      last5WeightingAway = 0;\n      break;\n  }\n  return [last5WeightingHome, last5WeightingAway];\n}\n\nasync function getDAPrediction(odds) {\n  let multiplier;\n  switch (true) {\n    case odds <= 1.1:\n      multiplier = 1.5;\n      break;\n    case odds <= 1.2 && odds > 1.1:\n      multiplier = 1.4;\n      break;\n    case odds <= 1.4 && odds > 1.2:\n      multiplier = 1.3;\n      break;\n    case odds <= 1.6 && odds > 1.4:\n      multiplier = 1.2;\n      break;\n    case odds <= 1.8 && odds > 1.6:\n      multiplier = 1.1;\n      break;\n    case odds <= 2 && odds > 1.8:\n      multiplier = 1;\n      break;\n    case odds <= 2.2 && odds > 2:\n      multiplier = 1;\n      break;\n    case odds <= 3 && odds > 2.2:\n      multiplier = 1;\n      break;\n    case odds <= 3.5 && odds > 3:\n      multiplier = 0.9;\n      break;\n    case odds <= 4 && odds > 3.5:\n      multiplier = 0.8;\n      break;\n    case odds <= 5 && odds > 4:\n      multiplier = 0.7;\n      break;\n    case odds <= 6 && odds > 5:\n      multiplier = 0.6;\n      break;\n    case odds <= 8 && odds > 6:\n      multiplier = 0.5;\n      break;\n    case odds > 8:\n      multiplier = 0.4;\n      break;\n    default:\n      break;\n  }\n  return multiplier;\n}\n\n//Calculates scores based on prior XG figures, weighted by odds\nexport async function calculateScore(match, index, divider, id) {\n  let homeRaw;\n  let awayRaw;\n\n  let teams;\n  let calculate = true;\n\n  let gameTotalWeighting;\n\n  console.log(match);\n\n  switch (true) {\n    case divider === 5:\n      gameTotalWeighting = 1.4;\n      break;\n    case divider === 6:\n      gameTotalWeighting = 2;\n      break;\n    case divider === 10:\n      gameTotalWeighting = 3;\n      break;\n    default:\n      break;\n  }\n\n  if (\n    allForm.find(\n      (game) =>\n        game.home.teamName === match.homeTeam &&\n        game.away.teamName === match.awayTeam\n    )\n  ) {\n    teams = [\n      allForm.find((game) => game.home.teamName === match.homeTeam).home,\n      allForm.find((game) => game.away.teamName === match.awayTeam).away,\n    ];\n    // console.log(`teams:`);\n    // console.log(teams[0]);\n    // console.log(teams[1]);\n    // console.log(match.homeTeam);\n    // console.log(match.awayTeam);\n  } else {\n    calculate = false;\n  }\n\n  if (calculate) {\n    for (let i = 0; i < teams.length; i++) {\n      if (teams[0][index].PlayedHome <= 1 || teams[1][index].PlayedAway <= 1) {\n        index = 2;\n        divider = 10;\n      }\n\n      teams[i][index].lastGame = teams[i][index].LastFiveForm[4];\n      teams[i][index].previousToLastGame = teams[i][index].LastFiveForm[3];\n\n      teams[i][index].last5Points = getPointsFromLastFive(\n        teams[i][index].LastFiveForm\n      );\n\n      teams[i][index].scoredAverage = teams[i][index].ScoredOverall / divider;\n      teams[i][index].concededAverage =\n        teams[i][index].ConcededOverall / divider;\n\n      teams[0][index].expectedGoals = parseFloat(teams[0][index].XGHome);\n      teams[1][index].expectedGoals = parseFloat(teams[1][index].XGAway);\n      teams[0][index].expectedGoalsConceeded = parseFloat(\n        teams[0][index].XGAgainstHome\n      );\n      teams[1][index].expectedGoalsConceeded = parseFloat(\n        teams[1][index].XGAgainstAway\n      );\n      teams[i][index].longTermAverageGoals = teams[i][2].ScoredOverall / 10;\n      teams[i][index].longTermAverageConceeded =\n        teams[i][2].ConcededOverall / 10;\n\n      teams[0][index].expectedGoalsLongTerm = parseFloat(teams[0][2].XGHome);\n      teams[1][index].expectedGoalsLongTerm = parseFloat(teams[1][2].XGAway);\n\n      teams[0][index].expectedConceededGoalsLongTerm = parseFloat(\n        teams[0][2].XGAgainstHome\n      );\n      teams[1][index].expectedConceededGoalsLongTerm = parseFloat(\n        teams[1][2].XGAgainstAway\n      );\n\n      teams[i][index].scoredAverageShortAndLongTerm =\n        (teams[i][index].longTermAverageGoals + teams[i][index].scoredAverage) /\n        2;\n\n      teams[i][index].expectedGoalsShortAndLongTerm =\n        (teams[i][index].expectedGoalsLongTerm +\n          teams[i][index].expectedGoals) /\n        2;\n\n      teams[i][index].conceededAverageShortAndLongTerm =\n        (teams[i][index].longTermAverageConceeded +\n          teams[i][index].concededAverage) /\n        2;\n\n      teams[i][index].expectedConceededGoalsShortAndLongTerm =\n        (teams[i][index].expectedConceededGoalsLongTerm +\n          teams[i][index].expectedGoalsConceeded) /\n        2;\n\n      teams[i][index].generalOffensiveRating =\n        (teams[i][2].ScoredOverall / 10 +\n          teams[i][2].XG +\n          teams[i][2].AverageShotsOnTarget / 3.5 +\n          teams[i][2].AverageDangerousAttacks / 42.5) /\n        3;\n      teams[i][index].homeOffensiveRating =\n        (teams[i][2].ScoredHome / teams[i][2].PlayedHome +\n          teams[i][2].XGHome +\n          teams[i][2].DangerousAttacksHome / 45) /\n        3;\n      teams[i][index].awayOffensiveRating =\n        (teams[i][2].ScoredAway / teams[i][2].PlayedAway +\n          teams[i][2].XGAway +\n          teams[i][2].DangerousAttacksAway / 40) /\n        3;\n\n      teams[i][index].generalDefensiveRating =\n        (teams[i][2].ConcededOverall / 10 + teams[i][2].XGAgainstAvg) / 2;\n\n      teams[i][index].homeDefensiveRating =\n        (teams[i][2].ConcededHome / teams[i][2].PlayedHome +\n          teams[i][2].XGAgainstHome) /\n        2;\n      teams[i][index].awayDefensiveRating =\n        (teams[i][2].ConcededAway / teams[i][2].PlayedAway +\n          teams[i][2].XGAgainstAway) /\n        2;\n\n      teams[i][index].recentGeneralOffensiveRating =\n        (teams[i][index].ScoredOverall / divider +\n          teams[i][index].XG +\n          teams[i][index].AverageShotsOnTarget / 3.5 +\n          teams[i][index].AverageDangerousAttacks / 42.5) /\n        3;\n      teams[i][index].recentHomeOffensiveRating =\n        (teams[i][index].ScoredHome / teams[i][index].PlayedHome +\n          teams[i][index].XGHome +\n          teams[i][index].DangerousAttacksHome / 45) /\n        3;\n      teams[i][index].recentAwayOffensiveRating =\n        (teams[i][index].ScoredAway / teams[i][index].PlayedAway +\n          teams[i][index].XGAway +\n          teams[i][index].DangerousAttacksAway / 40) /\n        3;\n\n      teams[i][index].recentGeneralDefensiveRating =\n        (teams[i][index].ConcededOverall / divider +\n          teams[i][index].XGAgainstAvg) /\n        2;\n\n      teams[i][index].recentHomeDefensiveRating =\n        (teams[i][index].ConcededHome / teams[i][index].PlayedHome +\n          teams[i][index].XGAgainstHome) /\n        2;\n      teams[i][index].recentAwayDefensiveRating =\n        teams[i][index].ConcededAway / teams[i][index].PlayedAway +\n        teams[i][index].XGAgainstAway / 2;\n\n      if (teams[0][index].ScoredHome > 0) {\n        teams[0][index].finishingScore = parseFloat(\n          teams[0][index].expectedGoalsShortAndLongTerm -\n            teams[0][index].scoredAverageShortAndLongTerm\n\n          // teams[0][index].scoredAverageShortAndLongTerm /\n          //   teams[0][index].expectedGoalsShortAndLongTerm\n        );\n      } else {\n        teams[0][index].finishingScore = 0;\n      }\n\n      if (teams[1][index].ScoredAway > 0) {\n        teams[1][index].finishingScore = parseFloat(\n          teams[1][index].expectedGoalsShortAndLongTerm -\n            teams[1][index].scoredAverageShortAndLongTerm\n\n          // teams[1][index].scoredAverageShortAndLongTerm /\n          //   teams[1][index].expectedGoalsShortAndLongTerm\n        );\n      } else {\n        teams[1][index].finishingScore = 0;\n      }\n\n      if (teams[0][index].ConcededHome > 0) {\n        teams[0][index].goalieRating = parseFloat(\n          teams[0][index].conceededAverageShortAndLongTerm -\n            teams[0][index].expectedConceededGoalsShortAndLongTerm\n\n          // teams[0][index].conceededAverageShortAndLongTerm /\n          //   teams[0][index].expectedConceededGoalsShortAndLongTerm\n        );\n      } else {\n        teams[0][index].goalieRating = 0;\n      }\n\n      if (teams[1][index].ConcededAway > 0) {\n        teams[1][index].goalieRating = parseFloat(\n          teams[1][index].conceededAverageShortAndLongTerm -\n            teams[1][index].expectedConceededGoalsShortAndLongTerm\n\n          // teams[1][index].conceededAverageShortAndLongTerm /\n          //   teams[1][index].expectedConceededGoalsShortAndLongTerm\n        );\n      } else {\n        teams[1][index].goalieRating = 0;\n      }\n\n      teams[i][index].defenceScore = parseInt(\n        teams[i][index].CleanSheetPercentage\n      );\n\n      let defenceScore;\n      defenceScore = teams[i][index].defenceScore;\n\n      switch (true) {\n        case defenceScore === 0:\n          teams[i][index].defenceRating = 1.2;\n          break;\n        case defenceScore > 0 && defenceScore < 20:\n          teams[i][index].defenceRating = 1.1;\n          break;\n        case defenceScore >= 20 && defenceScore < 30:\n          teams[i][index].defenceRating = 1.05;\n          break;\n        case defenceScore >= 30 && defenceScore < 40:\n          teams[i][index].defenceRating = 1.01;\n          break;\n        case defenceScore >= 40 && defenceScore < 50:\n          teams[i][index].defenceRating = 1;\n          break;\n        case defenceScore >= 50 && defenceScore < 60:\n          teams[i][index].defenceRating = 0.99;\n          break;\n        case defenceScore >= 60 && defenceScore < 70:\n          teams[i][index].defenceRating = 0.95;\n          break;\n        case defenceScore >= 70 && defenceScore < 80:\n          teams[i][index].defenceRating = 0.9;\n          break;\n        case defenceScore >= 80:\n          teams[i][index].defenceRating = 0.8;\n          break;\n        default:\n          break;\n      }\n\n      teams[0][index].homeAttackAdvantageWeighted = parseFloat(\n        teams[0][index].homeAttackAdvantage / 1\n      );\n      teams[0][index].homeDefenceAdvantageWeighted = parseFloat(\n        teams[0][index].homeDefenceAdvantage / 1\n      );\n\n      let goalOverOrUnderAchieving = parseFloat(\n        await diff(teams[i][index].finishingScore, 0)\n      );\n\n      if(teams[i][index].scoredAverage < 0.5){\n        goalOverOrUnderAchieving = goalOverOrUnderAchieving / 4\n      }\n\n      let concededOverOrUnderAchieving = parseFloat(\n        await diff(teams[i][index].goalieRating, 0)\n      );\n\n      if(teams[i][index].concededAverage < 0.5){\n        concededOverOrUnderAchieving = concededOverOrUnderAchieving / 4\n      }\n\n      console.log(`Team ${teams[i].teamName}`);\n      console.log(\n        `scoredAverage ${teams[i][index].scoredAverageShortAndLongTerm}`\n      );\n      console.log(\n        `xg short and long term ${teams[i][index].expectedGoalsShortAndLongTerm}`\n      );\n      console.log(\n        `teams[i][index].finishingScore ${teams[i][index].finishingScore}`\n      );\n\n      console.log(`goalOverOrUnderAchieving ${goalOverOrUnderAchieving}`);\n\n      console.log(\n        `conceded Average ${teams[i][index].conceededAverageShortAndLongTerm}`\n      );\n      console.log(\n        `xg conceded short and long term ${teams[i][index].expectedConceededGoalsShortAndLongTerm}`\n      );\n      console.log(\n        `teams[i][index].goalieRating ${teams[i][index].goalieRating}`\n      );\n\n      console.log(\n        `concededOverOrUnderAchieving ${concededOverOrUnderAchieving}`\n      );\n\n      teams[i][index].overUnderAchievingSum =\n        goalOverOrUnderAchieving + concededOverOrUnderAchieving;\n\n      console.log(`SUM ${teams[i][index].overUnderAchievingSum}`);\n\n      if (\n        teams[i][index].finishingScore !== \"N/A\" &&\n        teams[i][index].scoredAverageShortAndLongTerm >= 1\n      ) {\n        teams[i][index].AverageGoalsWeightedWithXG =\n          (await diff(1, teams[i][index].finishingScore)) * gameTotalWeighting +\n          teams[i][index].scoredAverageShortAndLongTerm;\n\n        teams[i][index].trueFormGoalsWeighting =\n          // (await diff(1, teams[i][index].finishingScore)) * gameTotalWeighting +\n          teams[i][index].scoredAverageShortAndLongTerm +\n          goalOverOrUnderAchieving * gameTotalWeighting;\n      } else if (\n        teams[i][index].scoredAverageShortAndLongTerm < 1 &&\n        teams[i][index].scoredAverageShortAndLongTerm >= 0.6\n      ) {\n        teams[i][index].AverageGoalsWeightedWithXG =\n          (await diff(1, teams[i][index].finishingScore)) *\n            (gameTotalWeighting / 1) +\n          teams[i][index].scoredAverageShortAndLongTerm;\n\n        teams[i][index].trueFormGoalsWeighting =\n          // (await diff(1, teams[i][index].finishingScore)) * gameTotalWeighting +\n          teams[i][index].scoredAverageShortAndLongTerm +\n          goalOverOrUnderAchieving * gameTotalWeighting;\n      } else if (\n        teams[i][index].scoredAverageShortAndLongTerm < 0.6 &&\n        teams[i][index].scoredAverageShortAndLongTerm > 0.3\n      ) {\n        teams[i][index].AverageGoalsWeightedWithXG =\n          (await diff(1, teams[i][index].finishingScore)) *\n            (gameTotalWeighting / 2) +\n          teams[i][index].scoredAverageShortAndLongTerm;\n\n        teams[i][index].trueFormGoalsWeighting =\n          // (await diff(1, teams[i][index].finishingScore)) *\n          //   (gameTotalWeighting / 2) +\n          teams[i][index].scoredAverageShortAndLongTerm +\n          goalOverOrUnderAchieving * gameTotalWeighting;\n      } else {\n        teams[i][index].AverageGoalsWeightedWithXG =\n          teams[i][index].scoredAverageShortAndLongTerm;\n\n        teams[i][index].trueFormGoalsWeighting = teams[i][index].scoredAverage;\n      }\n\n      if (\n        teams[i][index].conceededAverageShortAndLongTerm >= 1 &&\n        teams[i][index].concededAverage > 0\n      ) {\n        teams[i][index].AverageGoalsConceededWeightedWithXG =\n          (await diff(teams[i][index].goalieRating, 1)) * gameTotalWeighting +\n          teams[i][index].conceededAverageShortAndLongTerm;\n\n        teams[i][index].trueFormConceededWeighting =\n          // (await diff(1, teams[i][index].goalieRating)) * gameTotalWeighting +\n          teams[i][index].conceededAverageShortAndLongTerm -\n          concededOverOrUnderAchieving * gameTotalWeighting;\n      } else if (\n        teams[i][index].conceededAverageShortAndLongTerm < 1 &&\n        teams[i][index].conceededAverageShortAndLongTerm >= 0.6 &&\n        teams[i][index].concededAverage > 0\n      ) {\n        teams[i][index].AverageGoalsConceededWeightedWithXG =\n          (await diff(1, teams[i][index].goalieRating)) *\n            (gameTotalWeighting / 1) +\n          teams[i][index].conceededAverageShortAndLongTerm;\n\n        teams[i][index].trueFormConceededWeighting =\n          // (await diff(1, teams[i][index].goalieRating)) * gameTotalWeighting +\n          teams[i][index].conceededAverageShortAndLongTerm -\n          concededOverOrUnderAchieving * gameTotalWeighting;\n      } else if (\n        teams[i][index].conceededAverageShortAndLongTerm < 0.6 &&\n        teams[i][index].conceededAverageShortAndLongTerm >= 0.3 &&\n        teams[i][index].concededAverage > 0\n      ) {\n        teams[i][index].AverageGoalsConceededWeightedWithXG =\n          (await diff(1, teams[i][index].goalieRating)) *\n            (gameTotalWeighting / 2) +\n          teams[i][index].conceededAverageShortAndLongTerm;\n\n        teams[i][index].trueFormConceededWeighting =\n          // (await diff(1, teams[i][index].goalieRating)) *\n          //   (gameTotalWeighting / 2) +\n          teams[i][index].conceededAverageShortAndLongTerm -\n          concededOverOrUnderAchieving * gameTotalWeighting;\n      } else {\n        teams[i][index].AverageGoalsConceededWeightedWithXG =\n          teams[i][index].conceededAverageShortAndLongTerm;\n\n        teams[i][index].trueFormConceededWeighting =\n          teams[i][index].concededAverage;\n      }\n\n      teams[i][index].forecastedXG = parseFloat(teams[i][index].scoredAverage);\n\n      teams[i][index].forecastedXGConceded = parseFloat(\n        teams[i][index].concededAverage\n      );\n\n      teams[0][index].goalsBasedOnAverages = parseFloat(\n        (teams[0][index].forecastedXG + teams[1][index].forecastedXGConceded) /\n          2\n      );\n\n      teams[1][index].goalsBasedOnAverages = parseFloat(\n        (teams[1][index].forecastedXG + teams[0][index].forecastedXGConceded) /\n          2\n      );\n\n      teams[i][index].XGdifferential =\n        parseFloat(teams[i][index].expectedGoals) -\n        parseFloat(teams[i][index].expectedGoalsConceeded);\n\n      teams[0][index].DAmultiplier = await getDAPrediction(match.homeOdds);\n      teams[1][index].DAmultiplier = await getDAPrediction(match.awayOdds);\n\n      switch (true) {\n        case teams[i][index].XGdifferential > 1:\n          teams[i][index].XGWeighting = 1.2;\n          break;\n        case teams[i][index].XGdifferential <= 1 &&\n          teams[i][index].XGdifferential > 0.5:\n          teams[i][index].XGWeighting = 1.1;\n          break;\n        case teams[i][index].XGdifferential <= 0.5 &&\n          teams[i][index].XGdifferential > 0:\n          teams[i][index].XGWeighting = 1.05;\n          break;\n        case teams[i][index].XGdifferential >= -0.5 &&\n          teams[i][index].XGdifferential < 0:\n          teams[i][index].XGWeighting = -0.95;\n          break;\n        case teams[i][index].XGdifferential >= -1 &&\n          teams[i][index].XGdifferential < -0.5:\n          teams[i][index].XGWeighting = 0.9;\n          break;\n        case teams[i][index].XGdifferential < -1:\n          teams[i][index].XGWeighting = 0.8;\n          break;\n        default:\n          teams[i][index].XGWeighting = 1;\n          break;\n      }\n    }\n\n    if (\n      (match.homeOdds === 0 && match.awayOdds === 0) ||\n      (match.homeOdds === \"N/A\" && match.awayOdds === \"N/A\")\n    ) {\n      homeRaw = 1.0;\n      awayRaw = 1.0;\n    } else {\n      homeRaw = (1 / match.homeOdds).toFixed(2);\n      awayRaw = (1 / match.awayOdds).toFixed(2);\n    }\n\n    let formHome = teams[0][index];\n    let formAway = teams[1][index];\n\n    [formHome.overOrUnder, formHome.trueFormMultiplier] = await getOverOrUnderAchievingResult(\n      index,\n      formHome.overUnderAchievingSum\n    );\n    [formAway.overOrUnder, formAway.trueFormMultiplier] = await getOverOrUnderAchievingResult(\n      index,\n      formAway.overUnderAchievingSum\n    );\n\n    let pointsDiff = await getPointsDifferential(\n      formHome.last5Points,\n      formAway.last5Points\n    );\n\n    let [last5WeightingHome, last5WeightingAway] = await getPointWeighting(\n      pointsDiff\n    );\n\n    // let gameValue;\n\n    // if (divider === 5) {\n    //   gameValue = 2;\n    // } else if (divider === 6) {\n    //   gameValue = 1.8;\n    // } else if (divider === 10) {\n    //   gameValue = 1;\n    // }\n\n    // formHome.averageGoalDifferential =\n    //   ((formHome.homeOffensiveRating - formAway.awayOffensiveRating) *\n    //     gameValue +\n    //     (formHome.recentHomeOffensiveRating -\n    //       formAway.recentHomeOffensiveRating)) /\n    //   (gameValue + 1);\n    // formHome.averageConcededDifferential =\n    //   ((formHome.homeDefensiveRating - formAway.awayDefensiveRating) *\n    //     gameValue +\n    //     (formHome.recentHomeDefensiveRating -\n    //       formAway.recentAwayDefensiveRating)) /\n    //   (gameValue + 1);\n\n    // formAway.averageGoalDifferential =\n    //   ((formAway.awayOffensiveRating - formHome.homeOffensiveRating) *\n    //     gameValue +\n    //     (formAway.recentAwayOffensiveRating -\n    //       formHome.recentHomeOffensiveRating)) /\n    //   (gameValue + 1);\n    // formAway.averageConcededDifferential =\n    //   ((formAway.awayDefensiveRating - formHome.homeDefensiveRating) *\n    //     gameValue +\n    //     (formAway.recentAwayDefensiveRating -\n    //       formHome.recentHomeDefensiveRating)) /\n    //   (gameValue + 1);\n\n    let PPGweightingHome;\n    let PPGweightingAway;\n\n    if (formHome.SeasonPPG !== \"N/A\" && formAway.SeasonPPG !== \"N/A\") {\n      let homePPG = formHome.SeasonPPG;\n      let awayPPG = formAway.SeasonPPG;\n      let PPGdiff = await diff(homePPG, awayPPG);\n\n      switch (true) {\n        case PPGdiff >= 2:\n          PPGweightingHome = 0.3;\n          PPGweightingAway = -0.3;\n          break;\n        case PPGdiff >= 1.5 && PPGdiff < 2:\n          PPGweightingHome = 0.2;\n          PPGweightingAway = -0.2;\n          break;\n        case PPGdiff >= 1 && PPGdiff < 1.5:\n          PPGweightingHome = 0.1;\n          PPGweightingAway = -0.1;\n          break;\n        case PPGdiff >= 0.5 && PPGdiff < 1:\n          PPGweightingHome = 0.05;\n          PPGweightingAway = -0.05;\n          break;\n        case PPGdiff > 0 && PPGdiff < 0.5:\n          PPGweightingHome = 0.02;\n          PPGweightingAway = -0.02;\n          break;\n        case PPGdiff < 0 && PPGdiff > -0.5:\n          PPGweightingHome = -0.02;\n          PPGweightingAway = 0.02;\n          break;\n        case PPGdiff <= -0.5 && PPGdiff > -1:\n          PPGweightingHome = -0.05;\n          PPGweightingAway = 0.05;\n          break;\n        case PPGdiff <= -1 && PPGdiff > -1.5:\n          PPGweightingHome = -0.1;\n          PPGweightingAway = 0.1;\n          break;\n        case PPGdiff <= -1.5 && PPGdiff > -2:\n          PPGweightingHome = -0.2;\n          PPGweightingAway = 0.2;\n          break;\n        case PPGdiff <= -2:\n          PPGweightingHome = -0.3;\n          PPGweightingAway = 0.3;\n          break;\n        default:\n          PPGweightingHome = 0;\n          PPGweightingAway = 0;\n          break;\n      }\n    } else {\n      PPGweightingHome = 0;\n      PPGweightingAway = 0;\n    }\n\n    formHome.dangerousAttackConversion =\n      formHome.AverageDangerousAttacks / formHome.scoredAverageShortAndLongTerm;\n    formAway.dangerousAttackConversion =\n      formAway.AverageDangerousAttacks / formAway.scoredAverageShortAndLongTerm;\n\n    formHome.goalsPerDangerousAttack =\n      formHome.scoredAverageShortAndLongTerm / formHome.AverageDangerousAttacks;\n    formAway.goalsPerDangerousAttack =\n      formAway.scoredAverageShortAndLongTerm / formAway.AverageDangerousAttacks;\n\n    [formHome.clinicalRating, formHome.clinicalScore] = await getClinicalRating(\n      formHome\n    );\n    [formAway.clinicalRating, formAway.clinicalScore] = await getClinicalRating(\n      formAway\n    );\n\n    let oddsWeightingHome;\n    let oddsWeightingAway;\n    let homeWeighting;\n    let awayWeighting;\n\n    let weightingSplitHome;\n    let weightingSplitAway;\n    let weighting;\n\n    if (homeRaw > 0) {\n      oddsWeightingHome = homeRaw - awayRaw;\n      oddsWeightingAway = awayRaw - homeRaw;\n\n      weighting = await diff(oddsWeightingHome, oddsWeightingAway);\n\n      if (weighting >= 0) {\n        weightingSplitHome = Math.abs(weighting) / 2;\n        weightingSplitAway = -Math.abs(weighting) / 2;\n      } else if (weighting < 0) {\n        weightingSplitHome = -Math.abs(weighting) / 2;\n        weightingSplitAway = Math.abs(weighting) / 2;\n      } else {\n        weightingSplitHome = 1;\n        weightingSplitAway = 1;\n      }\n    } else {\n      weightingSplitHome = 1;\n      weightingSplitAway = 1;\n    }\n\n    homeWeighting = weightingSplitHome * 1;\n    awayWeighting = weightingSplitAway * 1;\n\n    let homeCalculation;\n    let awayCalculation;\n\n    homeCalculation = parseFloat(1 + homeWeighting);\n    awayCalculation = parseFloat(1 + awayWeighting);\n\n    // console.log(`homeCalculation ${homeCalculation}`);\n\n    // console.log(`awayCalculation ${awayCalculation}`);\n\n    teams[0][index].predictedDA =\n      teams[0][index].DangerousAttacksHome * homeCalculation;\n    teams[1][index].predictedDA =\n      teams[1][index].DangerousAttacksAway * awayCalculation;\n\n    formHome.homeGoalWeighting = parseFloat(\n      1 + formHome.homeAttackAdvantage / 100\n    );\n    formHome.homeDefenceWeighting = parseFloat(\n      1 + formHome.homeDefenceAdvantage / 100\n    );\n\n    formHome.homeAdv = parseFloat(\n      (formAway.homeGoalWeighting + formHome.homeDefenceWeighting) / 2\n    );\n\n    const homeGoalsUnweighted = parseFloat(\n      (formHome.expectedGoals + formHome.scoredAverage) / 2\n    );\n\n    const awayGoalsUnweighted = parseFloat(\n      (formAway.expectedGoals + formAway.scoredAverage) / 2\n    );\n\n    const homeGoalsWithOddsWeighting = parseFloat(\n      homeGoalsUnweighted + homeCalculation\n    );\n\n    const awayGoalsWithOddsWeighting = parseFloat(\n      awayGoalsUnweighted + awayCalculation\n    );\n\n    const homeGoalsWithAwayDefenceWeighting = parseFloat(\n      homeGoalsWithOddsWeighting * formAway.defenceRating\n    );\n\n    const awayGoalsWithHomeDefenceWeighting = parseFloat(\n      awayGoalsWithOddsWeighting * formHome.defenceRating\n    );\n\n    let homeGoalswithHomeWeighting;\n    let awayGoalswithAwayWeighting;\n\n    homeGoalswithHomeWeighting = parseFloat(homeGoalsWithAwayDefenceWeighting);\n\n    awayGoalswithAwayWeighting = parseFloat(awayGoalsWithHomeDefenceWeighting);\n\n    if (homeGoalswithHomeWeighting < 0) {\n      homeGoalswithHomeWeighting = 0;\n    }\n\n    if (awayGoalswithAwayWeighting < 0) {\n      awayGoalswithAwayWeighting = 0;\n    }\n\n    formHome.creationToConversionScore =\n      formHome.DangerousAttacksHome / formHome.expectedGoals;\n    formAway.creationToConversionScore =\n      formAway.DangerousAttacksAway / formAway.expectedGoals;\n\n    formHome.creationToConversionScoreV2 =\n      formHome.AttacksHome /\n      formHome.AverageDangerousAttacks /\n      formHome.AverageShotsOnTarget /\n      formHome.expectedGoals;\n    formAway.creationToConversionScoreV2 =\n      formAway.AttacksAway /\n      formAway.AverageDangerousAttacks /\n      formAway.AverageShotsOnTarget /\n      formAway.expectedGoals;\n\n    formHome.attackQualityMultiplier = await getQualityOfAttacksScore(\n      formHome.creationToConversionScoreV2\n    );\n    formAway.attackQualityMultiplier = await getQualityOfAttacksScore(\n      formAway.creationToConversionScoreV2\n    );\n\n    let finalHomeGoals;\n    let finalAwayGoals;\n\n    async function roundCustom(num, form, otherTeamForm) {\n      let wholeNumber = Math.floor(num);\n      let remainder = num - wholeNumber;\n\n      // if(form.dangerousAttackConversion === \"excellent\" || form.dangerousAttackConversion === \"great\" || form.dangerousAttackConversion === \"very good\" || form.dangerousAttackConversion === \"good\" || form.dangerousAttackConversion === \"above average\"){\n      //   return Math.ceil(num)\n      // } else if(form.dangerousAttackConversion === \"awful\" || form.dangerousAttackConversion === \"terrible\" || form.dangerousAttackConversion === \"very poor\" || form.dangerousAttackConversion === \"poor\" || form.dangerousAttackConversion === \"below average\"){\n      //   return Math.ceil(num)\n      // } else {\n      //   return Math.round(num)\n      // }\n\n      console.log(num);\n      console.log(wholeNumber);\n      console.log(remainder);\n\n      if (wholeNumber === 0) {\n        console.log(\"triggered\");\n        if (\n          form.overOrUnder === \"overachievingDrastically\" ||\n          form.overOrUnder === \"overachieving\"\n        ) {\n          return Math.floor(num);\n        } else if (\n          form.overOrUnder === \"underachievingDrastically\" ||\n          form.overOrUnder === \"underachieving\"\n        ) {\n          return Math.ceil(num);\n        } else {\n          return Math.round(num);\n        }\n      } else if (remainder > 0.80) {\n        return Math.ceil(num);\n      } else if (remainder <= 0.80) {\n        return Math.floor(num);\n      }\n\n      // return Math.round(num)\n\n      // if (\n      //   form.AverageGoalsWeightedWithXG > num &&\n      //   otherTeamForm.AverageGoalsConceededWeightedWithXG < num\n      // ) {\n      //   return Math.ceil(num);\n      // } else if (\n      //   form.AverageGoalsWeightedWithXG > num &&\n      //   otherTeamForm.AverageGoalsConceededWeightedWithXG > num\n      // ) {\n      //   return Math.floor(num);\n      // } else if (\n      //   form.AverageGoalsWeightedWithXG < num &&\n      //   otherTeamForm.AverageGoalsConceededWeightedWithXG < num\n      // ) {\n      //   return Math.floor(num);\n      // } else if (\n      //   form.AverageGoalsWeightedWithXG < num &&\n      //   otherTeamForm.AverageGoalsConceededWeightedWithXG > num\n      // ) {\n      //   return Math.floor(num);\n      // } else {\n      //   return Math.round(num);\n      // }\n      // if (remainder > 0.8) {\n      //   return Math.ceil(num);\n      // }\n\n      // if (form.overOrUnder === \"overachievingDrastically\") {\n      //   return Math.floor(num);\n      // } else if (form.overOrUnder === \"underachievingDrastically\") {\n      //   return Math.ceil(num);\n      // } else if (remainder < 0.7) {\n      //   return Math.floor(num);\n      // } else if (\n      //   form.overOrUnder === \"underachieving\" &&\n      //   otherTeamForm.overOrUnder === \"overachieving\"\n      // ) {\n      //   // console.log(\"INCREASING\");\n      //   return Math.ceil(num);\n      // } else if (\n      //   form.overOrUnder === \"underachieving\" &&\n      //   otherTeamForm.overOrUnder === \"onPar\"\n      // ) {\n      //   return Math.round(num);\n      // } else if (\n      //   form.overOrUnder === \"overachieving\" &&\n      //   otherTeamForm.overOrUnder === \"underachieving\"\n      // ) {\n      //   // console.log(\"DECREASING\");\n      //   return Math.floor(num);\n      // } else if (\n      //   form.overOrUnder === \"overachieving\" &&\n      //   otherTeamForm.overOrUnder === \"overachieving\"\n      // ) {\n      //   // console.log(\"DECREASING\");\n      //   return Math.round(num);\n      // }\n      // else if (num < 0.9 && num < form.scoredAverage) {\n      //   return Math.floor(num);\n      // } else {\n      //   return Math.round(num);\n      // }\n\n      // if (form.last5Points > 12) {\n      //   return Math.ceil(num);\n      // } else if (form.last5Points <= 6) {\n      //   return Math.floor(num);\n      // } else {\n      //   return Math.round(num);\n      // }\n    }\n\n    const XGAgainstAdjustedHomeGoals =\n      homeGoalswithHomeWeighting * formAway.AverageGoalsConceededWeightedWithXG;\n    const XGAgainstAdjustedAwayGoals =\n      awayGoalswithAwayWeighting * formHome.AverageGoalsConceededWeightedWithXG;\n\n    const XGAdjustedHomeGoals =\n      (homeGoalswithHomeWeighting + XGAgainstAdjustedHomeGoals) / 2;\n    const XGAdjustedAwayGoals =\n      (awayGoalswithAwayWeighting + XGAgainstAdjustedAwayGoals) / 2;\n\n    const homeGoalDiff = formHome.scoredAverage - formHome.concededAverage;\n    const awayGoalDiff = formAway.scoredAverage - formAway.concededAverage;\n\n    formHome.goalsDifferential =\n      parseFloat(await diff(homeGoalDiff, awayGoalDiff)) / 2;\n    formAway.goalsDifferential =\n      parseFloat(await diff(awayGoalDiff, homeGoalDiff)) / 2;\n\n    // console.log(\n    //   `${match.game} home goalsDifferential = ${formHome.goalsDifferential} away goalsDifferential = ${formAway.goalsDifferential}`\n    // );\n\n    let goalsBasedOnHomeXG =\n      ((formHome.expectedGoals + formAway.expectedGoalsConceeded) / 2) *\n      (1 + last5WeightingHome);\n\n    let goalsBasedOnAwayXG =\n      ((formAway.expectedGoals + formHome.expectedGoalsConceeded) / 2) *\n      (1 + last5WeightingAway);\n\n    let goalCalcHome = (formHome.scoredAverage + formAway.concededAverage) / 2;\n    let goalCalcAway = (formAway.scoredAverage + formHome.concededAverage) / 2;\n\n    let homeGoalsBasedOnOdds = parseFloat(\n      formHome.goalsFromOdds * formHome.clinicalScore\n    );\n    let awayGoalsBasedOnOdds = parseFloat(\n      formAway.goalsFromOdds * formAway.clinicalScore\n    );\n\n    let homeGoalsBasedOnDA = parseFloat(\n      formHome.goalsPerDangerousAttack * formHome.predictedDA\n    );\n    let awayGoalsBasedOnDA = parseFloat(\n      formAway.goalsPerDangerousAttack * formAway.predictedDA\n    );\n\n    let factorOneHome =\n      goalCalcHome +\n      formHome.goalsDifferential * 0.5 +\n      PPGweightingHome * 1 +\n      last5WeightingHome * 1;\n\n    let factorTwoHome =\n      (formHome.trueFormGoalsWeighting + formAway.trueFormConceededWeighting) /\n      2;\n\n    let factorOneAway =\n      goalCalcAway +\n      formAway.goalsDifferential * 0.5 +\n      PPGweightingAway * 1 +\n      last5WeightingAway * 1;\n\n    let factorTwoAway =\n      (formAway.trueFormGoalsWeighting + formHome.trueFormConceededWeighting) /\n      2;\n\n    let experimentalHomeGoals =\n      ((factorOneHome + factorTwoHome) / 2 ) *\n      homeCalculation *\n      // formHome.clinicalScore *\n      // formHome.attackQualityMultiplier *\n      formHome.homeGoalWeighting *\n      formHome.trueFormMultiplier;\n\n    // let experimentalHomeGoals =\n    //   (factorTwoHome) *\n    //   homeCalculation *\n    //   // formHome.clinicalScore *\n    //   formHome.attackQualityMultiplier *\n    //   formHome.homeGoalWeighting;\n\n    let experimentalAwayGoals =\n      ((factorOneAway + factorTwoAway) / 2 ) *\n      awayCalculation *\n      // formAway.clinicalScore *\n      // formAway.attackQualityMultiplier *\n      formAway.trueFormMultiplier;\n\n    // let experimentalAwayGoals =\n    //   (factorTwoAway) *\n    //   awayCalculation *\n    //   // formAway.clinicalScore *\n    //   formAway.attackQualityMultiplier;\n\n    let XGGoalsHome =\n      (formHome.AverageGoalsWeightedWithXG +\n        formAway.AverageGoalsConceededWeightedWithXG) /\n      2;\n\n    let XGGoalsAway =\n      (formAway.AverageGoalsWeightedWithXG +\n        formHome.AverageGoalsConceededWeightedWithXG) /\n      2;\n\n    // console.log(match.game);\n    // console.log(`index ${index}`)\n    // console.log(`home goals: ${XGGoalsHome}`);\n    // console.log(\"formHome\");\n    // console.log(formHome);\n    // console.log(`Goals home = ${experimentalHomeGoals}`)\n\n    // console.log(`Weighted goals home =  ${formHome.AverageGoalsWeightedWithXG}`)\n    // console.log(`Average goals conceeded weighted = ${formHome.AverageGoalsConceededWeightedWithXG}`)\n    // // console.log(last5WeightingHome);\n\n    // console.log(\"formAway\");\n    // console.log(`away goals: ${XGGoalsAway}`);\n    // console.log(formAway);\n    // console.log(`Goals away = ${experimentalAwayGoals}`)\n    // console.log(`awayCalculation ${awayCalculation}`)\n    // console.log(`factorOneAway ${factorOneAway}`)\n    // console.log(`factorTwoAway ${factorTwoAway}`)\n    // console.log(`formAway.trueFormGoalsWeighting ${formAway.trueFormGoalsWeighting}`)\n    // console.log(`formHome.trueFormConceededWeighting ${formHome.trueFormConceededWeighting}`)\n\n    // console.log(`Weighted goals away =  ${formAway.AverageGoalsWeightedWithXG}`)\n    // console.log(`Average goals conceeded weighted = ${formAway.AverageGoalsConceededWeightedWithXG}`)\n\n    // console.log(last5WeightingAway);\n\n    // console.log(\"EXPERIMENTAL HOME GOALS\");\n    // console.log(`${match.homeTeam}`);\n    // console.log(\n    //   `formHome.scoredAverage ${formHome.scoredAverage} + formAway.concededAverage ${formAway.concededAverage} / 2`\n    // );\n    // console.log(\n    //   `formHome.goalsDifferential ${formHome.goalsDifferential} * 1.4`\n    // );\n\n    // console.log(`PPGweightingHome ${PPGweightingHome}`);\n    // console.log(`formHome.XGWeighting ${formHome.XGWeighting}`);\n    // console.log(`last5WeightingHome ${last5WeightingHome}`);\n\n    // console.log(teams[0][index].XGdifferential)\n\n    // console.log(experimentalHomeGoals);\n\n    // console.log(\"EXPERIMENTAL AWAY GOALS\");\n    // console.log(`${match.awayTeam}`);\n    // console.log(\n    //   `formAway.scoredAverage ${formAway.scoredAverage} + formHome.concededAverage ${formHome.concededAverage} / 2`\n    // );\n\n    // console.log(`PPGweightingAway ${PPGweightingAway}`);\n    // console.log(`formAway.XGWeighting ${formAway.XGWeighting}`);\n    // console.log(`last5WeightingAway ${last5WeightingAway}`);\n\n    // console.log(teams[1][index].XGdifferential)\n\n    // console.log(experimentalAwayGoals);\n\n    // console.log(\n    //   `${match.homeTeam} experimental goals ${experimentalHomeGoals}`\n    // );\n\n    // console.log(\n    //   `${match.homeTeam} AverageGoalsWeightedWithXG ${formHome.AverageGoalsWeightedWithXG}`\n    // );\n\n    // console.log(\n    //   `${match.awayTeam} AverageGoalsConceededWeightedWithXG ${formAway.AverageGoalsConceededWeightedWithXG}`\n    // );\n\n    console.log(match.awayTeam);\n    console.log(formHome);\n    console.log(formAway);\n\n    let rawFinalHomeGoals = parseFloat(\n      // (experimentalHomeGoals + formHome.expectedGoals) / 2\n\n      (experimentalHomeGoals * 1 +\n        XGGoalsHome * 0 +\n        homeGoalsBasedOnDA * 0 +\n        formHome.expectedGoals * 0) /\n        1\n\n      // homeGoalsBasedOnDA\n      // ((formHome.AverageGoalsWeightedWithXG + formAway.AverageGoalsConceededWeightedWithXG) / 2)\n    );\n\n    let rawFinalAwayGoals = parseFloat(\n      // (experimentalAwayGoals + formAway.expectedGoals) / 2\n\n      (experimentalAwayGoals * 1 +\n        XGGoalsAway * 0 +\n        awayGoalsBasedOnDA * 0 +\n        formAway.expectedGoals * 0) /\n        1\n\n      // awayGoalsBasedOnDA\n      // ((formAway.AverageGoalsWeightedWithXG + formHome.AverageGoalsConceededWeightedWithXG) / 2)\n    );\n\n    switch (true) {\n      case formHome.overOrUnder === \"overachievingDrastically\" &&\n        formAway.overOrUnder === \"underachievingDrastically\":\n        rawFinalHomeGoals = rawFinalHomeGoals - 0.6;\n        rawFinalAwayGoals = rawFinalAwayGoals + 0.6;\n        break;\n      case formAway.overOrUnder === \"overachievingDrastically\" &&\n        formHome.overOrUnder === \"underachievingDrastically\":\n        rawFinalHomeGoals = rawFinalHomeGoals + 0.6;\n        rawFinalAwayGoals = rawFinalAwayGoals - 0.6;\n        break;\n      case formHome.overOrUnder === \"overachievingDrastically\" &&\n        formAway.overOrUnder !== \"underachievingDrastically\":\n        rawFinalHomeGoals = rawFinalHomeGoals - 0.2;\n        break;\n      case formAway.overOrUnder === \"overachievingDrastically\" &&\n        formHome.overOrUnder !== \"underachievingDrastically\":\n        rawFinalAwayGoals = rawFinalAwayGoals - 0.2;\n        break;\n      case formHome.overOrUnder === \"underachievingDrastically\" &&\n        formAway.overOrUnder !== \"overachievingDrastically\":\n        rawFinalHomeGoals = rawFinalHomeGoals + 0.2;\n        break;\n      case formAway.overOrUnder === \"underachievingDrastically\" &&\n        formHome.overOrUnder !== \"overachievingDrastically\":\n        rawFinalAwayGoals = rawFinalAwayGoals + 0.2;\n        break;\n      default:\n        break;\n    }\n\n    // console.log(match.game);\n    // console.log(formHome);\n    // console.log(`${formHome.teamName} ${formHome.overOrUnder}`);\n    // console.log(formAway);\n    // console.log(`${formAway.teamName} ${formAway.overOrUnder}`);\n\n    // console.log(`rawFinalHomeGoals: ${rawFinalHomeGoals}`);\n    // console.log(`rawFinalAwayGoals: ${rawFinalAwayGoals}`);\n\n    // console.log(`experimentalHomeGoals: ${experimentalHomeGoals}`);\n\n    // console.log(`experimentalAwayGoals: ${experimentalAwayGoals}`);\n\n    // console.log(`XGGoalsHome: ${XGGoalsHome}`);\n\n    // console.log(`XGGoalsAway: ${XGGoalsAway}`);\n\n    // console.log(`homeGoalsBasedOnDA: ${homeGoalsBasedOnDA}`);\n\n    // console.log(`awayGoalsBasedOnDA: ${awayGoalsBasedOnDA}`);\n\n    // console.log(`homeAdvantageAttackAdjustment ${homeAdvantageAttackAdjustment}`)\n    // console.log(`home homeDefenceAdvantageWeighted ${formHome.homeDefenceAdvantageWeighted}`)\n    // console.log(`homeAdvantageDefenceAdjustment ${homeAdvantageDefenceAdjustment}`)\n\n    // console.log(`${match.homeTeam} raw goals ${rawFinalHomeGoals}`);\n\n    if (rawFinalAwayGoals < 0) {\n      let difference = parseFloat((await diff(0, rawFinalAwayGoals)) / 10);\n      rawFinalHomeGoals = rawFinalHomeGoals + difference;\n    }\n\n    if (rawFinalHomeGoals < 0) {\n      let difference = parseFloat((await diff(0, rawFinalHomeGoals)) / 10);\n      rawFinalAwayGoals = rawFinalAwayGoals + difference;\n    }\n\n    finalHomeGoals = await roundCustom(rawFinalHomeGoals, formHome, formAway);\n\n    // finalHomeGoals = Math.round(rawFinalHomeGoals);\n\n    // finalHomeGoals = rawFinalHomeGoals.toFixed(1)\n\n    finalAwayGoals = await roundCustom(rawFinalAwayGoals, formAway, formHome);\n\n    // finalAwayGoals = Math.round(rawFinalAwayGoals);\n\n    if (finalHomeGoals > 7) {\n      finalHomeGoals = 7;\n    }\n\n    if (finalAwayGoals > 7) {\n      finalAwayGoals = 7;\n    }\n\n    // finalAwayGoals = rawFinalAwayGoals.toFixed(1)\n\n    if (finalHomeGoals > finalAwayGoals) {\n      match.prediction = \"homeWin\";\n      if (formHome.overUnderAchievingSum < -1) {\n        match.includeInMultis = false;\n      } else {\n        match.includeInMultis = true;\n      }\n    } else if (finalAwayGoals > finalHomeGoals) {\n      match.prediction = \"awayWin\";\n      if (formAway.overUnderAchievingSum < -1) {\n        match.includeInMultis = false;\n      } else {\n        match.includeInMultis = true;\n      }\n    } else if (finalHomeGoals === finalAwayGoals) {\n      match.prediction = \"draw\";\n    }\n\n    switch (true) {\n      case match.homeGoals > match.awayGoals:\n        match.winner = match.homeTeam;\n        match.outcome = \"homeWin\";\n        break;\n      case match.homeGoals === match.awayGoals:\n        match.winner = \"draw\";\n        match.outcome = \"draw\";\n\n        break;\n      case match.homeGoals < match.awayGoals:\n        match.winner = match.awayTeam;\n        match.outcome = \"awayWin\";\n        break;\n      default:\n        break;\n    }\n\n    if (match.status === \"complete\") {\n      if (match.prediction === match.outcome) {\n        match.predictionOutcome = \"Won\";\n      } else if (match.prediction !== match.outcome) {\n        match.predictionOutcome = \"Lost\";\n      }\n    }\n\n    let total = parseInt(finalHomeGoals + finalAwayGoals);\n    totalGoals = totalGoals + total;\n\n    numberOfGames = numberOfGames + 1;\n\n    if (finalHomeGoals < 0) {\n      finalHomeGoals = 0;\n    }\n\n    if (finalAwayGoals < 0) {\n      finalAwayGoals = 0;\n    }\n\n    if (match.status === \"suspended\") {\n      finalHomeGoals = \"P\";\n      finalAwayGoals = \"P\";\n    }\n    return [\n      finalHomeGoals,\n      finalAwayGoals,\n      rawFinalHomeGoals,\n      rawFinalAwayGoals,\n    ];\n  } else {\n    finalHomeGoals = 0;\n    finalAwayGoals = 0;\n    rawFinalHomeGoals = 0;\n    rawFinalAwayGoals = 0;\n  }\n\n  return [finalHomeGoals, finalAwayGoals, rawFinalHomeGoals, rawFinalAwayGoals];\n}\n\nasync function getSuccessMeasure(fixtures) {\n  let sumProfit = 0;\n  let sumLoss = 0;\n  let investment = 0;\n  let netProfit;\n\n  for (let i = 0; i < fixtures.length; i++) {\n    if (fixtures[i].status === \"complete\") {\n      // console.log(fixtures[i].game)\n      // console.log(fixtures[i].netProfit)\n      sumProfit = sumProfit + fixtures[i].profit;\n\n      // if(fixtures[i].profit === 0){\n      //   sumLoss = sumLoss - 1;\n      // }\n\n      investment = investment + 1;\n      console.log(`total investment ${investment}`);\n      netProfit = (sumProfit - investment).toFixed(2);\n      console.log(`netProfit ${netProfit}`);\n    }\n  }\n\n  // let ROI = ((netProfit + stake) / stake) * 100;\n\n  let ROI = (netProfit / investment) * 100;\n  var operand = ROI >= 0 ? \"+\" : \"\";\n\n  if (investment > 0) {\n    ReactDOM.render(\n      <Fragment>\n        <Div\n          className={\"SuccessMeasure\"}\n          text={`ROI for all ${investment} W/D/W outcomes: ${operand} ${ROI.toFixed(\n            2\n          )}%`}\n        />\n      </Fragment>,\n      document.getElementById(\"successMeasure\")\n    );\n  } else {\n    return;\n  }\n}\n\nvar tips = [];\nvar longShotTips = [];\nvar bttsArray = [];\nvar accumulatedOdds = 1;\nlet predictions = [];\n\nexport async function getScorePrediction(day) {\n  let radioSelected = parseInt(selectedOption);\n  tips = [];\n  bttsArray = [];\n  longShotTips = [];\n  accumulatedOdds = 1;\n\n  let index;\n  let divider;\n  if (radioSelected === 5) {\n    index = 0;\n    divider = 5;\n  } else if (radioSelected === 6) {\n    index = 1;\n    divider = 6;\n  } else if (radioSelected === 10) {\n    index = 2;\n    divider = 10;\n  } else if (radioSelected === 0) {\n    index = 2;\n    divider = 10;\n  }\n\n  await Promise.all(\n    matches.map(async (match) => {\n      // if there are no stored predictions, calculate them based on live data\n      if (match) {\n        switch (true) {\n          // case match.status === \"!suspended\":\n          //   [\n          //     match.goalsA,\n          //     match.goalsB,\n          //     match.unroundedGoalsA,\n          //     match.unroundedGoalsB,\n          //   ] = await calculateScore(match, index, divider, match.id);\n\n          //   break;\n          case match.status === \"canceled\":\n            match.goalsA = \"P\";\n            match.goalsB = \"P\";\n            break;\n          default:\n            [\n              match.goalsA,\n              match.goalsB,\n              match.unroundedGoalsA,\n              match.unroundedGoalsB,\n            ] = await calculateScore(match, index, divider, match.id);\n            break;\n        }\n      } else {\n        [\n          match.goalsA,\n          match.goalsB,\n          match.unroundedGoalsA,\n          match.unroundedGoalsB,\n        ] = await calculateScore(match, index, divider, match.id);\n      }\n\n      await getBTTSPotential(allForm, match, index);\n\n      let predictionObject;\n      let longShotPredictionObject;\n\n      if (\n        match.unroundedGoalsA - incrementValue > match.unroundedGoalsB &&\n        match.homeOdds !== 0 &&\n        match.fractionHome !== \"N/A\"\n      ) {\n        if (\n          match.prediction !== \"draw\" &&\n          match.status !== \"suspended\" &&\n          match.status !== \"canceled\" &&\n          match.homeOdds < 3 &&\n          match.homePpg > 1 &&\n          match.includeInMultis === true\n        ) {\n          accumulatedOdds =\n            parseFloat(accumulatedOdds) * parseFloat(match.homeOdds);\n\n          predictionObject = {\n            team: `${match.homeTeam} to win`,\n            odds: match.fractionHome,\n            outcome: match.predictionOutcome,\n            goalDifferential: parseFloat(\n              await diff(match.unroundedGoalsA, match.unroundedGoalsB)\n            ),\n          };\n          tips.push(predictionObject);\n        }\n      } else if (\n        match.unroundedGoalsB - incrementValue > match.unroundedGoalsA &&\n        match.awayOdds !== 0 &&\n        match.fractionAway !== \"N/A\"\n      ) {\n        if (\n          match.prediction !== \"draw\" &&\n          match.status !== \"suspended\" &&\n          match.status !== \"canceled\" &&\n          match.awayOdds < 3.5 &&\n          match.awayPpg > 1 &&\n          match.includeInMultis === true\n        ) {\n          accumulatedOdds =\n            parseFloat(accumulatedOdds) * parseFloat(match.awayOdds);\n\n          predictionObject = {\n            team: `${match.awayTeam} to win`,\n            odds: match.fractionAway,\n            outcome: match.predictionOutcome,\n            goalDifferential: parseFloat(\n              await diff(match.unroundedGoalsB, match.unroundedGoalsA)\n            ),\n          };\n          tips.push(predictionObject);\n        }\n      }\n\n      if (match.bttsChosen === true) {\n        accumulatedOdds =\n          parseFloat(accumulatedOdds) * parseFloat(match.bttsOdds);\n\n        predictionObject = {\n          team: `${match.game} btts`,\n          odds: match.bttsFraction,\n          outcome: match.bttsOutcome,\n        };\n        tips.push(predictionObject);\n      }\n\n      tips.sort(function (a, b) {\n        return b.goalDifferential - a.goalDifferential;\n      });\n\n      if (\n        match.btts === true &&\n        match.status !== \"suspended\" &&\n        match.status !== \"canceled\"\n      ) {\n        bttsArray.push(match);\n\n        bttsArray.sort(function (a, b) {\n          return b.combinedBTTS - a.combinedBTTS;\n        });\n      }\n\n      if (\n        match.unroundedGoalsA - 0.5 > match.unroundedGoalsB &&\n        match.homeOdds >= 2.5 &&\n        match.goalsA > match.goalsB\n      ) {\n        longShotPredictionObject = {\n          team: match.homeTeam,\n          odds: match.fractionHome,\n          outcome: match.predictionOutcome,\n          goalDifferential: parseFloat(\n            await diff(match.unroundedGoalsA, match.unroundedGoalsB)\n          ),\n        };\n        if (match.prediction !== \"draw\") {\n          longShotTips.push(longShotPredictionObject);\n        }\n      } else if (\n        match.unroundedGoalsA < match.unroundedGoalsB - 0.5 &&\n        match.awayOdds >= 2.5 &&\n        match.goalsB > match.goalsA\n      ) {\n        longShotPredictionObject = {\n          team: match.awayTeam,\n          odds: match.fractionAway,\n          outcome: match.predictionOutcome,\n          goalDifferential: parseFloat(\n            await diff(match.unroundedGoalsB, match.unroundedGoalsA)\n          ),\n        };\n        if (match.prediction !== \"draw\") {\n          longShotTips.push(longShotPredictionObject);\n        }\n      }\n\n      longShotTips.sort(function (a, b) {\n        return b.goalDifferential - a.goalDifferential;\n      });\n\n      ReactDOM.render(\n        <Fixture\n          fixtures={matches}\n          result={true}\n          className={\"individualFixture\"}\n        />,\n        document.getElementById(\"FixtureContainer\")\n      );\n\n      predictions.push(match);\n    })\n  );\n  await getSuccessMeasure(matches);\n\n  await renderTips();\n}\n\nasync function renderTips() {\n  ReactDOM.render(\n    <div className=\"PredictionContainer\">\n      <Fragment>\n        <Increment />\n        <Collapsable\n          buttonText={\"Build a multi\"}\n          className={\"PredictionsOfTheDay\"}\n          text={\n            <ul className=\"BestPredictions\">\n              <div className=\"BestPredictionsExplainer\">\n                Increase or decrease the size of the multi\n              </div>\n              {tips.map((tip) => (\n                <li className={tip.outcome} key={tip.team}>\n                  {tip.team}: {tip.odds}\n                </li>\n              ))}\n              <div className=\"AccumulatedOdds\">{`Accumulator odds ~ : ${\n                Math.round(accumulatedOdds) - 1\n              }/1`}</div>\n            </ul>\n          }\n        />\n      </Fragment>\n    </div>,\n    document.getElementById(\"bestPredictions\")\n  );\n\n  ReactDOM.render(\n    <div>\n      <Fragment>\n        <Collapsable\n          buttonText={\"Longshot predictions\"}\n          text={\n            <ul className=\"LongshotPredictions\">\n              <lh>To win</lh>\n              {longShotTips.map((tip) => (\n                <li className={tip.outcome} key={tip.team}>\n                  {tip.team} odds: {tip.odds}\n                </li>\n              ))}\n            </ul>\n          }\n        />\n      </Fragment>\n    </div>,\n    document.getElementById(\"longShots\")\n  );\n\n  ReactDOM.render(\n    <div>\n      <Fragment>\n        <Collapsable\n          className={\"BTTSGames\"}\n          buttonText={\"BTTS games\"}\n          text={\n            <ul className=\"BTTSGames\">\n              <lh>Games with highest chance of BTTS</lh>\n              {bttsArray.map((game) => (\n                <li className={game.bttsOutcome} key={game.game}>\n                  {`${game.game} odds: ${game.bttsFraction}`}\n                </li>\n              ))}\n            </ul>\n          }\n        />\n      </Fragment>\n    </div>,\n    document.getElementById(\"BTTS\")\n  );\n}\n","/Users/gregdorward/Development/football-predictions/src/components/CollapsableElement.js",[],"/Users/gregdorward/Development/football-predictions/src/components/TextSection.js",[],"/Users/gregdorward/Development/football-predictions/src/logic/getStats.js",[],"/Users/gregdorward/Development/football-predictions/src/components/Div.js",[],"/Users/gregdorward/Development/football-predictions/src/components/Fixture.js",["117"],"/Users/gregdorward/Development/football-predictions/src/components/Checkbox.js",["118"],"/Users/gregdorward/Development/football-predictions/src/components/CollapsableDiv.js",[],"/Users/gregdorward/Development/football-predictions/src/components/Increment.js",[],"/Users/gregdorward/Development/football-predictions/src/logic/getBTTSPotential.js",[],{"ruleId":"119","severity":1,"message":"120","line":7,"column":3,"nodeType":"121","messageId":"122","endLine":7,"endColumn":8},{"ruleId":"119","severity":1,"message":"123","line":9,"column":3,"nodeType":"121","messageId":"122","endLine":9,"endColumn":24},{"ruleId":"119","severity":1,"message":"124","line":10,"column":3,"nodeType":"121","messageId":"122","endLine":10,"endColumn":11},{"ruleId":"119","severity":1,"message":"125","line":11,"column":3,"nodeType":"121","messageId":"122","endLine":11,"endColumn":12},{"ruleId":"119","severity":1,"message":"126","line":102,"column":7,"nodeType":"121","messageId":"122","endLine":102,"endColumn":15},{"ruleId":"119","severity":1,"message":"127","line":103,"column":7,"nodeType":"121","messageId":"122","endLine":103,"endColumn":19},{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","replacedBy":"131"},{"ruleId":"119","severity":1,"message":"132","line":3,"column":26,"nodeType":"121","messageId":"122","endLine":3,"endColumn":34},{"ruleId":"119","severity":1,"message":"133","line":1,"column":17,"nodeType":"121","messageId":"122","endLine":1,"endColumn":25},{"ruleId":"119","severity":1,"message":"132","line":1,"column":10,"nodeType":"121","messageId":"122","endLine":1,"endColumn":18},{"ruleId":"119","severity":1,"message":"134","line":3,"column":7,"nodeType":"121","messageId":"122","endLine":3,"endColumn":18},{"ruleId":"119","severity":1,"message":"135","line":12,"column":10,"nodeType":"121","messageId":"122","endLine":12,"endColumn":19},{"ruleId":"119","severity":1,"message":"136","line":1215,"column":11,"nodeType":"121","messageId":"122","endLine":1215,"endColumn":30},{"ruleId":"119","severity":1,"message":"137","line":1217,"column":11,"nodeType":"121","messageId":"122","endLine":1217,"endColumn":30},{"ruleId":"119","severity":1,"message":"138","line":1232,"column":9,"nodeType":"121","messageId":"122","endLine":1232,"endColumn":27},{"ruleId":"119","severity":1,"message":"139","line":1236,"column":9,"nodeType":"121","messageId":"122","endLine":1236,"endColumn":27},{"ruleId":"119","severity":1,"message":"140","line":1243,"column":9,"nodeType":"121","messageId":"122","endLine":1243,"endColumn":29},{"ruleId":"119","severity":1,"message":"141","line":1246,"column":9,"nodeType":"121","messageId":"122","endLine":1246,"endColumn":29},{"ruleId":"119","severity":1,"message":"142","line":1581,"column":7,"nodeType":"121","messageId":"122","endLine":1581,"endColumn":14},{"ruleId":"119","severity":1,"message":"143","line":7,"column":5,"nodeType":"121","messageId":"122","endLine":7,"endColumn":15},{"ruleId":"119","severity":1,"message":"144","line":1,"column":17,"nodeType":"121","messageId":"122","endLine":1,"endColumn":25},"no-unused-vars","'today' is defined but never used.","Identifier","unusedVar","'generatePriorFixtures' is defined but never used.","'tomorrow' is defined but never used.","'yesterday' is defined but never used.","'response' is defined but never used.","'responseBody' is defined but never used.","no-native-reassign",["145"],"no-negated-in-lhs",["146"],"'proxyurl' is defined but never used.","'Fragment' is defined but never used.","'allTeamForm' is assigned a value but never used.","'ThreeDots' is defined but never used.","'XGAdjustedHomeGoals' is assigned a value but never used.","'XGAdjustedAwayGoals' is assigned a value but never used.","'goalsBasedOnHomeXG' is assigned a value but never used.","'goalsBasedOnAwayXG' is assigned a value but never used.","'homeGoalsBasedOnOdds' is assigned a value but never used.","'awayGoalsBasedOnOdds' is assigned a value but never used.","'sumLoss' is assigned a value but never used.","'leagueName' is defined but never used.","'useState' is defined but never used.","no-global-assign","no-unsafe-negation"]