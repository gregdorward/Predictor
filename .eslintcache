[{"/Users/greg/Development/Predictor/src/index.js":"1","/Users/greg/Development/Predictor/src/reportWebVitals.js":"2","/Users/greg/Development/Predictor/src/App.js":"3","/Users/greg/Development/Predictor/src/components/Success.js":"4","/Users/greg/Development/Predictor/src/components/PasswordReset.js":"5","/Users/greg/Development/Predictor/src/components/Under25.js":"6","/Users/greg/Development/Predictor/src/components/Over25.js":"7","/Users/greg/Development/Predictor/src/components/BTTSFixtures.js":"8","/Users/greg/Development/Predictor/src/components/CancelSubscription.js":"9","/Users/greg/Development/Predictor/src/components/HighestScoringTeams.js":"10","/Users/greg/Development/Predictor/src/components/Cancel.js":"11","/Users/greg/Development/Predictor/src/components/Team.js":"12","/Users/greg/Development/Predictor/src/components/BTTSTeams.js":"13","/Users/greg/Development/Predictor/src/components/HighestScoringFixtures.js":"14","/Users/greg/Development/Predictor/src/logic/store.js":"15","/Users/greg/Development/Predictor/src/components/OddsRadio.js":"16","/Users/greg/Development/Predictor/src/components/Button.js":"17","/Users/greg/Development/Predictor/src/components/Logo.js":"18","/Users/greg/Development/Predictor/src/components/Fixture.js":"19","/Users/greg/Development/Predictor/src/components/Contact.js":"20","/Users/greg/Development/Predictor/src/components/ProtectedContent.js":"21","/Users/greg/Development/Predictor/src/components/DarkModeToggle.js":"22","/Users/greg/Development/Predictor/src/components/Login.js":"23","/Users/greg/Development/Predictor/src/logic/hasUserPaid.js":"24","/Users/greg/Development/Predictor/src/logic/authProvider.js":"25","/Users/greg/Development/Predictor/src/components/CollapsableElement.js":"26","/Users/greg/Development/Predictor/src/logic/getFixtures.js":"27","/Users/greg/Development/Predictor/src/firebase.js":"28","/Users/greg/Development/Predictor/src/logic/getStatsInsights.js":"29","/Users/greg/Development/Predictor/src/components/createBadge.js":"30","/Users/greg/Development/Predictor/src/logic/dataSlice.js":"31","/Users/greg/Development/Predictor/src/components/LeagueName.js":"32","/Users/greg/Development/Predictor/src/components/GameStats.js":"33","/Users/greg/Development/Predictor/src/logic/getScorePredictions.js":"34","/Users/greg/Development/Predictor/src/components/Slider.js":"35","/Users/greg/Development/Predictor/src/components/SliderDiff.js":"36","/Users/greg/Development/Predictor/src/logic/getForm.js":"37","/Users/greg/Development/Predictor/src/components/LeagueTable.js":"38","/Users/greg/Development/Predictor/src/components/TeamOfTheSeason.js":"39","/Users/greg/Development/Predictor/src/logic/getStats.js":"40","/Users/greg/Development/Predictor/src/components/StatTable.js":"41","/Users/greg/Development/Predictor/src/logic/compareFormTrend.js":"42","/Users/greg/Development/Predictor/src/components/Carousel.js":"43","/Users/greg/Development/Predictor/src/logic/getBTTSPotential.js":"44","/Users/greg/Development/Predictor/src/components/Increment.js":"45","/Users/greg/Development/Predictor/src/components/PlayerStatsList.js":"46","/Users/greg/Development/Predictor/src/components/StreakStats.js":"47","/Users/greg/Development/Predictor/src/components/CollapsableStats.js":"48","/Users/greg/Development/Predictor/src/components/MissingPlayersList.js":"49","/Users/greg/Development/Predictor/src/components/TeamRankingsFlexView.js":"50","/Users/greg/Development/Predictor/src/components/MultitypeChart.js":"51","/Users/greg/Development/Predictor/src/components/Div.js":"52","/Users/greg/Development/Predictor/src/components/SofaScore.js":"53","/Users/greg/Development/Predictor/src/components/createStatsDiv.js":"54","/Users/greg/Development/Predictor/src/components/CarouselXGChart.js":"55","/Users/greg/Development/Predictor/src/components/Chart.js":"56","/Users/greg/Development/Predictor/src/components/RankingsSection.js":"57","/Users/greg/Development/Predictor/src/components/HamburgerMenu.js":"58","/Users/greg/Development/Predictor/src/components/SeasonPreview.js":"59","/Users/greg/Development/Predictor/src/components/PrivacyPolicy.js":"60","/Users/greg/Development/Predictor/src/components/StarRating.js":"61","/Users/greg/Development/Predictor/src/components/PredictionTypeRadio.js":"62"},{"size":2343,"mtime":1752699525168,"results":"63","hashOfConfig":"64"},{"size":362,"mtime":1748355148688,"results":"65","hashOfConfig":"64"},{"size":25360,"mtime":1757148431159,"results":"66","hashOfConfig":"64"},{"size":398,"mtime":1748355148684,"results":"67","hashOfConfig":"64"},{"size":1142,"mtime":1748355148683,"results":"68","hashOfConfig":"64"},{"size":3307,"mtime":1752663428915,"results":"69","hashOfConfig":"64"},{"size":3314,"mtime":1752663409392,"results":"70","hashOfConfig":"64"},{"size":3478,"mtime":1752662854798,"results":"71","hashOfConfig":"64"},{"size":2718,"mtime":1748355148682,"results":"72","hashOfConfig":"64"},{"size":3417,"mtime":1752663394707,"results":"73","hashOfConfig":"64"},{"size":346,"mtime":1748355148682,"results":"74","hashOfConfig":"64"},{"size":20106,"mtime":1748355148684,"results":"75","hashOfConfig":"64"},{"size":3708,"mtime":1752662983814,"results":"76","hashOfConfig":"64"},{"size":3511,"mtime":1752663382481,"results":"77","hashOfConfig":"64"},{"size":283,"mtime":1748355148688,"results":"78","hashOfConfig":"64"},{"size":963,"mtime":1748355148683,"results":"79","hashOfConfig":"64"},{"size":319,"mtime":1748355148681,"results":"80","hashOfConfig":"64"},{"size":393,"mtime":1756998191029,"results":"81","hashOfConfig":"64"},{"size":17406,"mtime":1757103005036,"results":"82","hashOfConfig":"64"},{"size":2398,"mtime":1755784641697,"results":"83","hashOfConfig":"64"},{"size":555,"mtime":1748355148683,"results":"84","hashOfConfig":"64"},{"size":1234,"mtime":1748355148682,"results":"85","hashOfConfig":"64"},{"size":3324,"mtime":1748355148683,"results":"86","hashOfConfig":"64"},{"size":375,"mtime":1748355148688,"results":"87","hashOfConfig":"64"},{"size":1902,"mtime":1748355148687,"results":"88","hashOfConfig":"64"},{"size":1114,"mtime":1749236036588,"results":"89","hashOfConfig":"64"},{"size":58495,"mtime":1757102400470,"results":"90","hashOfConfig":"64"},{"size":692,"mtime":1748355148687,"results":"91","hashOfConfig":"64"},{"size":5954,"mtime":1748355148688,"results":"92","hashOfConfig":"64"},{"size":373,"mtime":1748618155494,"results":"93","hashOfConfig":"64"},{"size":848,"mtime":1748355148687,"results":"94","hashOfConfig":"64"},{"size":4140,"mtime":1755682368382,"results":"95","hashOfConfig":"64"},{"size":149246,"mtime":1755784690102,"results":"96","hashOfConfig":"64"},{"size":159247,"mtime":1757103131039,"results":"97","hashOfConfig":"64"},{"size":1495,"mtime":1748355148684,"results":"98","hashOfConfig":"64"},{"size":1096,"mtime":1748355148684,"results":"99","hashOfConfig":"64"},{"size":476,"mtime":1748355148687,"results":"100","hashOfConfig":"64"},{"size":24717,"mtime":1755682534839,"results":"101","hashOfConfig":"64"},{"size":8263,"mtime":1754481429881,"results":"102","hashOfConfig":"64"},{"size":60041,"mtime":1754475490829,"results":"103","hashOfConfig":"64"},{"size":2935,"mtime":1748355148684,"results":"104","hashOfConfig":"64"},{"size":10575,"mtime":1748355148687,"results":"105","hashOfConfig":"64"},{"size":917,"mtime":1748355148682,"results":"106","hashOfConfig":"64"},{"size":1040,"mtime":1748355148687,"results":"107","hashOfConfig":"64"},{"size":1347,"mtime":1748355148683,"results":"108","hashOfConfig":"64"},{"size":3821,"mtime":1749477462148,"results":"109","hashOfConfig":"64"},{"size":2171,"mtime":1748355148684,"results":"110","hashOfConfig":"64"},{"size":467,"mtime":1748355148682,"results":"111","hashOfConfig":"64"},{"size":682,"mtime":1748355148683,"results":"112","hashOfConfig":"64"},{"size":2609,"mtime":1748355148684,"results":"113","hashOfConfig":"64"},{"size":1955,"mtime":1753454484686,"results":"114","hashOfConfig":"64"},{"size":203,"mtime":1748355148682,"results":"115","hashOfConfig":"64"},{"size":3088,"mtime":1754557227663,"results":"116","hashOfConfig":"64"},{"size":22104,"mtime":1755090061910,"results":"117","hashOfConfig":"64"},{"size":1159,"mtime":1748355148682,"results":"118","hashOfConfig":"64"},{"size":17287,"mtime":1753816596430,"results":"119","hashOfConfig":"64"},{"size":1278,"mtime":1748355148683,"results":"120","hashOfConfig":"64"},{"size":1853,"mtime":1754470705978,"results":"121","hashOfConfig":"64"},{"size":3838,"mtime":1752742821779,"results":"122","hashOfConfig":"64"},{"size":4184,"mtime":1753208989729,"results":"123","hashOfConfig":"64"},{"size":715,"mtime":1753906092591,"results":"124","hashOfConfig":"64"},{"size":990,"mtime":1755688283204,"results":"125","hashOfConfig":"64"},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"129"},"10md9h3",{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"132","messages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"134","messages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"136","messages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"140","messages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"142","messages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"144","messages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"146","messages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"148","messages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"150","messages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"129"},{"filePath":"153","messages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"155","messages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"157","messages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"159","messages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"161","messages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"163","messages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"165","messages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"167","messages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"169","messages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"171","messages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"173","messages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"175","messages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"177","messages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"179","messages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"181","messages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"183","messages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"185","messages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"187","messages":"188","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"189","messages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"191","messages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"129"},{"filePath":"194","messages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":49,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"129"},{"filePath":"197","messages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"199","messages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"201","messages":"202","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"203","messages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"205","messages":"206","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"207","messages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"129"},{"filePath":"210","messages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"129"},{"filePath":"213","messages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"129"},{"filePath":"216","messages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"218","messages":"219","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"220","messages":"221","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"222","messages":"223","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"224","messages":"225","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"226","messages":"227","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"228","messages":"229","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"230","messages":"231","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"232","messages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"234","messages":"235","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"129"},{"filePath":"237","messages":"238","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"239","messages":"240","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"129"},{"filePath":"242","messages":"243","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"129"},{"filePath":"245","messages":"246","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"247","messages":"248","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"249","usedDeprecatedRules":"129"},{"filePath":"250","messages":"251","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"252","messages":"253","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"254","messages":"255","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"256","messages":"257","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"258","messages":"259","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},{"filePath":"260","messages":"261","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"129"},"/Users/greg/Development/Predictor/src/index.js",["262"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter as Router, Route, Routes, HashRouter } from \"react-router-dom\";\nimport TeamPage from \"./components/Team\";\nimport {SuccessPage} from \"./components/Success\"\nimport {CancelPage} from \"./components/Cancel\"\nimport PasswordReset from \"./components/PasswordReset\";\nimport { Provider } from \"react-redux\";\nimport store from \"./logic/store\"; // Import your Redux store\nimport CancelSubscription from \"./components/CancelSubscription\"\nimport Over25 from \"./components/Over25\"\nimport Under25 from \"./components/Under25\"\nimport HighestScoringTeams from \"./components/HighestScoringTeams\"\nimport HighestScoringFixtures from \"./components/HighestScoringFixtures\";\nimport BTTSFixtures from \"./components/BTTSFixtures\";\nimport BTTSTeams from \"./components/BTTSTeams\";\nimport SeasonPreview from \"./components/SeasonPreview\";\n\n\nReactDOM.render(\n  // <React.StrictMode>\n    <Provider store={store}>\n    <HashRouter>\n        <Routes>\n          <Route path=\"/fixture\" element={<TeamPage />} />\n          <Route path=\"/success\" element={<SuccessPage />} />\n          <Route path=\"/cancel\" element={<CancelPage />} />\n          <Route path=\"/reset\" element={<PasswordReset />} />\n          <Route path=\"/o25\" element={<Over25 />} />\n          <Route path=\"/u25\" element={<Under25 />} />\n          <Route path=\"/teamshigh\" element={<HighestScoringTeams />} />\n          <Route path=\"/fixtureshigh\" element={<HighestScoringFixtures />} />\n          <Route path=\"/bttsfixtures\" element={<BTTSFixtures />} />\n          <Route path=\"/bttsteams\" element={<BTTSTeams />} />\n          <Route path=\"/cancelsubscription\" element={<CancelSubscription/>} />\n          <Route path=\"/\" exact element={<App />} />\n          <Route path=\"/seasonpreviews\" element={<SeasonPreview />} />\n          {/* <Route path=\"/\" element={<Fixture />} /> */}\n        </Routes>\n        </HashRouter>\n    </Provider>\n    ,\n  // </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["263","264"],"/Users/greg/Development/Predictor/src/reportWebVitals.js",[],"/Users/greg/Development/Predictor/src/App.js",["265","266","267","268","269","270","271","272","273","274","275","276","277","278","279","280","281","282","283","284","285","286","287","288","289","290"],"/Users/greg/Development/Predictor/src/components/Success.js",[],"/Users/greg/Development/Predictor/src/components/PasswordReset.js",[],"/Users/greg/Development/Predictor/src/components/Under25.js",[],"/Users/greg/Development/Predictor/src/components/Over25.js",[],"/Users/greg/Development/Predictor/src/components/BTTSFixtures.js",[],"/Users/greg/Development/Predictor/src/components/CancelSubscription.js",[],"/Users/greg/Development/Predictor/src/components/HighestScoringTeams.js",[],"/Users/greg/Development/Predictor/src/components/Cancel.js",[],"/Users/greg/Development/Predictor/src/components/Team.js",["291"],"import React, { useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { CreateBadge } from \"./createBadge\";\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n} from \"chart.js\";\nimport { Bar } from \"react-chartjs-2\";\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\nfunction TeamPage() {\n  const [dataState, setData] = useState([]);\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    try {\n      const responseHome = await fetch(\n        `${process.env.REACT_APP_EXPRESS_SERVER}team/${storedFixtureDetailsJson.homeId}`\n      );\n      const resultHome = await responseHome.json();\n\n      const responseAway = await fetch(\n        `${process.env.REACT_APP_EXPRESS_SERVER}team/${storedFixtureDetailsJson.awayId}`\n      );\n      const resultAway = await responseAway.json();\n      // setData(result.data.stadium_name);\n\n      let indexHome = resultHome.data.findIndex(\n        (x) => x.season_format === \"Domestic League\"\n      );\n      let indexAway = resultAway.data.findIndex(\n        (x) => x.season_format === \"Domestic League\"\n      );\n\n      if (resultHome.data[indexHome].stats.seasonScoredNum_overall) {\n        setData((test) => ({\n          ...test,\n          scoredOverallHome:\n            resultHome.data[indexHome].stats.seasonScoredNum_overall,\n          playedHomeOnly:\n            resultHome.data[indexHome].stats.seasonMatchesPlayed_home,\n          scoredOverallHomeOnly:\n            resultHome.data[indexHome].stats.seasonScoredNum_home,\n          conceededOverallHome:\n            resultHome.data[indexHome].stats.seasonConcededNum_overall,\n          conceededOverallHomeOnly:\n            resultHome.data[indexHome].stats.seasonConcededNum_home,\n\n          PPGOverallHome: resultHome.data[indexHome].stats.seasonPPG_overall,\n          PPGOverallHomeOnly: resultHome.data[indexHome].stats.seasonPPG_home,\n          leaguePosition_overallHome:\n            resultHome.data[indexHome].stats.leaguePosition_overall,\n          leaguePosition_HomeOnly:\n            resultHome.data[indexHome].stats.leaguePosition_home,\n          averageAttendance:\n            resultHome.data[indexHome].stats.average_attendance_home,\n          BTTSPercentage_overallHome:\n            resultHome.data[indexHome].stats.seasonBTTSPercentage_overall,\n          BTTSAndWinPercentage_Home:\n            resultHome.data[indexHome].stats.BTTS_and_win_percentage_overall,\n          BTTSAndLosePercentage_Home:\n            resultHome.data[indexHome].stats.BTTS_and_lose_percentage_overall,\n          BTTSBothHalvesHome:\n            resultHome.data[indexHome].stats\n              .BTTS_both_halves_percentage_overall,\n          GoalDifferenceHT_overall_Home:\n            resultHome.data[indexHome].stats.GoalDifferenceHT_overall,\n          GD_2hg_overall_Home: resultHome.data[indexHome].stats.gd_2hg_overall,\n          leadingAtHTPercentage_overallHome:\n            resultHome.data[indexHome].stats.leadingAtHTPercentage_overall,\n          seasonOver15Percentage_overallHome:\n            resultHome.data[indexHome].stats.seasonOver15Percentage_overall,\n          seasonOver25Percentage_overallHome:\n            resultHome.data[indexHome].stats.seasonOver25Percentage_overall,\n          seasonOver35Percentage_overallHome:\n            resultHome.data[indexHome].stats.seasonOver35Percentage_overall,\n          seasonOver45Percentage_overallHome:\n            resultHome.data[indexHome].stats.seasonOver45Percentage_overall,\n          scoredBothHalvesPercentage_overallHome:\n            resultHome.data[indexHome].stats.scoredBothHalvesPercentage_overall,\n          shots_on_target_per_goals_scored_overallHome:\n            resultHome.data[indexHome].stats.additional_info\n              .shots_on_target_per_goals_scored_overall,\n          cornersTotalAVG_overallHome:\n            resultHome.data[indexHome].stats.cornersTotalAVG_overall,\n          cardsAVG_overallHome:\n            resultHome.data[indexHome].stats.cardsAVG_overall,\n          foulsAVG_overallHome:\n            resultHome.data[indexHome].stats.foulsAVG_overall,\n          penalties_won_per_match_overallHome:\n            resultHome.data[indexHome].stats.additional_info\n              .penalties_won_per_match_overall,\n          penalty_in_a_match_percentage_overallHome:\n            resultHome.data[indexHome].stats.additional_info\n              .penalty_in_a_match_percentage_overall,\n\n          scoredOverallAway:\n            resultAway.data[indexAway].stats.seasonScoredNum_overall,\n          playedAwayOnly:\n            resultAway.data[indexAway].stats.seasonMatchesPlayed_away,\n          scoredOverallAwayOnly:\n            resultAway.data[indexAway].stats.seasonScoredNum_away,\n          conceededOverallAway:\n            resultAway.data[indexAway].stats.seasonConcededNum_overall,\n          conceededOverallAwayOnly:\n            resultAway.data[indexAway].stats.seasonConcededNum_away,\n\n          PPGOverallAway: resultAway.data[indexAway].stats.seasonPPG_overall,\n          PPGOverallAwayOnly: resultAway.data[indexAway].stats.seasonPPG_away,\n          leaguePosition_overallAway:\n            resultAway.data[indexAway].stats.leaguePosition_overall,\n          leaguePosition_AwayOnly:\n            resultAway.data[indexAway].stats.leaguePosition_away,\n          BTTSPercentage_overallAway:\n            resultAway.data[indexAway].stats.seasonBTTSPercentage_overall,\n          BTTSAndWinPercentage_Away:\n            resultAway.data[indexAway].stats.BTTS_and_win_percentage_overall,\n          BTTSAndLosePercentage_Away:\n            resultAway.data[indexAway].stats.BTTS_and_lose_percentage_overall,\n          BTTSBothHalvesAway:\n            resultAway.data[indexAway].stats\n              .BTTS_both_halves_percentage_overall,\n          GoalDifferenceHT_overall_Away:\n            resultAway.data[indexAway].stats.GoalDifferenceHT_overall,\n          GD_2hg_overall_Away: resultAway.data[indexAway].stats.gd_2hg_overall,\n          leadingAtHTPercentage_overallAway:\n            resultAway.data[indexAway].stats.leadingAtHTPercentage_overall,\n          seasonOver15Percentage_overallAway:\n            resultAway.data[indexAway].stats.seasonOver15Percentage_overall,\n          seasonOver25Percentage_overallAway:\n            resultAway.data[indexAway].stats.seasonOver25Percentage_overall,\n          seasonOver35Percentage_overallAway:\n            resultAway.data[indexAway].stats.seasonOver35Percentage_overall,\n          seasonOver45Percentage_overallAway:\n            resultAway.data[indexAway].stats.seasonOver45Percentage_overall,\n          scoredBothHalvesPercentage_overallAway:\n            resultAway.data[indexAway].stats.scoredBothHalvesPercentage_overall,\n          shots_on_target_per_goals_scored_overallAway:\n            resultAway.data[indexAway].stats.additional_info\n              .shots_on_target_per_goals_scored_overall,\n\n          cornersTotalAVG_overallAway:\n            resultAway.data[indexAway].stats.cornersTotalAVG_overall,\n          cardsAVG_overallAway:\n            resultAway.data[indexAway].stats.cardsAVG_overall,\n          foulsAVG_overallAway:\n            resultAway.data[indexAway].stats.foulsAVG_overall,\n          penalties_won_per_match_overallAway:\n            resultAway.data[indexAway].stats.additional_info\n              .penalties_won_per_match_overall,\n          penalty_in_a_match_percentage_overallAway:\n            resultAway.data[indexAway].stats.additional_info\n              .penalty_in_a_match_percentage_overall,\n        }));\n      }\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    }\n  };\n\n  const storedDataHome = useSelector((state) => state.data.dataHome);\n  const jsonDataHome = JSON.parse(storedDataHome);\n  const propertyNamesHome = Object.entries(jsonDataHome);\n\n  const storedDataHomeDef = useSelector((state) => state.data.dataHomeDef);\n  const jsonDataHomeDef = JSON.parse(storedDataHomeDef);\n  const propertyNamesHomeDef = Object.entries(jsonDataHomeDef);\n\n  const storedDataallTeamResultsHome = useSelector(\n    (state) => state.data.allTeamResultsHome\n  );\n  const jsonDataallTeamResultsHome = JSON.parse(storedDataallTeamResultsHome);\n  const propertyNamesallTeamResultsHome = Object.values(\n    jsonDataallTeamResultsHome\n  );\n\n  const homeDetails = useSelector((state) => state.data.homeDetails);\n  const jsonHomeDetails = JSON.parse(homeDetails);\n\n  const storedDataAway = useSelector((state) => state.data.dataAway);\n  const jsonDataAway = JSON.parse(storedDataAway);\n  const propertyNamesAway = Object.entries(jsonDataAway);\n\n  const storedDataAwayDef = useSelector((state) => state.data.dataAwayDef);\n  const jsonDataAwayDef = JSON.parse(storedDataAwayDef);\n  const propertyNamesAwayDef = Object.entries(jsonDataAwayDef);\n\n  const storedDataallTeamResultsAway = useSelector(\n    (state) => state.data.allTeamResultsAway\n  );\n  const jsonDataallTeamResultsAway = JSON.parse(storedDataallTeamResultsAway);\n  const propertyNamesallTeamResultsAway = Object.values(\n    jsonDataallTeamResultsAway\n  );\n\n  const awayDetails = useSelector((state) => state.data.awayDetails);\n  const jsonAwayDetails = JSON.parse(awayDetails);\n\n  const storedFixtureDetails = useSelector(\n    (state) => state.data.fixtureDetails\n  );\n  const storedFixtureDetailsJson = JSON.parse(storedFixtureDetails);\n  console.log(jsonAwayDetails);\n\n  const options = {\n    plugins: {\n      title: {\n        display: true,\n        text: \"Team comparison\",\n      },\n    },\n    aspectRatio: 0.5,\n    maintainAspectRatio: true,\n    responsive: true,\n    scales: {\n      x: {\n        stacked: true,\n      },\n      y: {\n        stacked: true,\n        display: false,\n      },\n    },\n  };\n  const labels = [\n    storedFixtureDetailsJson.homeTeamName,\n    storedFixtureDetailsJson.awayTeamName,\n  ];\n\n  const data = {\n    labels,\n    datasets: [\n      {\n        data: [\n          jsonHomeDetails[\"Attacking Strength\"],\n          jsonAwayDetails[\"Attacking Strength\"],\n        ],\n        label: \"Attacking Strength\",\n        backgroundColor: \"#030061\",\n      },\n      {\n        data: [\n          jsonHomeDetails[\"Defensive Strength\"],\n          jsonAwayDetails[\"Defensive Strength\"],\n        ],\n        label: \"Defensive Strength\",\n        backgroundColor: \"#CC3314\",\n      },\n    ],\n  };\n\n  return (\n    <div className=\"TeamStatsContainer\">\n      <div className=\"FixtureHeadingContiner\">\n        <CreateBadge\n          image={storedFixtureDetailsJson.homeTeamBadge}\n          ClassName=\"HomeTeamBadge\"\n          alt=\"Home team badge\"\n        ></CreateBadge>\n        {`${storedFixtureDetailsJson.homeTeamName} v ${storedFixtureDetailsJson.awayTeamName}`}\n        <CreateBadge\n          image={storedFixtureDetailsJson.awayTeamBadge}\n          ClassName=\"AwayTeamBadge\"\n          alt=\"Away team badge\"\n        ></CreateBadge>\n      </div>\n      <h3>\n        {storedFixtureDetailsJson.stadium} KO: {storedFixtureDetailsJson.time} |\n        Average Attendance: {dataState.averageAttendance}\n      </h3>\n      <h3>\n        Soccer Stats Hub Prediction: {storedFixtureDetailsJson.homeGoals} -{\" \"}\n        {storedFixtureDetailsJson.awayGoals}\n      </h3>\n      <div className=\"TeamStats\">\n        <ul className=\"HomeTeamStats\">\n          <iframe\n            title=\"HomeTeamStats\"\n            src={`https://footystats.org/api/club?id=${storedFixtureDetailsJson.homeId}`}\n            height=\"100%\"\n            width=\"100%\"\n            style={{\n              height: \"420px\",\n              width: \"100%\",\n              border: \"0.1em solid #030061\",\n            }}\n          ></iframe>\n          <h3>{storedFixtureDetailsJson.homeTeamName}</h3>\n          {propertyNamesHome.map(([key, value], index) => (\n            <li key={index}>\n              <strong>{key}:</strong>{\" \"}\n              {typeof value === \"object\" ? JSON.stringify(value) : value}\n            </li>\n          ))}\n          <ul className=\"HomeTeamStats\">\n            {propertyNamesHomeDef.map(([key, value], index) => (\n              <li key={index}>\n                <strong>{key}:</strong>{\" \"}\n                {typeof value === \"object\" ? JSON.stringify(value) : value}\n              </li>\n            ))}\n          </ul>\n          <li>Scored overall: {dataState.scoredOverallHome}</li>\n          <li>Conceeded overall: {dataState.conceededOverallHome}</li>\n          <li>\n            Average scored home only:{\" \"}\n            {(\n              dataState.scoredOverallHomeOnly / dataState.playedHomeOnly\n            ).toFixed(2)}\n          </li>\n          <li>\n            Average conceeded home only:{\" \"}\n            {(\n              dataState.conceededOverallHomeOnly / dataState.playedHomeOnly\n            ).toFixed(2)}\n          </li>\n          <li>PPG overall: {dataState.PPGOverallHome}</li>\n          <li>PPG home only: {dataState.PPGOverallHomeOnly}</li>\n          <li>League position: {dataState.leaguePosition_overallHome}</li>\n          <li>\n            League position home only: {dataState.leaguePosition_HomeOnly}\n          </li>\n          <li>BTTS {dataState.BTTSPercentage_overallHome}%</li>\n          <li>BTTS and win: {dataState.BTTSAndWinPercentage_Home}%</li>\n          <li>BTTS and lose: {dataState.BTTSAndLosePercentage_Home}%</li>\n          <li>BTTS both halves: {dataState.BTTSBothHalvesHome}%</li>\n          <li>\n            Goal diff 1st half only: {dataState.GoalDifferenceHT_overall_Home}\n          </li>\n          <li>Goal diff 2nd half only: {dataState.GD_2hg_overall_Home}</li>\n          <li>\n            Leading at half time: {dataState.leadingAtHTPercentage_overallHome}%\n          </li>\n          <li>\n            Over 1.5 goals in games:{\" \"}\n            {dataState.seasonOver15Percentage_overallHome}%\n          </li>\n          <li>\n            Over 2.5 goals in games:{\" \"}\n            {dataState.seasonOver25Percentage_overallHome}%\n          </li>\n          <li>\n            Over 3.5 goals in games:{\" \"}\n            {dataState.seasonOver35Percentage_overallHome}%\n          </li>\n          <li>\n            Over 4.5 goals in games:{\" \"}\n            {dataState.seasonOver45Percentage_overallHome}%\n          </li>\n          <li>\n            Scored both halves:{\" \"}\n            {dataState.scoredBothHalvesPercentage_overallHome}%\n          </li>\n          <li>\n            SOTs per goal:{\" \"}\n            {dataState.shots_on_target_per_goals_scored_overallHome}\n          </li>\n          <li>Corners in game avg: {dataState.cornersTotalAVG_overallHome}</li>\n          <li>Cards avg: {dataState.cardsAVG_overallHome}</li>\n          <li>Fouls against avg: {dataState.foulsAVG_overallHome}</li>\n          <li>\n            Penalties won avg: {dataState.penalties_won_per_match_overallHome}\n          </li>\n          <li>\n            Penalties in match:{\" \"}\n            {dataState.penalty_in_a_match_percentage_overallHome}%\n          </li>\n        </ul>\n        <ul className=\"AwayTeamStats\">\n          <iframe\n            title=\"AwayTeamStats\"\n            src={`https://footystats.org/api/club?id=${storedFixtureDetailsJson.awayId}`}\n            height=\"100%\"\n            width=\"100%\"\n            style={{\n              height: \"420px\",\n              width: \"100%\",\n              color: \"#030061\",\n              border: \"0.1em solid #030061\",\n            }}\n          ></iframe>\n          <h3>{storedFixtureDetailsJson.awayTeamName}</h3>\n          {propertyNamesAway.map(([key, value], index) => (\n            <li key={index}>\n              <strong>{key}:</strong>{\" \"}\n              {typeof value === \"object\" ? JSON.stringify(value) : value}\n            </li>\n          ))}\n          <ul className=\"AwayTeamStats\">\n            {propertyNamesAwayDef.map(([key, value], index) => (\n              <li key={index}>\n                <strong>{key}:</strong>{\" \"}\n                {typeof value === \"object\" ? JSON.stringify(value) : value}\n              </li>\n            ))}\n          </ul>\n          <li>Scored overall: {dataState.scoredOverallAway}</li>\n          <li>Conceeded overall: {dataState.conceededOverallAway}</li>\n          <li>\n            Average scored away only:{\" \"}\n            {(\n              dataState.scoredOverallAwayOnly / dataState.playedAwayOnly\n            ).toFixed(2)}\n          </li>\n          <li>\n            Average conceeded away only:{\" \"}\n            {(\n              dataState.conceededOverallAwayOnly / dataState.playedAwayOnly\n            ).toFixed(2)}\n          </li>\n          <li>PPG overall: {dataState.PPGOverallAway}</li>\n          <li>PPG away only: {dataState.PPGOverallAwayOnly}</li>\n          <li>League position: {dataState.leaguePosition_overallAway}</li>\n          <li>\n            League position away only: {dataState.leaguePosition_AwayOnly}\n          </li>\n          <li>BTTS: {dataState.BTTSPercentage_overallAway}%</li>\n          <li>BTTS and win: {dataState.BTTSAndWinPercentage_Away}%</li>\n          <li>BTTS and lose: {dataState.BTTSAndLosePercentage_Away}%</li>\n          <li>BTTS both halves: {dataState.BTTSBothHalvesAway}%</li>\n          <li>\n            Goal diff 1st half only: {dataState.GoalDifferenceHT_overall_Away}\n          </li>\n          <li>Goal diff 2nd half only: {dataState.GD_2hg_overall_Away}</li>\n          <li>\n            Leading at half time: {dataState.leadingAtHTPercentage_overallAway}%\n          </li>\n          <li>\n            Over 1.5 goals in games:{\" \"}\n            {dataState.seasonOver15Percentage_overallAway}%\n          </li>\n          <li>\n            Over 2.5 goals in games:{\" \"}\n            {dataState.seasonOver25Percentage_overallAway}%\n          </li>\n          <li>\n            Over 3.5 goals in games:{\" \"}\n            {dataState.seasonOver35Percentage_overallAway}%\n          </li>\n          <li>\n            Over 4.5 goals in games:{\" \"}\n            {dataState.seasonOver45Percentage_overallAway}%\n          </li>\n          <li>\n            Scored both halves:{\" \"}\n            {dataState.scoredBothHalvesPercentage_overallAway}%\n          </li>\n          <li>\n            SOTs per goal:{\" \"}\n            {dataState.shots_on_target_per_goals_scored_overallAway}\n          </li>\n          <li>Corners in game avg: {dataState.cornersTotalAVG_overallAway}</li>\n          <li>Cards avg: {dataState.cardsAVG_overallAway}</li>\n          <li>Fouls against avg: {dataState.foulsAVG_overallAway}</li>\n          <li>\n            Penalties won avg: {dataState.penalties_won_per_match_overallAway}\n          </li>\n          <li>\n            Penalties in match:{\" \"}\n            {dataState.penalty_in_a_match_percentage_overallAway}%\n          </li>\n        </ul>\n        <div className=\"ChartContainer\">\n          <span className=\"Spacer\"></span>\n          <Bar options={options} data={data} className=\"ComparisonBar\" />\n          <span className=\"Spacer\"></span>\n        </div>\n        <ul className=\"HomeTeamResults\">\n          {propertyNamesallTeamResultsHome.map((match, index) => (\n            <>\n              <div className=\"MatchDate\">{match.date}</div>\n              <div className=\"ResultRowOverviewSmall\">\n                <div className=\"columnOverviewHomeSmall\">{match.homeTeam}</div>\n                <span className=\"columnOverviewScoreSmall\">\n                  {match.homeGoals} : {match.awayGoals}\n                </span>\n                <div className=\"columnOverviewAwaySmall\">{match.awayTeam}</div>\n              </div>\n            </>\n          ))}\n        </ul>\n        <ul className=\"AwayTeamResults\">\n          {propertyNamesallTeamResultsAway.map((match, index) => (\n            <>\n              <div className=\"MatchDate\">{match.date}</div>\n              <div className=\"ResultRowOverviewSmall\">\n                <div className=\"columnOverviewHomeSmall\">{match.homeTeam}</div>\n                <span className=\"columnOverviewScoreSmall\">\n                  {match.homeGoals} : {match.awayGoals}\n                </span>\n                <div className=\"columnOverviewAwaySmall\">{match.awayTeam}</div>\n              </div>\n            </>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default TeamPage;\n","/Users/greg/Development/Predictor/src/components/BTTSTeams.js",[],"/Users/greg/Development/Predictor/src/components/HighestScoringFixtures.js",[],"/Users/greg/Development/Predictor/src/logic/store.js",[],"/Users/greg/Development/Predictor/src/components/OddsRadio.js",[],"/Users/greg/Development/Predictor/src/components/Button.js",[],"/Users/greg/Development/Predictor/src/components/Logo.js",[],"/Users/greg/Development/Predictor/src/components/Fixture.js",["292","293","294"],"/Users/greg/Development/Predictor/src/components/Contact.js",[],"/Users/greg/Development/Predictor/src/components/ProtectedContent.js",[],"/Users/greg/Development/Predictor/src/components/DarkModeToggle.js",[],"/Users/greg/Development/Predictor/src/components/Login.js",[],"/Users/greg/Development/Predictor/src/logic/hasUserPaid.js",[],"/Users/greg/Development/Predictor/src/logic/authProvider.js",[],"/Users/greg/Development/Predictor/src/components/CollapsableElement.js",[],"/Users/greg/Development/Predictor/src/logic/getFixtures.js",["295","296","297"],"/Users/greg/Development/Predictor/src/firebase.js",[],"/Users/greg/Development/Predictor/src/logic/getStatsInsights.js",[],"/Users/greg/Development/Predictor/src/components/createBadge.js",[],"/Users/greg/Development/Predictor/src/logic/dataSlice.js",[],"/Users/greg/Development/Predictor/src/components/LeagueName.js",["298"],"import { useState, useEffect } from \"react\";\nimport { allLeagueResultsArrayOfObjects } from \"../logic/getFixtures\";\nimport { renderTable } from \"../logic/getFixtures\";\n\n\nconst sofaScoreIds = [\n  { 15050: 17 }, //EPL\n  { 14930: 18 }, //Championship\n  { 14934: 24 }, //League 1\n  { 14935: 25 }, //League 2\n  { 14968: 35 }, //Bundesliga\n  { 14956: 8 }, //La Liga\n  { 14924: 7 }, //Champions League\n  { 13734: 10783 }, //Nations league 24/25\n  { 13878: 357 }, // Club World Cup 25\n    { 13974: 384 }, // Copa Libertadores 25\n\n  { 15068: 23 }, //Serie A\n\n  { 14932: 34 }, //Ligue 1,\n  { 15000: 36 }, //Scottish Prem\n  { 15115: 44 }, //Portugal\n  { 14936: 35 }, //Dutch\n  { 14937: 38 }, //Belgium\n  { 13963: 40 }, //Sweden\n  { 15055: 39 }, //Denmark\n  { 13987: 20 }, //Norway\n  { 14923: 45 }, //Austrian Prem 22/23\n  { 15163: 185 }, //Greek Prem 22/23\n  { 14972: 52 }, //turkey\n  { 15031: 202 }, //Polish prem 22/23\n  { 15047: 215 }, //Swiss prem 22/23\n  { 15053: 170 }, //Croatia 24/25\n  { 14973: 172 }, //Czecjh 24/25\n\n  { 14089: 41 }, // Finland 25\n  { 14951: 218 }, // Ulraine 25\n  { 15065: 210 }, // Serbia 25\n  { 15063: 212 }, // Slovenia 25\n  { 14933: 211 }, // Slovakia 25\n\n  { 13952: 192 }, //Irish Prem\n  { 13703: 136 }, //Aus A League\n  { 15002: 679 }, //Europa\n  { 14904: 17015 }, //Europa Conference\n  { 15066: 54 }, //Spanish secunda 22/23\n  { 15632: 53 }, //Italy serie B 22/23\n  { 14931: 44 }, //Bundesliga 2 22/23\n  { 14954: 182 }, //French League 2 22/23\n  { 14987: 131 }, //Dutch League 2 25\n  { 15061: 206 }, //Scottish Championship 22/23\n  { 14943: 207 }, //Scottish league 1 22/23\n  { 15209: 209 }, //Scottish league 2 22/23\n    { 13973: 242 }, //MLS\n  { 13967: 13363 }, // USL\n  { 14236: 13470 }, //Canada 25\n  { 14231: 325 }, //Brazil prem 24\n  { 15310: 155 }, //Argentina prem 23\n  { 14086: 11539}, //Colombia 25\n    { 14626: 278}, //Uraguay 25\n\n  { 15234: 11621 }, //Mexico prem 23/24\n  { 15657: 173 }, //National league\n  { 12933: 176 }, //National league North and South 22/23\n  { 14069: 410 }, //S Korea 25,\n  { 13960: 196 }, //Japan 25\n  { 12772: 955 }, //Saudi 24/25\n  { 13964: 11}, // World Cup 26 EU Qualifiers\n  { 10121: 295 }, // World Cup 26 SA Qualifiers\n\n  // 11426, // WC Qual ConCaf\n  // 12801\n];\n\n\nexport default function LeagueName({ fixture, mock, showShortlist }) {\n  const [logoUrl, setLogoUrl] = useState(null);\n\n  const name = fixture.leagueName;\n  const id =\n    allLeagueResultsArrayOfObjects.length > 0\n      ? allLeagueResultsArrayOfObjects[fixture.leagueIndex].id\n      : null;\n\n  useEffect(() => {\n    async function fetchLogo() {\n      const found = sofaScoreIds.find((obj) => obj[id] !== undefined);\n      const value = found ? found[id] : null;\n      if (!value) return;\n\n      const logoPath = `${process.env.REACT_APP_EXPRESS_SERVER}logo/${value}`;\n      try {\n        // Optionally verify it loads first\n        const response = await fetch(logoPath);\n        if (response.ok) {\n          setLogoUrl(logoPath); // Use the URL directly\n        } else {\n          console.error(\"Failed to fetch logo URL:\", response.status);\n        }\n      } catch (error) {\n        console.error(\"Error fetching logo URL:\", error);\n      }\n      fixture.sofaScoreId = value\n    }\n\n    fetchLogo();\n  }, [id]);\n\n  if (mock === true || name === null) {\n    return <div></div>;\n  }\n\n  return (\n    <div>\n      <div\n        className=\"leagueName\"\n        id={`league${id}`}\n        key={`leagueName${id}div`}\n        onClick={() =>\n          renderTable(\n            fixture.leagueIndex,\n            allLeagueResultsArrayOfObjects[fixture.leagueIndex],\n            id\n          )\n        }\n        style={{ display: \"flex\", alignItems: \"center\" }}\n      >\n        <div className=\"LeagueAndLogo\">\n          {logoUrl && (\n            <img\n              className=\"LeagueLogo\"\n              src={logoUrl}\n              alt={`${name} Logo`}\n            />\n          )}\n          {showShortlist ? fixture.leagueDesc : fixture.leagueName} &#9776;\n        </div>\n      </div>\n\n      <div\n        className=\"LeagueTable\"\n        key={`leagueName${id}`}\n        id={`leagueName${id}`}\n      ></div>\n    </div>\n  );\n}\n","/Users/greg/Development/Predictor/src/components/GameStats.js",["299","300","301","302","303","304","305","306","307","308","309","310","311","312","313","314","315","316","317","318","319","320","321","322","323","324","325","326","327","328","329","330","331","332","333","334","335","336","337","338","339","340","341","342","343","344","345","346","347"],"import React, {\n  useState,\n  useEffect,\n  useRef,\n  Fragment,\n  useCallback,\n  useMemo,\n} from \"react\";\n// import ReactDOM from \"react-dom\";\nimport { Button } from \"./Button\";\nimport { memo } from \"react\";\nimport SofaLineupsWidget from \"./SofaScore\";\nimport Div from \"./Div\";\nimport {\n  Chart,\n  MultilineChart,\n  RadarChart,\n  BarChart,\n  DoughnutChart,\n} from \"./Chart\";\nimport MultiTypeChart from \"./MultitypeChart\"; // Adjust the path if necessary\nimport { Slider } from \"../components/CarouselXGChart\";\nimport Collapsable from \"../components/CollapsableElement\";\nimport Stats from \"../components/createStatsDiv\";\nimport TeamRankingsFlexView from \"./TeamRankingsFlexView\";\nimport {\n  allLeagueResultsArrayOfObjects,\n  basicTableArray,\n} from \"../logic/getFixtures\";\nimport { userDetail } from \"../logic/authProvider\";\nimport { clicked, getPointsFromLastX } from \"../logic/getScorePredictions\";\nimport { arrayOfGames } from \"../logic/getFixtures\";\nimport GenerateFormSummary from \"../logic/compareFormTrend\";\nimport { checkUserPaidStatus } from \"../logic/hasUserPaid\";\nimport { getPointAverage } from \"../logic/getStats\";\nimport { allForm } from \"../logic/getFixtures\";\nimport MissingPlayersList from \"../components/MissingPlayersList\";\nimport PlayerStatsList from \"../components/PlayerStatsList\";\nimport { StreakStats } from \"../components/StreakStats\";\nimport {\n  calculateAttackingStrength,\n  calculateDefensiveStrength,\n  calculateMetricStrength,\n} from \"../logic/getStats\";\nimport { dynamicDate } from \"../logic/getFixtures\";\nimport { rounds } from \"./TeamOfTheSeason\";\nimport { Doughnut } from \"react-chartjs-2\";\nimport StarRating from \"../components/StarRating\";\nimport { handleCheckout, stripePromise } from \"../App\"\nexport let userTips;\nlet setUserTips;\nconst MemoizedSofaLineupsWidget = memo(SofaLineupsWidget);\n\n// let id, team1, team2, timestamp, homeGoals, awayGoals;\n\nfunction GameStats({ game, displayBool, stats }) {\n\n  function styling(testBool) {\n    let bool = testBool;\n    if (bool === true && clicked === true) {\n      // set stats element to display flex\n      return { display: \"block\" };\n    } else {\n      // set stats element to display none\n      return { display: \"none\" };\n    }\n  }\n  let style = styling(displayBool);\n  // State Variables\n  [userTips, setUserTips] = useState(() => {\n    const savedTips = localStorage.getItem(\"userTips\");\n    return savedTips ? JSON.parse(savedTips) : [];\n  });\n  const [homeMissingPlayersList, setHomeMissingPlayersList] = useState([]);\n  const [awayMissingPlayersList, setAwayMissingPlayersList] = useState([]);\n  const [homeLineupList, setHomeLineupList] = useState([]);\n  const [awayLineupList, setAwayLineupList] = useState([]);\n  const [loading, setLoading] = useState(null);\n  const [streakData, setStreakData] = useState([]);\n  const [homeTeamStats, setHomeTeamStats] = useState(null);\n  const [awayTeamStats, setAwayTeamStats] = useState(null);\n  const [loadingTeamStats, setLoadingTeamStats] = useState(true);\n  const [loadingKeyPlayers, setLoadingKeyPlayers] = useState(true);\n  const [loadingKeyPlayerComparison, setLoadingKeyPlayerComparison] = useState(true);\n  const [loadingStreaks, setLoadingStreaks] = useState(true);\n  const [oddsData, setOddsData] = useState(null); // State to hold your odds object\n  const [loadingOdds, setLoadingOdds] = useState(false);\n  const [homePlayerData, setHomePlayerData] = useState([]);\n  const [awayPlayerData, setAwayPlayerData] = useState([]);\n  const [homePlayerAtttributes, setHomePlayerAttributes] = useState([]);\n  const [awayPlayerAtttributes, setAwayPlayerAttributes] = useState([]);\n  const [homePlayerAtttributesComparison, setHomePlayerAttributesComparison] = useState([]);\n  const [awayPlayerAtttributesComparison, setAwayPlayerAttributesComparison] = useState([]);\n  const [homePlayerImage, setHomePlayerImage] = useState(null); // State to hold your odds object\n  const [awayPlayerImage, setAwayPlayerImage] = useState(null); // State to hold your odds object\n  const [loadingPlayerData, setLoadingPlayerData] = useState(true);\n  const [homePlayerDataWithImages, setHomePlayerDataWithImages] = useState([]);\n  const [awayPlayerDataWithImages, setAwayPlayerDataWithImages] = useState([]);\n\n  // Save to localStorage whenever userTips changes\n  useEffect(() => {\n    localStorage.setItem(\"userTips\", JSON.stringify(userTips));\n  }, [userTips]);\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [aiMatchPreview, setAiMatchPreview] = useState(null);\n  // const [paid, setPaid] = useState(false);\n  const paid = true;\n  const [hasCompleteData, setHasCompleteData] = useState(false);\n\n\n  let gameStats = allForm.find((match) => match.id === game.id);\n  const homeForm = gameStats?.home[2];\n  const awayForm = gameStats?.away[2];\n\n  const [matchingGame, setMatchingGame] = useState(null); // State for the game\n  const [formSummaries, setFormSummary] = useState([]);\n  const [id, setId] = useState(\"0\");\n  const [team1, setTeam1] = useState(\"N/A\");\n  const [team2, setTeam2] = useState(\"N/A\");\n  const [timestamp, setTimestamp] = useState(1);\n  const [homeGoals, setHomeGoals] = useState(\"-\");\n  const [awayGoals, setAwayGoals] = useState(\"-\");\n  const [homeXGRating, setHomeXGRating] = useState(0);\n  const [awayXGRating, setAwayXGRating] = useState(0);\n  const [homeAttackStrength, setHomeAttackStrength] = useState(0);\n  const [homeDefenceStrength, setHomeDefenceStrength] = useState(0);\n  const [homePossessionStrength, setHomePossessionStrength] = useState(0);\n  const [homeXGForStrength, setHomeXGForStrength] = useState(0);\n  const [homeXGAgainstStrength, setHomeXGAgainstStrength] = useState(0);\n  const [homeDirectnessStrength, setHomeDirectnessStrength] = useState(0);\n  const [homeAccuracyOverallStrength, setHomeAccuracyOverallStrength] =\n    useState(0);\n  const [awayAttackStrength, setAwayAttackStrength] = useState(0);\n  const [awayDefenceStrength, setAwayDefenceStrength] = useState(0);\n  const [awayPossessionStrength, setAwayPossessionStrength] = useState(0);\n  const [awayXGForStrength, setAwayXGForStrength] = useState(0);\n  const [awayXGAgainstStrength, setAwayXGAgainstStrength] = useState(0);\n  const [awayDirectnessStrength, setAwayDirectnessStrength] = useState(0);\n  const [awayAccuracyOverallStrength, setAwayAccuracyOverallStrength] =\n    useState(0);\n  //   const [formArrayHome, setFormArrayHome] = useState([]);\n  //   const [formArrayAway, setFormArrayAway] = useState([]);\n  //   const [chartType, setChartType] = useState(\"\");\n  const [rollingSOTDiffTotalHome, setRollingSOTDiffTotalHome] = useState([]);\n  const [similarGamesHome, setSimilarGamesHome] = useState([]);\n  const [similarGamesAway, setSimilarGamesAway] = useState([]);\n\n  const [homeFiveGameAverage, setHomeFiveGameAverage] = useState(0);\n  const [homeSixGameAverage, setHomeSixGameAverage] = useState(0);\n  const [homeTenGameAverage, setHomeTenGameAverage] = useState(0);\n  const [awayFiveGameAverage, setAwayFiveGameAverage] = useState(0);\n  const [awaySixGameAverage, setAwaySixGameAverage] = useState(0);\n  const [awayTenGameAverage, setAwayTenGameAverage] = useState(0);\n  const [homeAttackStrengthLast5, setHomeAttackStrengthLast5] = useState(\n    homeForm?.attackingStrengthLast5 || null\n  );\n  const [homeOnlyAttackStrength, setHomeOnlyAttackStrength] = useState(\n    homeForm?.attackingStrengthHomeOnly || null\n  );\n  const [homeDefenceStrengthLast5, setHomeDefenceStrengthLast5] = useState(\n    homeForm?.defensiveStrengthLast5 || null\n  );\n  const [homeOnlyDefenceStrength, setHomeOnlyDefenceStrength] = useState(\n    homeForm?.defensiveStrengthHomeOnly || null\n  );\n  const [homePossessionStrengthLast5, setHomePossessionStrengthLast5] =\n    useState(homeForm?.possessionStrengthLast5 || null);\n  const [homeOnlyPossessionStrength, setHomeOnlyPossessionStrength] = useState(\n    homeForm?.possessionStrengthHomeOnly || null\n  );\n  const [homeXGForStrengthLast5, setHomeXGForStrengthLast5] = useState(\n    homeForm?.xgForStrengthLast5 || null\n  );\n  const [homeOnlyXGForStrength, setHomeOnlyXGForStrength] = useState(\n    homeForm?.xgForStrengthHomeOnly || null\n  );\n  const [homeXGAgainstStrengthLast5, setHomeXGAgainstStrengthLast5] = useState(\n    homeForm?.xgAgainstStrengthLast5 || null\n  );\n  const [homeOnlyXGAgainstStrength, setHomeOnlyXGAgainstStrength] = useState(\n    homeForm?.xgAgainstStrengthHomeOnly || null\n  );\n  const [homeDirectnessStrengthLast5, setHomeDirectnessStrengthLast5] =\n    useState(homeForm?.directnessOverallStrengthLast5 || null);\n  const [homeOnlyDirectnessStrength, setHomeOnlyDirectnessStrength] = useState(\n    homeForm?.directnessHomeStrength || null\n  );\n  const [\n    homeAccuracyOverallStrengthLast5,\n    setHomeAccuracyOverallStrengthLast5,\n  ] = useState(homeForm?.accuracyOverallStrengthLast5 || null);\n  const [homeOnlyAccuracyOverallStrength, setHomeOnlyAccuracyOverallStrength] =\n    useState(homeForm?.accuracyHomeStrength || null);\n  const [awayAttackStrengthLast5, setAwayAttackStrengthLast5] = useState(\n    awayForm?.attackingStrengthLast5 || null\n  );\n  const [awayOnlyAttackStrength, setAwayOnlyAttackStrength] = useState(\n    awayForm?.attackingStrengthAwayOnly || null\n  );\n  const [awayDefenceStrengthLast5, setAwayDefenceStrengthLast5] = useState(\n    awayForm?.defensiveStrengthLast5 || null\n  );\n  const [awayOnlyDefenceStrength, setAwayOnlyDefenceStrength] = useState(\n    awayForm?.defensiveStrengthAwayOnly || null\n  );\n  const [awayPossessionStrengthLast5, setAwayPossessionStrengthLast5] =\n    useState(awayForm?.possessionStrengthLast5 || null);\n  const [awayOnlyPossessionStrength, setAwayOnlyPossessionStrength] = useState(\n    awayForm?.possessionStrengthAwayOnly || null\n  );\n  const [awayXGForStrengthLast5, setAwayXGForStrengthLast5] = useState(\n    awayForm?.xgForStrengthLast5 || null\n  );\n  const [awayOnlyXGForStrength, setAwayOnlyXGForStrength] = useState(\n    awayForm?.xgForStrengthAwayOnly || null\n  );\n  const [awayXGAgainstStrengthLast5, setAwayXGAgainstStrengthLast5] = useState(\n    awayForm?.xgAgainstStrengthLast5 || null\n  );\n  const [awayOnlyXGAgainstStrength, setAwayOnlyXGAgainstStrength] = useState(\n    awayForm?.xgAgainstStrengthAwayOnly || null\n  );\n  const [awayDirectnessStrengthLast5, setAwayDirectnessStrengthLast5] =\n    useState(awayForm?.directnessOverallStrengthLast5 || null);\n  const [awayOnlyDirectnessStrength, setAwayOnlyDirectnessStrength] = useState(\n    awayForm?.directnessAwayStrength || null\n  );\n  const [\n    awayAccuracyOverallStrengthLast5,\n    setAwayAccuracyOverallStrengthLast5,\n  ] = useState(awayForm?.accuracyOverallStrengthLast5 || null);\n  const [awayOnlyAccuracyOverallStrength, setAwayOnlyAccuracyOverallStrength] =\n    useState(awayForm?.accuracyAwayStrength || null);\n\n  const [gameArrayHomeTeamHomeGames, setGameArrayHomeTeamHomeGames] = useState(\n    []\n  );\n  const [gameArrayAwayTeamAwayGames, setGameArrayAwayTeamAwayGames] = useState(\n    []\n  );\n\n  const [ranksHome, setRanksHome] = useState([]);\n  const [ranksAway, setRanksAway] = useState([]);\n\n  const allResultsHome = useMemo(() => {\n    const results = homeForm?.allTeamResults ?? [];\n    return [...results].sort((b, a) => b.dateRaw - a.dateRaw);\n  }, [homeForm?.allTeamResults]);\n\n  const homeResults = useMemo(() => {\n    const results = homeForm?.homeResults ?? [];\n    return [...results].sort((b, a) => b.dateRaw - a.dateRaw);\n  }, [homeForm?.homeResults]);\n\n  const allResultsAway = useMemo(() => {\n    const results = awayForm?.allTeamResults ?? [];\n    return [...results].sort((b, a) => b.dateRaw - a.dateRaw);\n  }, [awayForm?.allTeamResults]);\n\n  const awayResults = useMemo(() => {\n    const results = awayForm?.awayResults ?? [];\n    return [...results].sort((b, a) => b.dateRaw - a.dateRaw);\n  }, [awayForm?.awayResults]);\n\n  // Memoize the derived arrays\n  const goalDiffArrayHome = useMemo(() => {\n    return allResultsHome.map((a) => a.scored - a.conceeded);\n  }, [allResultsHome]);\n\n  const xgDiffArrayHome = allResultsHome.map((a) => a.XG - a.XGAgainst);\n  const xgDiffArrayAway = allResultsAway.map((a) => a.XG - a.XGAgainst);\n\n  const rollingGoalDiffTotalHome = useMemo(() => {\n    return goalDiffArrayHome.map(\n      (\n        (sum) => (value) =>\n          (sum += value)\n      )(0)\n    );\n  }, [goalDiffArrayHome]);\n\n  const rollingXGDiffTotalHome = xgDiffArrayHome.map(\n    (\n      (sum) => (value) =>\n        (sum += value)\n    )(0)\n  );\n\n  const goalDiffArrayHomeOnly = useMemo(() => {\n    return homeResults.map((a) => a.scored - a.conceeded);\n  }, [homeResults]);\n\n  const goalDiffArrayAwayOnly = useMemo(() => {\n    return awayResults.map((a) => a.scored - a.conceeded);\n  }, [awayResults]);\n\n  const xgDiffArrayHomeOnly = useMemo(() => {\n    return homeResults.map((a) => a.XG - a.XGAgainst);\n  }, [homeResults]);\n\n  const xgDiffArrayAwayOnly = useMemo(() => {\n    return awayResults.map((a) => a.XG - a.XGAgainst);\n  }, [awayResults]);\n\n  const rollingGoalDiffTotalHomeOnly = useMemo(() => {\n    return goalDiffArrayHomeOnly.map(\n      (\n        (sum) => (value) =>\n          (sum += value)\n      )(0)\n    );\n  }, [goalDiffArrayHomeOnly]);\n\n  const rollingXGDiffTotalHomeOnly = useMemo(() => {\n    return xgDiffArrayHomeOnly.map(\n      (\n        (sum) => (value) =>\n          (sum += value)\n      )(0)\n    );\n  }, [xgDiffArrayHomeOnly]);\n\n  const goalDiffArrayAway = useMemo(() => {\n    return allResultsAway.map((a) => a.scored - a.conceeded);\n  }, [allResultsAway]);\n\n  const rollingGoalDiffTotalAway = goalDiffArrayAway.map(\n    (\n      (sum) => (value) =>\n        (sum += value)\n    )(0)\n  );\n\n  const rollingXGDiffTotalAway = xgDiffArrayAway.map(\n    (\n      (sum) => (value) =>\n        (sum += value)\n    )(0)\n  );\n\n  const rollingGoalDiffTotalAwayOnly = useMemo(() => {\n    return goalDiffArrayAwayOnly.map(\n      (\n        (sum) => (value) =>\n          (sum += value)\n      )(0)\n    );\n  }, [goalDiffArrayAwayOnly]);\n\n  const rollingXGDiffTotalAwayOnly = useMemo(() => {\n    return xgDiffArrayAwayOnly.map(\n      (\n        (sum) => (value) =>\n          (sum += value)\n      )(0)\n    );\n  }, [xgDiffArrayAwayOnly]);\n\n  //It is unlikely that slice will be an array without useMemo, so you need to ensure it works for all relevant ones.\n  const rollingGoalDiffTotalHomeLast5 = useMemo(() => {\n    return goalDiffArrayHome\n      .slice(Math.max(goalDiffArrayHome.length - 5, 0))\n      .map(\n        (\n          (sum) => (value) =>\n            (sum += value)\n        )(0)\n      );\n  }, [goalDiffArrayHome]);\n\n  const rollingXGDiffTotalHomeLast5 = useMemo(() => {\n    return xgDiffArrayHome.slice(Math.max(xgDiffArrayHome.length - 5, 0)).map(\n      (\n        (sum) => (value) =>\n          (sum += value)\n      )(0)\n    );\n  }, [xgDiffArrayHome]);\n\n  const rollingGoalDiffTotalAwayLast5 = useMemo(() => {\n    return goalDiffArrayAway\n      .slice(Math.max(goalDiffArrayAway.length - 5, 0))\n      .map(\n        (\n          (sum) => (value) =>\n            (sum += value)\n        )(0)\n      );\n  }, [goalDiffArrayAway]);\n\n  const rollingXGDiffTotalAwayLast5 = useMemo(() => {\n    return xgDiffArrayAway.slice(Math.max(xgDiffArrayAway.length - 5, 0)).map(\n      (\n        (sum) => (value) =>\n          (sum += value)\n      )(0)\n    );\n  }, [xgDiffArrayAway]);\n\n  const [firstRenderDone, setFirstRenderDone] = useState(false);\n  const [divider, setDivider] = useState(0);\n  const gameArrayHome = [];\n  const gameArrayAway = [];\n\n  function formatValue(val) {\n    return typeof val === \"number\" && val % 1 !== 0\n      ? parseFloat(val.toFixed(2))\n      : val;\n  }\n\n  const normalize = (str) =>\n    str\n      .toLowerCase()\n      .normalize(\"NFD\")\n      .replace(/[\\u0300-\\u036f]/g, \"\")\n      .replace(/\\s+/g, \"\")\n      .replace(/[^a-z]/g, \"\");\n\n  const removeCommonSuffixes = (str) =>\n    str.replace(\n      /\\b(fc|bk|sc|afc|cf|ac|cd|sv|ss|united|city|sporting|club|team|U 20| U 19)\\b/g,\n      \"\"\n    );\n\n  const cleanTeamName = (str) => removeCommonSuffixes(normalize(str));\n\n  // Centralized alias map\n  const teamNameAliases = {\n    \"psg\": \"Paris saint-germain\",\n    \"inter milan\": \"inter\",\n    \"ac milan\": \"milan\",\n    \"man utd\": \"manchester united\",\n    \"man united\": \"manchester united\",\n    \"man city\": \"manchester city\",\n    \"bayern\": \"bayern munich\",\n    \"montreal impact\": \"cf montreal\",\n    \"botafogo\": \"botafogo\",\n  };\n\n  // const normalizedTargetName = cleanTeamName(\n  //   teamNameAliases[targetTeamName.toLowerCase()] || targetTeamName\n  // );\n\n  const warnedTeams = new Set(); // Move this outside the function if reused\n\n  function getTeamRanksFromTopTeamsWithPartialMatch(topTeamsData, targetTeamName) {\n    if (!topTeamsData) return;\n\n    const teamRanks = {};\n    const topTeams = topTeamsData.topTeams;\n\n    const teamNameAliases = {\n      \"inter milan\": \"inter\",\n      \"ac milan\": \"milan\",\n      \"man city\": \"manchester city\",\n      \"man united\": \"manchester united\",\n      psg: \"paris saint-germain\",\n    };\n\n    const targetNameLower = targetTeamName.toLowerCase();\n    const normalizedTargetName = teamNameAliases[targetNameLower] || targetNameLower;\n\n    for (const statistic in topTeams) {\n      if (!Array.isArray(topTeams[statistic])) continue;\n\n      const teamArray = topTeams[statistic];\n      let targetTeamIndex = teamArray.findIndex(\n        (teamInfo) => teamInfo.team.name.toLowerCase() === normalizedTargetName\n      );\n\n      if (targetTeamIndex === -1) {\n        const partialMatches = teamArray.filter((teamInfo) => {\n          const name = teamInfo.team.name.toLowerCase();\n          return (\n            name.includes(normalizedTargetName) ||\n            normalizedTargetName.includes(name)\n          );\n        });\n\n        if (partialMatches.length === 1) {\n          targetTeamIndex = teamArray.indexOf(partialMatches[0]);\n        } else {\n          const warningKey = `${targetTeamName}-${statistic}`;\n          if (!warnedTeams.has(warningKey)) {\n            console.warn(\n              `Ambiguous or missing match for \"${targetTeamName}\" in \"${statistic}\" — found:`,\n              partialMatches.map((p) => p.team.name)\n            );\n            warnedTeams.add(warningKey);\n          }\n        }\n      }\n\n      if (targetTeamIndex !== -1) {\n        const teamInfo = teamArray[targetTeamIndex];\n        teamRanks[statistic] = {\n          name: teamInfo.team.name,\n          rank: targetTeamIndex + 1,\n          value: formatValue(teamInfo.statistics[statistic]),\n          games: teamInfo.statistics.matches,\n        };\n      } else {\n        teamRanks[statistic] = {\n          name: null,\n          rank: null,\n          error: \"Team not found in this category\",\n          value: null,\n          games: null,\n        };\n      }\n    }\n\n    return teamRanks;\n  }\n\n  useEffect(() => {\n    if (stats && homeForm?.teamName) {\n      const ranks = getTeamRanksFromTopTeamsWithPartialMatch(stats, homeForm.teamName);\n      setRanksHome(ranks);\n    }\n  }, [stats, homeForm?.teamName]);\n\n  useEffect(() => {\n    if (stats && awayForm?.teamName) {\n      const ranks = getTeamRanksFromTopTeamsWithPartialMatch(stats, awayForm.teamName);\n      setRanksAway(ranks);\n    }\n  }, [stats, awayForm?.teamName]);\n\n  const pos = allLeagueResultsArrayOfObjects\n    .map((i) => i.id)\n    .indexOf(gameStats.leagueId);\n  let matches = allLeagueResultsArrayOfObjects[pos];\n  const resultHome = matches.fixtures.filter(\n    (game) =>\n      game.home_name === gameStats.home.teamName ||\n      game.away_name === gameStats.home.teamName\n  );\n\n  const resultHomeOnly = matches.fixtures.filter(\n    (game) => game.home_name === gameStats.home.teamName\n  );\n\n  resultHome.sort((a, b) => b.date_unix - a.date_unix);\n  resultHomeOnly.sort((a, b) => b.date_unix - a.date_unix);\n\n  const resultAway = matches.fixtures.filter(\n    (game) =>\n      game.away_name === gameStats.away.teamName ||\n      game.home_name === gameStats.away.teamName\n  );\n\n  const resultAwayOnly = matches.fixtures.filter(\n    (game) => game.away_name === gameStats.away.teamName\n  );\n\n  resultAway.sort((a, b) => b.date_unix - a.date_unix);\n  resultAwayOnly.sort((a, b) => b.date_unix - a.date_unix);\n\n  for (let i = 0; i < resultHome.length; i++) {\n    let unixTimestamp = resultHome[i].date_unix;\n    let milliseconds = unixTimestamp * 1000;\n    let dateObject = new Date(milliseconds).toLocaleString(\"en-GB\", {\n      timeZone: \"UTC\",\n    });\n\n    let won;\n    let goalsScored;\n    let goalsConceeded;\n\n    switch (true) {\n      case resultHome[i].home_name === gameStats.home.teamName:\n        switch (true) {\n          case resultHome[i].homeGoalCount > resultHome[i].awayGoalCount:\n            won = \"W\";\n            goalsScored = resultHome[i].homeGoalCount;\n            goalsConceeded = resultHome[i].awayGoalCount;\n            break;\n          case resultHome[i].homeGoalCount === resultHome[i].awayGoalCount:\n            won = \"D\";\n            goalsScored = resultHome[i].homeGoalCount;\n            goalsConceeded = resultHome[i].awayGoalCount;\n            break;\n          case resultHome[i].homeGoalCount < resultHome[i].awayGoalCount:\n            won = \"L\";\n            goalsScored = resultHome[i].homeGoalCount;\n            goalsConceeded = resultHome[i].awayGoalCount;\n            break;\n          default:\n            break;\n        }\n        break;\n      case resultHome[i].away_name === gameStats.home.teamName:\n        switch (true) {\n          case resultHome[i].homeGoalCount > resultHome[i].awayGoalCount:\n            won = \"L\";\n            goalsScored = resultHome[i].homeGoalCount;\n            goalsConceeded = resultHome[i].awayGoalCount;\n            break;\n          case resultHome[i].homeGoalCount === resultHome[i].awayGoalCount:\n            won = \"D\";\n            goalsScored = resultHome[i].homeGoalCount;\n            goalsConceeded = resultHome[i].awayGoalCount;\n            break;\n          case resultHome[i].homeGoalCount < resultHome[i].awayGoalCount:\n            won = \"W\";\n            goalsScored = resultHome[i].homeGoalCount;\n            goalsConceeded = resultHome[i].awayGoalCount;\n            break;\n          default:\n            break;\n        }\n        break;\n      default:\n        break;\n    }\n\n    gameArrayHome.push({\n      id: resultHome[i].id,\n      date: dateObject,\n      homeTeam: resultHome[i].home_name,\n      homeGoals: resultHome[i].homeGoalCount,\n      homeXG: resultHome[i].team_a_xg,\n      homeOdds: resultHome[i].odds_ft_1,\n      awayTeam: resultHome[i].away_name,\n      awayGoals: resultHome[i].awayGoalCount,\n      awayXG: resultHome[i].team_b_xg,\n      awayOdds: resultHome[i].odds_ft_2,\n      won: won,\n      homeShots: resultHome[i].team_a_shots,\n      awayShots: resultHome[i].team_b_shots,\n      homeSot: resultHome[i].team_a_shotsOnTarget,\n      awaySot: resultHome[i].team_b_shotsOnTarget,\n      homeRed: resultHome[i].team_a_red_cards,\n      awayRed: resultHome[i].team_b_red_cards,\n      homePossession: resultHome[i].team_a_possession,\n      awayPossession: resultHome[i].team_b_possession,\n      homeDangerousAttacks: resultHome[i].team_a_dangerous_attacks,\n      awayDangerousAttacks: resultHome[i].team_b_dangerous_attacks,\n      homePPG: resultHome[i].pre_match_teamA_overall_ppg,\n      awayPPG: resultHome[i].pre_match_teamB_overall_ppg,\n      unixTimestamp: resultHome[i].date_unix,\n      goalsFor: goalsScored,\n      goalsAgainst: goalsConceeded,\n      btts:\n        resultHome[i].homeGoalCount > 0 && resultHome[i].awayGoalCount > 0\n          ? \"\\u2714\"\n          : \"\\u2718\",\n    });\n  }\n\n  for (let i = 0; i < resultHomeOnly.length; i++) {\n    let wonHomeOrAwayOnly;\n\n    switch (true) {\n      case resultHomeOnly[i].home_name === gameStats.home.teamName:\n        switch (true) {\n          case resultHomeOnly[i].homeGoalCount >\n            resultHomeOnly[i].awayGoalCount:\n            wonHomeOrAwayOnly = \"W\";\n            gameArrayHomeTeamHomeGames.push(wonHomeOrAwayOnly);\n            break;\n          case resultHomeOnly[i].homeGoalCount ===\n            resultHomeOnly[i].awayGoalCount:\n            wonHomeOrAwayOnly = \"D\";\n            gameArrayHomeTeamHomeGames.push(wonHomeOrAwayOnly);\n            break;\n          case resultHomeOnly[i].homeGoalCount <\n            resultHomeOnly[i].awayGoalCount:\n            wonHomeOrAwayOnly = \"L\";\n            gameArrayHomeTeamHomeGames.push(wonHomeOrAwayOnly);\n            break;\n          default:\n            break;\n        }\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  for (let i = 0; i < resultAway.length; i++) {\n    let unixTimestamp = resultAway[i].date_unix;\n    let milliseconds = unixTimestamp * 1000;\n    let dateObject = new Date(milliseconds).toLocaleString(\"en-GB\", {\n      timeZone: \"UTC\",\n    });\n\n    let won;\n    let goalsScored;\n    let goalsConceeded;\n\n    switch (true) {\n      case resultAway[i].home_name === gameStats.away.teamName:\n        switch (true) {\n          case resultAway[i].homeGoalCount > resultAway[i].awayGoalCount:\n            won = \"W\";\n            goalsScored = resultAway[i].awayGoalCount;\n            goalsConceeded = resultAway[i].homeGoalCount;\n            break;\n          case resultAway[i].awayGoalCount === resultAway[i].homeGoalCount:\n            won = \"D\";\n            goalsScored = resultAway[i].awayGoalCount;\n            goalsConceeded = resultAway[i].homeGoalCount;\n            break;\n          case resultAway[i].homeGoalCount < resultAway[i].awayGoalCount:\n            won = \"L\";\n            goalsScored = resultAway[i].awayGoalCount;\n            goalsConceeded = resultAway[i].homeGoalCount;\n            break;\n          default:\n            break;\n        }\n        break;\n\n      case resultAway[i].away_name === gameStats.away.teamName:\n        switch (true) {\n          case resultAway[i].homeGoalCount > resultAway[i].awayGoalCount:\n            won = \"L\";\n            goalsScored = resultAway[i].awayGoalCount;\n            goalsConceeded = resultAway[i].homeGoalCount;\n            break;\n          case resultAway[i].homeGoalCount === resultAway[i].awayGoalCount:\n            won = \"D\";\n            goalsScored = resultAway[i].awayGoalCount;\n            goalsConceeded = resultAway[i].homeGoalCount;\n            break;\n          case resultAway[i].homeGoalCount < resultAway[i].awayGoalCount:\n            won = \"W\";\n            goalsScored = resultAway[i].awayGoalCount;\n            goalsConceeded = resultAway[i].homeGoalCount;\n            break;\n          default:\n            break;\n        }\n        break;\n      default:\n        break;\n    }\n\n    gameArrayAway.push({\n      id: resultAway[i].id,\n      date: dateObject,\n      homeTeam: resultAway[i].home_name,\n      homeGoals: resultAway[i].homeGoalCount,\n      homeXG: resultAway[i].team_a_xg,\n      homeOdds: resultAway[i].odds_ft_1,\n      awayTeam: resultAway[i].away_name,\n      awayGoals: resultAway[i].awayGoalCount,\n      awayXG: resultAway[i].team_b_xg,\n      awayOdds: resultAway[i].odds_ft_2,\n      won: won,\n      homeShots: resultAway[i].team_a_shots,\n      awayShots: resultAway[i].team_b_shots,\n      homeSot: resultAway[i].team_a_shotsOnTarget,\n      awaySot: resultAway[i].team_b_shotsOnTarget,\n      homeRed: resultAway[i].team_a_red_cards,\n      awayRed: resultAway[i].team_b_red_cards,\n      homePossession: resultAway[i].team_a_possession,\n      awayPossession: resultAway[i].team_b_possession,\n      homeDangerousAttacks: resultAway[i].team_a_dangerous_attacks,\n      awayDangerousAttacks: resultAway[i].team_b_dangerous_attacks,\n      homePPG: resultAway[i].pre_match_teamA_overall_ppg,\n      awayPPG: resultAway[i].pre_match_teamB_overall_ppg,\n      unixTimestamp: resultAway[i].date_unix,\n      goalsFor: goalsScored,\n      goalsAgainst: goalsConceeded,\n      btts:\n        resultAway[i].homeGoalCount > 0 && resultAway[i].awayGoalCount > 0\n          ? \"\\u2714\"\n          : \"\\u2718\",\n    });\n  }\n\n  for (let i = 0; i < resultAwayOnly.length; i++) {\n    let wonAwayOrAwayOnly;\n\n    switch (true) {\n      case resultAwayOnly[i].away_name === gameStats.away.teamName:\n        switch (true) {\n          case resultAwayOnly[i].awayGoalCount >\n            resultAwayOnly[i].homeGoalCount:\n            wonAwayOrAwayOnly = \"W\";\n            gameArrayAwayTeamAwayGames.push(wonAwayOrAwayOnly);\n            break;\n          case resultAwayOnly[i].awayGoalCount ===\n            resultAwayOnly[i].homeGoalCount:\n            wonAwayOrAwayOnly = \"D\";\n            gameArrayAwayTeamAwayGames.push(wonAwayOrAwayOnly);\n            break;\n          case resultAwayOnly[i].awayGoalCount <\n            resultAwayOnly[i].homeGoalCount:\n            wonAwayOrAwayOnly = \"L\";\n            gameArrayAwayTeamAwayGames.push(wonAwayOrAwayOnly);\n            break;\n          default:\n            break;\n        }\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  // Helper: Memoized team name mapping to avoid repeated computation\n  const mappedTeamNameCache = new Map();\n  function getMappedTeamName(name) {\n    if (mappedTeamNameCache.has(name)) {\n      return mappedTeamNameCache.get(name);\n    }\n    const normalized = cleanTeamName(name);\n    const aliasKey = normalize(name);\n    const mapped = cleanTeamName(teamNameAliases[aliasKey] || normalized);\n    mappedTeamNameCache.set(name, mapped);\n    return mapped;\n  }\n\n  async function getGameIdByHomeTeam(games, homeTeamName) {\n    const normalizedSearch = getMappedTeamName(homeTeamName);\n\n    // First try to find an exact match\n    const exactMatch = games.find(\n      (game) => getMappedTeamName(game.homeTeam) === normalizedSearch\n    );\n\n    if (exactMatch) return exactMatch;\n\n    // If no exact match, try partial match using includes\n    const partialMatch = games.find(\n      (game) => getMappedTeamName(game.homeTeam).includes(normalizedSearch)\n    );\n\n    return partialMatch || null;\n  }\n\n  async function getGameIdByAwayTeam(games, awayTeamName) {\n    const normalizedSearch = getMappedTeamName(awayTeamName);\n\n    // First try to find an exact match\n    const exactMatch = games.find(\n      (game) => getMappedTeamName(game.awayTeam) === normalizedSearch\n    );\n\n    if (exactMatch) return exactMatch;\n\n    // If no exact match, try partial match using includes\n    const partialMatch = games.find(\n      (game) => getMappedTeamName(game.awayTeam).includes(normalizedSearch)\n    );\n\n    return partialMatch || null;\n  }\n\n  async function findGameByPartialMatch(gamesArray, searchText, teamType) {\n    try {\n      const normalizedSearch = getMappedTeamName(searchText);\n\n      const matchingGame = gamesArray.find((game) => {\n        const teamNameInArray = teamType === \"homeTeam\" ? game.homeTeam : game.awayTeam;\n        const normalizedArrayName = getMappedTeamName(teamNameInArray);\n        return (\n          normalizedArrayName.includes(normalizedSearch) ||\n          normalizedSearch.includes(normalizedArrayName)\n        );\n      });\n\n      return matchingGame || null;\n    } catch (error) {\n      console.error(\n        `Error finding game by partial match (array value against search text) on ${teamType}:`,\n        error\n      );\n      return null;\n    }\n  }\n\n\n  function isBeforeTimestamp(targetTimestamp) {\n    const currentTimestamp = Math.floor(Date.now() / 1000); // Get current time in seconds\n    return currentTimestamp < targetTimestamp;\n  }\n\n  async function getRefStats(refId, compId) {\n    try {\n      const response = await fetch(\n        `${process.env.REACT_APP_EXPRESS_SERVER}referee/${refId}`\n      );\n\n      if (!response.ok) {\n        // Handle HTTP errors (e.g., 404, 500)\n        console.error(`HTTP error! Status: ${response.status}`);\n        return null; // Or throw an error to be caught later\n      }\n\n      const refData = await response.json(); // Parse the JSON response\n\n      // Access the array within the 'data' property\n      const dataArray = refData.data;\n\n      if (!Array.isArray(dataArray)) {\n        console.error(\"Error: Expected 'data' property to be an array.\");\n        return null;\n      }\n\n      // Find the object with the matching competition_id\n      const filteredObject = dataArray.find(\n        (item) => item.competition_id === compId\n      );\n\n      const distilledRefData = {\n        appearances_overall: filteredObject.appearances_overall,\n        full_name: filteredObject.full_name,\n        cards_per_match_overall: filteredObject.cards_per_match_overall,\n        goals_per_match_overall: filteredObject.goals_per_match_overall,\n        min_per_card_overall: filteredObject.min_per_card_overall,\n        nationality: filteredObject.nationality,\n        over25_cards_percentage_overall:\n          filteredObject.over25_cards_percentage_overall,\n        over35_cards_percentage_overall:\n          filteredObject.over35_cards_percentage_overall,\n        penalties_given_per_match_overall:\n          filteredObject.penalties_given_per_match_overall,\n        red_cards_overall: filteredObject.red_cards_overall,\n      };\n\n      return distilledRefData; // Returns the found object, or undefined if not found\n    } catch (error) {\n      console.error(\"Error fetching or processing data:\", error);\n      return null; // Or handle the error as appropriate for your application (e.g., display an error message to the user)\n    }\n  }\n\n  const reasonCodeMap = {\n    1: \"Injury\",\n    2: \"Unknown\",\n    3: \"Suspension\",\n    4: \"Personal Reasons\",\n    5: \"International Duty\",\n    6: \"Not in Squad\",\n    7: \"Rest\",\n    8: \"Unknown\",\n  };\n\n  function getReasonDescription(code) {\n    return reasonCodeMap[code] || \"Unknown\";\n  }\n\n  const positionCodeMap = {\n    G: \"Goalkeeper\",\n    D: \"Defender\",\n    M: \"Midfielder\",\n    F: \"Attacker\",\n  };\n\n  function getPos(code) {\n    return positionCodeMap[code] || \"\";\n  }\n\n  async function extractMissingPlayers(data) {\n    const extract = (teamType) => {\n      const team = data?.[teamType];\n      if (!team || !Array.isArray(team.missingPlayers)) return [];\n\n      return team.missingPlayers.map((mp) => ({\n        team: teamType,\n        name: mp.player?.name ?? \"Unknown\",\n        position: getPos(mp.player?.position),\n        reason: getReasonDescription(mp.reason),\n        type: mp.type,\n      }));\n    };\n\n    return {\n      homeMissingPlayers: extract(\"home\"),\n      awayMissingPlayers: extract(\"away\"),\n    };\n  }\n\n  async function extractPlayerRatings(data) {\n    const extract = (teamType) => {\n      const team = data?.[teamType];\n      if (!team || !Array.isArray(team.players)) {\n        return { formation: null, lineup: [] };\n      }\n\n      return {\n        formation: team.formation ?? null,\n        lineup: team.players.map((p) => ({\n          team: teamType,\n          name: p.player?.name ?? \"Unknown\",\n          avgRating: p.avgRating ?? \"N/A\",\n          position: p.position ?? \"Unknown\",\n          valueEuros: p.player?.proposedMarketValueRaw?.value ?? \"Unknown\",\n        })),\n      };\n    };\n\n    return {\n      homeLineup: extract(\"home\"),\n      awayLineup: extract(\"away\"),\n    };\n  }\n\n  function mapOddsToStreaks(streaks, odds) {\n    const mappedStreaks = JSON.parse(JSON.stringify(streaks)); // Deep copy to avoid modifying original\n\n    const getOddsValue = (streakName, teamType) => {\n      let oddsCategory;\n      if (teamType === \"home\") {\n        oddsCategory = odds.HomeTeam;\n      } else if (teamType === \"away\") {\n        oddsCategory = odds.AwayTeam;\n      } else if (teamType === \"both\") {\n        oddsCategory = odds.GeneralMatchOdds;\n      } else {\n        oddsCategory = odds.GeneralMatchOdds;\n      }\n\n      const mapping = oddsCategory ? oddsCategory._streakMapping : {};\n      const oddsKey = mapping[streakName];\n\n      if (oddsKey !== undefined && oddsKey !== null) {\n        return oddsCategory[oddsKey];\n      } else if (oddsKey === null) {\n        return undefined; // Explicitly mapped to null, means no odds available\n      }\n      // Fallback: if not in mapping, try direct key match (less reliable for streaks)\n      return oddsCategory ? oddsCategory[streakName] : undefined;\n    };\n\n    for (const category in mappedStreaks) {\n      if (Array.isArray(mappedStreaks[category])) {\n        mappedStreaks[category] = mappedStreaks[category].map((streak) => {\n          const oddsValue = getOddsValue(streak.name, streak.team);\n          return {\n            ...streak,\n            odds: oddsValue !== undefined ? oddsValue : \"N/A\",\n          };\n        });\n      }\n    }\n\n    return mappedStreaks;\n  }\n\n  // Memoize derivedRoundId so it's only recalculated when game.sofaScoreId or rounds changes\n  const derivedRoundId = useMemo(() => {\n    for (const mapping of rounds) {\n      console.log(mapping);\n      console.log(game.sofaScoreId);\n      console.log(rounds)\n      if (mapping.hasOwnProperty(game.sofaScoreId)) {\n        return mapping[game.sofaScoreId];\n      }\n    }\n    console.warn(`No matching ID found for ID: ${game.sofaScoreId}`);\n    return null;\n  }, [game.sofaScoreId, rounds]);\n\n  console.log(derivedRoundId);\n\n  function getWeekOfYear(date) {\n    const target = new Date(date.valueOf());\n    const dayNumber = (date.getUTCDay() + 6) % 7;\n    target.setUTCDate(target.getUTCDate() - dayNumber + 3);\n    const firstThursday = new Date(Date.UTC(target.getUTCFullYear(), 0, 4));\n    const diff = target - firstThursday;\n    return 1 + Math.round(diff / (7 * 24 * 60 * 60 * 1000));\n  }\n\n  const today = new Date(); // Or new Date()\n  const week = getWeekOfYear(today);\n\n  async function extractRankedPlayersByTeam(topPlayers, teamId) {\n    const result = [];\n\n    if (!topPlayers || typeof topPlayers !== \"object\") return result;\n\n    // Helper to find or create player entry\n    const getOrCreatePlayer = (players, playerName, playerId) => {\n      let playerEntry = players.find((p) => p.playerName === playerName);\n      if (!playerEntry) {\n        playerEntry = { playerName, playerId, rankings: [] };\n        players.push(playerEntry);\n      }\n      return playerEntry;\n    };\n\n    for (const [metric, playerArray] of Object.entries(topPlayers)) {\n      if (!Array.isArray(playerArray)) continue;\n\n      playerArray.forEach((playerData, index) => {\n        if (playerData?.team?.id === teamId) {\n          const playerName = playerData.player?.name;\n          const playerId = playerData.player?.id;\n          if (!playerName || !playerId) return;\n\n          const playerEntry = getOrCreatePlayer(result, playerName, playerId);\n          playerEntry.rankings.push({\n            metric,\n            rank: index + 1, // Rank is 1-based\n          });\n        }\n      });\n    }\n\n    // Sort players by number of rankings (descending)\n    result.sort((a, b) => b.rankings.length - a.rankings.length);\n\n    return result;\n  }\n\n\n  useEffect(() => {\n    async function fetchMatchingGame() {\n      try {\n        const mappedHome = getMappedTeamName(game.homeTeam);\n        const mappedAway = getMappedTeamName(game.awayTeam);\n\n        let matchingGameInfo =\n          await getGameIdByHomeTeam(arrayOfGames, mappedHome);\n\n        if (!matchingGameInfo) {\n          console.log(\n            `No match found for homeTeam: ${mappedHome}. Trying awayTeam: ${mappedAway}`\n          );\n          matchingGameInfo =\n            await getGameIdByAwayTeam(arrayOfGames, mappedAway);\n        }\n\n        if (!matchingGameInfo) {\n          console.log(\n            `No exact match found. Trying partial match on homeTeam: ${mappedHome}`\n          );\n          matchingGameInfo =\n            await findGameByPartialMatch(arrayOfGames, mappedHome, \"homeTeam\");\n        }\n\n        if (!matchingGameInfo) {\n          console.log(\n            `Still no match. Trying partial match on awayTeam: ${mappedAway}`\n          );\n          matchingGameInfo =\n            await findGameByPartialMatch(arrayOfGames, mappedAway, \"awayTeam\");\n        }\n\n        console.log(\n          `Matching game found: ${matchingGameInfo ? matchingGameInfo.id : \"None\"}`\n        );\n        setMatchingGame(matchingGameInfo);\n\n        if (!matchingGameInfo) {\n          console.warn(\n            `No matching game found for either homeTeam \"${game.homeTeam}\" or awayTeam \"${game.awayTeam}\"`\n          );\n          // Optionally set matchingGame to a default value (e.g., null) if needed\n          // setMatchingGame(null);\n        }\n\n        const now = Math.floor(Date.now() / 1000); // current Unix timestamp in seconds\n        const isWithin48Hours = game.date > now && game.date - now <= 172800;\n\n        // console.log(\"isWithin48Hours:\", isWithin48Hours);\n        // console.log(\"game.date:\", game.date, \"| now:\", now, \"| diff:\", game.date - now);\n        setLoading(true);\n        setLoadingStreaks(true);\n        setLoadingOdds(true);\n        setLoadingPlayerData(true);\n        setLoadingTeamStats(true);\n        setLoadingKeyPlayers(true);\n        setLoadingKeyPlayerComparison(true);\n        if (\n          isWithin48Hours\n        ) {\n          const lineupDetail = await fetch(\n            `${process.env.REACT_APP_EXPRESS_SERVER}lineups/${matchingGameInfo.id}`\n          );\n\n          const data = await lineupDetail.json();\n          const { homeMissingPlayers, awayMissingPlayers } =\n            await extractMissingPlayers(data);\n          const { homeLineup, awayLineup } = await extractPlayerRatings(data);\n          setHomeLineupList(homeLineup);\n          setAwayLineupList(awayLineup);\n          setHomeMissingPlayersList(homeMissingPlayers);\n          setAwayMissingPlayersList(awayMissingPlayers);\n        }\n\n        let previousGames = await fetch(\n          `${process.env.REACT_APP_EXPRESS_SERVER}match/${game.id}`\n        );\n        let odds;\n        await previousGames.json().then((data) => {\n          odds = {\n            HomeTeam: {\n              HomeWin: data.data.odds_ft_1,\n              MostCorners: data.data.odds_corners_1,\n              DoubleChanceHomeOrDraw: data.data.odds_doublechance_1x,\n              DoubleChanceAwayOrDraw: data.data.odds_doublechance_x2,\n              ToWinToNil: data.data.odds_win_to_nil_1,\n              ToScoreFirst: data.data.odds_team_to_score_first_1,\n              CleanSheetYes: data.data.odds_team_a_cs_yes,\n              CleanSheetNo: data.data.odds_team_a_cs_no,\n              \"1stHalfResultHomeWinning\": data.data.odds_1st_half_result_1,\n              \"1stHalfResultAwayWinning\": data.data.odds_1st_half_result_2,\n              \"Over2.5GoalsInMatch\": data.data.odds_ft_over25,\n              \"Under2.5GoalsInMatch\": data.data.odds_ft_under25,\n              \"Over3.5GoalsInMatch\": data.data.odds_ft_over35,\n              \"Under3.5GoalsInMatch\": data.data.odds_ft_under35,\n              \"Over10.5CornersInMatch\": data.data.odds_corners_over_105,\n              \"Under10.5CornersInMatch\": data.data.odds_corners_under_105,\n              BTTSInMatchYes: data.data.odds_btts_yes,\n              // --- NEW MAPPING KEYS FOR HOME TEAM ---\n              _streakMapping: {\n                Wins: \"HomeWin\",\n                \"No wins\": \"DoubleChanceAwayOrDraw\",\n                \"No losses\": \"DoubleChanceHomeOrDraw\",\n                \"First to score\": \"ToScoreFirst\",\n                \"Without clean sheet\": \"CleanSheetNo\",\n                \"First half winner\": \"1stHalfResultHomeWinning\",\n                \"First half loser\": \"1stHalfResultAwayWinning\",\n                \"No goals conceded\": \"CleanSheetYes\",\n                \"More than 2.5 goals\": \"Over2.5GoalsInMatch\",\n                \"Less than 2.5 goals\": \"Under2.5GoalsInMatch\",\n                \"More than 3.5 goals\": \"Over3.5GoalsInMatch\",\n                \"Less than 3.5 goals\": \"Under3.5GoalsInMatch\",\n                \"Less than 10.5 corners\": \"Under10.5CornersInMatch\",\n                \"More than 10.5 corners\": \"Over10.5CornersInMatch\",\n                \"Both teams scoring\": \"BTTSInMatchYes\",\n\n                // Add more specific mappings for home team streaks here\n              },\n            },\n            AwayTeam: {\n              AwayWin: data.data.odds_ft_2,\n              MostCorners: data.data.odds_corners_2,\n              DoubleChanceHomeOrDraw: data.data.odds_doublechance_1x,\n              DoubleChanceAwayOrDraw: data.data.odds_doublechance_x2,\n              ToWinToNil: data.data.odds_win_to_nil_2,\n              ToScoreFirst: data.data.odds_team_to_score_first_2,\n              CleanSheetYes: data.data.odds_team_b_cs_yes,\n              CleanSheetNo: data.data.odds_team_b_cs_no,\n              \"1stHalfResultHomeWinning\": data.data.odds_1st_half_result_1,\n              \"1stHalfResultAwayWinning\": data.data.odds_1st_half_result_2,\n              \"Over2.5GoalsInMatch\": data.data.odds_ft_over25,\n              \"Under2.5GoalsInMatch\": data.data.odds_ft_under25,\n              \"Over3.5GoalsInMatch\": data.data.odds_ft_over35,\n              \"Under3.5GoalsInMatch\": data.data.odds_ft_under35,\n              \"Over10.5CornersInMatch\": data.data.odds_corners_over_105,\n              \"Under10.5CornersInMatch\": data.data.odds_corners_under_105,\n              BTTSInMatchYes: data.data.odds_btts_yes,\n\n              // --- NEW MAPPING KEYS FOR AWAY TEAM ---\n              _streakMapping: {\n                Wins: \"AwayWin\",\n                \"No wins\": \"DoubleChanceHomeOrDraw\",\n                \"No losses\": \"DoubleChanceAwayOrDraw\", // Assuming \"No losses\" for away means DoubleChanceAwayOrDraw\n                \"First to score\": \"ToScoreFirst\",\n                \"Without clean sheet\": \"CleanSheetNo\",\n                \"First half winner\": \"1stHalfResultAwayWinning\",\n                \"First half loser\": \"1stHalfResultHomeWinning\",\n                \"No goals conceded\": \"CleanSheetYes\",\n                \"More than 2.5 goals\": \"Over2.5GoalsInMatch\",\n                \"Less than 2.5 goals\": \"Under2.5GoalsInMatch\",\n                \"More than 3.5 goals\": \"Over3.5GoalsInMatch\",\n                \"Less than 3.5 goals\": \"Under3.5GoalsInMatch\",\n                \"Less than 10.5 corners\": \"Under10.5CornersInMatch\",\n                \"More than 10.5 corners\": \"Over10.5CornersInMatch\",\n                \"Both teams scoring\": \"BTTSInMatchYes\",\n\n                // Add more specific mappings for away team streaks here\n              },\n            },\n            GeneralMatchOdds: {\n              BTTSYes: data.data.odds_btts_yes,\n              BTTSNo: data.data.odds_btts_no,\n              \"Over2.5Goals\": data.data.odds_ft_over25,\n              \"Under2.5Goals\": data.data.odds_ft_under25,\n              \"Over3.5Goals\": data.data.odds_ft_over35,\n              \"Under3.5Goals\": data.data.odds_ft_under35,\n              \"Over10.5Corners\": data.data.odds_corners_over_105,\n              \"Under10.5Corners\": data.data.odds_corners_under_105,\n\n              // --- NEW MAPPING KEYS FOR GENERAL MATCH ODDS ---\n              _streakMapping: {\n                \"Both teams scoring\": \"BTTSYes\",\n                \"More than 2.5 goals\": \"Over2.5Goals\",\n                \"Less than 2.5 goals\": \"Under2.5Goals\",\n                \"Less than 4.5 cards\": null, // Explicitly map to null if no odds exist\n                \"Less than 10.5 corners\": \"Under10.5Corners\",\n                \"More than 10.5 corners\": \"Over10.5Corners\",\n                // For \"First to score\" when team is \"both\", you might need to decide\n                // if it maps to a general odds or if it's always team-specific.\n                // Based on your previous example, \"First to score\" was team-specific.\n                // If it could be \"both\", you'd need a \"FirstToScore\" key here.\n              },\n            },\n          };\n\n          // previousGameStats = data.data.h2h.previous_matches_results\n        });\n\n        setOddsData(odds);\n\n        const streaks = await fetch(\n          `${process.env.REACT_APP_EXPRESS_SERVER}streaks/${matchingGameInfo.id}`\n        );\n\n\n        const streaksDataRaw = await streaks.json();\n\n        if (streaksDataRaw && odds) {\n          const mappedStreaks = mapOddsToStreaks(streaksDataRaw, odds);\n          setStreakData(mappedStreaks); // Update state with the mapped data\n        }\n\n        if (derivedRoundId) {\n          console.log(matchingGameInfo)\n          // https://sofascore.p.rapidapi.com/teams/get-statistics?teamId=38&tournamentId=17015&seasonId=61648&type=overall\n          try {\n            const homeTeamStatsResponse = await fetch(\n              `${process.env.REACT_APP_EXPRESS_SERVER}teamStats/${matchingGameInfo.homeId}/${game.sofaScoreId}/${derivedRoundId}`\n            );\n            const homeTeam = await homeTeamStatsResponse.json();\n            let homeStats = homeTeam.statistics;\n\n            const awayTeamStatsResponse = await fetch(\n              `${process.env.REACT_APP_EXPRESS_SERVER}teamStats/${matchingGameInfo.awayId}/${game.sofaScoreId}/${derivedRoundId}`\n            );\n            const awayTeam = await awayTeamStatsResponse.json();\n            let awayStats = awayTeam.statistics;\n\n            setHomeTeamStats(homeStats);\n            setAwayTeamStats(awayStats);\n          } catch (error) {\n            console.error(\n              `Error fetching team stats for league ${game.sofaScoreId}:`,\n              error\n            );\n          }\n\n          try {\n            const leaguePlayerStatsResponse = await fetch(\n              `${process.env.REACT_APP_EXPRESS_SERVER}bestPlayers/${game.sofaScoreId}/${derivedRoundId}/${week}`\n            );\n            const playerStats = await leaguePlayerStatsResponse.json();\n\n            let playersHome = await extractRankedPlayersByTeam(\n              playerStats.topPlayers,\n              matchingGameInfo.homeId\n            );\n            let playersAway = await extractRankedPlayersByTeam(\n              playerStats.topPlayers,\n              matchingGameInfo.awayId\n            );\n            const trimmedPlayersHome = playersHome.slice(0, 5); // Limit to top 3 players\n            const trimmedPlayersAway = playersAway.slice(0, 5); // Limit to top 3 players\n\n\n            const homeKeyPlayerAttributes = await fetch(`${process.env.REACT_APP_EXPRESS_SERVER}playerAttributes/${playersHome[0].playerId}`);\n            const awayKeyPlayerAttributes = await fetch(`${process.env.REACT_APP_EXPRESS_SERVER}playerAttributes/${playersAway[0].playerId}`);\n\n            const homeAttributes = await homeKeyPlayerAttributes.json();\n            const awayAttributes = await awayKeyPlayerAttributes.json();\n\n            setHomePlayerData(trimmedPlayersHome);\n            setAwayPlayerData(trimmedPlayersAway);\n            // console.log(\"Home Player Data:\", trimmedPlayersHome);\n\n            if (\n              homeAttributes?.playerAttributeOverviews?.[0] &&\n              homeAttributes?.averageAttributeOverviews?.[0] &&\n              awayAttributes?.playerAttributeOverviews?.[0] &&\n              awayAttributes?.averageAttributeOverviews?.[0]\n            ) {\n              setHomePlayerAttributes(homeAttributes.playerAttributeOverviews[0]);\n              setHomePlayerAttributesComparison(homeAttributes.averageAttributeOverviews[0]);\n              setAwayPlayerAttributes(awayAttributes.playerAttributeOverviews[0]);\n              setAwayPlayerAttributesComparison(awayAttributes.averageAttributeOverviews[0]);\n            }\n            try {\n              const homeImageResponse = await fetch(`${process.env.REACT_APP_EXPRESS_SERVER}playerImage/${playersHome[0].playerId}`);\n              const awayImageResponse = await fetch(`${process.env.REACT_APP_EXPRESS_SERVER}playerImage/${playersAway[0].playerId}`);\n\n              if (homeImageResponse.ok) {\n                const blob = await homeImageResponse.blob();\n                setHomePlayerImage(URL.createObjectURL(blob));\n              } else {\n                console.error(\"Failed to fetch home image:\", homeImageResponse.status);\n              }\n\n              if (awayImageResponse.ok) {\n                const blob = await awayImageResponse.blob();\n                setAwayPlayerImage(URL.createObjectURL(blob));\n              } else {\n                console.error(\"Failed to fetch away image:\", awayImageResponse.status);\n              }\n            } catch (err) {\n              console.error(\"Error fetching images:\", err);\n            }\n\n            // allPlayerStats[`leagueStats${game.sofaScoreId}`] = teamStats;\n            // console.log(`Fetched stats for league ${leagueId}`);\n          } catch (error) {\n            console.error(\n              `Error fetching player stats for league ${game.sofaScoreId}:`,\n              error\n            );\n            // allLeagueStats[`leagueStats${leagueId}`] = { error: error.message }; // Store error if fetch fails\n          }\n        }\n      } catch (error) {\n        console.error(\"Error fetching or processing data:\", error);\n        // Handle errors (e.g., set error state, show error message)\n      } finally {\n        console.log(\"Data fetching completed.\");\n        setLoadingTeamStats(false);\n        setLoadingOdds(false);\n        setLoadingPlayerData(false);\n        setLoadingStreaks(false);\n        setLoadingKeyPlayerComparison(false);\n        setLoadingKeyPlayers(false);\n        setLoading(false);\n        console.log(\"Loading states reset.\");\n        // console.log(homePlayerData);\n      }\n    }\n\n    fetchMatchingGame();\n  }, [game.id]);\n\n  const hasFetchedImages = useRef(false);\n\n  useEffect(() => {\n    if (!homePlayerData.length || !awayPlayerData.length) return;\n\n    if (hasFetchedImages.current) return;\n\n    hasFetchedImages.current = true;\n\n    const fetchImagesForPlayers = async (players, setFn) => {\n      const updatedPlayers = [];\n\n      for (const player of players) {\n        try {\n          const res = await fetch(`${process.env.REACT_APP_EXPRESS_SERVER}playerImage/${player.playerId}`);\n          if (res.ok) {\n            const blob = await res.blob();\n            const imageUrl = URL.createObjectURL(blob);\n            updatedPlayers.push({ ...player, playerImage: imageUrl });\n          } else {\n            console.warn(`Image fetch failed for ${player.playerName}`);\n            updatedPlayers.push({ ...player, playerImage: null });\n          }\n        } catch (error) {\n          console.error(`Error fetching image for ${player.playerName}`, error);\n          updatedPlayers.push({ ...player, playerImage: null });\n        }\n\n        await new Promise((resolve) => setTimeout(resolve, 250)); // 250ms delay\n      }\n\n      setFn(updatedPlayers);\n    };\n\n    fetchImagesForPlayers(homePlayerData, setHomePlayerDataWithImages);\n    fetchImagesForPlayers(awayPlayerData, setAwayPlayerDataWithImages);\n  }, [homePlayerData, awayPlayerData]);\n\n\n  useEffect(() => {\n    if (homeTeamStats) {\n      console.log(\"Home team stats updated:\", homeTeamStats);\n    }\n  }, [homeTeamStats]);\n\n  useEffect(() => {\n    if (matchingGame) {\n      setId(matchingGame.id.toString());\n      setTeam1(matchingGame.homeTeam);\n      setTeam2(matchingGame.awayTeam);\n      setTimestamp(matchingGame.time);\n      setHomeGoals(matchingGame.homeGoals);\n      setAwayGoals(matchingGame.awayGoals);\n    } else {\n      setId(\"0\");\n      setTeam1(\"N/A\");\n      setTeam2(\"N/A\");\n      setTimestamp(1);\n      setHomeGoals(\"-\");\n      setAwayGoals(\"-\");\n    }\n  }, [matchingGame]); //This useEffect hook runs whenever matchingGame changes.\n\n  function singleResult(game) {\n    return (\n      <div>\n        <div className=\"ResultRowSmall\">\n          <span className=\"column\">{game.homeXG}</span>\n          <span className=\"column\">XG</span>\n          <span className=\"column\">{game.awayXG}</span>\n        </div>\n        <div className=\"ResultRowSmall\">\n          <span className=\"column\">{game.homeShots}</span>\n          <span className=\"column\">Shots</span>\n          <span className=\"column\">{game.awayShots}</span>\n        </div>\n        <div className=\"ResultRowSmall\">\n          <span className=\"column\">{game.homeSot}</span>\n          <span className=\"column\">SOT</span>\n          <span className=\"column\">{game.awaySot}</span>\n        </div>\n        <div className=\"ResultRowSmall\">\n          <span className=\"column\">{game.homeDangerousAttacks}</span>\n          <span className=\"column\">Dangerous Attacks</span>\n          <span className=\"column\">{game.awayDangerousAttacks}</span>\n        </div>\n        <div className=\"ResultRowSmall\">\n          <span className=\"column\">{game.homePossession}%</span>\n          <span className=\"column\">Possession</span>\n          <span className=\"column\">{game.awayPossession}%</span>\n        </div>\n        <div className=\"ResultRowSmall\">\n          <span className=\"column\">{game.homeRed}</span>\n          <span className=\"column\">Red cards</span>\n          <span className=\"column\">{game.awayRed}</span>\n        </div>\n        <div className=\"ResultRowSmall\">\n          <span className=\"column\">{game.homePPG}</span>\n          <span className=\"column\">PPG (pre-match)</span>\n          <span className=\"column\">{game.awayPPG}</span>\n        </div>\n      </div>\n    );\n  }\n\n  function StatsHomeComponent() {\n    if (!homeForm) return null;\n    return (\n      <div className=\"flex-childOne\">\n        <ul style={style}>\n          <Stats\n            games={\"all\"}\n            style={style}\n            homeOrAway=\"Home\"\n            badge={game.homeBadge}\n            gameCount={divider}\n            key={formDataHome[0].name}\n            last5={formDataHome[0].Last5}\n            // homeOrAwayResults={gameArrayHomeTeamHomeGames}\n            LeagueOrAll={formDataHome[0].LeagueOrAll}\n            className={\"KeyStatsHome\"}\n            name={formDataHome[0].name}\n            goals={homeForm.avgScored}\n            conceeded={homeForm.avgConceeded}\n            XG={homeForm.XGOverall?.toFixed(2)}\n            XGConceded={homeForm.XGAgainstAvgOverall?.toFixed(2)}\n            XGSwing={homeForm.XGChangeRecently}\n            possession={homeForm.AveragePossessionOverall?.toFixed(2)}\n            shots={homeForm.avgShots?.toFixed(2)}\n            sot={homeForm.AverageShotsOnTargetOverall?.toFixed(2)}\n            dangerousAttacks={\n              homeForm.AverageDangerousAttacksOverall !== 0\n                ? homeForm.AverageDangerousAttacksOverall?.toFixed(2)\n                : homeForm.AverageDangerousAttacks\n            }\n            leaguePosition={\n              homeForm.LeaguePosition !== undefined &&\n                homeForm.LeaguePosition !== \"undefined\"\n                ? formDataHome[0].leaguePosition\n                : 0\n            }\n            rawPosition={\n              game.homeRawPosition !== undefined &&\n                game.homeRawPosition !== \"undefined\"\n                ? game.homeRawPosition\n                : 0\n            }\n            homeOrAwayLeaguePosition={\n              homeForm.homePositionHomeOnly !== undefined &&\n                homeForm.homePositionHomeOnly !== \"undefined\"\n                ? homeForm.homePositionHomeOnly\n                : 0\n            }\n            winPercentage={homeForm.homePPGAv ? homeForm.homePPGAv : \"N/A\"}\n            lossPercentage={\n              game.homeTeamLossPercentage ? game.homeTeamLossPercentage : \"N/A\"\n            }\n            drawPercentage={\n              game.homeTeamDrawPercentage ? game.homeTeamDrawPercentage : \"N/A\"\n            }\n            ppg={homeForm.avPointsAll?.toFixed(2)}\n            formTrend={[\n              homeTenGameAverage?.toFixed(2),\n              homeSixGameAverage?.toFixed(2),\n              homeFiveGameAverage?.toFixed(2),\n            ]}\n            formRun={homeForm.resultsAll}\n            goalDifference={formDataHome[0].goalDifference}\n            goalDifferenceHomeOrAway={formDataHome[0].goalDifferenceHomeOrAway}\n            BttsPercentage={formDataHome[0].BttsPercentage}\n            BttsPercentageHomeOrAway={formDataHome[0].BttsPercentageHomeOrAway}\n            BTTSArray={formDataHome[0].BTTSArray}\n            Results={formDataHome[0].Results}\n            ResultsHorA={formDataHome[0].ResultsHorA}\n            CardsTotal={formDataHome[0].CardsTotal}\n            CornersAverage={homeForm.AverageCorners}\n            ScoredBothHalvesPercentage={\n              formDataHome[0].ScoredBothHalvesPercentage\n            }\n            FormTextString={formDataHome[0].FormTextStringHome}\n            FavouriteRecord={formDataHome[0].FavouriteRecord}\n            StyleOfPlay={formDataHome[0].styleOfPlayOverall}\n            StyleOfPlayHomeOrAway={formDataHome[0].styleOfPlayHome}\n          />\n        </ul>\n      </div>\n    );\n  }\n\n  // Component: StatsAway (Render Away Team Stats)\n  function StatsAwayComponent() {\n    if (!awayForm) return null;\n    return (\n      <div className=\"flex-childTwo\">\n        <ul style={style}>\n          <Stats\n            games={\"all\"}\n            style={style}\n            homeOrAway=\"Away\"\n            badge={game.awayBadge}\n            gameCount={divider}\n            key={formDataAway[0].name}\n            last5={formDataAway[0].Last5}\n            // homeOrAwayResults={gameArrayAwayTeamAwayGames}\n            LeagueOrAll={formDataAway[0].LeagueOrAll}\n            className={\"KeyStatsAway\"}\n            classNameTwo={\"FormStatsAway\"}\n            name={formDataAway[0].name}\n            goals={awayForm.avgScored}\n            conceeded={awayForm.avgConceeded}\n            XG={awayForm.XGOverall?.toFixed(2)}\n            XGConceded={awayForm.XGAgainstAvgOverall?.toFixed(2)}\n            XGSwing={awayForm.XGChangeRecently}\n            //todo add goal diff and btts percentages\n            possession={awayForm.AveragePossessionOverall?.toFixed(2)}\n            rawPosition={game.awayRawPosition ? game.awayRawPosition : 0}\n            sot={awayForm.AverageShotsOnTargetOverall?.toFixed(2)}\n            shots={awayForm.avgShots?.toFixed(2)}\n            dangerousAttacks={\n              awayForm.AverageDangerousAttacksOverall !== 0\n                ? awayForm.AverageDangerousAttacksOverall?.toFixed(2)\n                : awayForm.AverageDangerousAttacks\n            }\n            leaguePosition={\n              awayForm.LeaguePosition !== undefined &&\n                awayForm.LeaguePosition !== \"undefined\"\n                ? formDataAway[0].leaguePosition\n                : 0\n            }\n            homeOrAwayLeaguePosition={\n              awayForm.awayPositionAwayOnly !== undefined &&\n                awayForm.awayPositionAwayOnly !== \"undefinedundefined\"\n                ? awayForm.awayPositionAwayOnly\n                : 0\n            }\n            winPercentage={awayForm.awayPPGAv ? awayForm.awayPPGAv : \"N/A\"}\n            lossPercentage={\n              game.awayTeamLossPercentage ? game.awayTeamLossPercentage : \"N/A\"\n            }\n            drawPercentage={\n              game.awayTeamDrawPercentage ? game.awayTeamDrawPercentage : \"N/A\"\n            }\n            ppg={awayForm.avPointsAll?.toFixed(2)}\n            formTrend={[\n              awayTenGameAverage?.toFixed(2),\n              awaySixGameAverage?.toFixed(2),\n              awayFiveGameAverage?.toFixed(2),\n            ]}\n            formRun={awayForm.resultsAll}\n            goalDifference={formDataAway[0].goalDifference}\n            goalDifferenceHomeOrAway={formDataAway[0].goalDifferenceHomeOrAway}\n            BttsPercentage={formDataAway[0].BttsPercentage}\n            BttsPercentageHomeOrAway={formDataAway[0].BttsPercentageHomeOrAway}\n            BTTSArray={formDataAway[0].BTTSArray}\n            Results={formDataAway[0].Results}\n            ResultsHorA={formDataAway[0].ResultsHorA}\n            CardsTotal={formDataAway[0].CardsTotal}\n            CornersAverage={awayForm.AverageCorners}\n            ScoredBothHalvesPercentage={\n              formDataAway[0].ScoredBothHalvesPercentage\n            }\n            FormTextString={formDataAway[0].FormTextStringAway}\n            FavouriteRecord={formDataAway[0].FavouriteRecord}\n            StyleOfPlay={formDataAway[0].styleOfPlayOverall}\n            StyleOfPlayHomeOrAway={formDataAway[0].styleOfPlayAway}\n          />\n        </ul>\n      </div>\n    );\n  }\n\n  function StatsHomeLast5Component() {\n    if (!homeForm) return null;\n    return (\n      <div className=\"flex-childOne\">\n        <ul style={style}>\n          <Stats\n            games={\"last5\"}\n            style={style}\n            homeOrAway=\"Home\"\n            badge={game.homeBadge}\n            gameCount={divider}\n            key={formDataHome[0].name}\n            last5={formDataHome[0].Last5}\n            // homeOrAwayResults={gameArrayHomeTeamHomeGames}\n            LeagueOrAll={formDataHome[0].LeagueOrAll}\n            className={\"KeyStatsHome\"}\n            name={formDataHome[0].name}\n            goals={homeForm.last5Goals}\n            conceeded={homeForm.last5GoalsConceeded}\n            XG={homeForm.avXGLast5?.toFixed(2)}\n            XGConceded={homeForm.avXGAgainstLast5?.toFixed(2)}\n            possession={homeForm.avPosessionLast5?.toFixed(2)}\n            shots={homeForm.avShotsLast5?.toFixed(2)}\n            sot={homeForm.avSOTLast5?.toFixed(2)}\n            dangerousAttacks={\n              homeForm.avDALast5 !== 0\n                ? homeForm.avDALast5?.toFixed(2)\n                : homeForm.AverageDangerousAttacks\n            }\n            leaguePosition={\n              homeForm.LeaguePosition !== undefined &&\n                homeForm.LeaguePosition !== \"undefined\"\n                ? formDataHome[0].leaguePosition\n                : 0\n            }\n            rawPosition={\n              game.homeRawPosition !== undefined &&\n                game.homeRawPosition !== \"undefined\"\n                ? game.homeRawPosition\n                : 0\n            }\n            homeOrAwayLeaguePosition={\n              homeForm.homePositionHomeOnly !== undefined &&\n                homeForm.homePositionHomeOnly !== \"undefined\"\n                ? homeForm.homePositionHomeOnly\n                : 0\n            }\n            winPercentage={homeForm.homePPGAv ? homeForm.homePPGAv : \"N/A\"}\n            lossPercentage={\n              game.homeTeamLossPercentage ? game.homeTeamLossPercentage : \"N/A\"\n            }\n            drawPercentage={\n              game.homeTeamDrawPercentage ? game.homeTeamDrawPercentage : \"N/A\"\n            }\n            ppg={homeForm.avPoints5?.toFixed(2)}\n            formTrend={[\n              homeTenGameAverage?.toFixed(2),\n              homeSixGameAverage?.toFixed(2),\n              homeFiveGameAverage?.toFixed(2),\n            ]}\n            formRun={homeForm.resultsAll}\n            goalDifference={homeForm.last5GoalDiff}\n            BttsPercentage={homeForm.bttsLast5Percentage}\n            BTTSArray={formDataHome[0].BTTSArray}\n            Results={formDataHome[0].Results}\n            ResultsHorA={formDataHome[0].ResultsHorA}\n            CornersAverage={homeForm.last5Corners}\n            FormTextString={formDataHome[0].FormTextStringHome}\n          />\n        </ul>\n      </div>\n    );\n  }\n\n  // Component: StatsAway (Render Away Team Stats)\n  function StatsAwayLast5Component() {\n    if (!awayForm) return null;\n    return (\n      <div className=\"flex-childTwo\">\n        <ul style={style}>\n          <Stats\n            games={\"last5\"}\n            style={style}\n            homeOrAway=\"Away\"\n            badge={game.awayBadge}\n            gameCount={divider}\n            key={formDataAway[0].name}\n            last5={formDataAway[0].Last5}\n            // homeOrAwayResults={gameArrayAwayTeamAwayGames}\n            LeagueOrAll={formDataAway[0].LeagueOrAll}\n            className={\"KeyStatsAway\"}\n            classNameTwo={\"FormStatsAway\"}\n            name={formDataAway[0].name}\n            goals={awayForm.last5Goals}\n            conceeded={awayForm.last5GoalsConceeded}\n            XG={awayForm.avXGLast5?.toFixed(2)}\n            XGConceded={awayForm.avXGAgainstLast5?.toFixed(2)}\n            //todo add goal diff and btts percentages\n            possession={awayForm.avPosessionLast5?.toFixed(2)}\n            rawPosition={game.awayRawPosition ? game.awayRawPosition : 0}\n            sot={awayForm.avSOTLast5?.toFixed(2)}\n            shots={awayForm.avShotsLast5?.toFixed(2)}\n            dangerousAttacks={\n              awayForm.avDALast5 !== 0\n                ? awayForm.avDALast5?.toFixed(2)\n                : awayForm.AverageDangerousAttacks\n            }\n            leaguePosition={\n              awayForm.LeaguePosition !== undefined &&\n                awayForm.LeaguePosition !== \"undefined\"\n                ? formDataAway[0].leaguePosition\n                : 0\n            }\n            homeOrAwayLeaguePosition={\n              awayForm.awayPositionAwayOnly !== undefined &&\n                awayForm.awayPositionAwayOnly !== \"undefinedundefined\"\n                ? awayForm.awayPositionAwayOnly\n                : 0\n            }\n            winPercentage={awayForm.awayPPGAv ? awayForm.awayPPGAv : \"N/A\"}\n            lossPercentage={\n              game.awayTeamLossPercentage ? game.awayTeamLossPercentage : \"N/A\"\n            }\n            drawPercentage={\n              game.awayTeamDrawPercentage ? game.awayTeamDrawPercentage : \"N/A\"\n            }\n            ppg={awayForm.avPoints5?.toFixed(2)}\n            formTrend={[\n              awayTenGameAverage?.toFixed(2),\n              awaySixGameAverage?.toFixed(2),\n              awayFiveGameAverage?.toFixed(2),\n            ]}\n            formRun={awayForm.resultsAll}\n            goalDifference={awayForm.last5GoalDiff}\n            BttsPercentage={awayForm.bttsLast5Percentage}\n            BTTSArray={formDataAway[0].BTTSArray}\n            Results={formDataAway[0].Results}\n            ResultsHorA={formDataAway[0].ResultsHorA}\n            CornersAverage={awayForm.last5Corners}\n          />\n        </ul>\n      </div>\n    );\n  }\n\n  function StatsHomeOnlyComponent() {\n    if (!homeForm) return null;\n    return (\n      <div className=\"flex-childOne\">\n        <ul style={style}>\n          <Stats\n            games={\"hOrA\"}\n            style={style}\n            homeOrAway=\"Home\"\n            badge={game.homeBadge}\n            gameCount={divider}\n            key={formDataHome[0].name}\n            last5={formDataHome[0].Last5}\n            // homeOrAwayResults={gameArrayHomeTeamHomeGames}\n            LeagueOrAll={formDataHome[0].LeagueOrAll}\n            className={\"KeyStatsHome\"}\n            name={formDataHome[0].name}\n            goals={homeForm.avgScoredHome}\n            conceeded={homeForm.teamConceededAvgHomeOnly?.toFixed(2)}\n            XG={homeForm.avgXGScoredHome?.toFixed(2)}\n            XGConceded={homeForm.avgXGConceededHome?.toFixed(2)}\n            possession={homeForm.avgPossessionHome?.toFixed(2)}\n            sot={homeForm.avgShotsOnTargetHome?.toFixed(2)}\n            shots={homeForm.avgShotsHome?.toFixed(2)}\n            dangerousAttacks={\n              homeForm.avgDangerousAttacksHome !== 0\n                ? homeForm.avgDangerousAttacksHome?.toFixed(2)\n                : homeForm.AverageDangerousAttacks\n            }\n            leaguePosition={\n              homeForm.homePositionHomeOnly !== undefined &&\n                homeForm.homePositionHomeOnly !== \"undefined\"\n                ? formDataHome[0].leaguePosition\n                : 0\n            }\n            rawPosition={\n              game.homeRawPosition !== undefined &&\n                game.homeRawPosition !== \"undefined\"\n                ? game.homeRawPosition\n                : 0\n            }\n            homeOrAwayLeaguePosition={\n              homeForm.homePositionHomeOnly !== undefined &&\n                homeForm.homePositionHomeOnly !== \"undefined\"\n                ? homeForm.homePositionHomeOnly\n                : 0\n            }\n            winPercentage={homeForm.homePPGAv ? homeForm.homePPGAv : \"N/A\"}\n            formTrend={[\n              homeTenGameAverage?.toFixed(2),\n              homeSixGameAverage?.toFixed(2),\n              homeFiveGameAverage?.toFixed(2),\n            ]}\n            formRun={homeForm.resultsAll}\n            goalDifference={formDataHome[0].goalDifference}\n            goalDifferenceHomeOrAway={formDataHome[0].goalDifferenceHomeOrAway}\n            BttsPercentage={homeForm.bttsHomePercentage}\n            BTTSArray={formDataHome[0].BTTSArray}\n            // Results={formDataHome[0].Results}\n            ResultsHorA={formDataHome[0].ResultsHorA}\n            CardsTotal={formDataHome[0].CardsTotal}\n            CornersAverage={homeForm.cornersAvHome?.toFixed(2)}\n            ScoredBothHalvesPercentage={\n              formDataHome[0].ScoredBothHalvesPercentage\n            }\n            FormTextString={formDataHome[0].FormTextStringHome}\n            FavouriteRecord={formDataHome[0].FavouriteRecord}\n            StyleOfPlay={formDataHome[0].styleOfPlayOverall}\n            StyleOfPlayHomeOrAway={formDataHome[0].styleOfPlayHome}\n          />\n        </ul>\n      </div>\n    );\n  }\n\n  // Component: StatsAway (Render Away Team Stats)\n  function StatsAwayOnlyComponent() {\n    if (!awayForm) return null;\n    return (\n      <div className=\"flex-childTwo\">\n        <ul style={style}>\n          <Stats\n            games={\"hOrA\"}\n            style={style}\n            homeOrAway=\"Away\"\n            badge={game.awayBadge}\n            gameCount={divider}\n            key={formDataAway[0].name}\n            last5={formDataAway[0].Last5}\n            // homeOrAwayResults={gameArrayAwayTeamAwayGames}\n            LeagueOrAll={formDataAway[0].LeagueOrAll}\n            className={\"KeyStatsAway\"}\n            classNameTwo={\"FormStatsAway\"}\n            name={formDataAway[0].name}\n            goals={awayForm.avgScoredAway}\n            conceeded={awayForm.teamConceededAvgAwayOnly?.toFixed(2)}\n            XG={awayForm.avgXGScoredAway?.toFixed(2)}\n            XGConceded={awayForm.avgXGConceededAway?.toFixed(2)}\n            //todo add goal diff and btts percentages\n            possession={awayForm.avgPossessionAway?.toFixed(2)}\n            rawPosition={game.awayRawPosition ? game.awayRawPosition : 0}\n            sot={awayForm.avgShotsOnTargetAway?.toFixed(2)}\n            shots={awayForm.avgShotsAway?.toFixed(2)}\n            dangerousAttacks={\n              awayForm.avgDangerousAttacksAway !== 0\n                ? awayForm.avgDangerousAttacksAway?.toFixed(2)\n                : awayForm.AverageDangerousAttacks\n            }\n            leaguePosition={\n              awayForm.awayPosition !== undefined &&\n                awayForm.awayPosition !== \"undefined\"\n                ? formDataAway[0].leaguePosition\n                : 0\n            }\n            homeOrAwayLeaguePosition={\n              awayForm.awayPositionAwayOnly !== undefined &&\n                awayForm.awayPositionAwayOnly !== \"undefinedundefined\"\n                ? awayForm.awayPositionAwayOnly\n                : 0\n            }\n            winPercentage={awayForm.awayPPGAv ? awayForm.awayPPGAv : \"N/A\"}\n            formTrend={[\n              awayTenGameAverage?.toFixed(2),\n              awaySixGameAverage?.toFixed(2),\n              awayFiveGameAverage?.toFixed(2),\n            ]}\n            formRun={awayForm.resultsAll}\n            goalDifference={formDataAway[0].goalDifference}\n            goalDifferenceHomeOrAway={formDataAway[0].goalDifferenceHomeOrAway}\n            BttsPercentage={awayForm.bttsHomePercentage}\n            BTTSArray={formDataAway[0].BTTSArray}\n            // Results={formDataAway[0].Results}\n            ResultsHorA={formDataAway[0].ResultsHorA}\n            CardsTotal={formDataAway[0].CardsTotal}\n            CornersAverage={awayForm.cornersAvAway?.toFixed(2)}\n            ScoredBothHalvesPercentage={\n              formDataAway[0].ScoredBothHalvesPercentage\n            }\n            FormTextString={formDataAway[0].FormTextStringAway}\n            FavouriteRecord={formDataAway[0].FavouriteRecord}\n            StyleOfPlay={formDataAway[0].styleOfPlayOverall}\n            StyleOfPlayHomeOrAway={formDataAway[0].styleOfPlayAway}\n          />\n        </ul>\n      </div>\n    );\n  }\n\n  function handleSetUserTips(gameId, game, tipString, tip, date, uid, odds) {\n    setUserTips((prevTips) => {\n      // Check if the tip for this gameId already exists\n      const existingTipIndex = prevTips.findIndex(\n        (tip) => tip.gameId === gameId\n      );\n\n      if (existingTipIndex !== -1) {\n        // If the tip already exists, update it\n        const updatedTips = [...prevTips];\n        updatedTips[existingTipIndex] = {\n          gameId,\n          game,\n          tipString,\n          tip,\n          date,\n          uid,\n          odds,\n        };\n        return updatedTips; // Return the updated list\n      } else {\n        // If the tip doesn't exist, add a new one\n        return [...prevTips, { gameId, game, tipString, tip, date, uid, odds }];\n      }\n    });\n  }\n\n  gameArrayHome.sort((a, b) => b.unixTimestamp - a.unixTimestamp);\n  gameArrayAway.sort((a, b) => b.unixTimestamp - a.unixTimestamp);\n\n  const bttsArrayHome = Array.from(gameArrayHome, (x) => x.btts);\n  const bttsArrayAway = Array.from(gameArrayAway, (x) => x.btts);\n\n  const overviewHome = gameArrayHome.slice(0, 10).map((game) => (\n    <div>\n      <Collapsable\n        key={`${game.homeTeam}v${game.awayTeam}`}\n        classNameButton=\"ResultButton\"\n        buttonText={\n          <div className=\"ResultRowOverviewSmall\">\n            <div className=\"columnOverviewHomeSmall\">{game.homeTeam}</div>\n            <span className=\"columnOverviewScoreSmall\">\n              {game.homeGoals} : {game.awayGoals}\n            </span>\n            <div className=\"columnOverviewAwaySmall\">{game.awayTeam}</div>\n          </div>\n        }\n        element={singleResult(game)}\n      />\n    </div>\n  ));\n\n  const overviewAway = gameArrayAway.slice(0, 10).map((game) => (\n    <div>\n      <Collapsable\n        classNameButton=\"ResultButton\"\n        buttonText={\n          <div className=\"ResultRowOverviewSmall\">\n            <div className=\"columnOverviewHomeSmall\">{game.homeTeam}</div>\n            <span className=\"columnOverviewScoreSmall\">\n              {game.homeGoals} : {game.awayGoals}\n            </span>\n            <div className=\"columnOverviewAwaySmall\">{game.awayTeam}</div>\n          </div>\n        }\n        element={singleResult(game)}\n      />\n    </div>\n  ));\n\n  const formDataMatch = [];\n\n  formDataMatch.push({\n    btts: game.btts_potential,\n  });\n\n  const formDataHome = [];\n\n  function getPointsFromGames(formArr) {\n    const pairings = {\n      W: 3,\n      D: 1,\n      L: 0,\n    };\n    let newArr = [];\n    let arrayOfIndividualPoints = [];\n    let sum = 0;\n\n    for (let i = 0; i < formArr.length; i++) {\n      sum = sum + pairings[formArr[i]];\n      newArr.push(sum);\n      arrayOfIndividualPoints.push(pairings[formArr[i]]);\n    }\n    return [newArr, arrayOfIndividualPoints];\n  }\n\n  let time = game.time;\n\n  if (homeForm.last3Points === undefined) {\n    homeForm.last3Points = getPointsFromLastX(homeForm.lastThreeForm);\n\n    homeForm.last5Points = getPointsFromLastX(homeForm.LastFiveForm);\n\n    homeForm.last6Points = getPointsFromLastX(homeForm.LastSixForm);\n\n    homeForm.last10Points = getPointsFromLastX(homeForm.LastTenForm);\n\n    homeForm.homePPGame = getPointsFromLastX(homeForm.resultsHome);\n\n    awayForm.last3Points = getPointsFromLastX(awayForm.lastThreeForm);\n\n    awayForm.last5Points = getPointsFromLastX(awayForm.LastFiveForm);\n\n    awayForm.last6Points = getPointsFromLastX(awayForm.LastSixForm);\n\n    awayForm.last10Points = getPointsFromLastX(awayForm.LastTenForm);\n\n    awayForm.awayPPGame = getPointsFromLastX(awayForm.resultsAway);\n  }\n\n  const [showAIInsights, setShowAIInsights] = useState(false);\n\n  let formArrayHome;\n  let formArrayAway;\n  let chartType;\n\n  // Side Effect: Initialize component\n\n  //Uncomment 3 lines below to check if user is paid\n  useEffect(() => {\n    async function checkPaymentStatus() {\n      if (userDetail?.uid) {\n        try {\n          const paymentStatus = await checkUserPaidStatus(userDetail.uid);\n          // setPaid(paymentStatus);\n        } catch (error) {\n          console.error(\"Error checking payment status:\", error);\n          // setPaid(false); // Set to false in case of an error\n        }\n      } else {\n        // setPaid(false); // Set to false if there's no user ID\n      }\n    }\n\n    checkPaymentStatus(); // Call the function\n  }); // Dependency on userDetail\n\n  // Get all necessary data\n\n  useEffect(() => {\n    // useEffect to fetch and process game data based on props\n    async function fetchData() {\n      if (game.status === \"void\") return; // Exit if game is void\n\n      if (!allForm || !allLeagueResultsArrayOfObjects) {\n        // return;\n      }\n\n      let index = 2;\n      let gameStats = allForm.find((match) => match.id === game.id);\n      if (!gameStats) {\n        console.warn(\"No game stats found for game id:\", game.id);\n        // return;\n      }\n\n      try {\n        const pos = allLeagueResultsArrayOfObjects\n          .map((i) => i.id)\n          .indexOf(gameStats.leagueId);\n        let matches = allLeagueResultsArrayOfObjects[pos];\n        const resultHome = matches.fixtures.filter(\n          (game) =>\n            game.home_name === gameStats.home.teamName ||\n            game.away_name === gameStats.home.teamName\n        );\n\n        const resultHomeOnly = matches.fixtures.filter(\n          (game) => game.home_name === gameStats.home.teamName\n        );\n        const resultAway = matches.fixtures.filter(\n          (game) =>\n            game.away_name === gameStats.away.teamName ||\n            game.home_name === gameStats.away.teamName\n        );\n\n        const resultAwayOnly = matches.fixtures.filter(\n          (game) => game.away_name === gameStats.away.teamName\n        );\n\n        const homeForm = gameStats.home[index];\n        const awayForm = gameStats.away[index];\n        let id = game.id;\n\n        const attackingMetricsHome = {\n          \"Average Dangerous Attacks\":\n            gameStats?.home[index]?.AverageDangerousAttacksOverall || 0,\n          \"Average Shots\": gameStats?.home[index]?.AverageShots || 0,\n          \"Average Shots On Target\":\n            gameStats?.home[index]?.AverageShotsOnTargetOverall || 0,\n          \"Average Expected Goals\": gameStats?.home[index]?.XGOverall || 0,\n          \"Recent XG\": gameStats?.home[index]?.XGlast5\n            ? gameStats?.home[index]?.XGlast5\n            : gameStats?.home[index]?.XGOverall || 0,\n          \"Average Goals\":\n            gameStats?.home[index]?.averageScoredLeague !== undefined &&\n              gameStats?.home[index]?.averageScoredLeague !== null\n              ? gameStats?.home[index]?.averageScoredLeague\n              : gameStats?.home[index]?.ScoredOverall / 10,\n        };\n\n        const attackingMetricsHomeLast5 = {\n          \"Average Dangerous Attacks\": gameStats?.home[index]?.avDALast5\n            ? gameStats?.home[index]?.avDALast5\n            : gameStats?.home[index]?.AverageDangerousAttacksOverall,\n          \"Average Shots\": gameStats?.home[index]?.avShotsLast5\n            ? gameStats?.home[index]?.avShotsLast5\n            : gameStats?.home[index]?.AverageShots,\n          \"Average Shot Value\": gameStats?.home[index]?.avgShotValueLast5Chart,\n          \"Average Shots On Target\": gameStats?.home[index]?.avSOTLast5\n            ? gameStats?.home[index]?.avSOTLast5\n            : gameStats?.home[index]?.AverageShotsOnTarget,\n          \"Average Expected Goals\": gameStats?.home[index]?.XGlast5\n            ? gameStats?.home[index]?.XGlast5\n            : gameStats?.home[index]?.XGOverall,\n          \"Recent XG\": gameStats?.home[index]?.XGlast5 ? gameStats?.home[index]?.XGlast5 : gameStats?.home[index]?.XGOverall,\n          \"Average Goals\": gameStats?.home[index]?.avScoredLast5\n            ? gameStats?.home[index]?.avScoredLast5\n            : gameStats?.home[index]?.ScoredAverage,\n          Corners: gameStats?.home[index]?.avCornersLast5\n            ? gameStats?.home[index]?.avCornersLast5\n            : gameStats?.home[index]?.CornersAverage,\n        };\n\n        const attackingMetricsHomeOnly = {\n          \"Average Dangerous Attacks\": gameStats?.home[index]?.avgDangerousAttacksHome\n            ? gameStats?.home[index]?.avgDangerousAttacksHome\n            : gameStats?.home[index]?.AverageDangerousAttacksOverall,\n          \"Average Shots\": gameStats?.home[index]?.avgShotsHome\n            ? gameStats?.home[index]?.avgShotsHome\n            : gameStats?.home[index]?.AverageShots,\n          \"Average Shot Value\": gameStats?.home[index]?.avgShotValueHomeChart,\n          \"Average Shots On Target\": gameStats?.home[index]?.avgShotsOnTargetHome\n            ? gameStats?.home[index]?.avgShotsOnTargetHome\n            : gameStats?.home[index]?.AverageShotsOnTarget,\n          \"Average Expected Goals\": gameStats?.home[index]?.avgXGScoredHome\n            ? gameStats?.home[index]?.avgXGScoredHome\n            : gameStats?.home[index]?.XGOverall,\n          \"Recent XG\": gameStats?.home[index]?.last5XGAvgForHome\n            ? gameStats?.home[index]?.last5XGAvgForHome\n            : gameStats?.home[index]?.XGOverall,\n          \"Average Goals\": gameStats?.home[index]?.avgScoredHome\n            ? gameStats?.home[index]?.avgScoredHome\n            : gameStats?.home[index]?.ScoredAverage,\n          Corners: gameStats?.home[index]?.cornersAvHome\n            ? gameStats?.home[index]?.cornersAvHome\n            : gameStats?.home[index]?.CornersAverage,\n        };\n\n        const attackingMetricsAway = {\n          // averagePossession: awayForm.AveragePossessionOverall,\n          \"Average Dangerous Attacks\":\n            gameStats?.away[index]?.AverageDangerousAttacksOverall || 0,\n          \"Average Shots\": gameStats?.away[index]?.AverageShots || 0,\n          \"Average Shots On Target\":\n            gameStats?.away[index]?.AverageShotsOnTargetOverall || 0,\n          \"Average Expected Goals\": gameStats?.away[index]?.XGOverall || 0,\n          \"Recent XG\": gameStats?.away[index]?.XGlast5\n            ? gameStats?.away[index]?.XGlast5\n            : gameStats?.away[index]?.XGOverall || 0,\n          \"Average Goals\":\n            gameStats?.away[index]?.averageScoredLeague !== undefined &&\n              gameStats?.away[index]?.averageScoredLeague !== null\n              ? gameStats?.away[index]?.averageScoredLeague\n              : gameStats?.away[index]?.ScoredOverall / 10,\n        };\n\n        const attackingMetricsAwayOnly = {\n          \"Average Dangerous Attacks\": gameStats?.away[index]?.avgDangerousAttacksAway\n            ? gameStats?.away[index]?.avgDangerousAttacksAway\n            : gameStats?.away[index]?.AverageDangerousAttacksOverall,\n          \"Average Shots\": gameStats?.away[index]?.avgShotsAway\n            ? gameStats?.away[index]?.avgShotsAway\n            : gameStats?.away[index]?.AverageShots,\n          \"Average Shot Value\": gameStats?.away[index]?.avgShotValueAwayChart,\n          \"Average Shots On Target\": gameStats?.away[index]?.avgShotsOnTargetAway\n            ? gameStats?.away[index]?.avgShotsOnTargetAway\n            : gameStats?.away[index]?.AverageShotsOnTarget,\n          \"Average Expected Goals\": gameStats?.away[index]?.avgXGScoredAway\n            ? gameStats?.away[index]?.avgXGScoredAway\n            : gameStats?.away[index]?.XGOverall,\n          \"Recent XG\": gameStats?.away[index]?.last5XGAvgForAway\n            ? gameStats?.away[index]?.last5XGAvgForAway\n            : gameStats?.away[index]?.XGOverall,\n          \"Average Goals\": gameStats?.away[index]?.avgScoredAway\n            ? gameStats?.away[index]?.avgScoredAway\n            : gameStats?.away[index]?.ScoredAverage,\n          Corners: gameStats?.away[index]?.cornersAvAway\n            ? gameStats?.away[index]?.cornersAvAway\n            : gameStats?.away[index]?.CornersAverage,\n        };\n\n        const attackingMetricsAwayLast5 = {\n          \"Average Dangerous Attacks\": gameStats?.away[index]?.avDALast5\n            ? gameStats?.away[index]?.avDALast5\n            : gameStats?.away[index]?.AverageDangerousAttacksOverall,\n          \"Average Shots\": gameStats?.away[index]?.avShotsLast5\n            ? gameStats?.away[index]?.avShotsLast5\n            : gameStats?.away[index]?.AverageShots,\n          \"Average Shot Value\": gameStats?.away[index]?.avgShotValueLast5Chart,\n          \"Average Shots On Target\": gameStats?.away[index]?.avSOTLast5\n            ? gameStats?.away[index]?.avSOTLast5\n            : gameStats?.away[index]?.AverageShotsOnTarget,\n          \"Average Expected Goals\": gameStats?.away[index]?.XGlast5\n            ? gameStats?.away[index]?.XGlast5\n            : gameStats?.away[index]?.XGOverall,\n          \"Recent XG\": gameStats?.away[index]?.XGlast5 ? gameStats?.away[index]?.XGlast5 : gameStats?.away[index]?.XGOverall,\n          \"Average Goals\": gameStats?.away[index]?.avScoredLast5\n            ? gameStats?.away[index]?.avScoredLast5\n            : gameStats?.away[index]?.ScoredAverage,\n          Corners: gameStats?.away[index]?.avCornersLast5\n            ? gameStats?.away[index]?.avCornersLast5\n            : gameStats?.away[index]?.CornersAverage,\n        };\n\n        const defensiveMetricsHome = {\n          \"Clean Sheet Percentage\":\n            100 - gameStats?.home[index]?.CleanSheetPercentage || 0,\n          \"Average XG Against\":\n            gameStats?.home[index]?.XGAgainstAvgOverall || 0,\n          \"Recent XG Against\": gameStats?.home[index]?.XGAgainstlast5\n            ? gameStats?.home[index]?.XGAgainstlast5\n            : gameStats?.home[index]?.XGAgainstAvgOverall || 0,\n          \"Average Goals Against\":\n            gameStats?.home[index]?.averageConceededLeague !== undefined &&\n              gameStats?.home[index]?.averageConceededLeague !== null\n              ? gameStats?.home[index]?.averageConceededLeague\n              : gameStats?.home[index]?.ConcededOverall / 10,\n        };\n\n\n        const defensiveMetricsHomeLast5 = {\n          \"Average XG Against\": gameStats?.home[index]?.XGAgainstlast5\n            ? gameStats?.home[index]?.XGAgainstlast5\n            : gameStats?.home[index]?.XGAgainstAvgOverall,\n          \"Recent XG Against\": gameStats?.home[index]?.avXGAgainstLast5\n            ? gameStats?.home[index]?.avXGAgainstLast5\n            : gameStats?.home[index]?.XGAgainstAvgOverall,\n          \"Average Goals Against\": gameStats?.home[index]?.avConceededLast5\n            ? gameStats?.home[index]?.avConceededLast5\n            : gameStats?.home[index]?.ConcededAverage,\n          \"Average SOT Against\": gameStats?.home[index]?.avSOTAgainstLast5\n            ? gameStats?.home[index]?.avSOTAgainstLast5\n            : 5,\n        };\n\n\n        const defensiveMetricsHomeOnly = {\n          \"Average XG Against\": gameStats?.home[index]?.avgXGConceededHome\n            ? gameStats?.home[index]?.avgXGConceededHome\n            : gameStats?.home[index]?.XGAgainstAvgOverall,\n          \"Recent XG Against\": gameStats?.home[index]?.last5XGAvgAgainstHome\n            ? gameStats?.home[index]?.last5XGAvgAgainstHome\n            : gameStats?.home[index]?.XGAgainstAvgOverall,\n          \"Average Goals Against\": gameStats?.home[index]?.teamConceededAvgHomeOnly\n            ? gameStats?.home[index]?.teamConceededAvgHomeOnly\n            : gameStats?.home[index]?.ConcededAverage,\n          \"Average SOT Against\": gameStats?.home[index]?.avgShotsOnTargetAgainstHome\n            ? gameStats?.home[index]?.avgShotsOnTargetAgainstHome\n            : 5,\n        };\n\n\n        const defensiveMetricsAway = {\n          \"Clean Sheet Percentage\":\n            100 - gameStats?.away[index]?.CleanSheetPercentage || 0,\n          \"Average XG Against\":\n            gameStats?.away[index]?.XGAgainstAvgOverall || 0,\n          \"Recent XG Against\": gameStats?.away[index]?.XGAgainstlast5\n            ? gameStats?.away[index]?.XGAgainstlast5\n            : gameStats?.away[index]?.XGAgainstAvgOverall || 0,\n          \"Average Goals Against\":\n            gameStats?.away[index]?.averageConceededLeague !== undefined &&\n              gameStats?.away[index]?.averageConceededLeague !== null\n              ? gameStats?.away[index]?.averageConceededLeague\n              : gameStats?.away[index]?.ConcededOverall / 10,\n        };\n\n        const defensiveMetricsAwayLast5 = {\n          \"Average XG Against\": gameStats?.away[index]?.XGAgainstlast5\n            ? gameStats?.away[index]?.XGAgainstlast5\n            : gameStats?.away[index]?.XGAgainstAvgOverall,\n          \"Recent XG Against\": gameStats?.away[index]?.avXGAgainstLast5\n            ? gameStats?.away[index]?.avXGAgainstLast5\n            : gameStats?.away[index]?.XGAgainstAvgOverall,\n          \"Average Goals Against\": gameStats?.away[index]?.avConceededLast5\n            ? gameStats?.away[index]?.avConceededLast5\n            : gameStats?.away[index]?.ConcededAverage,\n          \"Average SOT Against\": gameStats?.away[index]?.avSOTAgainstLast5\n            ? gameStats?.away[index]?.avSOTAgainstLast5\n            : 5,\n        };\n\n        const defensiveMetricsAwayOnly = {\n          \"Average XG Against\": gameStats?.away[index]?.avgXGConceededAway\n            ? gameStats?.away[index]?.avgXGConceededAway\n            : gameStats?.away[index]?.XGAgainstAvgOverall,\n          \"Recent XG Against\": gameStats?.away[index]?.last5XGAvgAgainstAway\n            ? gameStats?.away[index]?.last5XGAvgAgainstAway\n            : gameStats?.away[index]?.XGAgainstAvgOverall,\n          \"Average Goals Against\": gameStats?.away[index]?.teamConceededAvgAwayOnly\n            ? gameStats?.away[index]?.teamConceededAvgAwayOnly\n            : gameStats?.away[index]?.ConcededAverage,\n          \"Average SOT Against\": gameStats?.away[index]?.avgShotsOnTargetAgainstAway\n            ? gameStats?.away[index]?.avgShotsOnTargetAgainstAway\n            : 5,\n        };\n\n\n        const attackH = await calculateAttackingStrength(attackingMetricsHome);\n        const attackHLast5 = await calculateAttackingStrength(\n          attackingMetricsHomeLast5\n        );\n        const attackHOnly = await calculateAttackingStrength(\n          attackingMetricsHomeOnly\n        );\n\n\n        const defenceH = await calculateDefensiveStrength(defensiveMetricsHome);\n        const defenceHLast5 = await calculateDefensiveStrength(\n          defensiveMetricsHomeLast5\n        );\n        const defenceHOnly = await calculateDefensiveStrength(\n          defensiveMetricsHomeOnly\n        );\n\n        const attackA = await calculateAttackingStrength(attackingMetricsAway);\n        const attackALast5 = await calculateAttackingStrength(\n          attackingMetricsAwayLast5\n        );\n        const attackAOnly = await calculateAttackingStrength(\n          attackingMetricsAwayOnly\n        );\n\n        const defenceA = await calculateDefensiveStrength(defensiveMetricsAway);\n        const defenceALast5 = await calculateDefensiveStrength(\n          defensiveMetricsAwayLast5\n        );\n        const defenceAOnly = await calculateDefensiveStrength(\n          defensiveMetricsAwayOnly\n        );\n\n        const possH = await calculateMetricStrength(\n          \"averagePossession\",\n          homeForm.AveragePossessionOverall\n        );\n        const possHLast5 = await calculateMetricStrength(\n          \"averagePossession\",\n          homeForm.avPosessionLast5\n        );\n        const possHOnly = await calculateMetricStrength(\n          \"averagePossession\",\n          homeForm.avgPossessionHome\n        );\n\n        const possA = await calculateMetricStrength(\n          \"averagePossession\",\n          awayForm.AveragePossessionOverall\n        );\n        const possALast5 = await calculateMetricStrength(\n          \"averagePossession\",\n          awayForm.avPosessionLast5\n        );\n        const possAOnly = await calculateMetricStrength(\n          \"averagePossession\",\n          awayForm.avgPossessionAway\n        );\n\n\n\n\n        // \"Directness\",\n        // \"Attacking precision\",\n        const XGForH = await calculateMetricStrength(\n          \"xgFor\",\n          homeForm.XGOverall\n        );\n\n\n        const XGForA = await calculateMetricStrength(\n          \"xgFor\",\n          awayForm.XGOverall\n        );\n\n\n        const XGAgH = await calculateMetricStrength(\n          \"xgAgainst\",\n          3 - homeForm.XGAgainstAvgOverall\n        );\n\n\n        const XGAgA = await calculateMetricStrength(\n          \"xgAgainst\",\n          3 - awayForm.XGAgainstAvgOverall\n        );\n\n\n        const directnessHome = await calculateMetricStrength(\n          \"directnessOverall\",\n          homeForm.directnessOverall\n        );\n\n\n        const directnessAway = await calculateMetricStrength(\n          \"directnessOverall\",\n          awayForm.directnessOverall\n        );\n\n\n        const accuracyHome = await calculateMetricStrength(\n          \"accuracyOverall\",\n          homeForm.avgShotValueChart\n        );\n\n        const accuracyHomeLast5 = await calculateMetricStrength(\n          \"accuracyOverall\",\n          homeForm.avgShotValueLast5Chart\n        );\n\n        const accuracyHomeOnly = await calculateMetricStrength(\n          \"accuracyOverall\",\n          homeForm.avgShotValueHomeChart\n        );\n\n        const accuracyAway = await calculateMetricStrength(\n          \"accuracyOverall\",\n          awayForm.avgShotValueChart\n        );\n\n        const accuracyAwayLast5 = await calculateMetricStrength(\n          \"accuracyOverall\",\n          awayForm.avgShotValueLast5Chart\n        );\n\n        const accuracyAwayOnly = await calculateMetricStrength(\n          \"accuracyOverall\",\n          awayForm.avgShotValueAwayChart\n        );\n\n        const home5GA = await getPointAverage(homeForm.last5Points, 5);\n\n        const home6GA = await getPointAverage(homeForm.last6Points, 6);\n\n        const home10GA = await getPointAverage(homeForm.last10Points, 10);\n\n        const away5GA = await getPointAverage(awayForm.last5Points, 5);\n\n        const away6GA = await getPointAverage(awayForm.last6Points, 6);\n\n        const away10GA = await getPointAverage(awayForm.last10Points, 10);\n\n        homeForm.homePPGAv = await getPointAverage(\n          homeForm.homePPGame,\n          homeForm.resultsHome.length\n        );\n        homeForm.tenGameAv = homeTenGameAverage;\n        homeForm.fiveGameAv = homeFiveGameAverage;\n\n        awayForm.awayPPGAv = await getPointAverage(\n          awayForm.awayPPGame,\n          awayForm.resultsAway.length\n        );\n        awayForm.tenGameAv = awayTenGameAverage;\n        awayForm.fiveGameAv = awayFiveGameAverage;\n\n        // Set calculated strengths and averages directly, as hooks cannot be used here\n        setHomeAttackStrength(attackH);\n        setHomeAttackStrengthLast5(attackHLast5);\n        setHomeOnlyAttackStrength(attackHOnly);\n        setHomeDefenceStrength(defenceH);\n        setHomeDefenceStrengthLast5(defenceHLast5);\n        setHomeOnlyDefenceStrength(defenceHOnly);\n        setAwayAttackStrength(attackA);\n        setAwayAttackStrengthLast5(attackALast5);\n        setAwayOnlyAttackStrength(attackAOnly);\n        setAwayDefenceStrength(defenceA);\n        setAwayDefenceStrengthLast5(defenceALast5);\n        setAwayOnlyDefenceStrength(defenceAOnly);\n        setHomePossessionStrength(possH);\n        setHomePossessionStrengthLast5(possHLast5);\n        setHomeOnlyPossessionStrength(possHOnly);\n        setAwayPossessionStrength(possA);\n        setAwayPossessionStrengthLast5(possALast5);\n        setAwayOnlyPossessionStrength(possAOnly);\n        setHomeXGForStrength(XGForH);\n        setAwayXGForStrength(XGForA);\n        setHomeXGAgainstStrength(XGAgH);\n        setAwayXGAgainstStrength(XGAgA);\n        setHomeDirectnessStrength(directnessHome);\n        setAwayDirectnessStrength(directnessAway);\n        setHomeAccuracyOverallStrength(accuracyHome);\n        setHomeAccuracyOverallStrengthLast5(accuracyHomeLast5);\n        setHomeOnlyAccuracyOverallStrength(accuracyHomeOnly);\n        setAwayAccuracyOverallStrength(accuracyAway);\n        setAwayAccuracyOverallStrengthLast5(accuracyAwayLast5);\n        setAwayOnlyAccuracyOverallStrength(accuracyAwayOnly);\n        setHomeFiveGameAverage(home5GA);\n        setHomeSixGameAverage(home6GA);\n        setHomeTenGameAverage(home10GA);\n        setAwayFiveGameAverage(away5GA);\n        setAwaySixGameAverage(away6GA);\n        setAwayTenGameAverage(away10GA);\n\n        if (homeForm.fiveGameAv && game.matches_completed_minimum > 4) {\n          const formTextStringHome = await GenerateFormSummary(\n            homeForm,\n            homeForm.tenGameAv,\n            homeForm.fiveGameAv\n          );\n          const formTextStringAway = await GenerateFormSummary(\n            awayForm,\n            awayForm.tenGameAv,\n            awayForm.fiveGameAv\n          );\n          setFormSummary([formTextStringHome, formTextStringAway]);\n        }\n\n        // const homeTeam = game.homeTeam;\n        // const awayTeam = game.awayTeam;\n        // console.log(homeForm);\n\n        // setTime(game.time);\n        // setTeam1(homeTeam);\n        // setTeam2(awayTeam);\n        // setHomeGoals(game.homeGoals);\n        // setAwayGoals(game.awayGoals);\n\n        if (id === \"1\") {\n        }\n      } catch (e) {\n        console.log(e);\n      } finally {\n        setIsLoading(false);\n        setHasCompleteData(\n          game.completeData === true &&\n          gameStats?.home[index].completeData === true\n        );\n\n        setFirstRenderDone(true);\n      }\n    }\n    if (!firstRenderDone) {\n      fetchData();\n    }\n  }, [\n    awayFiveGameAverage,\n    firstRenderDone,\n    awayTenGameAverage,\n    game.completeData,\n    game.id,\n    game.status,\n    homeFiveGameAverage,\n    homeTenGameAverage,\n  ]); // Dependencies for the useCallback\n\n  formDataHome.push({\n    name: game.homeTeam,\n    Last5: gameStats.home[2].LastFiveForm,\n    LeagueOrAll: gameStats.home[2].LeagueOrAll,\n    AverageGoals: homeForm.ScoredOverall / 10,\n    AverageConceeded: homeForm.ConcededOverall / 10,\n    AverageXG: homeForm.XGOverall,\n    AverageXGConceded: homeForm.XGAgainstAvgOverall,\n    AveragePossession: homeForm.AveragePossessionOverall,\n    AverageShotsOnTarget: homeForm.AverageShotsOnTargetOverall,\n    AverageDangerousAttacks: homeForm.AverageDangerousAttacksOverall,\n    homeOrAway: \"Home\",\n    leaguePosition: homeForm.LeaguePosition,\n    Last5PPG: homeForm.PPG,\n    SeasonPPG: homeForm.SeasonPPG,\n    formRun: homeForm.formRun,\n    goalDifference: homeForm.goalDifference,\n    goalDifferenceHomeOrAway: homeForm.goalDifferenceHomeOrAway,\n    // BttsPercentage: homeForm.BttsPercentage || \"-\",\n    // BttsPercentageHomeOrAway: homeForm.BttsPercentageHomeOrAway || \"-\",\n    CardsTotal: homeForm.CardsTotal || \"-\",\n    CornersAverage: homeForm.AverageCorners || \"-\",\n    FormTextStringHome: formSummaries[0],\n    // FavouriteRecord:\n    //   favouriteRecordHome + `. ${homeForm.reliabilityString}`,\n    BTTSArray: bttsArrayHome,\n    Results: homeForm.resultsAll,\n    ResultsHorA: homeForm.resultsHome,\n    XGSwing: homeForm.XGChangeRecently,\n    styleOfPlayOverall: homeForm.styleOfPlayOverall,\n    styleOfPlayHome: homeForm.styleOfPlayHome,\n    // BTTSAll: homeForm.last10btts,\n    // BTTSHorA: homeForm.last10bttsHome,\n  });\n\n  const formDataAway = [];\n\n  formDataAway.push({\n    name: game.awayTeam,\n    Last5: gameStats.away[2].LastFiveForm,\n    LeagueOrAll: gameStats.away[2].LeagueOrAll,\n    AverageGoals: awayForm.ScoredOverall / 10,\n    AverageConceeded: awayForm.ConcededOverall / 10,\n    AverageXG: awayForm.XGOverall,\n    AverageXGConceded: awayForm.XGAgainstAvgOverall,\n    AveragePossession: awayForm.AveragePossessionOverall,\n    AverageShotsOnTarget: awayForm.AverageShotsOnTargetOverall,\n    AverageDangerousAttacks: awayForm.AverageDangerousAttacksOverall,\n    homeOrAway: \"Away\",\n    leaguePosition: awayForm.LeaguePosition,\n    Last5PPG: awayForm.PPG,\n    SeasonPPG: awayForm.SeasonPPG,\n    formRun: awayForm.formRun,\n    goalDifference: awayForm.goalDifference,\n    goalDifferenceHomeOrAway: awayForm.goalDifferenceHomeOrAway,\n    // BttsPercentage: awayForm.BttsPercentage || \"-\",\n    // BttsPercentageHomeOrAway: awayForm.BttsPercentageHomeOrAway || \"-\",\n    CardsTotal: awayForm.CardsTotal || \"-\",\n    CornersAverage: awayForm.AverageCorners || \"-\",\n    FormTextStringAway: formSummaries[1],\n    // FavouriteRecord:\n    //   favouriteRecordAway + `. ${awayForm.reliabilityString}`,\n    BTTSArray: bttsArrayAway,\n    Results: awayForm.resultsAll,\n    ResultsHorA: awayForm.resultsAway,\n    XGSwing: awayForm.XGChangeRecently,\n    styleOfPlayOverall: awayForm.styleOfPlayOverall,\n    styleOfPlayAway: awayForm.styleOfPlayAway,\n    // BTTSAll: awayForm.last10btts,\n    // BTTSHorA: awayForm.last10bttsAway,\n  });\n\n  // AI Insights Generation\n\n  async function fetchBasicTable(id) {\n    const foundItem = basicTableArray.find((item) => item.id === id);\n    return foundItem;\n  }\n\n  const generateAIInsights = useCallback(\n    async (gameId, streak, oddsData, homeTeamStats, awayTeamStats, homePlayerData, awayPlayerData, homeMissingPlayersList, awayMissingPlayersList, homeLineupList, awayLineupList, ranksHome, ranksAway) => {\n      setIsLoading(true);\n      const table = await fetchBasicTable(game.leagueID);\n      const leagueTable = table?.table || null;\n      let progress;\n      let type;\n      let statistics;\n      let leagueStatistics = await fetch(\n        `${process.env.REACT_APP_EXPRESS_SERVER}leagueStats/${leagueTable[0].LeagueID}`\n      );\n      let totalGames;\n      let roundType;\n\n      await leagueStatistics.json().then((stats) => {\n        statistics = stats.data;\n        roundType = stats.data.format;\n        progress = statistics.progress;\n        totalGames = (statistics.totalMatches * 2) / statistics.clubNum;\n      });\n\n      // console.log(homeTeamStats);\n      // console.log(oddsData);\n\n      try {\n        const AIPayload = {\n          competition: game.leagueDesc,\n          totalLeagueGames: totalGames?.toFixed(0),\n          gameweek: game.matches_completed_minimum + 1,\n          gameType: roundType,\n          // referee: await getRefStats(game.refereeID, game.competition_id),\n          leagueTable: leagueTable,\n          seasonProgressPercent: progress,\n          venue: game.stadium,\n          odds: oddsData,\n          teamStreakDataFromAllCompetitions: streak,\n          homeTeam: {\n            homeTeamName: game.homeTeam,\n            homeLeaguePosition: homeForm?.LeaguePosition,\n            homeTeamResultsLast5: homeForm?.allTeamResults?.slice(0, 5),\n            performanceStats: homeTeamStats,\n            keyPlayers: homePlayerData?.slice(0, 5),\n            competitionRankings: ranksHome,\n            missingPlayers: homeMissingPlayersList,\n            predictedLineup: homeLineupList,\n            homeAttackingStats: homeForm?.attackingMetrics,\n            homeDefensiveStats: homeForm?.defensiveMetrics,\n          },\n          awayTeam: {\n            awayTeamName: game.awayTeam,\n            awayLeaguePosition: awayForm?.LeaguePosition,\n            awayTeamResultsLast5: awayForm?.allTeamResults?.slice(0, 5),\n            performanceStats: awayTeamStats,\n            keyPlayers: awayPlayerData?.slice(0, 5),\n            competitionRankings: ranksAway,\n            missingPlayers: awayMissingPlayersList,\n            predictedLineup: awayLineupList,\n            awayAttackingStats: awayForm?.attackingMetrics,\n            awayDefensiveStats: awayForm?.defensiveMetrics,\n          },\n        };\n        console.log(AIPayload);\n        console.log(gameId)\n\n        const response = await fetch(\n          `${process.env.REACT_APP_EXPRESS_SERVER}gemini/${gameId}`,\n          {\n            method: \"POST\",\n            headers: {\n              Accept: \"application/json\",\n              \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(AIPayload),\n          }\n        );\n\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n\n        const jsonData = await response.json();\n        console.log(\"AI Match Preview Data:\", jsonData);\n        setAiMatchPreview(jsonData);\n\n        // Store predicted score in backend array\n        await fetch(`${process.env.REACT_APP_EXPRESS_SERVER}predictedScores`, {\n          method: \"POST\",\n          headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            gameId,\n            homeGoalsPrediction: parseInt(jsonData.Guide?.HomeGoalsPrediction, 10),\n            awayGoalsPrediction: parseInt(jsonData.Guide?.AwayGoalsPrediction, 10),\n          }),\n        });\n\n      } catch (error) {\n        console.error(\"Fetch error:\", error);\n        // Handle the error\n      } finally {\n        setIsLoading(false);\n      }\n    },\n    [game, homeForm, awayForm]\n  );\n\n  // Function to format the AI Match Preview text with newlines\n  const formatAIPreview = (text) => {\n    if (!text) return \"\";\n    return text.split(\". \").join(\".\\n\");\n  };\n\n\n  //AI Match Preview Data Structure\n  //   {\n  //   \"homeTeam\": {\n  //     \"teamName\": \"String (Team Name)\",\n  //     \"style\": \"String (Team's playing style, a concise description based on the performanceStats and competitionRankings.)\",\n  //     \"strengths\": Array of strings (Team's strengths, qualitative analysis based on performanceStats and competitionRankings. Each strength should be a single string.)\",\n  //     \"weaknesses\": Array of strings (Team's weaknesses, qualitative analysis based on performanceStats and competitionRankings. Each weakness should be a single string.)\",\n  //   },\n  //   \"awayTeam\": {\n  //     \"teamName\": \"String (Team Name)\",\n  //     \"style\": \"String (Team's playing style, a concise description based on the performanceStats and competitionRankings.)\",\n  //     \"strengths\": Array of strings (Team's strengths, qualitative analysis based on performanceStats and competitionRankings. Each strength should be a single string.)\",\n  //     \"weaknesses\": Array of strings (Team's weaknesses, qualitative analysis based on performanceStats and competitionRankings. Each weakness should be a single string.)\",\n  //   },\n  //   \"matchPreview\": [\n  //     \"A detailed, qualitative match preview, drawing on the wide range of stats available. Each paragraph should be its own string within this array.\",\n  //     \"The preview must convey the importance of the match, if any, and relevant context.\",\n  //     \"Previous head-to-head results can be mentioned here. Anything noteworthy from the predicted lineups should be included.\",\n  //     \"If a key player is missing or doubtful, this should be included.\"\n  //   ],\n  //   \"prediction\": \"String (Match prediction, including likely occurrences/tips and a correct score prediction. Supply relevant odds where available.)\"\n  //   \"homeGoalsPrediction\": \"Int (Predicted number of goals for the home team. Must match the prediction in the 'prediction' field.)\",\n  //   \"awayGoalsPrediction\": \"Int (Predicted number of goals for the away team. Must match the prediction in the 'prediction' field.)\",\n  // }\n  //Render the AI data\n  const AIOutput = useMemo(() => {\n    if (!aiMatchPreview) return null;\n\n    return (\n      <>\n        <h2>Preview</h2>\n        {aiMatchPreview.matchPreview?.map((text, index) => (\n          <div key={index} className=\"AIMatchPreview\">\n            {formatAIPreview(text)}\n          </div>\n        ))}\n\n        {/* // Properties: \"CorrectScore\", \"Over2.5Goals\" (yes or no), \"MostCards\" (team name), \"MostCorners\" (team name), \"MostShotsOnTarget\" (team name), \"AnytimeGoalscorer\" (player name), \"ToBeCarded\" (player name) */}\n\n        <div className=\"AIMatchPreviewCard\">\n          <h2>{`${aiMatchPreview?.homeTeam?.teamName} vs ${aiMatchPreview?.awayTeam?.teamName} AI Tips`}</h2>\n          <ul>\n            <li>\n              <strong>Correct Score:</strong> {aiMatchPreview.Guide.HomeGoalsPrediction} - {aiMatchPreview.Guide.AwayGoalsPrediction}\n            </li>\n            <li>\n              <strong>Anytime Goalscorer:</strong> {aiMatchPreview.Guide.AnytimeGoalscorer}\n            </li>\n            <li>\n              <strong>Most Cards:</strong> {aiMatchPreview.Guide.MostCards}\n            </li>\n            <li>\n              <strong>Most Corners:</strong> {aiMatchPreview.Guide.MostCorners}\n            </li>\n            <li>\n              <strong>Most Shots On Target:</strong> {aiMatchPreview.Guide.MostShotsOnTarget}\n            </li>\n            <li>\n              <strong>To Be Carded:</strong> {aiMatchPreview.Guide.ToBeCarded}\n            </li>\n          </ul>\n          <i>(may not reflect the view of Soccer Stats Hub)</i>\n        </div>\n\n\n        <h2>Ratings and Styles</h2>\n        <div className=\"AIContainer\">\n          <div className=\"HomeAIInsights\">\n            <h6 className=\"TeamName\">{aiMatchPreview?.homeTeam?.teamName}</h6>\n            <div className=\"StarRating\"><span className=\"StarRatingHeader\">Attack <StarRating rating={aiMatchPreview?.homeTeam?.ratings?.Attack} /></span></div>\n            <div className=\"StarRating\"><span className=\"StarRatingHeader\">Defence <StarRating rating={aiMatchPreview?.homeTeam?.ratings?.Defence} /></span></div>\n            <div className=\"StarRating\"><span className=\"StarRatingHeader\">Directness <StarRating rating={aiMatchPreview?.homeTeam?.ratings?.Directness} /></span></div>\n            <div className=\"StarRating\"><span className=\"StarRatingHeader\">Possession <StarRating rating={aiMatchPreview?.homeTeam?.ratings?.Possession} /></span></div>\n            <div className=\"StarRating\"><span className=\"StarRatingHeader\">Pressing <StarRating rating={aiMatchPreview?.homeTeam?.ratings?.Pressing} /></span></div>\n            <div className=\"StarRating\"><span className=\"StarRatingHeader\">Accuracy <StarRating rating={aiMatchPreview?.homeTeam?.ratings?.Accuracy} /></span></div>\n            <div className=\"StarRating\"><span className=\"StarRatingHeader\">Set Pieces <StarRating rating={aiMatchPreview?.homeTeam?.ratings?.SetPieces} /></span></div>\n            <div className=\"StarRating\"><span className=\"StarRatingHeader\">Discipline <StarRating rating={aiMatchPreview?.homeTeam?.ratings?.Discipline} /></span></div>\n            <div className=\"StarRating\"><span className=\"StarRatingHeader\">Last Game <StarRating rating={aiMatchPreview?.homeTeam?.ratings?.LastMatchPerformance} /></span></div>\n            <div className=\"StarRating\"><span className=\"StarRatingHeader\">Overall <StarRating rating={aiMatchPreview?.homeTeam?.ratings?.Overall} /></span></div>\n            <div className=\"TeamStyle\">{aiMatchPreview?.homeTeam?.style}</div>\n            <ul className=\"Strengths\">\n              {aiMatchPreview?.homeTeam?.strengths?.map((strength, index) => (\n                <li key={index}>+ {strength}</li>\n              ))}\n            </ul>\n            <ul className=\"Weaknesses\">\n              {aiMatchPreview?.homeTeam?.weaknesses?.map((weakness, index) => (\n                <li key={index}>− {weakness}</li>\n              ))}\n            </ul>\n          </div>\n          <div className=\"AwayAIInsights\">\n            <h6 className=\"TeamName\">{aiMatchPreview?.awayTeam?.teamName}</h6>\n            <div className=\"StarRating\"><span className=\"StarRatingHeader\">Attack <StarRating rating={aiMatchPreview?.awayTeam?.ratings?.Attack} /></span></div>\n            <div className=\"StarRating\"><span className=\"StarRatingHeader\">Defence <StarRating rating={aiMatchPreview?.awayTeam?.ratings?.Defence} /></span></div>\n            <div className=\"StarRating\"><span className=\"StarRatingHeader\">Directness <StarRating rating={aiMatchPreview?.awayTeam?.ratings?.Directness} /></span></div>\n            <div className=\"StarRating\"><span className=\"StarRatingHeader\">Possession <StarRating rating={aiMatchPreview?.awayTeam?.ratings?.Possession} /></span></div>\n            <div className=\"StarRating\"><span className=\"StarRatingHeader\">Pressing <StarRating rating={aiMatchPreview?.awayTeam?.ratings?.Pressing} /></span></div>\n            <div className=\"StarRating\"><span className=\"StarRatingHeader\">Accuracy <StarRating rating={aiMatchPreview?.awayTeam?.ratings?.Accuracy} /></span></div>\n            <div className=\"StarRating\"><span className=\"StarRatingHeader\">Set Pieces <StarRating rating={aiMatchPreview?.awayTeam?.ratings?.SetPieces} /></span></div>\n            <div className=\"StarRating\"><span className=\"StarRatingHeader\">Discipline <StarRating rating={aiMatchPreview?.awayTeam?.ratings?.Discipline} /></span></div>\n            <div className=\"StarRating\"><span className=\"StarRatingHeader\">Last Game <StarRating rating={aiMatchPreview?.awayTeam?.ratings?.LastMatchPerformance} /></span></div>\n            <div className=\"StarRating\"><span className=\"StarRatingHeader\">Overall <StarRating rating={aiMatchPreview?.awayTeam?.ratings?.Overall} /></span></div>\n            <div className=\"TeamStyle\">{aiMatchPreview?.awayTeam?.style}</div>\n            <ul className=\"Strengths\">\n              {aiMatchPreview?.awayTeam?.strengths?.map((strength, index) => (\n                <li key={index}>+ {strength}</li>\n              ))}\n            </ul>\n            <ul className=\"Weaknesses\">\n              {aiMatchPreview?.awayTeam?.weaknesses?.map((weakness, index) => (\n                <li key={index}>− {weakness}</li>\n              ))}\n            </ul>\n          </div>\n        </div>\n      </>\n    );\n  }, [aiMatchPreview]);\n\n  let [formPointsHome, testArrayHome] = getPointsFromGames(\n    gameStats.home[2].WDLRecord\n  );\n  let [formPointsAway, testArrayAway] = getPointsFromGames(\n    gameStats.away[2].WDLRecord\n  );\n\n  if (formPointsHome.length > 1) {\n    formArrayHome = formPointsHome;\n    formArrayAway = formPointsAway;\n    chartType = \"Points over time\";\n  } else {\n    formArrayHome = [\n      homeTenGameAverage,\n      homeSixGameAverage,\n      homeFiveGameAverage,\n    ];\n    formArrayAway = [\n      awayTenGameAverage,\n      awaySixGameAverage,\n      awayFiveGameAverage,\n    ];\n    chartType = \"Rolling average points over last 10\";\n  }\n\n  const UserTips = ({\n    game,\n    handleSetUserTips,\n    userDetail,\n    selectedTip,\n    handleTipSelect,\n  }) => {\n    const handleClick = (tipType, label) => {\n      if (selectedTip === tipType) {\n        return; // If the button clicked is already selected, do nothing\n      }\n\n      let odds;\n\n      if (tipType === \"homeTeam\") {\n        odds = game.homeOdds;\n      } else if (tipType === \"awayTeam\") {\n        odds = game.awayOdds;\n      } else if (tipType === \"draw\") {\n        odds = game.drawOdds;\n      }\n\n      handleTipSelect(tipType); // Update parent state\n      handleSetUserTips(\n        game.id,\n        game.game,\n        label,\n        tipType,\n        game.date,\n        userDetail.uid,\n        odds\n      );\n    };\n\n    return (\n      <div className=\"UserTips\">\n        <button\n          id=\"TipButtonHome\"\n          className=\"TipButton\"\n          style={{\n            backgroundColor: selectedTip === \"homeTeam\" ? \"#fe8c00\" : \"white\",\n            color: selectedTip === \"homeTeam\" ? \"white\" : \"#030052\",\n            border: `1px solid ${selectedTip === \"homeTeam\" ? \"#fe8c00\" : \"#030052\"\n              }`,\n          }}\n          onClick={() => handleClick(\"homeTeam\", `${game.homeTeam} to win`)}\n        >\n          Home\n        </button>\n\n        <button\n          id=\"TipButtonDraw\"\n          className=\"TipButton\"\n          style={{\n            backgroundColor: selectedTip === \"draw\" ? \"#fe8c00\" : \"white\",\n            color: selectedTip === \"draw\" ? \"white\" : \"#030052\",\n            border: `1px solid ${selectedTip === \"draw\" ? \"#fe8c00\" : \"#030052\"\n              }`,\n          }}\n          onClick={() => handleClick(\"draw\", \"Draw\")}\n        >\n          Draw\n        </button>\n\n        <button\n          id=\"TipButtonAway\"\n          className=\"TipButton\"\n          style={{\n            backgroundColor: selectedTip === \"awayTeam\" ? \"#fe8c00\" : \"white\",\n            color: selectedTip === \"awayTeam\" ? \"white\" : \"#030052\",\n            border: `1px solid ${selectedTip === \"awayTeam\" ? \"#fe8c00\" : \"#030052\"\n              }`,\n          }}\n          onClick={() => handleClick(\"awayTeam\", `${game.awayTeam} to win`)}\n        >\n          Away\n        </button>\n      </div>\n    );\n  };\n\n  const [selectedTip, setSelectedTip] = useState(null);\n\n\n  // Home player\n  const attributesHome = homePlayerAtttributes;\n  const attributesHomeComparison = homePlayerAtttributesComparison;\n\n  const positionHome = attributesHome.position;\n\n  const filteredEntriesHome = Object.entries(attributesHome).filter(\n    ([key, value]) =>\n      typeof value === \"number\" && key !== \"id\" && key !== \"yearShift\"\n  );\n  const labelsHome = filteredEntriesHome.map(([key]) => key);\n  const dataHome = filteredEntriesHome.map(([, value]) => value);\n\n  const filteredEntries2Home = Object.entries(attributesHomeComparison).filter(\n    ([key, value]) =>\n      typeof value === \"number\" && key !== \"id\" && key !== \"yearShift\"\n  );\n  const data2Home = filteredEntries2Home.map(([, value]) => value);\n\n  // Away player\n  const attributesAway = awayPlayerAtttributes;\n  const attributesAwayComparison = awayPlayerAtttributesComparison;\n\n  const positionAway = attributesAway.position;\n\n  const filteredEntriesAway = Object.entries(attributesAway).filter(\n    ([key, value]) =>\n      typeof value === \"number\" && key !== \"id\" && key !== \"yearShift\"\n  );\n  const labelsAway = filteredEntriesAway.map(([key]) => key);\n  const dataAway = filteredEntriesAway.map(([, value]) => value);\n\n  const filteredEntries2Away = Object.entries(attributesAwayComparison).filter(\n    ([key, value]) =>\n      typeof value === \"number\" && key !== \"id\" && key !== \"yearShift\"\n  );\n  const data2Away = filteredEntries2Away.map(([, value]) => value);\n\n\n  const handleTipSelect = (tipType) => {\n    setSelectedTip(tipType);\n  };\n  return (\n    <>\n      {isBeforeTimestamp(game.date) && (\n        <>\n          <h2>Your Prediction</h2>\n          <UserTips\n            game={game}\n            handleSetUserTips={handleSetUserTips}\n            userDetail={userDetail}\n            selectedTip={selectedTip} // Pass selectedTip down\n            handleTipSelect={handleTipSelect} // Pass handler down\n          />\n        </>\n      )}\n      <div style={style}>\n        <div style={style}>\n          <Collapsable\n            buttonText={`Lineups & match action \\u{2630}`}\n            classNameButton=\"Lineups\"\n            element={\n              <>\n                <MemoizedSofaLineupsWidget\n                  id={id}\n                  team1={team1}\n                  team2={team2}\n                  time={timestamp}\n                  homeGoals={homeGoals}\n                  awayGoals={awayGoals}\n                />\n              </>\n            }\n          />\n        </div>\n\n        {loading ||\n          (homeMissingPlayersList.length === 0 &&\n            awayMissingPlayersList.length === 0) ? (\n          <div></div>\n        ) : (\n          <Collapsable\n            buttonText={`Missing players \\u{2630}`}\n            classNameButton=\"MissingPlayersButton\"\n            element={\n              <div className=\"MissingPlayers\">\n                <MissingPlayersList\n                  team={game.homeTeam}\n                  className=\"HomeMissingPlayers\"\n                  players={homeMissingPlayersList}\n                />\n                <MissingPlayersList\n                  team={game.awayTeam}\n                  className=\"AwayMissingPlayers\"\n                  players={awayMissingPlayersList}\n                />\n              </div>\n            }\n          />\n        )}\n\n        {loadingStreaks || streakData.length === 0 ? (\n          <div></div>\n        ) : (\n          <Collapsable\n            buttonText={`Team Streaks (All comps) \\u{2630}`}\n            classNameButton=\"TeamStreaksButton\"\n            element={\n              <div className=\"TeamStreaks\">\n                <StreakStats\n                  stats={streakData}\n                  home={game.homeTeam}\n                  away={game.awayTeam}\n                  homeLogo={game.homeBadge}\n                  awayLogo={game.awayBadge}\n                />\n              </div>\n            }\n          />\n        )}\n\n        {loadingPlayerData || homePlayerDataWithImages.length === 0 ? (\n          <div></div>\n        ) : (\n          <>\n            <Collapsable\n              buttonText={`Key Players (League Rankings by Metric) \\u{2630}`}\n              classNameButton=\"PlayerStatsButton\"\n              element={\n                <div className=\"PlayerStats\">\n                  <PlayerStatsList\n                    playerStats={homePlayerDataWithImages}\n                    className=\"HomePlayerStats\"\n                    spanClass=\"SpanHome\"\n                  />\n                  <PlayerStatsList\n                    playerStats={awayPlayerDataWithImages}\n                    className=\"AwayPlayerStats\"\n                    spanClass=\"SpanAway\"\n                  />\n                </div>\n              }\n            />\n            {dataHome.length !== 0 ||\n              dataAway.length !== 0 ? (\n              <Collapsable\n                buttonText={`Key Player Comparison \\u{2630}`}\n                classNameButton=\"PlayerAttributesButton\"\n                element={\n                  <div className=\"PlayerAttributes\">\n                    <div className=\"HomePlayerAttributes\">\n                      {homePlayerImage && (\n                        <img\n                          src={homePlayerImage}\n                          alt={homePlayerData[0]?.playerName || \"Home Player\"}\n                          className=\"player-image\"\n                        />\n                      )}\n                      <RadarChart\n                        style={{ height: \"auto\" }}\n                        title={homePlayerData[0]?.playerName}\n                        labels={labelsHome}\n                        data={dataHome}\n                        data2={data2Home}\n                        team1={`${homePlayerData[0]?.playerName} (${positionHome})`}\n                        team2={\"Competition Average\"}\n                        max={100}\n                      />\n                    </div>\n\n                    <div className=\"AwayPlayerAttributes\">\n                      {awayPlayerImage && (\n                        <img\n                          src={awayPlayerImage}\n                          alt={awayPlayerData[0]?.playerName || \"Away Player\"}\n                          className=\"player-image\"\n                        />\n                      )}\n                      <RadarChart\n                        style={{ height: \"auto\" }}\n                        title={awayPlayerData[0]?.playerName}\n                        labels={labelsAway}\n                        data={dataAway}\n                        data2={data2Away}\n                        team1={`${awayPlayerData[0]?.playerName} (${positionAway})`}\n                        team2={\"Competition Average\"}\n                        max={100}\n                      />\n                    </div>\n                  </div>\n                }\n              />\n            ) : (\n              <div></div>\n            )\n            }\n\n          </>\n        )}\n\n        <div id=\"AIInsightsContainer\" className=\"AIInsightsContainer\">\n          {loadingKeyPlayerComparison ? (\n            <p>Loading data for Match Preview...</p>\n          ) : !paid && game.leagueID !== 15050 ? (\n            <><Button\n              className=\"AIInsightsLocked\"\n              text={\"Match Preview 🔒\"}\n              onClickEvent={() => {\n                alert(\"Match Preview is locked. Please subscribe to access.\");\n              }}\n            />\n              <div className=\"SubscribeText\">\n                Subscribe to unlock full match previews, team star ratings, styles and more\n              </div>\n              <button\n                onClick={() => handleCheckout(\"price_1QrQ4ZBrqiWlVPadCkhLhtiZ\")}\n                className=\"SubscribeButton\"\n              >\n                Subscribe for £1/week\n              </button><button\n                onClick={() => handleCheckout(\"price_1QqgbEBrqiWlVPadocMuIEeI\")}\n                className=\"SubscribeButton\"\n              >\n                Subscribe for £3/month\n              </button><button\n                onClick={() => handleCheckout(\"price_1QrQ75BrqiWlVPadEML30BoJ\")}\n                className=\"SubscribeButton\"\n              >\n                Subscribe for £30/year\n              </button>\n            </>\n          ) : (\n            <Button\n              className=\"AIInsights\"\n              onClickEvent={() => {\n                generateAIInsights(\n                  game.id,\n                  streakData,\n                  oddsData,\n                  homeTeamStats,\n                  awayTeamStats,\n                  homePlayerData,\n                  awayPlayerData,\n                  homeMissingPlayersList,\n                  awayMissingPlayersList,\n                  homeLineupList,\n                  awayLineupList,\n                  ranksHome,\n                  ranksAway\n                );\n                setShowAIInsights(true);\n              }}\n              text={\"Match Preview\"}\n              disabled={!paid && game.leagueID !== 15050}\n            />\n          )}\n        </div>\n\n        {showAIInsights && ( // Conditionally Render the AI Insights.\n          <div className=\"AIOutputContainer\">\n            {isLoading ? <p>Loading AI data....</p> : AIOutput}\n          </div>\n        )}\n      </div>\n      <Slider\n        length=\"3\"\n        element1={\n          <>\n            <h2>All games</h2>\n            <div className=\"flex-container\">\n              <StatsHomeComponent />\n              <StatsAwayComponent />\n            </div>\n            {stats && ranksHome && ranksAway && stats?.topTeams && (\n              <TeamRankingsFlexView\n                title={`Rankings in ${game.leagueDesc} out of ${stats.topTeams.accurateCrosses.length} teams`}\n                ranksHome={ranksHome}\n                ranksAway={ranksAway}\n                teamALabel={game.homeTeam}\n                teamBLabel={game.awayTeam}\n              />\n            )}\n            <div className=\"Chart\" id={`Chart${game.id}`} style={style}>\n              <RadarChart\n                style={{ height: \"auto\" }}\n                title=\"Soccer Stats Hub Strength Ratings - All Games\"\n                max={1}\n                labels={[\n                  \"Attack\",\n                  \"Defence\",\n                  \"Possession\",\n                  \"XGF\",\n                  \"XGA\",\n                  \"Directness\",\n                  \"Precision\",\n                ]}\n                data={[\n                  homeAttackStrength,\n                  homeDefenceStrength,\n                  homePossessionStrength,\n                  homeXGForStrength,\n                  homeXGAgainstStrength,\n                  homeDirectnessStrength,\n                  homeAccuracyOverallStrength,\n                ]}\n                data2={[\n                  awayAttackStrength,\n                  awayDefenceStrength,\n                  awayPossessionStrength,\n                  awayXGForStrength,\n                  awayXGAgainstStrength,\n                  awayDirectnessStrength,\n                  awayAccuracyOverallStrength,\n                ]}\n                team1={game.homeTeam}\n                team2={game.awayTeam}\n              ></RadarChart>\n              <BarChart\n                text=\"All Games - Home Team | Away Team\"\n                data1={[\n                  homeForm.avgScored * 2,\n                  awayForm.avgConceeded * 2,\n                  homeForm.avPointsAll * 3,\n                  homeForm.XGOverall * 2,\n                  awayForm.XGAgainstAvgOverall * 2,\n                  homeForm.AverageShotsOnTargetOverall,\n                  homeForm.AverageDangerousAttacksOverall !== 0\n                    ? homeForm.AverageDangerousAttacksOverall / 7.5\n                    : homeForm.AverageDangerousAttacks / 7.5,\n                  homeForm.AveragePossessionOverall / 7.5,\n                  homeForm.goalDifference / 10,\n                  homeForm.AverageCorners,\n                ]}\n                data2={[\n                  awayForm.avgScored * 2,\n                  homeForm.avgConceeded * 2,\n                  awayForm.avPointsAll * 3,\n                  awayForm.XGOverall * 2,\n                  homeForm.XGAgainstAvgOverall * 2,\n                  awayForm.AverageShotsOnTargetOverall,\n                  awayForm.AverageDangerousAttacksOverall !== 0\n                    ? awayForm.AverageDangerousAttacksOverall / 7.5\n                    : awayForm.AverageDangerousAttacks / 7.5,\n                  awayForm.AveragePossessionOverall / 7.5,\n                  awayForm.goalDifference / 10,\n                  awayForm.AverageCorners,\n                ]}\n              ></BarChart>\n              <MultiTypeChart\n                dataArray={homeForm.twoDGoalsArray || []}\n                text={homeForm.teamName + \" XG Diff (All)\"}\n              />\n              <MultiTypeChart\n                dataArray={awayForm.twoDGoalsArray || []}\n                text={awayForm.teamName + \" XG Diff (All)\"}\n              />\n              <Chart\n                height={3}\n                depth={0}\n                data1={formArrayHome}\n                data2={formArrayAway}\n                team1={game.homeTeam}\n                team2={game.awayTeam}\n                type={chartType}\n                tension={0}\n              ></Chart>\n              <MultilineChart\n                height={\n                  Math.max(\n                    rollingGoalDiffTotalHome[\n                    rollingGoalDiffTotalHome.length - 1\n                    ],\n                    rollingGoalDiffTotalAway[\n                    rollingGoalDiffTotalAway.length - 1\n                    ]\n                  ) > 2\n                    ? Math.max(\n                      rollingGoalDiffTotalHome[\n                      rollingGoalDiffTotalHome.length - 1\n                      ],\n                      rollingGoalDiffTotalAway[\n                      rollingGoalDiffTotalAway.length - 1\n                      ]\n                    )\n                    : 2\n                }\n                depth={\n                  Math.min(\n                    rollingGoalDiffTotalHome[\n                    rollingGoalDiffTotalHome.length - 1\n                    ],\n                    rollingGoalDiffTotalAway[\n                    rollingGoalDiffTotalAway.length - 1\n                    ]\n                  ) < -2\n                    ? Math.min(\n                      rollingGoalDiffTotalHome[\n                      rollingGoalDiffTotalHome.length - 1\n                      ],\n                      rollingGoalDiffTotalAway[\n                      rollingGoalDiffTotalAway.length - 1\n                      ]\n                    )\n                    : -2\n                }\n                data1={rollingGoalDiffTotalHome || []}\n                data2={rollingGoalDiffTotalAway || []}\n                data3={rollingXGDiffTotalHome || []}\n                data4={rollingXGDiffTotalAway || []}\n                team1={game.homeTeam}\n                team2={game.awayTeam}\n                type={\"Goal/XG difference over time\"}\n                tension={0.5}\n              ></MultilineChart>\n            </div>\n          </>\n        }\n        element2={\n          homeForm?.twoDGoalsArray ? (\n            <>\n              <h2>Last 5 games only</h2>\n              <div className=\"flex-container\">\n                <StatsHomeLast5Component />\n                <StatsAwayLast5Component />\n              </div>\n              <div className=\"Chart\" id={`Chart${game.id}`} style={style}>\n                <RadarChart\n                  title=\"Soccer Stats Hub Strength Ratings - Last 5 Games Only\"\n                  max={1}\n                  labels={[\n                    \"Attack rating\",\n                    \"Defence rating\",\n                    \"Ball retention\",\n                    \"XG For\",\n                    \"XG Against\",\n                    \"Directness\",\n                    \"Attacking precision\",\n                  ]}\n                  data={[\n                    homeAttackStrengthLast5,\n                    homeDefenceStrengthLast5,\n                    homePossessionStrengthLast5,\n                    homeXGForStrengthLast5,\n                    homeXGAgainstStrengthLast5,\n                    homeDirectnessStrengthLast5,\n                    homeAccuracyOverallStrengthLast5,\n                  ]}\n                  data2={[\n                    awayAttackStrengthLast5,\n                    awayDefenceStrengthLast5,\n                    awayPossessionStrengthLast5,\n                    awayXGForStrengthLast5,\n                    awayXGAgainstStrengthLast5,\n                    awayDirectnessStrengthLast5,\n                    awayAccuracyOverallStrengthLast5,\n                  ]}\n                  team1={game.homeTeam}\n                  team2={game.awayTeam}\n                />\n\n                <BarChart\n                  text=\"Last 5 only - Home Team | Away Team\"\n                  data1={[\n                    homeForm.last5Goals * 2,\n                    awayForm.last5GoalsConceeded * 2,\n                    homeForm.avPoints5 * 3,\n                    homeForm.avXGLast5 * 2,\n                    awayForm.avXGAgainstLast5 * 2,\n                    homeForm.avSOTLast5,\n                    homeForm.avDALast5 !== 0\n                      ? homeForm.avDALast5 / 7.5\n                      : homeForm.AverageDangerousAttacks / 7.5,\n                    homeForm.avPosessionLast5 / 7.5,\n                    homeForm.last5GoalDiff / 5,\n                    homeForm.last5Corners,\n                  ]}\n                  data2={[\n                    awayForm.last5Goals * 2,\n                    homeForm.last5GoalsConceeded * 2,\n                    awayForm.avPoints5 * 3,\n                    awayForm.avXGLast5 * 2,\n                    homeForm.avXGAgainstLast5 * 2,\n                    awayForm.avSOTLast5,\n                    awayForm.avDALast5 !== 0\n                      ? awayForm.avDALast5 / 7.5\n                      : awayForm.AverageDangerousAttacks / 7.5,\n                    awayForm.avPosessionLast5 / 7.5,\n                    awayForm.last5GoalDiff / 5,\n                    awayForm.last5Corners,\n                  ]}\n                />\n\n                <MultiTypeChart\n                  dataArray={homeForm.twoDGoalsArray.slice(\n                    Math.max(homeForm.twoDGoalsArray.length - 5, 0)\n                  )}\n                  text={homeForm.teamName + ' XG Diff Last 5'}\n                />\n                <MultiTypeChart\n                  dataArray={awayForm.twoDGoalsArray.slice(\n                    Math.max(awayForm.twoDGoalsArray.length - 5, 0)\n                  )}\n                  text={awayForm.teamName + ' XG Diff Last 5'}\n                />\n\n                <MultilineChart\n                  height={\n                    Math.max(\n                      rollingGoalDiffTotalHomeLast5.at(-1),\n                      rollingGoalDiffTotalAwayLast5.at(-1)\n                    ) > 2\n                      ? Math.max(\n                        rollingGoalDiffTotalHomeLast5.at(-1),\n                        rollingGoalDiffTotalAwayLast5.at(-1)\n                      )\n                      : 2\n                  }\n                  depth={\n                    Math.min(\n                      rollingGoalDiffTotalHomeLast5.at(-1),\n                      rollingGoalDiffTotalAwayLast5.at(-1)\n                    ) < -2\n                      ? Math.min(\n                        rollingGoalDiffTotalHomeLast5.at(-1),\n                        rollingGoalDiffTotalAwayLast5.at(-1)\n                      )\n                      : -2\n                  }\n                  data1={rollingGoalDiffTotalHomeLast5}\n                  data2={rollingGoalDiffTotalAwayLast5}\n                  data3={rollingXGDiffTotalHomeLast5}\n                  data4={rollingXGDiffTotalAwayLast5}\n                  team1={game.homeTeam}\n                  team2={game.awayTeam}\n                  type=\"Goal/XG difference over last 5\"\n                  tension={0.5}\n                />\n              </div>\n            </>\n          ) : null\n        }\n        element3={\n          homeForm?.twoDGoalsArray ? (\n            <>\n              <h2>Home/Away games only</h2>\n              <div className=\"flex-container\">\n                <StatsHomeOnlyComponent />\n                <StatsAwayOnlyComponent />\n              </div>\n              <div className=\"Chart\" id={`Chart${game.id}`} style={style}>\n                <RadarChart\n                  title=\"Soccer Stats Hub Strength Ratings - Home/Away Games Only\"\n                  max={1}\n                  labels={[\n                    \"Attack rating\",\n                    \"Defence rating\",\n                    \"Ball retention\",\n                    \"XG For\",\n                    \"XG Against\",\n                    \"Directness\",\n                    \"Attacking precision\",\n                  ]}\n                  data={[\n                    homeOnlyAttackStrength,\n                    homeOnlyDefenceStrength,\n                    homeOnlyPossessionStrength,\n                    homeOnlyXGForStrength,\n                    homeOnlyXGAgainstStrength,\n                    homeOnlyDirectnessStrength,\n                    homeOnlyAccuracyOverallStrength,\n                  ]}\n                  data2={[\n                    awayOnlyAttackStrength,\n                    awayOnlyDefenceStrength,\n                    awayOnlyPossessionStrength,\n                    awayOnlyXGForStrength,\n                    awayOnlyXGAgainstStrength,\n                    awayOnlyDirectnessStrength,\n                    awayOnlyAccuracyOverallStrength,\n                  ]}\n                  team1={game.homeTeam}\n                  team2={game.awayTeam}\n                ></RadarChart>\n                <BarChart\n                  text=\"Home/Away only - Home Team | Away Team\"\n                  data1={[\n                    homeForm.avgScoredHome * 2,\n                    awayForm.teamConceededAvgAwayOnly * 2,\n                    homeForm.homePPGAv * 3,\n                    homeForm.avgXGScoredHome * 2,\n                    awayForm.avgXGConceededHome * 2,\n                    homeForm.avgShotsOnTargetHome,\n                    homeForm.avgDangerousAttacksHome !== 0\n                      ? homeForm.avgDangerousAttacksHome / 7.5\n                      : homeForm.AverageDangerousAttacks / 7.5,\n                    homeForm.avgPossessionHome / 7.5,\n                    homeForm.goalDifferenceHomeOrAway / 10,\n                    homeForm.cornersAvHome,\n                  ]}\n                  data2={[\n                    awayForm.avgScoredAway * 2,\n                    homeForm.teamConceededAvgAwayOnly * 2,\n                    awayForm.awayPPGAv * 3,\n                    awayForm.avgXGScoredAway * 2,\n                    homeForm.avgXGConceededAway * 2,\n                    awayForm.avgShotsOnTargetAway,\n                    awayForm.avgDangerousAttacksAway !== 0\n                      ? awayForm.avgDangerousAttacksAway / 7.5\n                      : awayForm.AverageDangerousAttacks / 7.5,\n                    awayForm.avgPossessionAway / 7.5,\n                    awayForm.goalDifferenceHomeOrAway / 10,\n                    awayForm.cornersAvAway,\n                  ]}\n                ></BarChart>\n                <MultiTypeChart\n                  dataArray={homeForm.twoDGoalsArrayHome}\n                  text={homeForm.teamName + \" XG Diff (Home)\"}\n                />\n                <MultiTypeChart\n                  dataArray={awayForm.twoDGoalsArrayAway}\n                  text={awayForm.teamName + \" XG Diff (Away)\"}\n                />\n                <MultilineChart\n                  height={\n                    Math.max(\n                      rollingGoalDiffTotalHomeOnly[\n                      rollingGoalDiffTotalHomeOnly.length - 1\n                      ],\n                      rollingGoalDiffTotalAwayOnly[\n                      rollingGoalDiffTotalAwayOnly.length - 1\n                      ]\n                    ) > 2\n                      ? Math.max(\n                        rollingGoalDiffTotalHomeOnly[\n                        rollingGoalDiffTotalHomeOnly.length - 1\n                        ],\n                        rollingGoalDiffTotalAwayOnly[\n                        rollingGoalDiffTotalAwayOnly.length - 1\n                        ]\n                      )\n                      : 2\n                  }\n                  depth={\n                    Math.min(\n                      rollingGoalDiffTotalHomeOnly[\n                      rollingGoalDiffTotalHomeOnly.length - 1\n                      ],\n                      rollingGoalDiffTotalAwayOnly[\n                      rollingGoalDiffTotalAwayOnly.length - 1\n                      ]\n                    ) < -2\n                      ? Math.min(\n                        rollingGoalDiffTotalHomeOnly[\n                        rollingGoalDiffTotalHomeOnly.length - 1\n                        ],\n                        rollingGoalDiffTotalAwayOnly[\n                        rollingGoalDiffTotalAwayOnly.length - 1\n                        ]\n                      )\n                      : -2\n                  }\n                  data1={rollingGoalDiffTotalHomeOnly}\n                  data2={rollingGoalDiffTotalAwayOnly}\n                  data3={rollingXGDiffTotalHomeOnly}\n                  data4={rollingXGDiffTotalAwayOnly}\n                  team1={game.homeTeam}\n                  team2={game.awayTeam}\n                  type={\"Home/Away Goal/XG difference over time\"}\n                  tension={0.5}\n                ></MultilineChart>\n              </div>\n            </>\n          ) : null\n        }\n      />\n      <div className=\"Chart\" id={`Chart${game.id}`} style={style}></div>\n\n      <Div\n        text={`Last league games (most recent first)`}\n        className={\"LastGameHeader\"}\n      ></Div>\n      <div className=\"flex-container\">\n        <div className=\"flex-childOneOverviewSmall\">{overviewHome}</div>\n        <div className=\"flex-childTwoOverviewSmall\">{overviewAway}</div>\n      </div>\n      {/* <h2>Results from similar profile games</h2>\n        <span>(Games where each team had similar odds)</span>\n        <h3>Most recent first</h3>\n        <div className=\"flex-container-similar\">\n          <div className=\"flex-childOneOverviewSmall\">{similarGamesHome}</div>\n          <div className=\"flex-childTwoOverviewSmall\">{similarGamesAway}</div>\n        </div>\n        <input type=\"hidden\" name=\"IL_IN_ARTICLE\" />\n        <Button\n          className=\"MoreStats\"\n          onClickEvent={() =>\n            getTeamStats(\n              game.id,\n              game.homeTeam,\n              game.awayTeam,\n              formDataHome[0].BttsPercentage,\n              formDataHome[0].BttsPercentageHomeOrAway,\n              formDataAway[0].BttsPercentage,\n              formDataAway[0].BttsPercentageHomeOrAway\n            )\n          }\n          text={\"Fixture trends + AI Preview\"}\n        ></Button> */}\n    </>\n  );\n}\n\nexport default GameStats;\n\n\n\n//  {homeTeamStats && awayTeamStats && (\n//         <Collapsable\n//           buttonText=\"Additional Team Stats\"\n//           classNameButton=\"TeamStatsButton\"\n//           element={\n//             <div className=\"TeamStats\">\n//               <DoughnutChart\n//                 chartTitle=\"SoT For vs Against\"\n//                 // labels={['For', 'Against']}\n//                 values={[homeTeamStats.shotsOnTarget, homeTeamStats.shotsOnTargetAgainst]}\n//                 colors={[\n//                   'rgba(49, 196, 0, 1)',\n//                   'rgba(216, 0, 0, 1)',\n//                 ]}\n//                 label=\"SoT For vs Against\"\n//               />\n//               <DoughnutChart\n//                 chartTitle=\"Big Chances For vs Against\"\n//                 // labels={['For', 'Against']}\n//                 values={[homeTeamStats.bigChances, homeTeamStats.bigChancesAgainst]}\n//                 colors={[\n//                   'rgba(49, 196, 0, 1)',\n//                   'rgba(216, 0, 0, 1)',\n//                 ]}\n//                 label=\"SoT For vs Against\"\n//               />\n//               <DoughnutChart\n//                 chartTitle=\"Accurate Passes in Opposition Half vs Own Half\"\n//                 // labels={['For', 'Against']}\n//                 values={[homeTeamStats.accurateOppositionHalfPasses, homeTeamStats.accurateOwnHalfPasses]}\n//                 colors={[\n//                   'rgba(49, 196, 0, 1)',\n//                   'rgba(216, 0, 0, 1)',\n//                 ]}\n//                 label=\"SoT For vs Against\"\n//               />\n//               <DoughnutChart\n//                 chartTitle=\"Corners For vs Against\"\n//                 // labels={['For', 'Against']}\n//                 values={[homeTeamStats.corners, homeTeamStats.cornersAgainst]}\n//                 colors={[\n//                   'rgba(49, 196, 0, 1)',\n//                   'rgba(216, 0, 0, 1)',\n//                 ]}\n//                 label=\"SoT For vs Against\"\n//               />\n//               <DoughnutChart\n//                 chartTitle=\"Penalties For vs Against\"\n//                 // labels={['For', 'Against']}\n//                 values={[homeTeamStats.penaltiesTaken, homeTeamStats.penaltiesCommited]}\n//                 colors={[\n//                   'rgba(49, 196, 0, 1)',\n//                   'rgba(216, 0, 0, 1)',\n//                 ]}\n//                 label=\"SoT For vs Against\"\n//               />\n//               <DoughnutChart\n//                 chartTitle=\"Accurate Passes vs Accurate Long Balls\"\n//                 // labels={['For', 'Against']}\n//                 values={[homeTeamStats.accuratePasses, homeTeamStats.accurateLongBalls]}\n//                 colors={[\n//                   'rgba(49, 196, 0, 1)',\n//                   'rgba(216, 0, 0, 1)',\n//                 ]}\n//                 label=\"SoT For vs Against\"\n//               />\n//               {/* <DoughnutChart\n//                       teamStats={awayTeamStats}\n//                       className=\"AwayPlayerStats\"\n//                       spanClass=\"SpanAway\"\n//                     /> */}\n//             </div>\n//           }\n//         />\n//       )}","/Users/greg/Development/Predictor/src/logic/getScorePredictions.js",["348","349","350","351","352","353","354","355","356","357","358","359","360","361","362","363","364","365"],"/Users/greg/Development/Predictor/src/components/Slider.js",[],"/Users/greg/Development/Predictor/src/components/SliderDiff.js",[],"/Users/greg/Development/Predictor/src/logic/getForm.js",[],"/Users/greg/Development/Predictor/src/components/LeagueTable.js",[],"/Users/greg/Development/Predictor/src/components/TeamOfTheSeason.js",["366","367"],"import React, { useState, useEffect } from \"react\";\n//tournaments/search (Deprecated)\n//Use ID to call tournaments/get-seasons\n\n// const footyStatsToSofaScore = [\n//   {\n//     //Prem 25\n//     15050: {\n//       id: 17,\n//       season: 76986,\n//     },\n//     //Championship 25\n//     14930: {\n//       id: 18,\n//       season: 77347,\n//     },\n//     //League 1\n//     14934: {\n//       id: 24,\n//       season: 77352,\n//     },\n//     //League 2\n//     14935: {\n//       id: 25,\n//       season: 77351,\n//     },\n//     12622: {\n//       id: 173,\n//       season: 63807, // Conference 24/25\n//     },\n//     //Bundesliga\n//     14968: {\n//       id: 35,\n//       season: 77333,\n//     },\n//     //La Liga 25\n//     14956: {\n//       id: 8,\n//       season: 77559,\n//     },\n//     15000: {\n//       id: 36,\n//       season: 77128, // Scottish Premiership 25\n//     },\n//     //Champions league 25\n//     14924: {\n//       id: 7,\n//       season: 76953,\n//     },\n//     //Serie A 25\n//     15068: {\n//       id: 23,\n//       season: 76457,\n//     },\n//     //MLS\n//     13973: {\n//       id: 242,\n//       season: 70158,\n//     },\n//     //Ligue 1 25\n//     14932: {\n//       id: 34,\n//       season: 77356,\n//     },\n//     15115: {\n//       id: 238,\n//       season: 77806, // Portuguese Primeira Liga 25\n//     },\n//     13974: {\n//       id: 384,\n//       season: 70083, // Copa Libertadores\n//     },\n//     14936: {\n//       id: 37,\n//       season: 77012, // Eredivisie\n//     },\n//     14937: {\n//       id: 9,\n//       season: 77849, // Belgian Pro League\n//     },\n//     13963: {\n//       id: 40,\n//       season: 69956, // Scottish Premiership\n//     },\n//     15055: {\n//       id: 39,\n//       season: 76491, // Danish Superliga\n//     },\n//     13987: {\n//       id: 20,\n//       season: 70174, // Norwegian Eliteserien\n//     },\n//     14923: {\n//       id: 45,\n//       season: 77382, // Austrian Bundesliga\n//     },\n//     15163: {\n//       id: 185,\n//       season: 78175, // Greek Super League\n//     },\n//     14972: {\n//       id: 52, // Turkish Super Lig\n//       season: 78175,\n//     },\n//     15031: {\n//       id: 202,\n//       season: 76477, // Ekstraklasa\n//     },\n//     15066: {\n//       id: 54,\n//       season: 77558, // Spanish Segunda Division\n//     },\n//     14931: {\n//       id: 44,\n//       season: 77354, // Bundesliga 2\n//     },\n//     14954: {\n//       id: 182,\n//       season: 77357, // French Ligue 2\n//     },\n//     15061: {\n//       id: 206,\n//       season: 77037, // Scottish Championship 25\n//     },\n//     15062: {\n//       id: 207,\n//       season: 77037, // Scottish League One 25\n//     },\n//     15064: {\n//       id: 209,\n//       season: 77045, // Scottish League Two 25\n//     },\n//     15047: {\n//       id: 215,\n//       season: 77152, // Swiss Super League\n//     },\n//     15053: {\n//       id: 170,\n//       season: 77152, // Croatian First League\n//     },\n//     14973: {\n//       id: 172,\n//       season: 77019, // Czech First League\n//     },\n//     14089: {\n//       id: 41,\n//       season: 70853, // Finnish Veikkausliiga\n//     },\n//     14951: {\n//       id: 218,\n//       season: 77625, // Ukrainian Premier League\n//     },\n//     15063: {\n//       id: 212,\n//       season: 62660, // Slovenian Prva Liga\n//     },\n//     14933: {\n//       id: 211,\n//       season: 77154, // Slovak Super Liga\n//     },\n//     15065: {\n//       id: 210,\n//       season: 77625, // Serbian SuperLiga \n//     },\n//     15234: {\n//       id: 11621,\n//       season: 76500, // Liga MX 25\n//     },\n//     14231: {\n//       id: 325,\n//       season: 72034, // Brazil Serie A\n//     },\n//     14305: {\n//       id: 390,\n//       season: 72603, // Brazil Serie B\n//     },\n//     13878: {\n//       id: 357,\n//       season: 69619, // Club World Cup\n//     },\n//     13734: {\n//       id: 10783,\n//       season: 58337, // UEFA Nations League 25\n//     },\n//     14086: {\n//       id: 11539,\n//       season: 70681, // Colombian Liga BetPlay 25\n//     },\n//     14626: {\n//       id: 278,\n//       season: 71306, // Uruguayan Primera Division 25\n//     },\n//     15310: {\n//       id: 155,\n//       season: 70268, // Argentina Primera Division 25\n//     },\n//     13960: {\n//       id: 196,\n//       season: 69871, // J League 25\n//     },\n//     14069: {\n//       id: 410,\n//       season: 70830, // K League 25\n//     },\n//     12772: {\n//       id: 955,\n//       season: 63998, // Saudi Pro League 24/25\n//     },\n//     13967: {\n//       id: 13363,\n//       season: 70263 // USL 25\n//     },\n//     14236: {\n//       id: 13470,\n//       season: 72315 // Canadian Premier League 25\n//     },\n//     13964: {\n//       id: 11,\n//       season: 69427, // World Cup EU 2026\n//     },\n//     10121: {\n//       id: 295,\n//       season: 53820, // World Cup SA 2026\n//     },\n//     13952: {\n//       id: 192,\n//       season: 69981, // Ireland 24/25\n//     },\n//     13703: {\n//       id: 136,\n//       season: 64864, // A League 24/25\n//     },\n//     15002: {\n//       id: 679,\n//       season: 76984, // UEFA Europa League 25\n//     },\n//     14904: {\n//       id: 17015,\n//       season: 76960, // UEFA Europa Conference League 24/25\n//     },\n//   },\n// ];\n\n\nexport const rounds = [\n  {\n    17: 76986,\n    18: 77347,\n    24: 77352,\n    25: 77351,\n    173: 63807,\n    35: 77333,\n    8: 77559,\n    36: 77128,\n    7: 76953,\n    23: 76457,\n    242: 70158,\n    34: 77356,\n    238: 77806,\n    384: 70083,\n    37: 77012,\n    9: 77849,\n    40: 69956,\n    39: 76491,\n    20: 70174,\n    45: 77382,\n    185: 78175,\n    52: 78175,\n    202: 76477,\n    54: 77558,\n    44: 77354,\n    182: 77357,\n    206: 77037,\n    207: 77037,\n    209: 77045,\n    215: 77152,\n    170: 77152,\n    172: 77019,\n    41: 70853,\n    218: 77625,\n    212: 62660,\n    131: 77156,\n    211: 77154,\n    210: 77625,\n    11621: 76500,\n    325: 72034,\n    390: 72603,\n    357: 69619,\n    10783: 58337,\n    11539: 70681,\n    278: 71306,\n    155: 70268,\n    196: 69871,\n    410: 70830,\n    955: 63998,\n    13363: 70263,\n    13470: 72315,\n    11: 69427,\n    295: 53820,\n    192: 69981,\n    136: 64864,\n    679: 76984,\n    17015: 76960,\n  },\n];\n\n\nconst TeamOfTheSeason = (props) => {\n  const [roundId, setRoundId] = useState(null);\n  const seasonId = 61627; // Update this dynamically if needed\n  const id = props.id\n  //WILL NEED TO BE UPDATED NEXT SEASON\n\n  const baseUrl = `https://widgets.sofascore.com/embed/unique-tournament/${id}`;\n\n  const derivedRoundId = (() => {\n    for (const mapping of rounds) {\n      if (mapping.hasOwnProperty(id)) {\n        return mapping[id];\n      }\n    }\n    console.warn(`No matching media ID found for ID: ${id}`);\n    return null;\n  })();\n\n  console.log(id)\n  console.log(derivedRoundId)\n\n  useEffect(() => {\n    const fetchRoundId = async () => {\n      try {\n        // Fetch rounds data to get the correct round ID\n        const roundsResponse = await fetch(\n          `${process.env.REACT_APP_EXPRESS_SERVER}round/${id}/${derivedRoundId}`\n        );\n        let roundsData = await roundsResponse.json();\n\n        // Get the round ID from the first round in the data\n        if (roundsData.rounds?.length > 0) {\n          const firstRoundId = roundsData.rounds[0]?.id; // Grabbing the id from index 0\n          setRoundId(firstRoundId); // Set the roundId state\n        } else {\n          console.error(\"No rounds data found.\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching SofaScore API:\", error);\n      }\n    };\n\n    fetchRoundId();\n  }, [id, roundId]);\n\n  return (\n    <div className=\"TeamOfTheSeason\">\n      {derivedRoundId ? (\n        <iframe\n          width=\"100%\"\n          height=\"700\"\n          // style={{ display: 'block', maxWidth: '700px' }}\n          src={`${baseUrl}/season/${derivedRoundId}/round/${roundId}/teamOfTheWeek?widgetBackground=Gray&showCompetitionLogo=true&v=2`}\n          frameBorder=\"0\"\n          scrolling=\"no\"\n          title=\"SofaScore Team of the Week\"\n        ></iframe>\n      ) : (\n        <p>Loading Team of the Week...</p>\n      )}\n      <div\n        style={{\n          fontSize: \"12px\",\n          fontFamily: \"Arial, sans-serif\",\n          textAlign: \"left\",\n        }}\n      >\n      </div>\n    </div>\n  );\n};\n\nexport default TeamOfTheSeason;\n","/Users/greg/Development/Predictor/src/logic/getStats.js",["368","369","370","371","372","373","374","375","376","377","378","379","380","381","382","383","384","385","386","387","388","389","390","391","392","393"],"import ReactDOM from \"react-dom\";\nimport { allForm } from \"../logic/getFixtures\";\nimport { getPointsFromLastX } from \"../logic/getScorePredictions\";\nimport { allLeagueResultsArrayOfObjects } from \"../logic/getFixtures\";\nimport GenerateFormSummary from \"../logic/compareFormTrend\";\nimport Collapsable from \"../components/CollapsableElement\";\nimport { clicked } from \"../logic/getScorePredictions\";\nimport { userDetail } from \"../logic/authProvider\";\nimport { checkUserPaidStatus } from \"../logic/hasUserPaid\";\n\nexport async function getPointAverage(pointTotal, games) {\n  return pointTotal / games;\n}\n\n\nexport async function calculateAttackingStrength(stats) {\n  // Define weights for each metric (you can adjust these based on your preference)\n  const weights = {\n    // averagePossession: 0.15,\n    \"Average Dangerous Attacks\": 0.1,\n    \"Average Shots\": 0.05,\n    \"Average Shots On Target\": 0.15,\n    \"Average Expected Goals\": 0.15,\n    \"Recent XG\": 0.15,\n    \"Average Goals\": 0.3,\n    Corners: 0,\n    \"Average Shot Value\": 0.1,\n  };\n\n  // Define the ranges for normalization\n  const ranges = {\n    // averagePossession: { min: 25, max: 75 },\n    \"Average Dangerous Attacks\": { min: 25, max: 75 }, // Adjust the max value as needed\n    \"Average Shots\": { min: 4, max: 25 }, // Adjust the max value as needed\n    \"Average Shots On Target\": { min: 3, max: 7 }, // Adjust the max value as needed\n    \"Average Expected Goals\": { min: 0.75, max: 2.25 }, // Adjust the max value as needed\n    \"Recent XG\": { min: 0.5, max: 2.25 }, // Adjust the max value as needed\n    \"Average Goals\": { min: 0, max: 3 }, // Adjust the max value as needed\n    Corners: { min: 2, max: 9 },\n    \"Average Shot Value\": { min: 3, max: 35 },\n  };\n\n  // Normalize each metric value and calculate the weighted sum\n  let weightedSum = 0;\n  for (const metric in stats) {\n    if (\n      stats.hasOwnProperty(metric) &&\n      weights.hasOwnProperty(metric) &&\n      ranges.hasOwnProperty(metric)\n    ) {\n      const normalizedValue = Math.max(\n        0,\n        Math.min(\n          1,\n          (stats[metric] - ranges[metric].min) /\n            (ranges[metric].max - ranges[metric].min)\n        )\n      );\n      weightedSum += normalizedValue * weights[metric];\n    } else {\n      console.log(metric);\n    }\n  }\n\n  return parseFloat(weightedSum.toFixed(2));\n}\n\nexport async function calculateDefensiveStrength(stats, normalizedValue = 1) {\n  let normValue = normalizedValue;\n  // Define weights for each metric (you can adjust these based on your preference)\n  const weights = {\n    \"Average XG Against\": 0.2,\n    \"Recent XG Against\": 0.3,\n    \"Average Goals Against\": 0.4,\n    \"Average SOT Against\": 0.1,\n  };\n\n  // Define the ranges for normalization\n  const ranges = {\n    \"Average XG Against\": { min: 0.5, max: 2.25 }, // Adjust the max value as needed\n    \"Recent XG Against\": { min: 0.75, max: 2.25 },\n    \"Average Goals Against\": { min: 0, max: 3 }, // Adjust the max value as needed\n    \"Average SOT Against\": { min: 3, max: 7 },\n  };\n\n  // Normalize each metric value and calculate the weighted sum\n  let weightedSum = 0;\n  for (const metric in stats) {\n    if (\n      stats.hasOwnProperty(metric) &&\n      weights.hasOwnProperty(metric) &&\n      ranges.hasOwnProperty(metric)\n    ) {\n      // Normalize the value and clamp it between 0 and 1\n      let normalizedValue =\n        (stats[metric] - ranges[metric].min) /\n        (ranges[metric].max - ranges[metric].min);\n      normalizedValue = Math.max(0, Math.min(1, normalizedValue));\n\n      // Reverse logic for defensive strength: better defense, lower metric value\n      let val = normValue - normalizedValue;\n\n      // Add the weighted value to the weightedSum\n      weightedSum += val * weights[metric];\n    }\n  }\n\n  return parseFloat(weightedSum.toFixed(2));\n}\n\nexport async function calculateMetricStrength(metricName, metricValue) {\n  // Define weights for each metric (you can adjust these based on your preference)\n  const weights = {\n    averagePossession: 1,\n    xgFor: 1,\n    xgAgainst: 1,\n    directnessOverall: 1,\n    accuracyOverall: 1,\n  };\n\n  // Define the ranges for normalization\n  const ranges = {\n    averagePossession: { min: 20, max: 80 },\n    xgFor: { min: 0.25, max: 2.75 },\n    xgAgainst: { min: 0.25, max: 2.75 },\n    directnessOverall: { min: 0.5, max: 7 },\n    accuracyOverall: { min: 3, max: 40 },\n  };\n\n  // Ensure the metric is valid and exists in the weights and ranges objects\n  if (\n    !weights.hasOwnProperty(metricName) ||\n    !ranges.hasOwnProperty(metricName)\n  ) {\n    throw new Error(\"Invalid metric name or missing normalization range.\");\n  }\n\n  // Normalize the metric value\n  const normalizedValue =\n    (metricValue - ranges[metricName].min) /\n    (ranges[metricName].max - ranges[metricName].min);\n\n  // Calculate the weighted score\n  const weightedScore = normalizedValue * weights[metricName];\n\n  return parseFloat(weightedScore.toFixed(2));\n}\n\n\nexport async function getXGtoActualDifferentialStrength(XGDiff) {\n  let strength;\n  switch (true) {\n    case XGDiff >= 1.5:\n      strength = 10;\n      break;\n    case XGDiff >= 1 && XGDiff < 1.5:\n      strength = 9;\n      break;\n    case XGDiff >= 0.5 && XGDiff < 1:\n      strength = 8;\n      break;\n    case XGDiff >= 0.25 && XGDiff < 0.5:\n      strength = 7;\n      break;\n    case XGDiff > 0 && XGDiff < 0.25:\n      strength = 6;\n      break;\n    case XGDiff <= 0 && XGDiff > -0.25:\n      strength = 5;\n      break;\n    case XGDiff <= -0.25 && XGDiff > -0.5:\n      strength = 4;\n      break;\n    case XGDiff <= -0.5 && XGDiff > -1:\n      strength = 3;\n      break;\n    case XGDiff <= -1 && XGDiff > -1.5:\n      strength = 2;\n      break;\n    case XGDiff <= -1.5:\n      strength = 1;\n      break;\n    default:\n      strength = 1;\n      break;\n  }\n  return strength;\n}\n\n\nexport async function createStatsDiv(game, displayBool) {\n  if (game.status !== \"void\") {\n    // takes the displayBool boolean from the fixture onClick and sets the styling of the stats div from there\n    function styling(testBool) {\n      let bool = testBool;\n      if (bool === true && clicked === true) {\n        // set stats element to display flex\n        return { display: \"block\" };\n      } else {\n        // set stats element to display none\n        return { display: \"none\" };\n      }\n    }\n    let style = styling(displayBool);\n\n    if (clicked === false) {\n      alert(\"Tap Get Predictions to fetch all game stats first\");\n    } else {\n      let index = 2;\n      let divider = 10;\n\n      let gameStats = allForm.find((match) => match.id === game.id);\n      const gameArrayHome = [];\n      const gameArrayAway = [];\n      const gameArrayHomeTeamHomeGames = [];\n      const gameArrayAwayTeamAwayGames = [];\n      let goalDiffArrayHome;\n      let goalDiffArrayAway;\n      let xgDiffArrayHome;\n      let xgDiffArrayAway;\n      let sotDiffArrayHome;\n      let sotDiffArrayAway;\n\n      const homeForm = gameStats.home[index];\n      const awayForm = gameStats.away[index];\n\n      if (displayBool === true) {\n\n        const pos = allLeagueResultsArrayOfObjects\n          .map((i) => i.id)\n          .indexOf(gameStats.leagueId);\n        let matches = allLeagueResultsArrayOfObjects[pos];\n        // await fixtures.json().then((matches) => {\n        const resultHome = matches.fixtures.filter(\n          (game) =>\n            game.home_name === gameStats.home.teamName ||\n            game.away_name === gameStats.home.teamName\n        );\n\n        const resultHomeOnly = matches.fixtures.filter(\n          (game) => game.home_name === gameStats.home.teamName\n        );\n\n        resultHome.sort((a, b) => b.date_unix - a.date_unix);\n        resultHomeOnly.sort((a, b) => b.date_unix - a.date_unix);\n\n        for (let i = 0; i < resultHome.length; i++) {\n          let unixTimestamp = resultHome[i].date_unix;\n          let milliseconds = unixTimestamp * 1000;\n          let dateObject = new Date(milliseconds).toLocaleString(\"en-GB\", {\n            timeZone: \"UTC\",\n          });\n\n          let won;\n          let goalsScored;\n          let goalsConceeded;\n\n          switch (true) {\n            case resultHome[i].home_name === gameStats.home.teamName:\n              switch (true) {\n                case resultHome[i].homeGoalCount > resultHome[i].awayGoalCount:\n                  won = \"W\";\n                  goalsScored = resultHome[i].homeGoalCount;\n                  goalsConceeded = resultHome[i].awayGoalCount;\n                  break;\n                case resultHome[i].homeGoalCount ===\n                  resultHome[i].awayGoalCount:\n                  won = \"D\";\n                  goalsScored = resultHome[i].homeGoalCount;\n                  goalsConceeded = resultHome[i].awayGoalCount;\n                  break;\n                case resultHome[i].homeGoalCount < resultHome[i].awayGoalCount:\n                  won = \"L\";\n                  goalsScored = resultHome[i].homeGoalCount;\n                  goalsConceeded = resultHome[i].awayGoalCount;\n                  break;\n                default:\n                  break;\n              }\n              break;\n            case resultHome[i].away_name === gameStats.home.teamName:\n              switch (true) {\n                case resultHome[i].homeGoalCount > resultHome[i].awayGoalCount:\n                  won = \"L\";\n                  goalsScored = resultHome[i].homeGoalCount;\n                  goalsConceeded = resultHome[i].awayGoalCount;\n                  break;\n                case resultHome[i].homeGoalCount ===\n                  resultHome[i].awayGoalCount:\n                  won = \"D\";\n                  goalsScored = resultHome[i].homeGoalCount;\n                  goalsConceeded = resultHome[i].awayGoalCount;\n                  break;\n                case resultHome[i].homeGoalCount < resultHome[i].awayGoalCount:\n                  won = \"W\";\n                  goalsScored = resultHome[i].homeGoalCount;\n                  goalsConceeded = resultHome[i].awayGoalCount;\n                  break;\n                default:\n                  break;\n              }\n              break;\n            default:\n              break;\n          }\n\n          gameArrayHome.push({\n            id: resultHome[i].id,\n            date: dateObject,\n            homeTeam: resultHome[i].home_name,\n            homeGoals: resultHome[i].homeGoalCount,\n            homeXG: resultHome[i].team_a_xg,\n            homeOdds: resultHome[i].odds_ft_1,\n            awayTeam: resultHome[i].away_name,\n            awayGoals: resultHome[i].awayGoalCount,\n            awayXG: resultHome[i].team_b_xg,\n            awayOdds: resultHome[i].odds_ft_2,\n            won: won,\n            homeShots: resultHome[i].team_a_shots,\n            awayShots: resultHome[i].team_b_shots,\n            homeSot: resultHome[i].team_a_shotsOnTarget,\n            awaySot: resultHome[i].team_b_shotsOnTarget,\n            homeRed: resultHome[i].team_a_red_cards,\n            awayRed: resultHome[i].team_b_red_cards,\n            homePossession: resultHome[i].team_a_possession,\n            awayPossession: resultHome[i].team_b_possession,\n            homeDangerousAttacks: resultHome[i].team_a_dangerous_attacks,\n            awayDangerousAttacks: resultHome[i].team_b_dangerous_attacks,\n            homePPG: resultHome[i].pre_match_teamA_overall_ppg,\n            awayPPG: resultHome[i].pre_match_teamB_overall_ppg,\n            unixTimestamp: resultHome[i].date_unix,\n            goalsFor: goalsScored,\n            goalsAgainst: goalsConceeded,\n            btts:\n              resultHome[i].homeGoalCount > 0 && resultHome[i].awayGoalCount > 0\n                ? \"\\u2714\"\n                : \"\\u2718\",\n          });\n        }\n\n        for (let i = 0; i < resultHomeOnly.length; i++) {\n          let wonHomeOrAwayOnly;\n\n          switch (true) {\n            case resultHomeOnly[i].home_name === gameStats.home.teamName:\n              switch (true) {\n                case resultHomeOnly[i].homeGoalCount >\n                  resultHomeOnly[i].awayGoalCount:\n                  wonHomeOrAwayOnly = \"W\";\n                  gameArrayHomeTeamHomeGames.push(wonHomeOrAwayOnly);\n                  break;\n                case resultHomeOnly[i].homeGoalCount ===\n                  resultHomeOnly[i].awayGoalCount:\n                  wonHomeOrAwayOnly = \"D\";\n                  gameArrayHomeTeamHomeGames.push(wonHomeOrAwayOnly);\n                  break;\n                case resultHomeOnly[i].homeGoalCount <\n                  resultHomeOnly[i].awayGoalCount:\n                  wonHomeOrAwayOnly = \"L\";\n                  gameArrayHomeTeamHomeGames.push(wonHomeOrAwayOnly);\n                  break;\n                default:\n                  break;\n              }\n              break;\n\n            default:\n              break;\n          }\n        }\n\n        const resultAway = matches.fixtures.filter(\n          (game) =>\n            game.away_name === gameStats.away.teamName ||\n            game.home_name === gameStats.away.teamName\n        );\n\n        const resultAwayOnly = matches.fixtures.filter(\n          (game) => game.away_name === gameStats.away.teamName\n        );\n\n        resultAway.sort((a, b) => b.date_unix - a.date_unix);\n        resultAwayOnly.sort((a, b) => b.date_unix - a.date_unix);\n\n        for (let i = 0; i < resultAway.length; i++) {\n          let unixTimestamp = resultAway[i].date_unix;\n          let milliseconds = unixTimestamp * 1000;\n          let dateObject = new Date(milliseconds).toLocaleString(\"en-GB\", {\n            timeZone: \"UTC\",\n          });\n\n          let won;\n          let goalsScored;\n          let goalsConceeded;\n\n          switch (true) {\n            case resultAway[i].home_name === gameStats.away.teamName:\n              switch (true) {\n                case resultAway[i].homeGoalCount > resultAway[i].awayGoalCount:\n                  won = \"W\";\n                  goalsScored = resultAway[i].awayGoalCount;\n                  goalsConceeded = resultAway[i].homeGoalCount;\n                  break;\n                case resultAway[i].awayGoalCount ===\n                  resultAway[i].homeGoalCount:\n                  won = \"D\";\n                  goalsScored = resultAway[i].awayGoalCount;\n                  goalsConceeded = resultAway[i].homeGoalCount;\n                  break;\n                case resultAway[i].homeGoalCount < resultAway[i].awayGoalCount:\n                  won = \"L\";\n                  goalsScored = resultAway[i].awayGoalCount;\n                  goalsConceeded = resultAway[i].homeGoalCount;\n                  break;\n                default:\n                  break;\n              }\n              break;\n\n            case resultAway[i].away_name === gameStats.away.teamName:\n              switch (true) {\n                case resultAway[i].homeGoalCount > resultAway[i].awayGoalCount:\n                  won = \"L\";\n                  goalsScored = resultAway[i].awayGoalCount;\n                  goalsConceeded = resultAway[i].homeGoalCount;\n                  break;\n                case resultAway[i].homeGoalCount ===\n                  resultAway[i].awayGoalCount:\n                  won = \"D\";\n                  goalsScored = resultAway[i].awayGoalCount;\n                  goalsConceeded = resultAway[i].homeGoalCount;\n                  break;\n                case resultAway[i].homeGoalCount < resultAway[i].awayGoalCount:\n                  won = \"W\";\n                  goalsScored = resultAway[i].awayGoalCount;\n                  goalsConceeded = resultAway[i].homeGoalCount;\n                  break;\n                default:\n                  break;\n              }\n              break;\n            default:\n              break;\n          }\n\n          gameArrayAway.push({\n            id: resultAway[i].id,\n            date: dateObject,\n            homeTeam: resultAway[i].home_name,\n            homeGoals: resultAway[i].homeGoalCount,\n            homeXG: resultAway[i].team_a_xg,\n            homeOdds: resultAway[i].odds_ft_1,\n            awayTeam: resultAway[i].away_name,\n            awayGoals: resultAway[i].awayGoalCount,\n            awayXG: resultAway[i].team_b_xg,\n            awayOdds: resultAway[i].odds_ft_2,\n            won: won,\n            homeShots: resultAway[i].team_a_shots,\n            awayShots: resultAway[i].team_b_shots,\n            homeSot: resultAway[i].team_a_shotsOnTarget,\n            awaySot: resultAway[i].team_b_shotsOnTarget,\n            homeRed: resultAway[i].team_a_red_cards,\n            awayRed: resultAway[i].team_b_red_cards,\n            homePossession: resultAway[i].team_a_possession,\n            awayPossession: resultAway[i].team_b_possession,\n            homeDangerousAttacks: resultAway[i].team_a_dangerous_attacks,\n            awayDangerousAttacks: resultAway[i].team_b_dangerous_attacks,\n            homePPG: resultAway[i].pre_match_teamA_overall_ppg,\n            awayPPG: resultAway[i].pre_match_teamB_overall_ppg,\n            unixTimestamp: resultAway[i].date_unix,\n            goalsFor: goalsScored,\n            goalsAgainst: goalsConceeded,\n            btts:\n              resultAway[i].homeGoalCount > 0 && resultAway[i].awayGoalCount > 0\n                ? \"\\u2714\"\n                : \"\\u2718\",\n          });\n        }\n\n        for (let i = 0; i < resultAwayOnly.length; i++) {\n          let wonAwayOrAwayOnly;\n\n          switch (true) {\n            case resultAwayOnly[i].away_name === gameStats.away.teamName:\n              switch (true) {\n                case resultAwayOnly[i].awayGoalCount >\n                  resultAwayOnly[i].homeGoalCount:\n                  wonAwayOrAwayOnly = \"W\";\n                  gameArrayAwayTeamAwayGames.push(wonAwayOrAwayOnly);\n                  break;\n                case resultAwayOnly[i].awayGoalCount ===\n                  resultAwayOnly[i].homeGoalCount:\n                  wonAwayOrAwayOnly = \"D\";\n                  gameArrayAwayTeamAwayGames.push(wonAwayOrAwayOnly);\n                  break;\n                case resultAwayOnly[i].awayGoalCount <\n                  resultAwayOnly[i].homeGoalCount:\n                  wonAwayOrAwayOnly = \"L\";\n                  gameArrayAwayTeamAwayGames.push(wonAwayOrAwayOnly);\n                  break;\n                default:\n                  break;\n              }\n              break;\n\n            default:\n              break;\n          }\n        }\n\n        goalDiffArrayAway = awayForm.allTeamResults.map(\n          (a) => a.scored - a.conceeded\n        );\n        goalDiffArrayAway = goalDiffArrayAway.reverse();\n        xgDiffArrayAway = awayForm.allTeamResults.map(\n          (a) => a.XG - a.XGAgainst\n        );\n        xgDiffArrayAway = xgDiffArrayAway.reverse();\n\n        sotDiffArrayAway = awayForm.allTeamResults.map(\n          (a) => a.sot - a.sotAgainst\n        );\n        sotDiffArrayAway = sotDiffArrayAway.reverse();\n\n        gameArrayAway.sort((a, b) => b.unixTimestamp - a.unixTimestamp);\n\n        // });\n      }\n\n      const bttsArrayHome = Array.from(gameArrayHome, (x) => x.btts);\n\n      \n      const bttsArrayAway = Array.from(gameArrayAway, (x) => x.btts);\n\n      let homeTeam = gameStats.home.teamName;\n      let awayTeam = gameStats.away.teamName;\n\n      let time = game.time;\n\n      if (homeForm.last3Points === undefined) {\n        homeForm.last3Points = getPointsFromLastX(homeForm.lastThreeForm);\n\n        homeForm.last5Points = getPointsFromLastX(homeForm.LastFiveForm);\n\n        homeForm.last6Points = getPointsFromLastX(homeForm.LastSixForm);\n\n        homeForm.last10Points = getPointsFromLastX(homeForm.LastTenForm);\n\n        homeForm.homePPGame = getPointsFromLastX(homeForm.resultsHome);\n\n        awayForm.last3Points = getPointsFromLastX(awayForm.lastThreeForm);\n\n        awayForm.last5Points = getPointsFromLastX(awayForm.LastFiveForm);\n\n        awayForm.last6Points = getPointsFromLastX(awayForm.LastSixForm);\n\n        awayForm.last10Points = getPointsFromLastX(awayForm.LastTenForm);\n\n        awayForm.awayPPGame = getPointsFromLastX(awayForm.resultsAway);\n      }\n\n      // let homeThreeGameAverage = await getPointAverage(\n      //   homeForm.last3Points,\n      //   3\n      // );\n\n      let homeFiveGameAverage = await getPointAverage(homeForm.last5Points, 5);\n\n      let homeSixGameAverage = await getPointAverage(homeForm.last6Points, 6);\n\n      let homeTenGameAverage = await getPointAverage(homeForm.last10Points, 10);\n\n      homeForm.homePPGAv = await getPointAverage(\n        homeForm.homePPGame,\n        homeForm.resultsHome.length\n      );\n      homeForm.tenGameAv = homeTenGameAverage;\n      homeForm.fiveGameAv = homeFiveGameAverage;\n\n      // let awayThreeGameAverage = await getPointAverage(\n      //   awayForm.last3Points,\n      //   3\n      // );\n\n      let awayFiveGameAverage = await getPointAverage(awayForm.last5Points, 5);\n\n      let awaySixGameAverage = await getPointAverage(awayForm.last6Points, 6);\n\n      let awayTenGameAverage = await getPointAverage(awayForm.last10Points, 10);\n\n      awayForm.awayPPGAv = await getPointAverage(\n        awayForm.awayPPGame,\n        awayForm.resultsAway.length\n      );\n      awayForm.tenGameAv = awayTenGameAverage;\n      awayForm.fiveGameAv = awayFiveGameAverage;\n\n      let paid;\n      if (userDetail) {\n        paid = await checkUserPaidStatus(userDetail.uid);\n      } else {\n        paid = false;\n      }\n\n      async function getPointsFromGames(formArr) {\n        const pairings = {\n          W: 3,\n          D: 1,\n          L: 0,\n        };\n        let newArr = [];\n        let arrayOfIndividualPoints = [];\n        let sum = 0;\n\n        for (let i = 0; i < formArr.length; i++) {\n          sum = sum + pairings[formArr[i]];\n          newArr.push(sum);\n          arrayOfIndividualPoints.push(pairings[formArr[i]]);\n        }\n        return [newArr, arrayOfIndividualPoints];\n      }\n\n      async function getLastGameResult(lastGame) {\n        let text;\n        switch (true) {\n          case lastGame === \"L\":\n            text = \"Lost\";\n            break;\n          case lastGame === \"D\":\n            text = \"Drew\";\n            break;\n          case lastGame === \"W\":\n            text = \"Won\";\n            break;\n          default:\n            break;\n        }\n        return text;\n      }\n\n      let homeFormTrend = [\n        homeFiveGameAverage.toFixed(2),\n        homeTenGameAverage.toFixed(2),\n      ];\n\n      let awayFormTrend = [\n        awayFiveGameAverage.toFixed(2),\n        awayTenGameAverage.toFixed(2),\n      ];\n\n      let formTextStringHome;\n      let formTextStringAway;\n\n      // if (displayBool === true && gameStats.home[2].LeagueOrAll === \"League\") {\n      //   console.log(1)\n      console.log(game)\n      formTextStringHome = await GenerateFormSummary(\n        homeForm,\n        homeForm.tenGameAv,\n        homeForm.fiveGameAv\n      );\n      formTextStringAway = await GenerateFormSummary(\n        awayForm,\n        awayForm.tenGameAv,\n        awayForm.fiveGameAv\n      );\n      // } else {\n      //   console.log(2)\n      //   formTextStringHome = \"\";\n      //   formTextStringAway = \"\";\n      // }\n\n      let favouriteRecordHome, favouriteRecordAway;\n      if (\n        homeForm.underdogCount &&\n        awayForm.underdogCount &&\n        homeForm.favouriteCount &&\n        awayForm.favouriteCount\n      ) {\n        favouriteRecordHome =\n          game.homeOdds < game.awayOdds || game.homeOdds === game.awayOdds\n            ? `${homeForm.teamName} have been favourites ${\n                homeForm.favouriteCount\n              } times. Of these games, they have Won: ${homeForm.oddsReliabilityWin.toFixed(\n                0\n              )}%, Drawn:  ${homeForm.oddsReliabilityDraw.toFixed(\n                0\n              )}%, Lost:  ${homeForm.oddsReliabilityLose.toFixed(0)}%`\n            : `${homeForm.teamName} have been underdogs ${\n                homeForm.underdogCount\n              } times. Of these games, they have Won: ${homeForm.oddsReliabilityWinAsUnderdog.toFixed(\n                0\n              )}%, Drawn:  ${homeForm.oddsReliabilityDrawAsUnderdog.toFixed(\n                0\n              )}%, Lost:  ${homeForm.oddsReliabilityLoseAsUnderdog.toFixed(\n                0\n              )}%`;\n        favouriteRecordAway =\n          game.homeOdds > game.awayOdds || game.homeOdds === game.awayOdds\n            ? `${awayForm.teamName} have been favourites ${\n                awayForm.favouriteCount\n              } times. Of these games, they have Won: ${awayForm.oddsReliabilityWin.toFixed(\n                0\n              )}%, Drawn:  ${awayForm.oddsReliabilityDraw.toFixed(\n                0\n              )}%, Lost:  ${awayForm.oddsReliabilityLose.toFixed(0)}%`\n            : `${awayForm.teamName} have been underdogs ${\n                awayForm.underdogCount\n              } times. Of these games, they have Won: ${awayForm.oddsReliabilityWinAsUnderdog.toFixed(\n                0\n              )}%, Drawn:  ${awayForm.oddsReliabilityDrawAsUnderdog.toFixed(\n                0\n              )}%, Lost:  ${awayForm.oddsReliabilityLoseAsUnderdog.toFixed(\n                0\n              )}%`;\n      } else if (\n        !homeForm.favouriteCount &&\n        awayForm.favouriteCount &&\n        !homeForm.underdogCount &&\n        awayForm.underdogCount\n      ) {\n        favouriteRecordHome =\n          \"No previous fixtures match the profile of this game.\";\n        favouriteRecordAway =\n          game.homeOdds > game.awayOdds || game.homeOdds === game.awayOdds\n            ? `${awayForm.teamName} have been favourites ${\n                awayForm.favouriteCount\n              } times. Of these games, they have Won: ${awayForm.oddsReliabilityWin.toFixed(\n                0\n              )}%, Drawn:  ${awayForm.oddsReliabilityDraw.toFixed(\n                0\n              )}%, Lost:  ${awayForm.oddsReliabilityLose.toFixed(0)}%`\n            : `${awayForm.teamName} have been underdogs ${\n                awayForm.underdogCount\n              } times. Of these games, they have Won: ${awayForm.oddsReliabilityWinAsUnderdog.toFixed(\n                0\n              )}%, Drawn:  ${awayForm.oddsReliabilityDrawAsUnderdog.toFixed(\n                0\n              )}%, Lost:  ${awayForm.oddsReliabilityLoseAsUnderdog.toFixed(\n                0\n              )}%`;\n      } else if (homeForm.oddsReliabilityWin && !awayForm.oddsReliabilityWin) {\n        favouriteRecordHome =\n          game.homeOdds < game.awayOdds || game.homeOdds === game.awayOdds\n            ? `${homeForm.teamName} have been favourites ${\n                homeForm.favouriteCount\n              } times. Of these games, they have Won: ${homeForm.oddsReliabilityWin.toFixed(\n                0\n              )}%, Drawn:  ${homeForm.oddsReliabilityDraw.toFixed(\n                0\n              )}%, Lost:  ${homeForm.oddsReliabilityLose.toFixed(0)}%`\n            : `${homeForm.teamName} have been underdogs ${\n                homeForm.underdogCount\n              } times. Of these games, they have Won: ${homeForm.oddsReliabilityWinAsUnderdog.toFixed(\n                0\n              )}%, Drawn:  ${homeForm.oddsReliabilityDrawAsUnderdog.toFixed(\n                0\n              )}%, Lost:  ${homeForm.oddsReliabilityLoseAsUnderdog.toFixed(\n                0\n              )}%`;\n        favouriteRecordAway =\n          \"No previous fixtures match the profile of this game.\";\n      } else if (!homeForm.oddsReliabilityWin && !awayForm.oddsReliabilityWin) {\n        favouriteRecordHome =\n          \"No previous fixtures match the profile of this game.\";\n        favouriteRecordAway =\n          \"No previous fixtures match the profile of this game.\";\n      }\n\n      // let homeAttackStrength = await getAttackStrength(\n      //   homeForm.ScoredOverall / 10\n      // );\n\n      const attackingMetricsHome = {\n        // averagePossession: homeForm.AveragePossessionOverall,\n        \"Average Dangerous Attacks\": homeForm.AverageDangerousAttacksOverall,\n        \"Average Shots\": homeForm.AverageShots,\n        \"Average Shots On Target\": homeForm.AverageShotsOnTargetOverall,\n        \"Average Expected Goals\": homeForm.XGOverall,\n        \"Recent XG\": homeForm.XGlast5 ? homeForm.XGlast5 : homeForm.XGOverall,\n        \"Average Goals\":\n          homeForm.averageScoredLeague !== undefined &&\n          homeForm.averageScoredLeague !== null\n            ? homeForm.averageScoredLeague\n            : homeForm.ScoredOverall / 10,\n      };\n      const attackingMetricsAway = {\n        // averagePossession: awayForm.AveragePossessionOverall,\n        \"Average Dangerous Attacks\": awayForm.AverageDangerousAttacksOverall,\n        \"Average Shots\": awayForm.AverageShots,\n        \"Average Shots On Target\": awayForm.AverageShotsOnTargetOverall,\n        \"Average Expected Goals\": awayForm.XGOverall,\n        \"Recent XG\": awayForm.XGlast5 ? awayForm.XGlast5 : awayForm.XGOverall,\n        \"Average Goals\":\n          awayForm.averageScoredLeague !== undefined &&\n          awayForm.averageScoredLeague !== null\n            ? awayForm.averageScoredLeague\n            : awayForm.ScoredOverall / 10,\n      };\n\n      const defensiveMetricsHome = {\n        \"Clean Sheet Percentage\": 100 - homeForm.CleanSheetPercentage,\n        \"Average XG Against\": homeForm.XGAgainstAvgOverall,\n        \"Recent XG Against\": homeForm.XGAgainstlast5\n          ? homeForm.XGAgainstlast5\n          : homeForm.XGAgainstAvgOverall,\n        \"Average Goals Against\":\n          homeForm.averageConceededLeague !== undefined &&\n          homeForm.averageConceededLeague !== null\n            ? homeForm.averageConceededLeague\n            : homeForm.ConcededOverall / 10,\n      };\n\n      const defensiveMetricsAway = {\n        \"Clean Sheet Percentage\": 100 - awayForm.CleanSheetPercentage,\n        \"Average XG Against\": awayForm.XGAgainstAvgOverall,\n        \"Recent XG Against\": awayForm.XGAgainstlast5\n          ? awayForm.XGAgainstlast5\n          : awayForm.XGAgainstAvgOverall,\n        \"Average Goals Against\":\n          awayForm.averageConceededLeague !== undefined &&\n          awayForm.averageConceededLeague !== null\n            ? awayForm.averageConceededLeague\n            : awayForm.ConcededOverall / 10,\n      };\n\n   \n\n      let [formPointsHome, testArrayHome] = await getPointsFromGames(\n        gameStats.home[2].WDLRecord\n      );\n      let [formPointsAway, testArrayAway] = await getPointsFromGames(\n        gameStats.away[2].WDLRecord\n      );\n\n      let rollingGoalDiffHome = [\n        (gameStats.home[0].ScoredOverall - gameStats.home[0].ConcededOverall) /\n          10,\n        (gameStats.home[1].ScoredOverall - gameStats.home[1].ConcededOverall) /\n          6,\n        (gameStats.home[2].ScoredOverall - gameStats.home[2].ConcededOverall) /\n          5,\n      ];\n\n      let rollingGoalDiffAway = [\n        (gameStats.away[0].ScoredOverall - gameStats.away[0].ConcededOverall) /\n          10,\n        (gameStats.away[1].ScoredOverall - gameStats.away[1].ConcededOverall) /\n          6,\n        (gameStats.away[2].ScoredOverall - gameStats.away[2].ConcededOverall) /\n          5,\n      ];\n\n      const formDataMatch = [];\n\n      formDataMatch.push({\n        btts: game.btts_potential,\n      });\n\n      const formDataHome = [];\n\n      formDataHome.push({\n        name: game.homeTeam,\n        Last5: gameStats.home[2].LastFiveForm,\n        LeagueOrAll: gameStats.home[2].LeagueOrAll,\n        AverageGoals: homeForm.ScoredOverall / 10,\n        AverageConceeded: homeForm.ConcededOverall / 10,\n        AverageXG: homeForm.XGOverall,\n        AverageXGConceded: homeForm.XGAgainstAvgOverall,\n        AveragePossession: homeForm.AveragePossessionOverall,\n        AverageShotsOnTarget: homeForm.AverageShotsOnTargetOverall,\n        AverageDangerousAttacks: homeForm.AverageDangerousAttacksOverall,\n        homeOrAway: \"Home\",\n        leaguePosition: homeForm.LeaguePosition,\n        Last5PPG: homeForm.PPG,\n        SeasonPPG: homeForm.SeasonPPG,\n        formRun: homeForm.formRun,\n        goalDifference: homeForm.goalDifference,\n        goalDifferenceHomeOrAway: homeForm.goalDifferenceHomeOrAway,\n        CardsTotal: homeForm.CardsTotal || \"-\",\n        CornersAverage: homeForm.AverageCorners || \"-\",\n        FormTextStringHome: formTextStringHome,\n        FavouriteRecord:\n          favouriteRecordHome + `. ${homeForm.reliabilityString}`,\n        BTTSArray: bttsArrayHome,\n        Results: homeForm.resultsAll,\n        ResultsHorA: homeForm.resultsHome.reverse(),\n        XGSwing: homeForm.XGChangeRecently,\n        styleOfPlayOverall: homeForm.styleOfPlayOverall,\n        styleOfPlayHome: homeForm.styleOfPlayHome,\n      });\n\n      const formDataAway = [];\n\n      formDataAway.push({\n        name: game.awayTeam,\n        Last5: gameStats.away[2].LastFiveForm,\n        LeagueOrAll: gameStats.away[2].LeagueOrAll,\n        AverageGoals: awayForm.ScoredOverall / 10,\n        AverageConceeded: awayForm.ConcededOverall / 10,\n        AverageXG: awayForm.XGOverall,\n        AverageXGConceded: awayForm.XGAgainstAvgOverall,\n        AveragePossession: awayForm.AveragePossessionOverall,\n        AverageShotsOnTarget: awayForm.AverageShotsOnTargetOverall,\n        AverageDangerousAttacks: awayForm.AverageDangerousAttacksOverall,\n        homeOrAway: \"Away\",\n        leaguePosition: awayForm.LeaguePosition,\n        Last5PPG: awayForm.PPG,\n        SeasonPPG: awayForm.SeasonPPG,\n        formRun: awayForm.formRun,\n        goalDifference: awayForm.goalDifference,\n        goalDifferenceHomeOrAway: awayForm.goalDifferenceHomeOrAway,\n        CardsTotal: awayForm.CardsTotal || \"-\",\n        CornersAverage: awayForm.AverageCorners || \"-\",\n        FormTextStringAway: formTextStringAway,\n        FavouriteRecord:\n          favouriteRecordAway + `. ${awayForm.reliabilityString}`,\n        BTTSArray: bttsArrayAway,\n        Results: awayForm.resultsAll,\n        ResultsHorA: awayForm.resultsAway.reverse(),\n        XGSwing: awayForm.XGChangeRecently,\n        styleOfPlayOverall: awayForm.styleOfPlayOverall,\n        styleOfPlayAway: awayForm.styleOfPlayAway,\n      });\n\n      ReactDOM.render(\n        <div style={style}>\n          <div className=\"H2HStats\" id={`H2HStats${game.id}`}></div>\n          <div className=\"TrendsHome\" id={`TrendsHome${game.id}`}></div>\n          <div className=\"TrendsAway\" id={`TrendsAway${game.id}`}></div>\n        </div>,\n        document.getElementById(\"history\" + homeTeam)\n      );\n\n   \n\n      // function StatsHome() {\n      //   return (\n      //     <div className=\"flex-childOne\">\n      //       <ul style={style}>\n      //         <Stats\n      //           style={style}\n      //           homeOrAway=\"Home\"\n      //           gameCount={divider}\n      //           key={formDataHome[0].name}\n      //           last5={formDataHome[0].Last5}\n      //           homeOrAwayResults={gameArrayHomeTeamHomeGames}\n      //           LeagueOrAll={formDataHome[0].LeagueOrAll}\n      //           className={\"KeyStatsHome\"}\n      //           name={formDataHome[0].name}\n      //           goals={homeForm.avgScored}\n      //           conceeded={homeForm.avgConceeded}\n      //           XG={homeForm.XGOverall.toFixed(2)}\n      //           XGConceded={homeForm.XGAgainstAvgOverall.toFixed(2)}\n      //           XGSwing={homeForm.XGChangeRecently}\n      //           possession={homeForm.AveragePossessionOverall.toFixed(2)}\n      //           sot={homeForm.AverageShotsOnTargetOverall.toFixed(2)}\n      //           dangerousAttacks={\n      //             homeForm.AverageDangerousAttacksOverall !== 0\n      //               ? homeForm.AverageDangerousAttacksOverall.toFixed(2)\n      //               : homeForm.AverageDangerousAttacks\n      //           }\n      //           leaguePosition={\n      //             formDataHome[0].leaguePosition !== undefined &&\n      //             formDataHome[0].leaguePosition !== \"undefined\"\n      //               ? formDataHome[0].leaguePosition\n      //               : 0\n      //           }\n      //           rawPosition={\n      //             game.homeRawPosition !== undefined &&\n      //             game.homeRawPosition !== \"undefined\"\n      //               ? game.homeRawPosition\n      //               : 0\n      //           }\n      //           homeOrAwayLeaguePosition={\n      //             game.homeTeamHomePosition !== undefined &&\n      //             game.homeTeamHomePosition !== \"undefined\"\n      //               ? game.homeTeamHomePosition\n      //               : 0\n      //           }\n      //           winPercentage={homeForm.homePPGAv ? homeForm.homePPGAv : \"N/A\"}\n      //           lossPercentage={\n      //             game.homeTeamLossPercentage\n      //               ? game.homeTeamLossPercentage\n      //               : \"N/A\"\n      //           }\n      //           drawPercentage={\n      //             game.homeTeamDrawPercentage\n      //               ? game.homeTeamDrawPercentage\n      //               : \"N/A\"\n      //           }\n      //           ppg={formDataHome[0].SeasonPPG}\n      //           formTrend={[\n      //             homeTenGameAverage.toFixed(2),\n      //             homeSixGameAverage.toFixed(2),\n      //             homeFiveGameAverage.toFixed(2),\n      //           ]}\n      //           formRun={homeForm.resultsAll.reverse()}\n      //           goalDifference={formDataHome[0].goalDifference}\n      //           goalDifferenceHomeOrAway={\n      //             formDataHome[0].goalDifferenceHomeOrAway\n      //           }\n      //           BttsPercentage={formDataHome[0].BttsPercentage}\n      //           BttsPercentageHomeOrAway={\n      //             formDataHome[0].BttsPercentageHomeOrAway\n      //           }\n      //           BTTSArray={formDataHome[0].BTTSArray}\n      //           Results={formDataHome[0].Results}\n      //           ResultsHorA={formDataHome[0].ResultsHorA}\n      //           CardsTotal={formDataHome[0].CardsTotal}\n      //           CornersAverage={homeForm.AverageCorners}\n      //           ScoredBothHalvesPercentage={\n      //             formDataHome[0].ScoredBothHalvesPercentage\n      //           }\n      //           FormTextString={formDataHome[0].FormTextStringHome}\n      //           FavouriteRecord={formDataHome[0].FavouriteRecord}\n      //           StyleOfPlay={formDataHome[0].styleOfPlayOverall}\n      //           StyleOfPlayHomeOrAway={formDataHome[0].styleOfPlayHome}\n      //         />\n      //       </ul>\n      //     </div>\n      //   );\n      // }\n\n      // function StatsAway() {\n      //   return (\n      //     <div className=\"flex-childTwo\">\n      //       <ul style={style}>\n      //         <Stats\n      //           style={style}\n      //           homeOrAway=\"Away\"\n      //           gameCount={divider}\n      //           key={formDataAway[0].name}\n      //           last5={formDataAway[0].Last5}\n      //           homeOrAwayResults={gameArrayAwayTeamAwayGames}\n      //           LeagueOrAll={formDataAway[0].LeagueOrAll}\n      //           className={\"KeyStatsAway\"}\n      //           classNameTwo={\"FormStatsAway\"}\n      //           name={formDataAway[0].name}\n      //           goals={awayForm.avgScored}\n      //           conceeded={awayForm.avgConceeded}\n      //           XG={awayForm.XGOverall.toFixed(2)}\n      //           XGConceded={awayForm.XGAgainstAvgOverall.toFixed(2)}\n      //           XGSwing={awayForm.XGChangeRecently}\n      //           //todo add goal diff and btts percentages\n      //           possession={awayForm.AveragePossessionOverall.toFixed(2)}\n      //           rawPosition={game.awayRawPosition ? game.awayRawPosition : 0}\n      //           sot={awayForm.AverageShotsOnTargetOverall.toFixed(2)}\n      //           dangerousAttacks={\n      //             awayForm.AverageDangerousAttacksOverall !== 0\n      //               ? awayForm.AverageDangerousAttacksOverall.toFixed(2)\n      //               : awayForm.AverageDangerousAttacks\n      //           }\n      //           leaguePosition={\n      //             formDataAway[0].leaguePosition !== undefined &&\n      //             formDataAway[0].leaguePosition !== \"undefined\"\n      //               ? formDataAway[0].leaguePosition\n      //               : 0\n      //           }\n      //           homeOrAwayLeaguePosition={\n      //             game.awayTeamAwayPosition !== undefined &&\n      //             game.awayTeamAwayPosition !== \"undefinedundefined\"\n      //               ? game.awayTeamAwayPosition\n      //               : 0\n      //           }\n      //           winPercentage={awayForm.awayPPGAv ? awayForm.awayPPGAv : \"N/A\"}\n      //           lossPercentage={\n      //             game.awayTeamLossPercentage\n      //               ? game.awayTeamLossPercentage\n      //               : \"N/A\"\n      //           }\n      //           drawPercentage={\n      //             game.awayTeamDrawPercentage\n      //               ? game.awayTeamDrawPercentage\n      //               : \"N/A\"\n      //           }\n      //           ppg={formDataAway[0].SeasonPPG}\n      //           formTrend={[\n      //             awayTenGameAverage.toFixed(2),\n      //             awaySixGameAverage.toFixed(2),\n      //             awayFiveGameAverage.toFixed(2),\n      //           ]}\n      //           formRun={awayForm.resultsAll.reverse()}\n      //           goalDifference={formDataAway[0].goalDifference}\n      //           goalDifferenceHomeOrAway={\n      //             formDataAway[0].goalDifferenceHomeOrAway\n      //           }\n      //           BttsPercentage={formDataAway[0].BttsPercentage}\n      //           BttsPercentageHomeOrAway={\n      //             formDataAway[0].BttsPercentageHomeOrAway\n      //           }\n      //           BTTSArray={formDataAway[0].BTTSArray}\n      //           Results={formDataAway[0].Results}\n      //           ResultsHorA={formDataAway[0].ResultsHorA}\n      //           CardsTotal={formDataAway[0].CardsTotal}\n      //           CornersAverage={awayForm.AverageCorners}\n      //           ScoredBothHalvesPercentage={\n      //             formDataAway[0].ScoredBothHalvesPercentage\n      //           }\n      //           FormTextString={formDataAway[0].FormTextStringAway}\n      //           FavouriteRecord={formDataAway[0].FavouriteRecord}\n      //           StyleOfPlay={formDataAway[0].styleOfPlayOverall}\n      //           StyleOfPlayHomeOrAway={formDataAway[0].styleOfPlayAway}\n      //         />\n      //       </ul>\n      //     </div>\n      //   );\n      // }\n\n      // let id, team1, team2, timestamp, homeGoals, awayGoals;\n\n      // async function getGameIdByHomeTeam(games, homeTeamName) {\n      //   const matchingGames = games.filter((game) =>\n      //     game.homeTeam.includes(homeTeamName)\n      //   );\n      //   if (matchingGames.length > 0) {\n      //     return matchingGames[0];\n      //   } else {\n      //     return null; // or any other value you prefer to return if no match is found\n      //   }\n      // }\n\n      // const matchingGame = await getGameIdByHomeTeam(\n      //   arrayOfGames,\n      //   game.homeTeam\n      // );\n\n      // if (matchingGame) {\n      //   id = matchingGame.id.toString();\n      //   team1 = matchingGame.homeTeam;\n      //   team2 = matchingGame.awayTeam;\n      //   timestamp = matchingGame.time;\n      //   homeGoals = matchingGame.homeGoals;\n      //   awayGoals = matchingGame.awayGoals;\n      // } else {\n      //   id = \"0\";\n      //   team1 = \"N/A\";\n      //   team2 = \"N/A\";\n      //   timestamp = 1;\n      //   homeGoals = \"-\";\n      //   awayGoals = \"-\";\n      // }\n\n      // if (homeForm.completeData === true && game.completeData === true) {\n      //   ReactDOM.render(\n      //     <>\n      //       <div style={style}>\n      //         <Collapsable\n      //           buttonText={\"Lineups & match action\"}\n      //           classNameButton=\"Lineups\"\n      //           element={\n      //             <>\n      //               <SofaLineupsWidget\n      //                 id={id}\n      //                 team1={team1}\n      //                 team2={team2}\n      //                 time={timestamp}\n      //                 homeGoals={homeGoals}\n      //                 awayGoals={awayGoals}\n      //               ></SofaLineupsWidget>\n      //             </>\n      //           }\n      //         />\n      //         <div style={style}>\n      //           <Div className=\"MatchTime\" text={`Kick off: ${time} GMT`}></Div>\n      //         </div>\n      //         <div id=\"AIInsightsContainer\" className=\"AIInsightsContainer\">\n      //         {!paid ? (\n      //           <div>Paid feature</div>\n      //         ) : (\n      //           <div></div>\n      //         )}\n      //           <Button\n      //             className=\"AIInsights\"\n      //             onClickEvent={() => generateAIInsights(game.id, homeForm, awayForm)}\n      //             text={\"Generate AI Insights\"}\n      //             disabled={!paid}\n      //           ></Button>\n      //         </div>\n      //         <div className=\"flex-container\">\n      //           <StatsHome />\n      //           <StatsAway />\n      //         </div>\n      //         <div className=\"Chart\" id={`Chart${game.id}`} style={style}>\n      //           <RadarChart\n      //             title=\"XG Tipping Strength Ratings - All Games\"\n      //             data={[\n      //               homeAttackStrength,\n      //               homeDefenceStrength,\n      //               homePossessionStrength,\n      //               homeXGForStrength,\n      //               homeXGAgainstStrength,\n      //               homeDirectnessStrength,\n      //               homeAccuracyOverallStrength,\n      //             ]}\n      //             data2={[\n      //               awayAttackStrength,\n      //               awayDefenceStrength,\n      //               awayPossessionStrength,\n      //               awayXGForStrength,\n      //               awayXGAgainstStrength,\n      //               awayDirectnessStrength,\n      //               awayAccuracyOverallStrength,\n      //             ]}\n      //             team1={game.homeTeam}\n      //             team2={game.awayTeam}\n      //           ></RadarChart>\n      //           <RadarChart\n      //             title=\"XG Tipping Strength Ratings - Last 5 games\"\n      //             data={[\n      //               homeAttackStrengthLast5,\n      //               homeDefenceStrengthLast5,\n      //               homePossessionStrengthLast5,\n      //               homeXGForStrengthLast5,\n      //               homeXGAgainstStrengthLast5,\n      //               homeDirectnessStrengthLast5,\n      //               homeAccuracyOverallStrengthLast5,\n      //             ]}\n      //             data2={[\n      //               awayAttackStrengthLast5,\n      //               awayDefenceStrengthLast5,\n      //               awayPossessionStrengthLast5,\n      //               awayXGForStrengthLast5,\n      //               awayXGAgainstStrengthLast5,\n      //               awayDirectnessStrengthLast5,\n      //               awayAccuracyOverallStrengthLast5,\n      //             ]}\n      //             team1={game.homeTeam}\n      //             team2={game.awayTeam}\n      //           ></RadarChart>\n      //           <RadarChart\n      //             title=\"XG Tipping Strength Ratings - Home/Away Games Only\"\n      //             data={[\n      //               homeOnlyAttackStrength,\n      //               homeOnlyDefenceStrength,\n      //               homeOnlyPossessionStrength,\n      //               homeOnlyXGForStrength,\n      //               homeOnlyXGAgainstStrength,\n      //               homeOnlyDirectnessStrength,\n      //               homeOnlyAccuracyOverallStrength,\n      //             ]}\n      //             data2={[\n      //               awayOnlyAttackStrength,\n      //               awayOnlyDefenceStrength,\n      //               awayOnlyPossessionStrength,\n      //               awayOnlyXGForStrength,\n      //               awayOnlyXGAgainstStrength,\n      //               awayOnlyDirectnessStrength,\n      //               awayOnlyAccuracyOverallStrength,\n      //             ]}\n      //             team1={game.homeTeam}\n      //             team2={game.awayTeam}\n      //           ></RadarChart>\n      //           <DoughnutChart\n      //             data={[homeForm.XGRating, awayForm.XGRating]}\n      //             homeTeam={game.homeTeam}\n      //             awayTeam={game.awayTeam}\n      //           ></DoughnutChart>\n      //           <BarChartTwo\n      //             text=\"Recent XG Differential Swing\"\n      //             homeTeam={homeForm.teamName}\n      //             awayTeam={awayForm.teamName}\n      //             data1={[homeForm.XGChangeRecently.toFixed(2)]}\n      //             data2={[awayForm.XGChangeRecently.toFixed(2)]}\n      //           ></BarChartTwo>\n      //           <BarChart\n      //             text=\"H2H - Home Team | Away Team\"\n      //             data1={[\n      //               homeForm.avgScored * 2,\n      //               awayForm.avgConceeded * 2,\n      //               homeForm.avPointsAll * 3,\n      //               homeForm.XGOverall * 2,\n      //               awayForm.XGAgainstAvgOverall * 2,\n      //               homeForm.AverageShotsOnTargetOverall,\n      //               homeForm.AverageDangerousAttacksOverall !== 0\n      //                 ? homeForm.AverageDangerousAttacksOverall / 7.5\n      //                 : homeForm.AverageDangerousAttacks / 7.5,\n      //               homeForm.AveragePossessionOverall / 7.5,\n      //               homeForm.goalDifferenceHomeOrAway / 10,\n      //               homeForm.AverageCorners,\n      //             ]}\n      //             data2={[\n      //               awayForm.avgScored * 2,\n      //               homeForm.avgConceeded * 2,\n      //               awayForm.avPointsAll * 3,\n      //               awayForm.XGOverall * 2,\n      //               homeForm.XGAgainstAvgOverall * 2,\n      //               awayForm.AverageShotsOnTargetOverall,\n      //               awayForm.AverageDangerousAttacksOverall !== 0\n      //                 ? awayForm.AverageDangerousAttacksOverall / 7.5\n      //                 : awayForm.AverageDangerousAttacks / 7.5,\n      //               awayForm.AveragePossessionOverall / 7.5,\n      //               awayForm.goalDifferenceHomeOrAway / 10,\n      //               awayForm.AverageCorners,\n      //             ]}\n      //           ></BarChart>\n      //           <Chart\n      //             height={3}\n      //             depth={0}\n      //             data1={formArrayHome}\n      //             data2={formArrayAway}\n      //             team1={game.homeTeam}\n      //             team2={game.awayTeam}\n      //             type={chartType}\n      //             tension={0}\n      //           ></Chart>\n      //           <MultilineChart\n      //             height={\n      //               Math.max(\n      //                 rollingGoalDiffTotalHome[\n      //                   rollingGoalDiffTotalHome.length - 1\n      //                 ],\n      //                 rollingGoalDiffTotalAway[\n      //                   rollingGoalDiffTotalAway.length - 1\n      //                 ]\n      //               ) > 2\n      //                 ? Math.max(\n      //                     rollingGoalDiffTotalHome[\n      //                       rollingGoalDiffTotalHome.length - 1\n      //                     ],\n      //                     rollingGoalDiffTotalAway[\n      //                       rollingGoalDiffTotalAway.length - 1\n      //                     ]\n      //                   )\n      //                 : 2\n      //             }\n      //             depth={\n      //               Math.min(\n      //                 rollingGoalDiffTotalHome[\n      //                   rollingGoalDiffTotalHome.length - 1\n      //                 ],\n      //                 rollingGoalDiffTotalAway[\n      //                   rollingGoalDiffTotalAway.length - 1\n      //                 ]\n      //               ) < -2\n      //                 ? Math.min(\n      //                     rollingGoalDiffTotalHome[\n      //                       rollingGoalDiffTotalHome.length - 1\n      //                     ],\n      //                     rollingGoalDiffTotalAway[\n      //                       rollingGoalDiffTotalAway.length - 1\n      //                     ]\n      //                   )\n      //                 : -2\n      //             }\n      //             data1={rollingGoalDiffTotalHome}\n      //             data2={rollingGoalDiffTotalAway}\n      //             data3={rollingXGDiffTotalHome}\n      //             data4={rollingXGDiffTotalAway}\n      //             team1={game.homeTeam}\n      //             team2={game.awayTeam}\n      //             type={\"Goal/XG difference over time\"}\n      //             tension={0.5}\n      //           ></MultilineChart>\n      //         </div>\n      //         <Div\n      //           text={`Last league games (most recent first)`}\n      //           className={\"LastGameHeader\"}\n      //         ></Div>\n      //         <div className=\"flex-container\">\n      //           <div className=\"flex-childOneOverviewSmall\">{overviewHome}</div>\n      //           <div className=\"flex-childTwoOverviewSmall\">{overviewAway}</div>\n      //         </div>\n      //         <h2>Results from similar profile games</h2>\n      //         <span>(Games where each team had similar odds)</span>\n      //         <h3>Most recent first</h3>\n      //         <div className=\"flex-container-similar\">\n      //           <div className=\"flex-childOneOverviewSmall\">\n      //             {similarGamesHome}\n      //           </div>\n      //           <div className=\"flex-childTwoOverviewSmall\">\n      //             {similarGamesAway}\n      //           </div>\n      //         </div>\n      //         <input type=\"hidden\" name=\"IL_IN_ARTICLE\" />\n      //         <Button\n      //           className=\"MoreStats\"\n      //           onClickEvent={() =>\n      //             getTeamStats(\n      //               game.id,\n      //               game.homeTeam,\n      //               game.awayTeam,\n      //               formDataHome[0].BttsPercentage,\n      //               formDataHome[0].BttsPercentageHomeOrAway,\n      //               formDataAway[0].BttsPercentage,\n      //               formDataAway[0].BttsPercentageHomeOrAway\n      //             )\n      //           }\n      //           text={\"Fixture trends + AI Preview\"}\n      //         ></Button>\n      //       </div>\n      //     </>,\n      //     document.getElementById(\"stats\" + homeTeam)\n      //   );\n      // } else if (\n      //   homeForm.completeData === false ||\n      //   game.completeData === false\n      // ) {\n      //   ReactDOM.render(\n      //     <>\n      //       <div style={style}>\n      //         <Collapsable\n      //           buttonText={\"Lineups & match action\"}\n      //           classNameButton=\"Lineups\"\n      //           element={\n      //             <>\n      //               <SofaLineupsWidget\n      //                 id={id}\n      //                 team1={team1}\n      //                 team2={team2}\n      //                 time={timestamp}\n      //                 homeGoals={homeGoals}\n      //                 awayGoals={awayGoals}\n      //               ></SofaLineupsWidget>\n      //             </>\n      //           }\n      //         />\n      //         <div className=\"Chart\" id={`Chart${game.id}`} style={style}>\n      //           <RadarChart\n      //             title=\"XG Tipping Strength Ratings - All Games\"\n      //             data={[\n      //               homeAttackStrength,\n      //               homeDefenceStrength,\n      //               homePossessionStrength,\n      //               homeXGForStrength,\n      //               homeXGAgainstStrength,\n      //               homeDirectnessStrength,\n      //               homeAccuracyOverallStrength,\n      //             ]}\n      //             data2={[\n      //               awayAttackStrength,\n      //               awayDefenceStrength,\n      //               awayPossessionStrength,\n      //               awayXGForStrength,\n      //               awayXGAgainstStrength,\n      //               awayDirectnessStrength,\n      //               awayAccuracyOverallStrength,\n      //             ]}\n      //             team1={game.homeTeam}\n      //             team2={game.awayTeam}\n      //           ></RadarChart>\n      //         </div>\n      //         <div style={style}>\n      //           <Div className=\"MatchTime\" text={`Kick off: ${time} GMT`}></Div>\n      //           {/* <Div\n      //             text={`Last league games (most recent first)`}\n      //             className={\"LastGameHeader\"}\n      //           ></Div> */}\n      //         </div>\n      //         {/* <div className=\"flex-container\">\n      //           <div className=\"flex-childOneOverviewSmall\">{overviewHome}</div>\n      //           <div className=\"flex-childTwoOverviewSmall\">{overviewAway}</div>\n      //         </div>\n      //         <div className=\"flex-container\">\n      //           <StatsHome />\n      //           <StatsAway />\n      //         </div> */}\n      //         <h2>Results from similar profile games</h2>\n      //         <span>(Games where each team had similar odds)</span>\n      //         <h3>Most recent first</h3>\n      //         <div className=\"flex-container-similar\">\n      //           <div className=\"flex-childOneOverviewSmall\">\n      //             {similarGamesHome}\n      //           </div>\n      //           <div className=\"flex-childTwoOverviewSmall\">\n      //             {similarGamesAway}\n      //           </div>\n      //         </div>\n      //         <input type=\"hidden\" name=\"IL_IN_ARTICLE\" />\n      //         <Button\n      //           className=\"MoreStats\"\n      //           onClickEvent={() =>\n      //             getTeamStats(\n      //               game.id,\n      //               game.homeTeam,\n      //               game.awayTeam,\n      //               formDataHome[0].BttsPercentage,\n      //               formDataHome[0].BttsPercentageHomeOrAway,\n      //               formDataAway[0].BttsPercentage,\n      //               formDataAway[0].BttsPercentageHomeOrAway\n      //             )\n      //           }\n      //           text={\"Fixture trends + AI Preview\"}\n      //         ></Button>\n      //       </div>\n      //     </>,\n      //     document.getElementById(\"stats\" + homeTeam)\n      //   );\n      // } else {\n      //   ReactDOM.render(\n      //     <>\n      //       <div style={style}>\n      //         <Collapsable\n      //           buttonText={\"Lineups & match action\"}\n      //           classNameButton=\"Lineups\"\n      //           element={\n      //             <>\n      //               <SofaLineupsWidget\n      //                 id={id}\n      //                 team1={team1}\n      //                 team2={team2}\n      //                 time={timestamp}\n      //                 homeGoals={homeGoals}\n      //                 awayGoals={awayGoals}\n      //               ></SofaLineupsWidget>\n      //             </>\n      //           }\n      //         />\n      //         <div style={style}>\n      //           <Div className=\"MatchTime\" text={`Kick off: ${time} GMT`}></Div>\n      //         </div>\n      //         <div className=\"flex-container\">\n      //           <StatsHome />\n      //           <StatsAway />\n      //         </div>\n      //         <Div\n      //           text={`AI Preview, last league games & h2h records (paid feature only)`}\n      //           className={\"LastGameHeader\"}\n      //         ></Div>\n      //       </div>\n      //     </>,\n      //     document.getElementById(\"stats\" + homeTeam)\n      //   );\n      // }\n    }\n\n    // ReactDOM.render(\n    //   <Button\n    //     className=\"MoreStats\"\n    //     style={style}\n    //     onClickEvent={() =>\n    //       getTeamStats(\n    //         game.id,\n    //         game.homeTeam,\n    //         game.awayTeam,\n    //         formDataHome[0].BttsPercentage,\n    //         formDataHome[0].BttsPercentageHomeOrAway,\n    //         formDataAway[0].BttsPercentage,\n    //         formDataAway[0].BttsPercentageHomeOrAway\n    //       )\n    //     }\n    //     text={\"Fixture trends\"}\n    //   ></Button>,\n    //   document.getElementById(`H2HStats${game.id}`)\n    // );\n  }\n}\n","/Users/greg/Development/Predictor/src/components/StatTable.js",["394"],"import React, { useState } from \"react\";\nimport { FormControl, InputLabel, Select, MenuItem } from \"@mui/material\";\n\n// Utility to convert camelCase or mixedCase to \"Proper Case With Spaces\"\nconst formatLabel = (key) =>\n  key\n    .replace(/([A-Z])/g, \" $1\") // Add space before capital letters\n    .replace(/^./, (str) => str.toUpperCase()); // Capitalize first letter\n\nconst RankingTable = ({ rankingStats }) => {\n  const statKeys = Object.keys(rankingStats);\n  const [selectedStat, setSelectedStat] = useState(statKeys[0]);\n    console.log(rankingStats)\n  const handleChange = (e) => {\n    setSelectedStat(e.target.value);\n  };\n\n  const data = rankingStats[selectedStat];\n\n  return (\n    <div className=\"LeagueStatsTable\">\n      <FormControl\n        sx={{\n          marginBottom: 2,\n          marginTop: 1,\n          width: \"90%\",\n          \"& .MuiOutlinedInput-root\": {\n            backgroundColor: \"#f0f0f0\",\n            fontSize: \"1.25em\",\n            width: \"50%\",\n            marginLeft: \"auto\",\n            marginRight: \"auto\",\n            fontFamily: \"'Open Sans', sans-serif\",\n            height: \"2em\",\n            color: \"#fe8c00\",\n            borderRadius: 2,\n            \"& .MuiSelect-icon\": {\n              color: \"#fe8c00\",\n            },\n            \"& fieldset\": {\n              borderColor: \"#ccc !important\",\n              borderWidth: \"0px\",\n            },\n            \"&:hover fieldset\": {\n              borderWidth: \"0px\",\n            },\n            \"&.Mui-focused fieldset\": {\n              borderWidth: \"0px\",\n            },\n          },\n        }}\n      >\n        <Select\n          labelId=\"stat-select-label\"\n          id=\"stat-select\"\n          value={selectedStat}\n          label=\"Choose a stat\"\n          onChange={handleChange}\n          displayEmpty\n        >\n          {statKeys.map((key) => (\n            <MenuItem key={key} value={key}>\n              {formatLabel(key)}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n      <table\n        style={{ marginTop: \"1em\", borderCollapse: \"collapse\", width: \"95%\" }}\n      >\n        <thead>\n          <tr>\n            <th>Rank</th>\n            <th>Team</th>\n            <th>Matches</th>\n            <th>{formatLabel(selectedStat)}</th>\n          </tr>\n        </thead>\n        <tbody>\n          {data.map(({ team, statistics }, index) => (\n            <tr key={team.id}>\n              <td>{index + 1}</td>\n              <td>{team.name}</td>\n              <td>{statistics.matches}</td>\n              <td>\n                {typeof statistics[selectedStat] === \"number\"\n                  ? Number.isInteger(statistics[selectedStat])\n                    ? statistics[selectedStat]\n                    : statistics[selectedStat].toFixed(2)\n                  : statistics[selectedStat] ?? \"N/A\"}\n              </td>{\" \"}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default RankingTable;\n","/Users/greg/Development/Predictor/src/logic/compareFormTrend.js",[],"/Users/greg/Development/Predictor/src/components/Carousel.js",[],"/Users/greg/Development/Predictor/src/logic/getBTTSPotential.js",[],"/Users/greg/Development/Predictor/src/components/Increment.js",[],"/Users/greg/Development/Predictor/src/components/PlayerStatsList.js",[],"/Users/greg/Development/Predictor/src/components/StreakStats.js",[],"/Users/greg/Development/Predictor/src/components/CollapsableStats.js",[],"/Users/greg/Development/Predictor/src/components/MissingPlayersList.js",[],"/Users/greg/Development/Predictor/src/components/TeamRankingsFlexView.js",[],"/Users/greg/Development/Predictor/src/components/MultitypeChart.js",["395"],"import React from \"react\";\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n} from \"chart.js\";\nimport { Bar, Line } from \"react-chartjs-2\";\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\nconst MultiTypeChart = ({ dataArray, text }) => {\n  // 1. Process the Data: Calculate the difference and labels\n  const labels = dataArray.map((_, index) => `Game ${index + 1}`); // Create labels like \"Index 1\", \"Index 2\", etc.\n  const barData = dataArray.map((item) => item[0] - item[1]); // Calculate the difference\n\n  // Create an array of colors based on the sign of the bar data\n  const backgroundColors = barData.map((value) =>\n    value >= 0 ? \"#01a501\" : \"#ae1001ff\"\n  );\n\n  // 2. Chart Data Structure:\n  const data = {\n    labels: labels,\n    datasets: [\n      {\n        type: \"bar\",\n        label: \"XG Difference\",\n        data: barData,\n        backgroundColor: backgroundColors, // Use the dynamic colors\n        borderColor: backgroundColors, // Match the border color\n        borderWidth: 0,\n      },\n    ],\n  };\n\n  // 3. Chart Options (customize as needed):\n  const options = {\n    responsive: true,\n    aspectRatio: 1.2,\n    maintainAspectRatio: true,\n    plugins: {\n      title: {\n        display: true,\n        text: text,\n        color: \"#fe8c00\"\n      },\n      legend: {\n        // Add this legend configuration\n        display: false, // Set display to false to hide the legend\n      },\n    },\n    scales: {\n      y: {\n        beginAtZero: true, // Start y-axis at 0\n        suggestedMin: -1.5,\n        suggestedMax: 1.5,\n        ticks: {\n          color: \"#fe8c00\",\n        }\n      },\n      x: {\n        ticks: {\n          color: \"#fe8c00\",\n        }\n      },\n    },\n  };\n\n  return <Bar data={data} options={options} className=\"BarChart\" />;\n};\n\nexport default MultiTypeChart;\n","/Users/greg/Development/Predictor/src/components/Div.js",[],"/Users/greg/Development/Predictor/src/components/SofaScore.js",["396"],"import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst SofaLineupsWidget = ({\n  id,\n  team1,\n  team2,\n  time,\n  homeGoals,\n  awayGoals,\n}) => {\n  console.log(team1)\n  const iframeSrc = `https://widgets.sofascore.com/embed/lineups?id=${id}&widgetTheme=light`;\n\n  let differenceInSeconds, minutes;\n  const currentTime = new Date().getTime() / 1000;\n  // Calculate the difference in seconds\n  if (time > 0) {\n    differenceInSeconds = time - currentTime;\n    minutes = Math.floor(differenceInSeconds / 60);\n  } else {\n    minutes = -99999999;\n  }\n\n  if (team1 === \"N/A\") {\n    return <h6>No lineups available for this match yet</h6>;\n  } else if (minutes > 60) {\n    return (\n      <div>\n        <h6>Predicted lineups</h6>\n        <iframe\n          id={`sofa-lineups-embed-${id}`}\n          src={iframeSrc}\n          style={{\n            height: \"786px\",\n            maxWidth: \"800px\",\n            width: \"100%\",\n            border: \"0\",\n          }}\n          scrolling=\"no\"\n          title=\"SofaScore Lineups\"\n        ></iframe>\n        <div\n          style={{ fontSize: \"12px\", fontFamily: \"Open Sans, sans-serif\" }}\n        ></div>\n      </div>\n    );\n  } else if (minutes < 60 && minutes > 0) {\n    return (\n      <div>\n        <h6>Lineups</h6>\n        <iframe\n          id={`sofa-lineups-embed-${id}`}\n          src={iframeSrc}\n          style={{\n            height: \"786px\",\n            maxWidth: \"800px\",\n            width: \"100%\",\n            border: \"0\",\n          }}\n          scrolling=\"no\"\n          title=\"SofaScore Lineups\"\n        ></iframe>\n        <div\n          style={{ fontSize: \"12px\", fontFamily: \"Open Sans, sans-serif\" }}\n        ></div>\n      </div>\n    );\n  } else if (minutes < 0) {\n    return (\n      <div>\n        <div className=\"CurrentScore\">\n          Score: {`${team1}: ${homeGoals} - ${team2}: ${awayGoals}`}\n        </div>\n        <span>Score not live updated</span>\n        <h6 className=\"AttackingMomentum\">Live attacking momentum and goals</h6>\n        <iframe\n          width=\"100%\"\n          height=\"286\"\n          src={`https://widgets.sofascore.com/embed/attackMomentum?id=${id}&widgetTheme=light`}\n          frameborder=\"0\"\n          scrolling=\"no\"\n        ></iframe>\n        <div\n          style={{ fontSize: \"12px\", fontFamily: \"Open Sans, sans-serif\" }}\n        ></div>\n        <h6>Lineups and in-play ratings</h6>\n        <iframe\n          id={`sofa-lineups-embed-${id}`}\n          src={iframeSrc}\n          style={{\n            height: \"786px\",\n            maxWidth: \"800px\",\n            width: \"100%\",\n            border: \"0\",\n          }}\n          scrolling=\"no\"\n          title=\"SofaScore Lineups\"\n        ></iframe>\n        <div\n          style={{ fontSize: \"12px\", fontFamily: \"Open Sans, sans-serif\" }}\n        ></div>\n      </div>\n    );\n  } else {\n    return <h6>{`Lineups coming in approximately ${minutes - 60} minutes`}</h6>;\n  }\n};\n\nSofaLineupsWidget.propTypes = {\n  id: PropTypes.string.isRequired,\n  team1: PropTypes.string.isRequired,\n  team2: PropTypes.string.isRequired,\n};\n\nexport default SofaLineupsWidget;\n","/Users/greg/Development/Predictor/src/components/createStatsDiv.js",["397"],"import React, { Fragment } from \"react\";\nimport { CreateBadge } from \"./createBadge\";\n\nfunction Stats(props) {\n  let shouldOpen = props.clicked;\n\n  function styleForm(formIndicator) {\n    let className;\n    if (formIndicator === \"W\") {\n      className = \"win\";\n    } else if (formIndicator === \"D\") {\n      className = \"draw\";\n    } else if (formIndicator === \"L\") {\n      className = \"loss\";\n    }\n    return className;\n  }\n\n  function styleBTTS(BTTSBoolean) {\n    let className;\n    if (BTTSBoolean === \"\\u2714\") {\n      className = \"BTTSTrue\";\n    } else if (BTTSBoolean === \"\\u2718\") {\n      className = \"BTTSFalse\";\n    }\n    return className;\n  }\n\n  if (props.games === \"all\") {\n    return (\n      <Fragment>\n        <ul className={props.className ? props.className : \"\"} style={props.style ? props.style : {}}>\n          <CreateBadge image={props.badge} alt=\"Team badge\" ClassName={\"ColumnBadge\"} />\n          <li className=\"FormHeader\">League results (most recent on right)</li>\n          <li key={`last5League`} className=\"last5League\">\n            <span className={styleForm(props.Results && props.Results[5] ? props.Results[5] : \"\")}>\n              {props.Results && props.Results[5] ? props.Results[5] : \"\"}\n            </span>\n            <span className={styleForm(props.Results && props.Results[4] ? props.Results[4] : \"\")}>\n              {props.Results && props.Results[4] ? props.Results[4] : \"\"}\n            </span>\n            <span className={styleForm(props.Results && props.Results[3] ? props.Results[3] : \"\")}>\n              {props.Results && props.Results[3] ? props.Results[3] : \"\"}\n            </span>\n            <span className={styleForm(props.Results && props.Results[2] ? props.Results[2] : \"\")}>\n              {props.Results && props.Results[2] ? props.Results[2] : \"\"}\n            </span>\n            <span className={styleForm(props.Results && props.Results[1] ? props.Results[1] : \"\")}>\n              {props.Results && props.Results[1] ? props.Results[1] : \"\"}\n            </span>\n            <span className={styleForm(props.Results && props.Results[0] ? props.Results[0] : \"\")}>\n              {props.Results && props.Results[0] ? props.Results[0] : \"\"}\n            </span>\n          </li>\n          <li className=\"FormHeader\">\n            {props.homeOrAway ? props.homeOrAway : \"N/A\"} form (most recent on right)\n          </li>\n          <li key={`last5${props.homeOrAwayResults ? props.homeOrAwayResults : \"default\"}`} className=\"FormHomeOrAway\">\n            <span className={styleForm(props.ResultsHorA && props.ResultsHorA[5] ? props.ResultsHorA[5] : \"\")}>\n              {props.ResultsHorA && props.ResultsHorA[5] ? props.ResultsHorA[5] : \"\"}\n            </span>\n            <span className={styleForm(props.ResultsHorA && props.ResultsHorA[4] ? props.ResultsHorA[4] : \"\")}>\n              {props.ResultsHorA && props.ResultsHorA[4] ? props.ResultsHorA[4] : \"\"}\n            </span>\n            <span className={styleForm(props.ResultsHorA && props.ResultsHorA[3] ? props.ResultsHorA[3] : \"\")}>\n              {props.ResultsHorA && props.ResultsHorA[3] ? props.ResultsHorA[3] : \"\"}\n            </span>\n            <span className={styleForm(props.ResultsHorA && props.ResultsHorA[2] ? props.ResultsHorA[2] : \"\")}>\n              {props.ResultsHorA && props.ResultsHorA[2] ? props.ResultsHorA[2] : \"\"}\n            </span>\n            <span className={styleForm(props.ResultsHorA && props.ResultsHorA[1] ? props.ResultsHorA[1] : \"\")}>\n              {props.ResultsHorA && props.ResultsHorA[1] ? props.ResultsHorA[1] : \"\"}\n            </span>\n            <span className={styleForm(props.ResultsHorA && props.ResultsHorA[0] ? props.ResultsHorA[0] : \"\")}>\n              {props.ResultsHorA && props.ResultsHorA[0] ? props.ResultsHorA[0] : \"\"}\n            </span>\n          </li>\n          <li\n            key=\"BTTSArrayHomeOrAway\"\n            className=\"BTTSArrayHomeOrAway\"\n            data-cy={props.name ? props.name + \"BTTSArrayHomeOrAway\" : \"BTTSArrayHomeOrAway\"}\n          >\n            <div className=\"BTTSResults\">{props.BTTSArray ? `BTTS` : ``}</div>\n            <span className={styleBTTS(props.BTTSArray && props.BTTSArray[5] ? props.BTTSArray[5] : \"\")}>\n              {props.BTTSArray && props.BTTSArray[5] ? props.BTTSArray[5] : \"\"}\n            </span>\n            <span className={styleBTTS(props.BTTSArray && props.BTTSArray[4] ? props.BTTSArray[4] : \"\")}>\n              {props.BTTSArray && props.BTTSArray[4] ? props.BTTSArray[4] : \"\"}\n            </span>\n            <span className={styleBTTS(props.BTTSArray && props.BTTSArray[3] ? props.BTTSArray[3] : \"\")}>\n              {props.BTTSArray && props.BTTSArray[3] ? props.BTTSArray[3] : \"\"}\n            </span>\n            <span className={styleBTTS(props.BTTSArray && props.BTTSArray[2] ? props.BTTSArray[2] : \"\")}>\n              {props.BTTSArray && props.BTTSArray[2] ? props.BTTSArray[2] : \"\"}\n            </span>\n            <span className={styleBTTS(props.BTTSArray && props.BTTSArray[1] ? props.BTTSArray[1] : \"\")}>\n              {props.BTTSArray && props.BTTSArray[1] ? props.BTTSArray[1] : \"\"}\n            </span>\n            <span className={styleBTTS(props.BTTSArray && props.BTTSArray[0] ? props.BTTSArray[0] : \"\")}>\n              {props.BTTSArray && props.BTTSArray[0] ? props.BTTSArray[0] : \"\"}\n            </span>\n          </li>\n          <div className=\"FormSummaries\">\n            <li className=\"FormSummaryHome\">{props.FormTextString ? props.FormTextString : \"\"}</li>\n            <li className=\"StyleOfPlay\">{`Style - ${props.StyleOfPlay ? props.StyleOfPlay : \"N/A\"}`}</li>\n            <li className=\"StyleOfPlay\">{`${props.homeOrAway ? props.homeOrAway : \"N/A\"} style - ${props.StyleOfPlayHomeOrAway ? props.StyleOfPlayHomeOrAway : \"N/A\"}`}</li>\n            {/* <li className=\"FavouriteSummaryHome\">{props.FavouriteRecord ? props.FavouriteRecord : \"Graphs also only available to paying customers\"}</li> */}\n          </div>\n          <div className=\"AllStats\">\n            <li\n              key=\"TeamScored\"\n              className=\"TeamScored\"\n              data-cy={props.name ? props.name + \"teamScored\" : \"teamScored\"}\n            >\n              {`Avg goals scored - ${props.goals !== undefined ? props.goals : \"N/A\"}`}\n            </li>\n            <li\n              key=\"TeamConceeded\"\n              className=\"TeamConceeded\"\n              data-cy={props.name ? props.name + \"teamConceded\" : \"teamConceded\"}\n            >\n              {`Avg goals conceeded - ${props.conceeded !== undefined ? props.conceeded : \"N/A\"}`}\n            </li>\n            <li\n              key=\"TeamPossession\"\n              className=\"TeamPossession\"\n              data-cy={props.name ? props.name + \"teamPossession\" : \"teamPossession\"}\n            >\n              {`Avg possession - ${props.possession !== undefined ? props.possession : \"N/A\"}%`}\n            </li>\n            <li key=\"TeamXG\" className=\"TeamXG\" data-cy={props.name ? props.name + \"teamXG\" : \"teamXG\"}>\n              {`Avg XG - ${props.XG !== undefined ? props.XG : \"N/A\"}`}\n            </li>\n            <li\n              key=\"TeamXGConceded\"\n              className=\"TeamXGConceded\"\n              data-cy={props.name ? props.name + \"teamXGConceded\" : \"teamXGConceded\"}\n            >\n              {`Avg XG conceded - ${props.XGConceded !== undefined ? props.XGConceded : \"N/A\"}`}\n            </li>\n            <li\n              key=\"TeamXGSwing\"\n              className=\"TeamXGSwing\"\n              data-cy={props.name ? props.name + \"teamXGSwing\" : \"teamXGSwing\"}\n            >\n              {`XG difference swing (last 5): ${props.XGSwing !== undefined ? props.XGSwing?.toFixed(2) : \"N/A\"\n                }`}\n            </li>\n            <li\n              key=\"goalDifference\"\n              className=\"goalDifference\"\n              data-cy={props.name ? props.name + \"goalDifference\" : \"goalDifference\"}\n            >\n              {`Goal difference : `}\n              <span>{props.goalDifference !== undefined ? props.goalDifference : \"N/A\"}</span>\n            </li>\n            <li\n              key=\"goalDifferenceHorA\"\n              className=\"goalDifferenceHorA\"\n              data-cy={props.name ? props.name + \"goalDifference\" : \"goalDifference\"}\n            >\n              {`Goal difference ${props.homeOrAway ? props.homeOrAway : \"N/A\"} : ${props.goalDifferenceHomeOrAway !== undefined ? props.goalDifferenceHomeOrAway : \"N/A\"\n                }`}\n            </li>\n            <li\n              key=\"AverageShots\"\n              className=\"AverageShots\"\n              data-cy={props.name ? props.name + \"AverageShots\" : \"AverageShots\"}\n            >\n              {`Avg shots - ${props.shots !== undefined ? props.shots : \"N/A\"}`}\n            </li>\n            <li\n              key=\"AverageSOT\"\n              className=\"AverageSOT\"\n              data-cy={props.name ? props.name + \"averageSOT\" : \"averageSOT\"}\n            >\n              {`Avg shots on target - ${props.sot !== undefined ? props.sot : \"N/A\"}`}\n            </li>\n            <li\n              key=\"DangerousAttacks\"\n              className=\"DangerousAttacks\"\n              data-cy={props.name ? props.name + \"dangerousAttacks\" : \"dangerousAttacks\"}\n            >\n              {`Avg dangerous attacks - ${props.dangerousAttacks !== undefined ? props.dangerousAttacks : \"N/A\"}`}\n            </li>\n            <li\n              key=\"LeaguePosition\"\n              className=\"LeaguePosition\"\n              data-cy={props.name ? props.name + \"leaguePosition\" : \"leaguePosition\"}\n            >\n              {`League position - ${props.leaguePosition !== undefined ? props.leaguePosition : \"N/A\"\n                }`}\n            </li>\n            <li\n              key=\"WinPercentage\"\n              className=\"WinPercentage\"\n              data-cy={props.name ? props.name + \"WinPercentage\" : \"WinPercentage\"}\n            >\n              {props.homeOrAway && props.winPercentage !== undefined && props.winPercentage !== \"N/A\" ? `${props.homeOrAway} PPG - ${props.winPercentage.toFixed(2)}` : \"N/A\"}\n            </li>\n            <li key=\"PPG\" className=\"PPG\" data-cy={props.name ? props.name + \"PPG\" : \"PPG\"}>\n              {`Season PPG - ${props.ppg !== undefined ? props.ppg : \"N/A\"}`}\n            </li>\n            <li\n              key=\"FormTrend10a\"\n              className=\"FormTrend\"\n              data-cy={props.name ? props.name + \"FormTrend10\" : \"FormTrend10\"}\n            >\n              {`Last 10 PPG: ${props.formTrend && props.formTrend[0] !== undefined ? props.formTrend[0] : \"N/A\"}`}\n            </li>\n            <li\n              key=\"FormTrend10b\"\n              className=\"FormTrend\"\n              data-cy={props.name ? props.name + \"FormTrend10\" : \"FormTrend10\"}\n            >\n              {`Last 6 PPG: ${props.formTrend && props.formTrend[1] !== undefined ? props.formTrend[1] : \"N/A\"}`}\n            </li>\n            <li\n              key=\"FormTrend10c\"\n              className=\"FormTrend\"\n              data-cy={props.name ? props.name + \"FormTrend10\" : \"FormTrend10\"}\n            >\n              {`Last 5 PPG: ${props.formTrend && props.formTrend[2] !== undefined ? props.formTrend[2] : \"N/A\"}.`}\n            </li>\n            <li\n              key=\"CardsTotal\"\n              className=\"CardsTotal\"\n              data-cy={props.name ? props.name + \"CardsTotal\" : \"CardsTotal\"}\n            >\n              {`Cards total: ${props.CardsTotal !== undefined ? props.CardsTotal : \"N/A\"}`}\n            </li>\n            <li\n              key=\"CornersAverage\"\n              className=\"CornersAverage\"\n              data-cy={props.name ? props.name + \"CornersAverage\" : \"CornersAverage\"}\n            >\n              {`Corners average: ${props.CornersAverage !== undefined ? props.CornersAverage : \"N/A\"}`}\n            </li>\n          </div>\n        </ul>\n        <div id=\"h2hStats\"></div>\n      </Fragment>\n    );\n  } else if (props.games === \"hOrA\") {\n    return (\n      <Fragment>\n        <ul className={props.className ? props.className : \"\"} style={props.style ? props.style : {}}>\n          <CreateBadge image={props.badge} alt=\"Team badge\" ClassName={\"ColumnBadge\"} />\n\n          <li className=\"FormHeader\">League results (most recent on right)</li>\n          <li key={`last5${props.homeOrAwayResults ? props.homeOrAwayResults : \"default\"}`} className=\"FormHomeOrAway\">\n            <span className={styleForm(props.ResultsHorA && props.ResultsHorA[5] ? props.ResultsHorA[5] : \"\")}>\n              {props.ResultsHorA && props.ResultsHorA[5] ? props.ResultsHorA[5] : \"\"}\n            </span>\n            <span className={styleForm(props.ResultsHorA && props.ResultsHorA[4] ? props.ResultsHorA[4] : \"\")}>\n              {props.ResultsHorA && props.ResultsHorA[4] ? props.ResultsHorA[4] : \"\"}\n            </span>\n            <span className={styleForm(props.ResultsHorA && props.ResultsHorA[3] ? props.ResultsHorA[3] : \"\")}>\n              {props.ResultsHorA && props.ResultsHorA[3] ? props.ResultsHorA[3] : \"\"}\n            </span>\n            <span className={styleForm(props.ResultsHorA && props.ResultsHorA[2] ? props.ResultsHorA[2] : \"\")}>\n              {props.ResultsHorA && props.ResultsHorA[2] ? props.ResultsHorA[2] : \"\"}\n            </span>\n            <span className={styleForm(props.ResultsHorA && props.ResultsHorA[1] ? props.ResultsHorA[1] : \"\")}>\n              {props.ResultsHorA && props.ResultsHorA[1] ? props.ResultsHorA[1] : \"\"}\n            </span>\n            <span className={styleForm(props.ResultsHorA && props.ResultsHorA[0] ? props.ResultsHorA[0] : \"\")}>\n              {props.ResultsHorA && props.ResultsHorA[0] ? props.ResultsHorA[0] : \"\"}\n            </span>\n          </li>\n          <div className=\"AllStats\">\n            <div className=\"FormSummaries\">\n              <li className=\"StyleOfPlay\">{`${props.homeOrAway ? props.homeOrAway : \"N/A\"} style - ${props.StyleOfPlayHomeOrAway ? props.StyleOfPlayHomeOrAway : \"N/A\"}`}</li>\n            </div>\n            <li\n              key=\"TeamScored\"\n              className=\"TeamScored\"\n              data-cy={props.name ? props.name + \"teamScored\" : \"teamScored\"}\n            >\n              {`Avg goals scored - ${props.goals !== undefined ? props.goals : \"N/A\"}`}\n            </li>\n            <li\n              key=\"TeamConceeded\"\n              className=\"TeamConceeded\"\n              data-cy={props.name ? props.name + \"teamConceded\" : \"teamConceded\"}\n            >\n              {`Avg goals conceeded - ${props.conceeded !== undefined ? props.conceeded : \"N/A\"}`}\n            </li>\n            <li\n              key=\"TeamPossession\"\n              className=\"TeamPossession\"\n              data-cy={props.name ? props.name + \"teamPossession\" : \"teamPossession\"}\n            >\n              {`Avg possession - ${props.possession !== undefined ? props.possession : \"N/A\"}%`}\n            </li>\n            <li key=\"TeamXG\" className=\"TeamXG\" data-cy={props.name ? props.name + \"teamXG\" : \"teamXG\"}>\n              {`Avg XG - ${props.XG !== undefined ? props.XG : \"N/A\"}`}\n            </li>\n            <li\n              key=\"TeamXGConceded\"\n              className=\"TeamXGConceded\"\n              data-cy={props.name ? props.name + \"teamXGConceded\" : \"teamXGConceded\"}\n            >\n              {`Avg XG conceded - ${props.XGConceded !== undefined ? props.XGConceded : \"N/A\"}`}\n            </li>\n            <li\n              key=\"goalDifferenceHorA\"\n              className=\"goalDifferenceHorA\"\n              data-cy={props.name ? props.name + \"goalDifference\" : \"goalDifference\"}\n            >\n              {`Goal difference ${props.homeOrAway ? props.homeOrAway : \"N/A\"} : ${props.goalDifferenceHomeOrAway !== undefined ? props.goalDifferenceHomeOrAway : \"N/A\"\n                }`}\n            </li>\n            <li\n              key=\"AverageShots\"\n              className=\"AverageShots\"\n              data-cy={props.name ? props.name + \"AverageShots\" : \"AverageShots\"}\n            >\n              {`Avg shots - ${props.shots !== undefined ? props.shots : \"N/A\"}`}\n            </li>\n            <li\n              key=\"AverageSOT\"\n              className=\"AverageSOT\"\n              data-cy={props.name ? props.name + \"averageSOT\" : \"averageSOT\"}\n            >\n              {`Avg shots on target - ${props.sot !== undefined ? props.sot : \"N/A\"}`}\n            </li>\n            <li\n              key=\"DangerousAttacks\"\n              className=\"DangerousAttacks\"\n              data-cy={props.name ? props.name + \"dangerousAttacks\" : \"dangerousAttacks\"}\n            >\n              {`Avg dangerous attacks - ${props.dangerousAttacks !== undefined ? props.dangerousAttacks : \"N/A\"}`}\n            </li>\n            <li\n              key=\"WinPercentage\"\n              className=\"WinPercentage\"\n              data-cy={props.name ? props.name + \"WinPercentage\" : \"WinPercentage\"}\n            >\n              {props.homeOrAway && props.winPercentage !== undefined && props.winPercentage !== \"N/A\" ? `${props.homeOrAway} PPG - ${props.winPercentage.toFixed(2)}` : \"N/A\"}\n            </li>\n            <li\n              key=\"CornersAverage\"\n              className=\"CornersAverage\"\n              data-cy={props.name ? props.name + \"CornersAverage\" : \"CornersAverage\"}\n            >\n              {`Corners average: ${props.CornersAverage !== undefined ? props.CornersAverage : \"N/A\"}`}\n            </li>\n          </div>\n        </ul>\n        <div id=\"h2hStats\"></div>\n      </Fragment>\n    );\n  } else if (props.games === \"last5\") {\n    return (\n      <Fragment>\n        <ul className={props.className ? props.className : \"\"} style={props.style ? props.style : {}}>\n          <CreateBadge image={props.badge} alt=\"Team badge\" ClassName={\"ColumnBadge\"} />\n          <li className=\"FormHeader\">\n            Last 5 games (All)\n          </li>\n          <li key={`last5League`} className=\"last5League\">\n            <span className={styleForm(props.Results && props.Results[4] ? props.Results[4] : \"\")}>\n              {props.Results && props.Results[4] ? props.Results[4] : \"\"}\n            </span>\n            <span className={styleForm(props.Results && props.Results[3] ? props.Results[3] : \"\")}>\n              {props.Results && props.Results[3] ? props.Results[3] : \"\"}\n            </span>\n            <span className={styleForm(props.Results && props.Results[2] ? props.Results[2] : \"\")}>\n              {props.Results && props.Results[2] ? props.Results[2] : \"\"}\n            </span>\n            <span className={styleForm(props.Results && props.Results[1] ? props.Results[1] : \"\")}>\n              {props.Results && props.Results[1] ? props.Results[1] : \"\"}\n            </span>\n            <span className={styleForm(props.Results && props.Results[0] ? props.Results[0] : \"\")}>\n              {props.Results && props.Results[0] ? props.Results[0] : \"\"}\n            </span>\n          </li>\n          <div className=\"AllStats\">\n            <li\n              key=\"TeamScored\"\n              className=\"TeamScored\"\n              data-cy={props.name ? props.name + \"teamScored\" : \"teamScored\"}\n            >\n              {`Avg goals scored - ${props.goals !== undefined ? props.goals : \"N/A\"}`}\n            </li>\n            <li\n              key=\"TeamConceeded\"\n              className=\"TeamConceeded\"\n              data-cy={props.name ? props.name + \"teamConceded\" : \"teamConceded\"}\n            >\n              {`Avg goals conceeded - ${props.conceeded !== undefined ? props.conceeded : \"N/A\"}`}\n            </li>\n            <li\n              key=\"TeamPossession\"\n              className=\"TeamPossession\"\n              data-cy={props.name ? props.name + \"teamPossession\" : \"teamPossession\"}\n            >\n              {`Avg possession - ${props.possession !== undefined ? props.possession : \"N/A\"}%`}\n            </li>\n            <li key=\"TeamXG\" className=\"TeamXG\" data-cy={props.name ? props.name + \"teamXG\" : \"teamXG\"}>\n              {`Avg XG - ${props.XG !== undefined ? props.XG : \"N/A\"}`}\n            </li>\n            <li\n              key=\"TeamXGConceded\"\n              className=\"TeamXGConceded\"\n              data-cy={props.name ? props.name + \"teamXGConceded\" : \"teamXGConceded\"}\n            >\n              {`Avg XG conceded - ${props.XGConceded !== undefined ? props.XGConceded : \"N/A\"}`}\n            </li>\n            <li\n              key=\"goalDifference\"\n              className=\"goalDifference\"\n              data-cy={props.name ? props.name + \"goalDifference\" : \"goalDifference\"}\n            >\n              {`Goal difference : `}\n              <span>{props.goalDifference !== undefined ? props.goalDifference : \"N/A\"}</span>\n            </li>\n            <li\n              key=\"AverageShots\"\n              className=\"AverageShots\"\n              data-cy={props.name ? props.name + \"AverageShots\" : \"AverageShots\"}\n            >\n              {`Avg shots - ${props.shots !== undefined ? props.shots : \"N/A\"}`}\n            </li>\n            <li\n              key=\"AverageSOT\"\n              className=\"AverageSOT\"\n              data-cy={props.name ? props.name + \"averageSOT\" : \"averageSOT\"}\n            >\n              {`Avg shots on target - ${props.sot !== undefined ? props.sot : \"N/A\"}`}\n            </li>\n            <li\n              key=\"DangerousAttacks\"\n              className=\"DangerousAttacks\"\n              data-cy={props.name ? props.name + \"dangerousAttacks\" : \"dangerousAttacks\"}\n            >\n              {`Avg dangerous attacks - ${props.dangerousAttacks !== undefined ? props.dangerousAttacks : \"N/A\"}`}\n            </li>\n            <li key=\"PPG\" className=\"PPG\" data-cy={props.name ? props.name + \"PPG\" : \"PPG\"}>\n              {`Last 5 PPG - ${props.ppg !== undefined ? props.ppg : \"N/A\"}`}\n            </li>\n            <li\n              key=\"CornersAverage\"\n              className=\"CornersAverage\"\n              data-cy={props.name ? props.name + \"CornersAverage\" : \"CornersAverage\"}\n            >\n              {`Corners average: ${props.CornersAverage !== undefined ? props.CornersAverage : \"N/A\"}`}\n            </li>\n          </div>\n        </ul>\n        <div id=\"h2hStats\"></div>\n      </Fragment>\n    );\n  }\n}\n\nexport default Stats;\n","/Users/greg/Development/Predictor/src/components/CarouselXGChart.js",[],"/Users/greg/Development/Predictor/src/components/Chart.js",["398","399","400"],"// import { light } from \"@material-ui/core/styles/createPalette\";\n// import { toBePartiallyChecked } from \"@testing-library/jest-dom/dist/matchers\";\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  RadialLinearScale,\n  PointElement,\n  ArcElement,\n  LineElement,\n  Filler,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n  SubTitle,\n} from \"chart.js\";\nimport { Line, Radar, Bar, Doughnut, PolarArea } from \"react-chartjs-2\";\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  RadialLinearScale,\n  PointElement,\n  ArcElement,\n  Filler,\n  BarElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  SubTitle,\n\n);\n\nexport function Chart(props) {\n  let length;\n  let depth;\n\n  if (props.type === \"Points over time\") {\n    length = props.data1.length * 3;\n    depth = 0;\n  } else if (props.type === \"Rolling average points over last 10\") {\n    length = Math.abs(props.height);\n    depth = 0;\n  } else if (Math.abs(props.height) > Math.abs(props.depth)) {\n    length = Math.abs(props.height);\n    depth = -Math.abs(props.height);\n  } else if (Math.abs(props.height) < Math.abs(props.depth)) {\n    length = Math.abs(props.depth);\n    depth = -Math.abs(props.depth);\n  } else {\n    length = Math.abs(props.depth);\n    depth = -Math.abs(props.depth);\n  }\n\n  const options = {\n    color: \"#fe8c00\",\n    responsive: true,\n    aspectRatio: 1.2,\n    maintainAspectRatio: true,\n    layout: {\n      padding: 3,\n    },\n    elements: {\n      point: {\n        radius: 0,\n      },\n    },\n    scales: {\n      y: {\n        suggestedMin: depth,\n        suggestedMax: length,\n        // suggestedMax: Math.max(...props.data1) > 3 ? Math.max(...props.data1) : 3,\n        grid: {\n          borderWidth: 1,\n          borderColor: \"black\",\n        },\n        ticks: {\n          font: {\n            size: 12,\n          },\n          color: \"#fe8c00\",\n        },\n      },\n      x: {\n        title: {\n          display: false,\n          text: \"Last X Games\",\n          font: {\n            size: 14,\n          },\n        },\n        grid: {\n          borderWidth: 1,\n          borderColor: \"black\",\n        },\n        ticks: {\n          display: false,\n          font: {\n            size: 14,\n          },\n        },\n      },\n    },\n    plugins: {\n      legend: {\n        position: \"top\",\n\n        labels: {\n          boxHeight: 5,\n        },\n      },\n      title: {\n        display: true,\n        text: props.type,\n        color: \"#fe8c00\",\n        font: {\n          size: 14,\n        },\n      },\n    },\n  };\n\n  const labels = Array.from(props.data1.keys());\n\n  let data = {\n    labels,\n    datasets: [\n      {\n        label: props.team1,\n        font: {\n          color: \"#fe8c00\",\n        },\n        data: props.data1,\n        borderColor: \"#01a501\",\n        borderWidth: 3,\n        backgroundColor: \"#01a501\",\n        tension: props.tension,\n      },\n      {\n        label: props.team2,\n        data: props.data2,\n        borderColor: \"#ae1001ff\",\n        borderWidth: 3,\n        backgroundColor: \"#ae1001ff\",\n        tension: props.tension,\n      },\n    ],\n  };\n\n  return <Line options={options} data={data} />;\n}\n\nexport function MultilineChart(props) {\n  let length;\n  let depth;\n\n  if (props.type === \"Points over time\") {\n    length = props.data1.length * 3;\n    depth = 0;\n  } else if (props.type === \"Rolling average points over last 10\") {\n    length = Math.abs(props.height);\n    depth = 0;\n  } else if (Math.abs(props.height) > Math.abs(props.depth)) {\n    length = Math.abs(props.height);\n    depth = -Math.abs(props.height);\n  } else if (Math.abs(props.height) < Math.abs(props.depth)) {\n    length = Math.abs(props.depth);\n    depth = -Math.abs(props.depth);\n  } else {\n    length = Math.abs(props.depth);\n    depth = -Math.abs(props.depth);\n  }\n\n  const options = {\n    color: \"#fe8c00\",\n    responsive: true,\n    aspectRatio: 1.2,\n    maintainAspectRatio: true,\n    layout: {\n      padding: 3,\n    },\n    elements: {\n      point: {\n        radius: 0,\n      },\n    },\n    scales: {\n      y: {\n        suggestedMin: depth,\n        suggestedMax: length,\n        // suggestedMax: Math.max(...props.data1) > 3 ? Math.max(...props.data1) : 3,\n        grid: {\n          borderWidth: 1,\n          borderColor: \"black\",\n        },\n        ticks: {\n          font: {\n            size: 12,\n          },\n          color: \"#fe8c00\",\n        },\n      },\n      x: {\n        title: {\n          display: false,\n          text: \"Last X Games\",\n          font: {\n            size: 14,\n          },\n        },\n        grid: {\n          borderWidth: 1,\n          borderColor: \"black\",\n        },\n        ticks: {\n          display: false,\n          font: {\n            size: 14,\n          },\n        },\n      },\n    },\n    plugins: {\n      legend: {\n        position: \"top\",\n\n        labels: {\n          boxHeight: 5,\n        },\n      },\n      title: {\n        display: true,\n        text: props.type,\n        color: \"#fe8c00\",\n        font: {\n          size: 14,\n        },\n      },\n    },\n  };\n\n  const labels = Array.from(props.data1.keys());\n\n  let data = {\n    labels,\n    datasets: [\n      {\n        label: props.team1,\n        font: {\n          color: \"#fe8c00\",\n        },\n        data: props.data1,\n        borderColor: \"#01a501\",\n        borderWidth: 3,\n        backgroundColor: \"#01a501\",\n        tension: props.tension,\n      },\n      {\n        label: props.team2,\n        data: props.data2,\n        borderColor: \"#ae1001ff\",\n        borderWidth: 3,\n        backgroundColor: \"#ae1001ff\",\n        tension: props.tension,\n      },\n      {\n        label: `${props.team1} XG Diff`,\n        font: {\n          color: \"white\",\n        },\n        data: props.data3,\n        borderColor: \"#01a50182\",\n        borderWidth: 3,\n        backgroundColor: \"#01a50182\",\n        tension: props.tension,\n        hidden: true,\n      },\n      {\n        label: `${props.team2} XG Diff`,\n        font: {\n          color: \"#fe8c00\",\n        },\n        data: props.data4,\n        borderColor: \"#ae0f018d\",\n        borderWidth: 3,\n        backgroundColor: \"#ae0f018d\",\n        tension: props.tension,\n        hidden: true,\n      },\n    ],\n  };\n\n  return <Line options={options} data={data} />;\n}\n\nexport const DoughnutChart = ({ labels, values, colors, label = 'Dataset', chartTitle = ''\n}) => {\n  const data = {\n    labels,\n    datasets: [{\n      label,\n      data: values,\n      backgroundColor: colors,\n      hoverOffset: 4\n    }]\n  };\n\n  const options = {\n    rotation: 270,\n    circumference: 180,\n    plugins: {\n      legend: {\n        position: 'top'\n      },\n      title: {\n        display: !!chartTitle,\n        text: chartTitle,\n        font: {\n          size: 12\n        }\n      }\n    }\n  };\n\n    return<Doughnut className=\"DoughnutChart\" data = { data } options = { options } />;\n};\n\n\n\nexport function RadarChart(props) {\n  const options = {\n    color: \"white\",\n    scales: {\n      r: {\n        ticks: {\n          stepSize: 20, // Adjust this to space out ticks more (default is 10)\n          display: false,\n        },\n        grid: {\n          // circular: true,\n          color: \"#f57701\",\n        },\n        pointLabels: {\n          color: \"#f57701\",\n          font: {\n            size: 12\n          },\n        },\n        min: 0,\n        max: props.max, // Set this according to your chart's range\n      }\n    },\n    plugins: {\n      legend: {\n        position: \"top\",\n\n        labels: {\n          boxHeight: 10,\n          color: \"#f57701\",\n          font: {\n            size: 14\n          },\n        },\n      },\n      title: {\n        display: true,\n        text: props.title,\n        color: \"#f57701\",\n        backgroundColor: \"black\",\n        font: {\n          size: 14,\n        },\n      },\n    },\n  };\n\n  let data = {\n    labels: props.labels,\n    datasets: [\n      {\n        label: props.team1,\n        data: props.data,\n        fill: true,\n        backgroundColor: \"#01a50141\",\n        borderColor: \"#01a501\",\n        pointBackgroundColor: \"#01a501\",\n        pointBorderColor: \"#01a501\",\n        pointHoverBackgroundColor: \"#01a501\",\n        pointHoverBorderColor: \"#007900ff\",\n        borderWidth: 2,\n      },\n      {\n        label: props.team2,\n        data: props.data2,\n        fill: true,\n        backgroundColor: \"#ae0f0141\",\n        borderColor: \"#ae1001ff\",\n        pointBackgroundColor: \"#ae1001ff\",\n        pointBorderColor: \"#ae1001ff\",\n        pointHoverBackgroundColor: \"#ae1001ff\",\n        pointHoverBorderColor: \"#ae1001ff\",\n        borderWidth: 2,\n      },\n    ],\n  };\n\n  return <Radar options={options} data={data} />;\n}\n\nexport function BarChartLeagueStats({\n  title,\n  teamAData,\n  teamBData,\n  teamALabel,\n  teamBLabel,\n  maxRank,\n}) {\n  const labels = [\n    \"Avg Rating\",\n    \"Goals Scored\",\n    \"Goals Conceded\",\n    \"Big Chances\",\n    \"Big Chances Missed\",\n    \"Hit Woodwork\",\n    \"Yellow Cards\",\n    \"Red Cards\",\n    \"Possession\",\n    \"Accurate Passes\",\n    \"Long Balls\",\n    \"Crosses\",\n    \"Shots\",\n    \"Shots on Target\",\n    \"Dribbles\",\n    \"Tackles\",\n    \"Interceptions\",\n    \"Clearances\",\n    \"Corners\",\n    \"Fouls\",\n    \"Pen Goals\",\n    \"Pen Goals Conceded\",\n    \"Clean Sheets\",\n  ];\n\n  const statKeys = Object.keys(teamAData);\n\n  // Invert rank so that a lower rank (1 = best) becomes a higher bar\n  const invertRank = (rank) => maxRank - rank + 1;\n\n  // Preprocess data\n  const teamAInverted = statKeys.map((key) => invertRank(teamAData[key]));\n  const teamBInverted = statKeys.map((key) => invertRank(teamBData[key]));\n\n  const data = {\n    labels: statKeys.map((key) =>\n      key.replace(/([A-Z])/g, \" $1\").replace(/^./, (str) => str.toUpperCase())\n    ),\n    datasets: [\n      {\n        label: teamALabel,\n        data: teamAInverted,\n        backgroundColor: \"rgba(255, 99, 132, 0.7)\",\n        borderRadius: 2,\n        barThickness: 6,             // Fixed thickness\n        categoryPercentage: 0.1,      // Reduce this for more space between rows\n        barPercentage: 1.0\n      },\n      {\n        label: teamBLabel,\n        data: teamBInverted,\n        backgroundColor: \"rgba(255, 255, 102, 0.7)\",\n        borderRadius: 2,\n        barThickness: 6,             // Fixed thickness\n        categoryPercentage: 0.1,      // Reduce this for more space between rows\n        barPercentage: 1.0\n      },\n    ],\n  };\n\n  const options = {\n    indexAxis: \"y\",\n    maintainAspectRatio: false,\n    scales: {\n      x: {\n        reverse: true, // ⬅️ This flips the axis direction\n        beginAtZero: true,\n        title: {\n          display: true,\n          text: 'Relative Rank (Lower = Better)',\n        },\n        ticks: {\n          stepSize: 5,\n        },\n      },\n      y: {\n        ticks: {\n          autoSkip: false,\n        }\n      }\n    },\n    plugins: {\n      legend: {\n        position: \"top\",\n        labels: {\n          boxWidth: 20,\n        },\n      },\n    },\n    layout: {\n      padding: {\n        top: 10,\n        bottom: 10,\n      },\n    },\n  };\n\n  return <Bar data={data} options={options} className=\"LeagueStatsBar\" />;\n}\n\nexport function RadarChartLeagueStats({\n  title,\n  teamAData,\n  teamBData,\n  teamALabel = \"Team A\",\n  teamBLabel = \"Team B\",\n  maxRank = 30,\n}) {\n  const labels = Object.keys(teamAData).map((key) =>\n    key.replace(/([A-Z])/g, \" $1\").replace(/^./, (str) => str.toUpperCase())\n  );\n\n  const teamAValues = Object.values(teamAData).map(Number);\n  const teamBValues = Object.values(teamBData).map(Number);\n\n  const chartData = {\n    labels,\n    datasets: [\n      {\n        label: teamALabel,\n        data: teamAValues,\n        fill: true,\n        borderColor: \"red\",\n        pointBackgroundColor: \"red\",\n        pointBorderColor: \"red\",\n        pointHoverBackgroundColor: \"#fff\",\n        pointHoverBorderColor: \"rgba(255, 99, 133, 0)\",\n        borderWidth: 1,\n      },\n      // {\n      //   label: teamBLabel,\n      //   data: teamBValues,\n      //   fill: true,\n      //   borderColor: \"yellow\",\n      //   pointBackgroundColor: \"yellow\",\n      //   pointBorderColor: \"yellow\",\n      //   pointHoverBackgroundColor: \"#fff\",\n      //   pointHoverBorderColor: \"yellow\",\n      //   borderWidth: 2,\n      // },\n    ],\n  };\n\n  const options = {\n    responsive: true,\n    color: \"#fe8c00\",\n    maintainAspectRatio: true,\n    scales: {\n      r: {\n        min: 1,\n        max: maxRank,\n        reverse: true,\n        angleLines: {\n          display: true,\n        },\n        grid: {\n          circular: true,\n          // color: \"transparent\", // or use a solid border color if you want the lines only\n        },\n        ticks: {\n          display: true,\n          backdropColor: \"transparent\",\n        },\n        pointLabels: {\n          color: \"#fe8c00\",\n          font: {\n            size: 10,\n          },\n        },\n      },\n    },\n    plugins: {\n      legend: {\n        position: \"top\",\n        labels: {\n          boxHeight: 10,\n          color: \"#fe8c00\",\n        },\n      },\n      title: {\n        display: true,\n        text: title || \"Team Comparison by League Ranking\",\n        color: \"#fe8c00\",\n        font: {\n          size: 14,\n        },\n      },\n      tooltip: {\n        callbacks: {\n          label: function (context) {\n            return `${context.dataset.label}: Rank ${context.formattedValue}`;\n          },\n        },\n      },\n    },\n  };\n\n  return (\n    <PolarArea className=\"LeagueStatsRadar\" data={chartData} options={options} />\n  );\n}\n\nexport function BarChart(props) {\n  const datasetOne = props.data1;\n  const datasetTwo = props.data2;\n  const sum = datasetTwo.map(function (num, idx) {\n    return num - datasetOne[idx];\n  });\n\n  const max = Math.max(...sum);\n  const min = Math.min(...sum);\n\n  const largest = findLargestNum(max, min);\n\n  function findLargestNum(numOne, numTwo) {\n    const tempArr = [];\n    const firstNum = Math.abs(numOne);\n    const secondNum = Math.abs(numTwo);\n    tempArr.push(firstNum, secondNum);\n\n    return Math.max(...tempArr) + 1;\n  }\n\n  const options = {\n    color: \"#fe8c00\",\n    indexAxis: \"y\",\n    // Elements options apply to all of the options unless overridden in a dataset\n    // In this case, we are setting the border of each horizontal bar to be 2px wide\n    aspectRatio: 1.2,\n    elements: {\n      bar: {\n        borderWidth: 2,\n      },\n    },\n    scales: {\n      x: {\n        min: -8,\n        max: 8,\n        ticks: {\n          display: false,\n        },\n      },\n      y: {\n        ticks: {\n          font: {\n            size: 11,\n          },\n          color: \"#fe8c00\",\n        },\n      },\n    },\n    responsive: true,\n    plugins: {\n      legend: {\n        display: false,\n      },\n      tooltip: {\n        enabled: false,\n      },\n      title: {\n        display: true,\n        text: props.text,\n        color: \"#fe8c00\",\n        font: {\n          size: 14,\n        },\n      },\n    },\n  };\n\n  const labels = [\n    \"Highest Goals\",\n    \"Fewest Conceeded\",\n    \"PPG\",\n    \"Highest XGF\",\n    \"Fewest XGA\",\n    \"SoT\",\n    \"Dangerous Attacks\",\n    \"Av. Possession\",\n    \"Home/Away Goal Diff\",\n    \"Corners\",\n  ];\n\n  const data = {\n    labels,\n    datasets: [\n      {\n        // label: 'Dataset 1',\n        legend: {\n          display: false,\n        },\n        data: sum,\n        backgroundColor(context) {\n          const index = context.dataIndex;\n          const value = context.dataset.data[index];\n          return value < 0 ? \"#01a501\" : \"#ae1001ff\";\n        },\n      },\n    ],\n  };\n\n  return <Bar options={options} data={data} />;\n}\n\nexport function BarChartTwo(props) {\n  const dataset = [props.data1, props.data2];\n\n  const options = {\n    color: \"#fe8c00\",\n    indexAxis: \"x\",\n    // Elements options apply to all of the options unless overridden in a dataset\n    // In this case, we are setting the border of each horizontal bar to be 2px wide\n    aspectRatio: 1.2,\n    elements: {\n      bar: {\n        borderWidth: 2,\n      },\n    },\n    scales: {\n      y: {\n        min: -0.8,\n        max: 0.8,\n        ticks: {\n          display: true,\n          font: {\n            size: 10,\n          },\n          color: \"#fe8c00\",\n        },\n      },\n      // y: {\n      //   suggestedMin: -0.8,\n      //   suggestedMax: 0.8,\n      //   ticks: {\n      //     font: {\n      //       size: 10,\n      //     },\n      //   },\n      // },\n    },\n    responsive: true,\n    plugins: {\n      legend: {\n        display: false,\n      },\n      tooltip: {\n        enabled: true,\n      },\n      title: {\n        display: true,\n        text: [props.text],\n        color: \"#fe8c00\",\n        font: {\n          size: 14,\n        },\n      },\n      subtitle: {\n        display: true,\n        text: \"Green - Improving | Red - Worsening\",\n        color: \"#fe8c00\",\n        font: {\n          size: 12,\n        },\n        padding: {\n          bottom: 10,\n        },\n      },\n    },\n  };\n\n  const labels = [props.homeTeam, props.awayTeam];\n\n  const data = {\n    labels: labels,\n    datasets: [\n      {\n        legend: {\n          display: false,\n        },\n        // label: \"XG Recent Swing\",\n        data: dataset,\n        ticks: {\n          font: {\n            size: 14,\n          },\n        },\n        barThickness: 120,\n        backgroundColor(context) {\n          const index = context.dataIndex;\n          const value = context.dataset.data[index];\n          return value < 0 ? \"#730a00\" : \"#016001\";\n        },\n      },\n    ],\n  };\n\n  return <Bar options={options} data={data} />;\n}\n","/Users/greg/Development/Predictor/src/components/RankingsSection.js",[],"/Users/greg/Development/Predictor/src/components/HamburgerMenu.js",[],"/Users/greg/Development/Predictor/src/components/SeasonPreview.js",[],"/Users/greg/Development/Predictor/src/components/PrivacyPolicy.js",[],"/Users/greg/Development/Predictor/src/components/StarRating.js",[],"/Users/greg/Development/Predictor/src/components/PredictionTypeRadio.js",[],{"ruleId":"401","severity":1,"message":"402","line":6,"column":27,"nodeType":"403","messageId":"404","endLine":6,"endColumn":33},{"ruleId":"405","replacedBy":"406"},{"ruleId":"407","replacedBy":"408"},{"ruleId":"401","severity":1,"message":"409","line":33,"column":10,"nodeType":"403","messageId":"404","endLine":33,"endColumn":19},{"ruleId":"401","severity":1,"message":"402","line":35,"column":27,"nodeType":"403","messageId":"404","endLine":35,"endColumn":33},{"ruleId":"401","severity":1,"message":"410","line":35,"column":50,"nodeType":"403","messageId":"404","endLine":35,"endColumn":54},{"ruleId":"401","severity":1,"message":"411","line":206,"column":5,"nodeType":"403","messageId":"404","endLine":206,"endColumn":10},{"ruleId":"401","severity":1,"message":"412","line":207,"column":5,"nodeType":"403","messageId":"404","endLine":207,"endColumn":20},{"ruleId":"401","severity":1,"message":"413","line":208,"column":5,"nodeType":"403","messageId":"404","endLine":208,"endColumn":12},{"ruleId":"401","severity":1,"message":"414","line":209,"column":5,"nodeType":"403","messageId":"404","endLine":209,"endColumn":13},{"ruleId":"401","severity":1,"message":"415","line":210,"column":5,"nodeType":"403","messageId":"404","endLine":210,"endColumn":23},{"ruleId":"401","severity":1,"message":"416","line":211,"column":5,"nodeType":"403","messageId":"404","endLine":211,"endColumn":15},{"ruleId":"401","severity":1,"message":"417","line":215,"column":5,"nodeType":"403","messageId":"404","endLine":215,"endColumn":14},{"ruleId":"401","severity":1,"message":"418","line":216,"column":5,"nodeType":"403","messageId":"404","endLine":216,"endColumn":24},{"ruleId":"401","severity":1,"message":"419","line":217,"column":5,"nodeType":"403","messageId":"404","endLine":217,"endColumn":16},{"ruleId":"401","severity":1,"message":"420","line":218,"column":5,"nodeType":"403","messageId":"404","endLine":218,"endColumn":17},{"ruleId":"401","severity":1,"message":"421","line":219,"column":5,"nodeType":"403","messageId":"404","endLine":219,"endColumn":27},{"ruleId":"401","severity":1,"message":"422","line":220,"column":5,"nodeType":"403","messageId":"404","endLine":220,"endColumn":13},{"ruleId":"401","severity":1,"message":"423","line":221,"column":5,"nodeType":"403","messageId":"404","endLine":221,"endColumn":23},{"ruleId":"401","severity":1,"message":"424","line":222,"column":5,"nodeType":"403","messageId":"404","endLine":222,"endColumn":15},{"ruleId":"401","severity":1,"message":"425","line":223,"column":5,"nodeType":"403","messageId":"404","endLine":223,"endColumn":17},{"ruleId":"401","severity":1,"message":"426","line":226,"column":5,"nodeType":"403","messageId":"404","endLine":226,"endColumn":16},{"ruleId":"401","severity":1,"message":"427","line":229,"column":5,"nodeType":"403","messageId":"404","endLine":229,"endColumn":29},{"ruleId":"401","severity":1,"message":"428","line":230,"column":5,"nodeType":"403","messageId":"404","endLine":230,"endColumn":30},{"ruleId":"401","severity":1,"message":"429","line":231,"column":5,"nodeType":"403","messageId":"404","endLine":231,"endColumn":28},{"ruleId":"401","severity":1,"message":"430","line":384,"column":6,"nodeType":"403","messageId":"404","endLine":384,"endColumn":18},{"ruleId":"401","severity":1,"message":"431","line":384,"column":20,"nodeType":"403","messageId":"404","endLine":384,"endColumn":42},{"ruleId":"401","severity":1,"message":"432","line":392,"column":5,"nodeType":"403","messageId":"404","endLine":392,"endColumn":19},{"ruleId":"401","severity":1,"message":"433","line":565,"column":10,"nodeType":"403","messageId":"404","endLine":565,"endColumn":14},{"ruleId":"434","severity":1,"message":"435","line":28,"column":6,"nodeType":"436","endLine":28,"endColumn":8,"suggestions":"437"},{"ruleId":"401","severity":1,"message":"438","line":19,"column":5,"nodeType":"403","messageId":"404","endLine":19,"endColumn":13},{"ruleId":"401","severity":1,"message":"439","line":20,"column":10,"nodeType":"403","messageId":"404","endLine":20,"endColumn":16},{"ruleId":"401","severity":1,"message":"440","line":25,"column":5,"nodeType":"403","messageId":"404","endLine":25,"endColumn":15},{"ruleId":"401","severity":1,"message":"441","line":55,"column":5,"nodeType":"403","messageId":"404","endLine":55,"endColumn":9},{"ruleId":"401","severity":1,"message":"442","line":274,"column":10,"nodeType":"403","messageId":"404","endLine":274,"endColumn":25},{"ruleId":"401","severity":1,"message":"443","line":883,"column":14,"nodeType":"403","messageId":"404","endLine":883,"endColumn":37},{"ruleId":"434","severity":1,"message":"444","line":107,"column":6,"nodeType":"436","endLine":107,"endColumn":10,"suggestions":"445"},{"ruleId":"401","severity":1,"message":"446","line":19,"column":3,"nodeType":"403","messageId":"404","endLine":19,"endColumn":16},{"ruleId":"401","severity":1,"message":"447","line":45,"column":10,"nodeType":"403","messageId":"404","endLine":45,"endColumn":21},{"ruleId":"401","severity":1,"message":"448","line":47,"column":10,"nodeType":"403","messageId":"404","endLine":47,"endColumn":18},{"ruleId":"401","severity":1,"message":"449","line":49,"column":26,"nodeType":"403","messageId":"404","endLine":49,"endColumn":39},{"ruleId":"401","severity":1,"message":"450","line":82,"column":10,"nodeType":"403","messageId":"404","endLine":82,"endColumn":26},{"ruleId":"401","severity":1,"message":"451","line":83,"column":10,"nodeType":"403","messageId":"404","endLine":83,"endColumn":27},{"ruleId":"401","severity":1,"message":"452","line":87,"column":10,"nodeType":"403","messageId":"404","endLine":87,"endColumn":21},{"ruleId":"434","severity":1,"message":"453","line":103,"column":6,"nodeType":"436","endLine":103,"endColumn":16,"suggestions":"454"},{"ruleId":"401","severity":1,"message":"455","line":109,"column":10,"nodeType":"403","messageId":"404","endLine":109,"endColumn":25},{"ruleId":"401","severity":1,"message":"456","line":124,"column":10,"nodeType":"403","messageId":"404","endLine":124,"endColumn":22},{"ruleId":"401","severity":1,"message":"457","line":124,"column":24,"nodeType":"403","messageId":"404","endLine":124,"endColumn":39},{"ruleId":"401","severity":1,"message":"458","line":125,"column":10,"nodeType":"403","messageId":"404","endLine":125,"endColumn":22},{"ruleId":"401","severity":1,"message":"459","line":125,"column":24,"nodeType":"403","messageId":"404","endLine":125,"endColumn":39},{"ruleId":"401","severity":1,"message":"460","line":145,"column":10,"nodeType":"403","messageId":"404","endLine":145,"endColumn":33},{"ruleId":"401","severity":1,"message":"461","line":145,"column":35,"nodeType":"403","messageId":"404","endLine":145,"endColumn":61},{"ruleId":"401","severity":1,"message":"462","line":146,"column":10,"nodeType":"403","messageId":"404","endLine":146,"endColumn":26},{"ruleId":"401","severity":1,"message":"463","line":146,"column":28,"nodeType":"403","messageId":"404","endLine":146,"endColumn":47},{"ruleId":"401","severity":1,"message":"464","line":147,"column":10,"nodeType":"403","messageId":"404","endLine":147,"endColumn":26},{"ruleId":"401","severity":1,"message":"465","line":147,"column":28,"nodeType":"403","messageId":"404","endLine":147,"endColumn":47},{"ruleId":"401","severity":1,"message":"466","line":172,"column":34,"nodeType":"403","messageId":"404","endLine":172,"endColumn":59},{"ruleId":"401","severity":1,"message":"467","line":175,"column":33,"nodeType":"403","messageId":"404","endLine":175,"endColumn":57},{"ruleId":"401","severity":1,"message":"468","line":178,"column":38,"nodeType":"403","messageId":"404","endLine":178,"endColumn":67},{"ruleId":"401","severity":1,"message":"469","line":181,"column":37,"nodeType":"403","messageId":"404","endLine":181,"endColumn":65},{"ruleId":"401","severity":1,"message":"470","line":184,"column":39,"nodeType":"403","messageId":"404","endLine":184,"endColumn":69},{"ruleId":"401","severity":1,"message":"471","line":186,"column":38,"nodeType":"403","messageId":"404","endLine":186,"endColumn":67},{"ruleId":"401","severity":1,"message":"472","line":212,"column":34,"nodeType":"403","messageId":"404","endLine":212,"endColumn":59},{"ruleId":"401","severity":1,"message":"473","line":215,"column":33,"nodeType":"403","messageId":"404","endLine":215,"endColumn":57},{"ruleId":"401","severity":1,"message":"474","line":218,"column":38,"nodeType":"403","messageId":"404","endLine":218,"endColumn":67},{"ruleId":"401","severity":1,"message":"475","line":221,"column":37,"nodeType":"403","messageId":"404","endLine":221,"endColumn":65},{"ruleId":"401","severity":1,"message":"476","line":224,"column":39,"nodeType":"403","messageId":"404","endLine":224,"endColumn":69},{"ruleId":"401","severity":1,"message":"477","line":226,"column":38,"nodeType":"403","messageId":"404","endLine":226,"endColumn":67},{"ruleId":"401","severity":1,"message":"478","line":236,"column":38,"nodeType":"403","messageId":"404","endLine":236,"endColumn":67},{"ruleId":"401","severity":1,"message":"479","line":239,"column":38,"nodeType":"403","messageId":"404","endLine":239,"endColumn":67},{"ruleId":"401","severity":1,"message":"480","line":402,"column":19,"nodeType":"403","messageId":"404","endLine":402,"endColumn":29},{"ruleId":"434","severity":1,"message":"481","line":522,"column":6,"nodeType":"436","endLine":522,"endColumn":33,"suggestions":"482"},{"ruleId":"434","severity":1,"message":"481","line":529,"column":6,"nodeType":"436","endLine":529,"endColumn":33,"suggestions":"483"},{"ruleId":"401","severity":1,"message":"484","line":886,"column":18,"nodeType":"403","messageId":"404","endLine":886,"endColumn":29},{"ruleId":"434","severity":1,"message":"485","line":1061,"column":6,"nodeType":"436","endLine":1061,"endColumn":32,"suggestions":"486"},{"ruleId":"434","severity":1,"message":"487","line":1433,"column":6,"nodeType":"436","endLine":1433,"endColumn":15,"suggestions":"488"},{"ruleId":"401","severity":1,"message":"489","line":2095,"column":7,"nodeType":"403","messageId":"404","endLine":2095,"endColumn":11},{"ruleId":"401","severity":1,"message":"490","line":2132,"column":17,"nodeType":"403","messageId":"404","endLine":2132,"endColumn":30},{"ruleId":"401","severity":1,"message":"491","line":2169,"column":15,"nodeType":"403","messageId":"404","endLine":2169,"endColumn":25},{"ruleId":"401","severity":1,"message":"492","line":2175,"column":15,"nodeType":"403","messageId":"404","endLine":2175,"endColumn":29},{"ruleId":"401","severity":1,"message":"493","line":2178,"column":15,"nodeType":"403","messageId":"404","endLine":2178,"endColumn":25},{"ruleId":"401","severity":1,"message":"494","line":2184,"column":15,"nodeType":"403","messageId":"404","endLine":2184,"endColumn":29},{"ruleId":"434","severity":1,"message":"495","line":2652,"column":6,"nodeType":"436","endLine":2661,"endColumn":4,"suggestions":"496"},{"ruleId":"401","severity":1,"message":"497","line":2748,"column":11,"nodeType":"403","messageId":"404","endLine":2748,"endColumn":15},{"ruleId":"401","severity":1,"message":"498","line":2977,"column":24,"nodeType":"403","messageId":"404","endLine":2977,"endColumn":37},{"ruleId":"401","severity":1,"message":"499","line":2980,"column":24,"nodeType":"403","messageId":"404","endLine":2980,"endColumn":37},{"ruleId":"401","severity":1,"message":"500","line":954,"column":11,"nodeType":"403","messageId":"404","endLine":954,"endColumn":16},{"ruleId":"401","severity":1,"message":"501","line":955,"column":11,"nodeType":"403","messageId":"404","endLine":955,"endColumn":15},{"ruleId":"401","severity":1,"message":"502","line":1035,"column":11,"nodeType":"403","messageId":"404","endLine":1035,"endColumn":38},{"ruleId":"401","severity":1,"message":"503","line":1040,"column":11,"nodeType":"403","messageId":"404","endLine":1040,"endColumn":38},{"ruleId":"401","severity":1,"message":"504","line":1045,"column":14,"nodeType":"403","messageId":"404","endLine":1045,"endColumn":21},{"ruleId":"401","severity":1,"message":"505","line":1218,"column":11,"nodeType":"403","messageId":"404","endLine":1218,"endColumn":37},{"ruleId":"401","severity":1,"message":"506","line":1543,"column":16,"nodeType":"403","messageId":"404","endLine":1543,"endColumn":35},{"ruleId":"401","severity":1,"message":"507","line":1580,"column":16,"nodeType":"403","messageId":"404","endLine":1580,"endColumn":28},{"ruleId":"401","severity":1,"message":"508","line":1686,"column":16,"nodeType":"403","messageId":"404","endLine":1686,"endColumn":35},{"ruleId":"401","severity":1,"message":"509","line":1741,"column":9,"nodeType":"403","messageId":"404","endLine":1741,"endColumn":43},{"ruleId":"401","severity":1,"message":"510","line":1746,"column":9,"nodeType":"403","messageId":"404","endLine":1746,"endColumn":43},{"ruleId":"401","severity":1,"message":"511","line":1769,"column":9,"nodeType":"403","messageId":"404","endLine":1769,"endColumn":29},{"ruleId":"401","severity":1,"message":"512","line":1774,"column":9,"nodeType":"403","messageId":"404","endLine":1774,"endColumn":29},{"ruleId":"401","severity":1,"message":"513","line":1808,"column":9,"nodeType":"403","messageId":"404","endLine":1808,"endColumn":36},{"ruleId":"401","severity":1,"message":"514","line":1813,"column":9,"nodeType":"403","messageId":"404","endLine":1813,"endColumn":36},{"ruleId":"401","severity":1,"message":"515","line":1986,"column":5,"nodeType":"403","messageId":"404","endLine":1986,"endColumn":6},{"ruleId":"401","severity":1,"message":"516","line":2923,"column":7,"nodeType":"403","messageId":"404","endLine":2923,"endColumn":30},{"ruleId":"401","severity":1,"message":"517","line":2924,"column":7,"nodeType":"403","messageId":"404","endLine":2924,"endColumn":30},{"ruleId":"401","severity":1,"message":"518","line":310,"column":9,"nodeType":"403","messageId":"404","endLine":310,"endColumn":17},{"ruleId":"434","severity":1,"message":"519","line":351,"column":6,"nodeType":"436","endLine":351,"endColumn":19,"suggestions":"520"},{"ruleId":"401","severity":1,"message":"521","line":6,"column":8,"nodeType":"403","messageId":"404","endLine":6,"endColumn":19},{"ruleId":"401","severity":1,"message":"522","line":210,"column":11,"nodeType":"403","messageId":"404","endLine":210,"endColumn":18},{"ruleId":"401","severity":1,"message":"523","line":217,"column":11,"nodeType":"403","messageId":"404","endLine":217,"endColumn":28},{"ruleId":"401","severity":1,"message":"524","line":219,"column":11,"nodeType":"403","messageId":"404","endLine":219,"endColumn":26},{"ruleId":"401","severity":1,"message":"525","line":221,"column":11,"nodeType":"403","messageId":"404","endLine":221,"endColumn":27},{"ruleId":"401","severity":1,"message":"526","line":514,"column":9,"nodeType":"403","messageId":"404","endLine":514,"endColumn":26},{"ruleId":"401","severity":1,"message":"527","line":518,"column":9,"nodeType":"403","messageId":"404","endLine":518,"endColumn":24},{"ruleId":"401","severity":1,"message":"528","line":523,"column":9,"nodeType":"403","messageId":"404","endLine":523,"endColumn":25},{"ruleId":"401","severity":1,"message":"529","line":536,"column":11,"nodeType":"403","messageId":"404","endLine":536,"endColumn":19},{"ruleId":"401","severity":1,"message":"489","line":538,"column":11,"nodeType":"403","messageId":"404","endLine":538,"endColumn":15},{"ruleId":"401","severity":1,"message":"530","line":569,"column":11,"nodeType":"403","messageId":"404","endLine":569,"endColumn":29},{"ruleId":"401","severity":1,"message":"531","line":587,"column":11,"nodeType":"403","messageId":"404","endLine":587,"endColumn":29},{"ruleId":"401","severity":1,"message":"441","line":602,"column":9,"nodeType":"403","messageId":"404","endLine":602,"endColumn":13},{"ruleId":"401","severity":1,"message":"532","line":623,"column":22,"nodeType":"403","messageId":"404","endLine":623,"endColumn":39},{"ruleId":"401","severity":1,"message":"533","line":641,"column":11,"nodeType":"403","messageId":"404","endLine":641,"endColumn":24},{"ruleId":"401","severity":1,"message":"534","line":646,"column":11,"nodeType":"403","messageId":"404","endLine":646,"endColumn":24},{"ruleId":"401","severity":1,"message":"535","line":774,"column":13,"nodeType":"403","messageId":"404","endLine":774,"endColumn":33},{"ruleId":"401","severity":1,"message":"536","line":787,"column":13,"nodeType":"403","messageId":"404","endLine":787,"endColumn":33},{"ruleId":"401","severity":1,"message":"537","line":801,"column":13,"nodeType":"403","messageId":"404","endLine":801,"endColumn":33},{"ruleId":"401","severity":1,"message":"538","line":814,"column":13,"nodeType":"403","messageId":"404","endLine":814,"endColumn":33},{"ruleId":"401","severity":1,"message":"539","line":829,"column":12,"nodeType":"403","messageId":"404","endLine":829,"endColumn":26},{"ruleId":"401","severity":1,"message":"498","line":829,"column":28,"nodeType":"403","messageId":"404","endLine":829,"endColumn":41},{"ruleId":"401","severity":1,"message":"540","line":832,"column":12,"nodeType":"403","messageId":"404","endLine":832,"endColumn":26},{"ruleId":"401","severity":1,"message":"499","line":832,"column":28,"nodeType":"403","messageId":"404","endLine":832,"endColumn":41},{"ruleId":"401","severity":1,"message":"541","line":836,"column":11,"nodeType":"403","messageId":"404","endLine":836,"endColumn":30},{"ruleId":"401","severity":1,"message":"542","line":845,"column":11,"nodeType":"403","messageId":"404","endLine":845,"endColumn":30},{"ruleId":"401","severity":1,"message":"543","line":2,"column":23,"nodeType":"403","messageId":"404","endLine":2,"endColumn":33},{"ruleId":"401","severity":1,"message":"544","line":13,"column":15,"nodeType":"403","messageId":"404","endLine":13,"endColumn":19},{"ruleId":"545","severity":1,"message":"546","line":77,"column":9,"nodeType":"547","endLine":83,"endColumn":10},{"ruleId":"401","severity":1,"message":"548","line":5,"column":7,"nodeType":"403","messageId":"404","endLine":5,"endColumn":17},{"ruleId":"401","severity":1,"message":"549","line":420,"column":9,"nodeType":"403","messageId":"404","endLine":420,"endColumn":15},{"ruleId":"401","severity":1,"message":"550","line":534,"column":9,"nodeType":"403","messageId":"404","endLine":534,"endColumn":20},{"ruleId":"401","severity":1,"message":"551","line":633,"column":9,"nodeType":"403","messageId":"404","endLine":633,"endColumn":16},"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","no-native-reassign",["552"],"no-negated-in-lhs",["553"],"'ThreeDots' is defined but never used.","'Link' is defined but never used.","'today' is defined but never used.","'todayFootyStats' is defined but never used.","'todaySS' is defined but never used.","'tomorrow' is defined but never used.","'tomorrowFootyStats' is defined but never used.","'tomorrowSS' is defined but never used.","'yesterday' is defined but never used.","'yesterdayFootyStats' is defined but never used.","'yesterdaySS' is defined but never used.","'lastSaturday' is defined but never used.","'lastSaturdayFootyStats' is defined but never used.","'historic' is defined but never used.","'historicFootyStats' is defined but never used.","'historicSS' is defined but never used.","'historicDate' is defined but never used.","'dateString2' is defined but never used.","'tomorrowsDateUnformatted' is defined but never used.","'yesterdaysDateUnformatted' is defined but never used.","'saturdayDateUnformatted' is defined but never used.","'lastSaturday' is assigned a value but never used.","'lastSaturdayFootyStats' is assigned a value but never used.","'lastSaturdaySS' is assigned a value but never used.","'data' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.","ArrayExpression",["554"],"'setCount' is assigned a value but never used.","'toggle' is defined but never used.","'tipOutcome' is assigned a value but never used.","'paid' is assigned a value but never used.","'isWithin48Hours' is defined but never used.","'getLeagueInstanceLength' is defined but never used.","React Hook useEffect has a missing dependency: 'fixture'. Either include it or remove the dependency array.",["555"],"'DoughnutChart' is defined but never used.","'dynamicDate' is defined but never used.","'Doughnut' is defined but never used.","'stripePromise' is defined but never used.","'loadingTeamStats' is assigned a value but never used.","'loadingKeyPlayers' is assigned a value but never used.","'loadingOdds' is assigned a value but never used.","React Hook useEffect has an unnecessary dependency: 'userTips'. Either exclude it or remove the dependency array. Outer scope values like 'userTips' aren't valid dependencies because mutating them doesn't re-render the component.",["556"],"'hasCompleteData' is assigned a value but never used.","'homeXGRating' is assigned a value but never used.","'setHomeXGRating' is assigned a value but never used.","'awayXGRating' is assigned a value but never used.","'setAwayXGRating' is assigned a value but never used.","'rollingSOTDiffTotalHome' is assigned a value but never used.","'setRollingSOTDiffTotalHome' is assigned a value but never used.","'similarGamesHome' is assigned a value but never used.","'setSimilarGamesHome' is assigned a value but never used.","'similarGamesAway' is assigned a value but never used.","'setSimilarGamesAway' is assigned a value but never used.","'setHomeXGForStrengthLast5' is assigned a value but never used.","'setHomeOnlyXGForStrength' is assigned a value but never used.","'setHomeXGAgainstStrengthLast5' is assigned a value but never used.","'setHomeOnlyXGAgainstStrength' is assigned a value but never used.","'setHomeDirectnessStrengthLast5' is assigned a value but never used.","'setHomeOnlyDirectnessStrength' is assigned a value but never used.","'setAwayXGForStrengthLast5' is assigned a value but never used.","'setAwayOnlyXGForStrength' is assigned a value but never used.","'setAwayXGAgainstStrengthLast5' is assigned a value but never used.","'setAwayOnlyXGAgainstStrength' is assigned a value but never used.","'setAwayDirectnessStrengthLast5' is assigned a value but never used.","'setAwayOnlyDirectnessStrength' is assigned a value but never used.","'setGameArrayHomeTeamHomeGames' is assigned a value but never used.","'setGameArrayAwayTeamAwayGames' is assigned a value but never used.","'setDivider' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getTeamRanksFromTopTeamsWithPartialMatch'. Either include it or remove the dependency array.",["557"],["558"],"'getRefStats' is defined but never used.","React Hook useMemo has an unnecessary dependency: 'rounds'. Either exclude it or remove the dependency array. Outer scope values like 'rounds' aren't valid dependencies because mutating them doesn't re-render the component.",["559"],"React Hook useEffect has missing dependencies: 'derivedRoundId', 'extractMissingPlayers', 'findGameByPartialMatch', 'game.awayTeam', 'game.date', 'game.homeTeam', 'game.sofaScoreId', 'getGameIdByAwayTeam', 'getGameIdByHomeTeam', 'getMappedTeamName', and 'week'. Either include them or remove the dependency array.",["560"],"'time' is assigned a value but never used.","'paymentStatus' is assigned a value but never used.","'resultHome' is assigned a value but never used.","'resultHomeOnly' is assigned a value but never used.","'resultAway' is assigned a value but never used.","'resultAwayOnly' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'game.matches_completed_minimum'. Either include it or remove the dependency array.",["561"],"'type' is defined but never used.","'testArrayHome' is assigned a value but never used.","'testArrayAway' is assigned a value but never used.","'alpha' is assigned a value but never used.","'beta' is assigned a value but never used.","'teamGoalsHomeRollingAverage' is assigned a value but never used.","'teamGoalsAwayRollingAverage' is assigned a value but never used.","'roundXG' is defined but never used.","'teamGoalsAllRollingAverage' is assigned a value but never used.","'normalizeDifference' is defined but never used.","'predictScore' is defined but never used.","'findClosestProperty' is defined but never used.","'homeOverallVsAwayOverallComparison' is assigned a value but never used.","'awayOverallVsHomeOverallComparison' is assigned a value but never used.","'pointsComparisonHome' is assigned a value but never used.","'pointsComparisonAway' is assigned a value but never used.","'weighedPointsComparisonHome' is assigned a value but never used.","'weighedPointsComparisonAway' is assigned a value but never used.","'i' is assigned a value but never used.","'homeComparisonWeighting' is assigned a value but never used.","'awayComparisonWeighting' is assigned a value but never used.","'seasonId' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'derivedRoundId'. Either include it or remove the dependency array.",["562"],"'Collapsable' is defined but never used.","'divider' is assigned a value but never used.","'goalDiffArrayHome' is defined but never used.","'xgDiffArrayHome' is defined but never used.","'sotDiffArrayHome' is defined but never used.","'goalDiffArrayAway' is assigned a value but never used.","'xgDiffArrayAway' is assigned a value but never used.","'sotDiffArrayAway' is assigned a value but never used.","'awayTeam' is assigned a value but never used.","'homeSixGameAverage' is assigned a value but never used.","'awaySixGameAverage' is assigned a value but never used.","'getLastGameResult' is defined but never used.","'homeFormTrend' is assigned a value but never used.","'awayFormTrend' is assigned a value but never used.","'attackingMetricsHome' is assigned a value but never used.","'attackingMetricsAway' is assigned a value but never used.","'defensiveMetricsHome' is assigned a value but never used.","'defensiveMetricsAway' is assigned a value but never used.","'formPointsHome' is assigned a value but never used.","'formPointsAway' is assigned a value but never used.","'rollingGoalDiffHome' is assigned a value but never used.","'rollingGoalDiffAway' is assigned a value but never used.","'InputLabel' is defined but never used.","'Line' is defined but never used.","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","JSXOpeningElement","'shouldOpen' is assigned a value but never used.","'labels' is assigned a value but never used.","'teamBValues' is assigned a value but never used.","'largest' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"563","fix":"564"},{"desc":"565","fix":"566"},{"desc":"567","fix":"568"},{"desc":"569","fix":"570"},{"desc":"571","fix":"572"},{"desc":"573","fix":"574"},{"desc":"575","fix":"576"},{"desc":"577","fix":"578"},{"desc":"579","fix":"580"},"Update the dependencies array to be: [fetchData]",{"range":"581","text":"582"},"Update the dependencies array to be: [fixture, id]",{"range":"583","text":"584"},"Update the dependencies array to be: []",{"range":"585","text":"586"},"Update the dependencies array to be: [stats, homeForm.teamName, getTeamRanksFromTopTeamsWithPartialMatch]",{"range":"587","text":"588"},"Update the dependencies array to be: [stats, awayForm.teamName, getTeamRanksFromTopTeamsWithPartialMatch]",{"range":"589","text":"590"},"Update the dependencies array to be: [game.sofaScoreId]",{"range":"591","text":"592"},"Update the dependencies array to be: [derivedRoundId, extractMissingPlayers, findGameByPartialMatch, game.awayTeam, game.date, game.homeTeam, game.id, game.sofaScoreId, getGameIdByAwayTeam, getGameIdByHomeTeam, getMappedTeamName, week]",{"range":"593","text":"594"},"Update the dependencies array to be: [awayFiveGameAverage, firstRenderDone, awayTenGameAverage, game.completeData, game.id, game.status, homeFiveGameAverage, homeTenGameAverage, game.matches_completed_minimum]",{"range":"595","text":"596"},"Update the dependencies array to be: [derivedRoundId, id, roundId]",{"range":"597","text":"598"},[510,512],"[fetchData]",[3239,3243],"[fixture, id]",[4365,4375],"[]",[18868,18895],"[stats, homeForm.teamName, getTeamRanksFromTopTeamsWithPartialMatch]",[19084,19111],"[stats, awayForm.teamName, getTeamRanksFromTopTeamsWithPartialMatch]",[36709,36735],"[game.sofaScoreId]",[52855,52864],"[derivedRoundId, extractMissingPlayers, findGameByPartialMatch, game.awayTeam, game.date, game.homeTeam, game.id, game.sofaScoreId, getGameIdByAwayTeam, getGameIdByHomeTeam, getMappedTeamName, week]",[100524,100701],"[awayFiveGameAverage, firstRenderDone, awayTenGameAverage, game.completeData, game.id, game.status, homeFiveGameAverage, homeTenGameAverage, game.matches_completed_minimum]",[7521,7534],"[derivedRoundId, id, roundId]"]