[{"/Users/gregdorward/Development/football-predictions/src/index.js":"1","/Users/gregdorward/Development/football-predictions/src/App.js":"2","/Users/gregdorward/Development/football-predictions/src/reportWebVitals.js":"3","/Users/gregdorward/Development/football-predictions/src/components/spinner.js":"4","/Users/gregdorward/Development/football-predictions/src/components/showCardPotential.js":"5","/Users/gregdorward/Development/football-predictions/src/components/createBadge.js":"6","/Users/gregdorward/Development/football-predictions/src/components/showBttsData.js":"7","/Users/gregdorward/Development/football-predictions/src/components/radio.js":"8","/Users/gregdorward/Development/football-predictions/src/components/Header.js":"9","/Users/gregdorward/Development/football-predictions/src/logic/getFixtures.js":"10","/Users/gregdorward/Development/football-predictions/src/components/createStatsDiv.js":"11","/Users/gregdorward/Development/football-predictions/src/logic/getForm.js":"12","/Users/gregdorward/Development/football-predictions/src/components/Button.js":"13","/Users/gregdorward/Development/football-predictions/src/logic/getScorePredictions.js":"14","/Users/gregdorward/Development/football-predictions/src/components/CollapsableElement.js":"15","/Users/gregdorward/Development/football-predictions/src/components/TextSection.js":"16","/Users/gregdorward/Development/football-predictions/src/logic/getStats.js":"17","/Users/gregdorward/Development/football-predictions/src/components/Div.js":"18","/Users/gregdorward/Development/football-predictions/src/components/Fixture.js":"19","/Users/gregdorward/Development/football-predictions/src/components/CollapsableDiv.js":"20","/Users/gregdorward/Development/football-predictions/src/components/Increment.js":"21","/Users/gregdorward/Development/football-predictions/src/logic/getBTTSPotential.js":"22","/Users/gregdorward/Development/football-predictions/src/components/OddsRadio.js":"23","/Users/gregdorward/Development/football-predictions/src/logic/getTeamStats.js":"24","/Users/gregdorward/Development/football-predictions/src/components/HeadToHead.js":"25","/Users/gregdorward/Development/football-predictions/src/components/BulletList.js":"26","/Users/gregdorward/Development/football-predictions/src/components/Table.js":"27","/Users/gregdorward/Development/football-predictions/src/components/LeagueTable.js":"28"},{"size":500,"mtime":1623321958283,"results":"29","hashOfConfig":"30"},{"size":9597,"mtime":1639759959105,"results":"31","hashOfConfig":"30"},{"size":362,"mtime":1612138266385,"results":"32","hashOfConfig":"30"},{"size":297,"mtime":1611654841360,"results":"33","hashOfConfig":"30"},{"size":0,"mtime":1611654832610,"results":"34","hashOfConfig":"30"},{"size":252,"mtime":1612138266381,"results":"35","hashOfConfig":"30"},{"size":0,"mtime":1611654828618,"results":"36","hashOfConfig":"30"},{"size":963,"mtime":1621262249615,"results":"37","hashOfConfig":"30"},{"size":144,"mtime":1623942523306,"results":"38","hashOfConfig":"30"},{"size":38084,"mtime":1641072976207,"results":"39","hashOfConfig":"30"},{"size":4239,"mtime":1640960918171,"results":"40","hashOfConfig":"30"},{"size":1222,"mtime":1627911388038,"results":"41","hashOfConfig":"30"},{"size":273,"mtime":1625047346682,"results":"42","hashOfConfig":"30"},{"size":69217,"mtime":1641075304309,"results":"43","hashOfConfig":"30"},{"size":650,"mtime":1616070225969,"results":"44","hashOfConfig":"30"},{"size":180,"mtime":1612138266381,"results":"45","hashOfConfig":"30"},{"size":17322,"mtime":1640722249940,"results":"46","hashOfConfig":"30"},{"size":203,"mtime":1624975662098,"results":"47","hashOfConfig":"30"},{"size":8576,"mtime":1640106746262,"results":"48","hashOfConfig":"30"},{"size":595,"mtime":1614865093901,"results":"49","hashOfConfig":"30"},{"size":1347,"mtime":1639517068672,"results":"50","hashOfConfig":"30"},{"size":2540,"mtime":1640169330142,"results":"51","hashOfConfig":"30"},{"size":930,"mtime":1621959773714,"results":"52","hashOfConfig":"30"},{"size":7771,"mtime":1641049743159,"results":"53","hashOfConfig":"30"},{"size":2194,"mtime":1641049368655,"results":"54","hashOfConfig":"30"},{"size":440,"mtime":1625164455163,"results":"55","hashOfConfig":"30"},{"size":4204,"mtime":1639674265428,"results":"56","hashOfConfig":"30"},{"size":4284,"mtime":1640106738095,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"1f0e5p2",{"filePath":"61","messages":"62","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"60"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"60"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"60"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"60"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"60"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"60"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"60"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"60"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"60"},"/Users/gregdorward/Development/football-predictions/src/index.js",[],["124","125"],"/Users/gregdorward/Development/football-predictions/src/App.js",["126","127","128","129","130","131"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Header from \"./components/Header\";\nimport Radio from \"./components/radio\";\nimport { Button } from \"./components/Button\";\nimport OddsRadio from \"./components/OddsRadio\";\nimport { selectedOdds } from \"./components/OddsRadio\";\nimport {\n  FacebookShareButton,\n  FacebookIcon,\n  RedditShareButton,\n  RedditIcon,\n  TelegramShareButton,\n  TelegramIcon,\n  TwitterShareButton,\n  TwitterIcon,\n  WhatsappShareButton,\n  WhatsappIcon,\n} from \"react-share\";\n\nimport {\n  today,\n  generateFixtures,\n  generatePriorFixtures,\n  tomorrow,\n  yesterday,\n} from \"./logic/getFixtures\";\nimport { selectedOption } from \"./components/radio\";\nimport TextBlock from \"./components/TextSection\";\nimport { ThreeDots } from \"react-loading-icons\";\nrequire(\"dotenv\").config();\n\nexport const proxyurl = \"https://safe-caverns-99679.herokuapp.com/\";\nexport var fixtureList = [];\nexport let allLeagueData = [];\n\nexport const availableLeagues = [];\nexport var orderedLeagues = [];\n\n(async function getLeagueList() {\n  let leagueList;\n\n  leagueList = await fetch(`${process.env.REACT_APP_EXPRESS_SERVER}leagueList`);\n  console.log(leagueList);\n\n  // ReactDOM.render(\n  //   <div className=\"LoadingText\">\n  //     Loading form data. This might take a while if you're the first user\n  //     today...\n  //   </div>,\n  //   document.getElementById(\"RadioButtons\")\n  // );\n\n  let leagueArray;\n  await leagueList.json().then((leagues) => {\n    leagueArray = Array.from(leagues.data);\n  });\n  console.log(leagueArray);\n\n  for (let i = 0; i < leagueArray.length; i++) {\n    const league = leagueArray[i];\n    const name = leagueArray[i].name;\n\n    for (let x = 0; x < league.season.length; x++) {\n      const element = league.season[x];\n\n      if (element.year === 20212022 || element.year === 2021) {\n        if (element.id !== 5784) {\n          availableLeagues.push({ name: name, element });\n        }\n      }\n    }\n\n    async function mapOrder(array, order, key) {\n      array.sort(function (a, b) {\n        var A = a.element[key],\n          B = b.element[key];\n\n        if (order.indexOf(A) > order.indexOf(B)) {\n          return 1;\n        } else {\n          return -1;\n        }\n      });\n      console.log(array);\n      return array;\n    }\n\n    //leagues ordered by id\n    var leagueOrder = [\n      6135, //premier league 21/22\n      6089, //championship\n      6017, //league 1 21/22\n      6015, //league 2 21/22\n      6088, //National league 21/22\n      6211, //\n      5992, //Scottish Prem 21/22\n      6192, //\n      6198, //Serie A\n      6019, //French Prem 21/22\n      6117, //Portagul Prem 21/22\n      5951, //Dutch Prem 21/22\n      6079, //Belgian Pro League 21/22\n      5505, //sweden 21/22\n      5961, //Danish Prem 21\n      5496, //Norway Prem 21\n      6008, //Austrian Prem 21\n      6282, //Greek Prem 21\n      5948, //Polish prem 21/22\n      5534, //Irish Prem 21\n      6120, //Spanish secunda 21/22\n      6205, //\n      6020, //Bundesliga 2 21/22\n      6018, //French League 2 21/22\n      5991, //Scottish Championship\n      5976, //Scottish league 1 21/22\n      5974, //Scottish league 2 21/22\n      6173, //Women's prem 21/22\n      5674, //MLS 21\n      6639, //Australian A league 21\n      5713, //Brazil prem 21\n      5434, //Japan 21\n      5506, //S Korea 21\n      6038, //Mexico prem 21/22`\n      6083, //National league North and South 21/22\n    ];\n\n    orderedLeagues = await mapOrder(availableLeagues, leagueOrder, \"id\");\n  }\n\n  // ReactDOM.render(\n  //   <div className=\"LastXGames\">\n  //     <Radio\n  //       value=\"5\"\n  //       label=\"form based on last 5 games\"\n  //       className=\"FormRadio\"\n  //     />\n  //     <Radio\n  //       value=\"6\"\n  //       label=\"form based on last 6 games\"\n  //       className=\"FormRadio\"\n  //     />\n  //     <Radio\n  //       value=\"10\"\n  //       label=\"form based on last 10 games\"\n  //       className=\"FormRadio\"\n  //     />\n  //   </div>,\n  //   document.getElementById(\"RadioButtons\")\n  // );\n\n  // ReactDOM.render(\n  //   <TextBlock\n  //     text=\"Select how many games you would like to fetch form data for\"\n  //     className=\"RadioText\"\n  //   />,\n  //   document.getElementById(\"RadioText\")\n  // );\n\n  ReactDOM.render(\n    <div className=\"FixtureButtons\">\n      <div className=\"historicResults\">\n        <Button\n          text={\"Last Saturday's predictions\"}\n          className=\"HistoricFixturesButton\"\n          onClickEvent={async () =>\n            fixtureList.push(\n              await generateFixtures(\n                \"lastSaturday\",\n                selectedOption,\n                selectedOdds\n              )\n            )\n          }\n        />\n        <Button\n          text={\"More historic predictions\"}\n          className=\"HistoricFixturesButtonRight\"\n          onClickEvent={async () =>\n            fixtureList.push(\n              await generateFixtures(\"historic\", selectedOption, selectedOdds)\n            )\n          }\n        />\n      </div>\n      <Button\n        text={\"Yesterday's prediction outcomes\"}\n        className=\"FixturesButton\"\n        onClickEvent={async () =>\n          fixtureList.push(\n            await generateFixtures(\n              \"yesterdaysFixtures\",\n              selectedOption,\n              selectedOdds\n            )\n          )\n        }\n      />\n      <Button\n        text={\"Today's fixtures\"}\n        className=\"FixturesButton\"\n        onClickEvent={async () =>\n          fixtureList.push(\n            await generateFixtures(\n              \"todaysFixtures\",\n              selectedOption,\n              selectedOdds\n            )\n          )\n        }\n      />\n      <Button\n        text={\"Tomorrow's fixtures\"}\n        className=\"FixturesButton\"\n        onClickEvent={async () =>\n          fixtureList.push(\n            await generateFixtures(\n              \"tomorrowsFixtures\",\n              selectedOption,\n              selectedOdds\n            )\n          )\n        }\n      />\n    </div>,\n    document.getElementById(\"Buttons\")\n  );\n  ReactDOM.render(\n    <div className=\"OddsRadios\">\n      <OddsRadio value=\"Fractional\"></OddsRadio>\n      <OddsRadio value=\"Decimal\"></OddsRadio>\n    </div>,\n    document.getElementById(\"Checkbox\")\n  );\n})();\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <a\n        className=\"SocialLink\"\n        href=\"https://www.reddit.com/r/xgtipping/\"\n        target=\"_blank\"\n        rel=\"noreferrer\"\n      >\n        r/xgtipping\n      </a>\n      <div id=\"LoadingContainer\" className=\"LoadingContainer\" />\n      <div id=\"RadioContainer\" className=\"RadioContainer\">\n        <div id=\"RadioText\" />\n        <div id=\"RadioButtons\" />\n      </div>\n      <div id=\"Day\" />\n      <div id=\"Checkbox\" />\n      <div id=\"Buttons\">\n        <ThreeDots className=\"MainLoading\" />\n        <div>Loading all fixture and form data...</div>\n      </div>\n      <div id=\"successMeasure\" />\n      <div id=\"bestPredictions\" />\n      <div id=\"exoticOfTheDay\" />\n      <div id=\"BTTS\" />\n      <div id=\"longShots\" />\n      <div id=\"draws\" />\n      <div id=\"tables\" />\n      <div id=\"homeBadge\" />\n      <div id=\"FixtureContainerHeaders\"></div>\n      <div id=\"FixtureContainer\">\n        <div>\n          <div className=\"WelcomeText\">\n            Global fixtures and predictions from 30+ league competitions,\n            including\n          </div>\n          <ul className=\"AllLeagues\">\n            <li className=\"League\">Premier League</li>\n            <li className=\"League\">La Liga</li>\n            <li className=\"League\">Serie A</li>\n            <li className=\"League\">Bundesliga</li>\n            <li className=\"League\">Ligue 1</li>\n            <li className=\"League\">MLS</li>\n            <li className=\"League\">Primeira Liga</li>\n          </ul>\n          <div className=\"DataText\">Raw data from</div>\n          <a\n            className=\"DataLink\"\n            href=\"https://www.footystats.org\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            footystats.org\n          </a>\n        </div>\n      </div>\n      <div className=\"Social\">\n        <TwitterShareButton\n          url={\"www.xgtipping.com\"}\n          title={\"#XGTipping\"}\n          className=\"ShareButton\"\n          style={{ backgroundColor: \"#294A66\", boxShadow: \"none\" }}\n        >\n          <TwitterIcon size={\"3em\"} round={true} />\n        </TwitterShareButton>\n        <FacebookShareButton\n          url={\"www.xgtipping.com\"}\n          quote={\"XGTipping - data-driven football predictions\"}\n          className=\"ShareButton\"\n          style={{ backgroundColor: \"#294A66\", boxShadow: \"none\" }}\n        >\n          <FacebookIcon size={\"3em\"} round={true} />\n        </FacebookShareButton>\n        <RedditShareButton\n          url={\"www.xgtipping.com\"}\n          title={\"XGTipping\"}\n          className=\"ShareButton\"\n          style={{ backgroundColor: \"#294A66\", boxShadow: \"none\" }}\n        >\n          <RedditIcon size={\"3em\"} round={true} />\n        </RedditShareButton>\n        <WhatsappShareButton\n          url={\"www.xgtipping.com\"}\n          title={\"XGTipping\"}\n          separator=\": \"\n          className=\"ShareButton\"\n          style={{ backgroundColor: \"#294A66\", boxShadow: \"none\" }}\n        >\n          <WhatsappIcon size={\"3em\"} round={true} />\n        </WhatsappShareButton>\n        <TelegramShareButton\n          url={\"XGTipping\"}\n          title={\"XGTipping\"}\n          className=\"ShareButton\"\n          style={{ backgroundColor: \"#294A66\", boxShadow: \"none\" }}\n        >\n          <TelegramIcon size={\"3em\"} round={true} />\n        </TelegramShareButton>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/gregdorward/Development/football-predictions/src/reportWebVitals.js",[],"/Users/gregdorward/Development/football-predictions/src/components/spinner.js",[],"/Users/gregdorward/Development/football-predictions/src/components/showCardPotential.js",[],"/Users/gregdorward/Development/football-predictions/src/components/createBadge.js",[],"/Users/gregdorward/Development/football-predictions/src/components/showBttsData.js",[],"/Users/gregdorward/Development/football-predictions/src/components/radio.js",[],"/Users/gregdorward/Development/football-predictions/src/components/Header.js",[],"/Users/gregdorward/Development/football-predictions/src/logic/getFixtures.js",["132","133"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { orderedLeagues, proxyurl } from \"../App\";\nimport { getForm, applyColour } from \"./getForm\";\nimport { Fixture } from \"../components/Fixture\";\nimport { Button } from \"../components/Button\";\nimport { getScorePrediction } from \"../logic/getScorePredictions\";\nimport { ThreeDots } from \"react-loading-icons\";\nimport { selectedOdds } from \"../components/OddsRadio\";\nimport LeagueTable from \"../components/LeagueTable\";\n\nvar oddslib = require(\"oddslib\");\n\nrequire(\"dotenv\").config();\n\nvar fixtureResponse;\nvar fixtureArray;\nexport const matches = [];\nexport const resultedMatches = [];\nvar league;\nvar leagueGames = [];\nexport var leagueArray = [];\nexport let leagueInstance;\nvar lastFiveFormHome;\nvar lastFiveFormAway;\nvar lastSixFormHome;\nvar lastSixFormAway;\nvar lastTenFormHome;\nvar lastTenFormAway;\n\nexport const [currentDay, month, year] = new Date()\n  .toLocaleDateString(\"en-US\")\n  .split(\"/\");\nlet tomorrowsDate = new Date();\ntomorrowsDate.setDate(new Date().getDate() + 1);\nlet [tomorrowDay, tomorrowMonth, tomorrowYear] = tomorrowsDate\n  .toLocaleDateString(\"en-US\")\n  .split(\"/\");\n\nlet yesterdaysDate = new Date();\nyesterdaysDate.setDate(new Date().getDate() - 1);\nlet [yesterdayDay, yesterdayMonth, yesterdayYear] = yesterdaysDate\n  .toLocaleDateString(\"en-US\")\n  .split(\"/\");\n\n// var prevSat = new Date();\n\n// prevSat.setDate(prevSat.getDate() - (6-prevSat.getDay()))\n\n// console.log(prevSat)\n\nvar d = new Date();\n\n// set to Monday of this week\nd.setDate(d.getDate() - ((d.getDay() + 6) % 7));\n\n// set to Saturday just gone\nd.setDate(d.getDate() - 16);\n\nlet [saturdayDay, saturdayMonth, saturdayYear] = d\n  .toLocaleDateString(\"en-US\")\n  .split(\"/\");\n\nvar historicDate = new Date();\n\n// set to Monday of this week\nhistoricDate.setDate(\n  historicDate.getDate() - ((historicDate.getDay() + 6) % 7)\n);\n\n// set to Saturday prior to last\nhistoricDate.setDate(historicDate.getDate() - 9);\n\nlet [historicDay, historicMonth, historicYear] = historicDate\n  .toLocaleDateString(\"en-US\")\n  .split(\"/\");\nlet rawPosition;\n\nexport const saturday = `${process.env.REACT_APP_EXPRESS_SERVER}matches/${saturdayYear}-${saturdayDay}-${saturdayMonth}`;\nexport const historic = `${process.env.REACT_APP_EXPRESS_SERVER}matches/${historicYear}-${historicDay}-${historicMonth}`;\nexport const yesterday = `${process.env.REACT_APP_EXPRESS_SERVER}matches/${yesterdayYear}-${yesterdayDay}-${yesterdayMonth}`;\nexport const today = `${process.env.REACT_APP_EXPRESS_SERVER}matches/${year}-${currentDay}-${month}`;\nexport const tomorrow = `${process.env.REACT_APP_EXPRESS_SERVER}matches/${tomorrowYear}-${tomorrowDay}-${tomorrowMonth}`;\n\nexport function getRadioState(state) {\n  let radioState = state;\n  return radioState;\n}\n\nexport async function diff(a, b) {\n  return parseFloat(a - b).toFixed(2);\n}\n\nexport let allForm = [];\nexport let tableArray = [];\nleagueInstance = [];\n\nexport async function generateTables() {\n  leagueArray.forEach(function (league) {\n    leagueInstance = [];\n    if (!league.data.specific_tables[0].groups) {\n      for (\n        let index = 0;\n        index < league.data.specific_tables[0].table.length;\n        index++\n      ) {\n        let currentTeam = league.data.specific_tables[0].table[index];\n        let last5 = currentTeam.wdl_record.slice(-5);\n        let rawForm = last5.replace(/,/g, \"\").toUpperCase();\n        let form = Array.from(rawForm);\n        const team = {\n          Position: index + 1,\n          Name: currentTeam.cleanName,\n          Played: currentTeam.matchesPlayed,\n          Wins: currentTeam.seasonWins_overall,\n          Draws: currentTeam.seasonDraws_overall,\n          Losses: currentTeam.seasonLosses_overall,\n          For: currentTeam.seasonGoals,\n          Against:\n            currentTeam.seasonConceded_home + currentTeam.seasonConceded_away,\n          GoalDifference: currentTeam.seasonGoalDifference,\n          Form: `${form[0]}${form[1]}${form[2]}${form[3]}${form[4]}`,\n          Points: currentTeam.points,\n        };\n        rawPosition = team.Position\n        leagueInstance.push(team);\n      }\n      tableArray.push(leagueInstance);\n    } else if (league.data.league_table === null) {\n      for (\n        let index = 0;\n        index < league.data.all_matches_table_overall.length;\n        index++\n      ) {\n        let currentTeam = league.data.all_matches_table_overall[index];\n        let last5 = \"N/A\";\n        const team = {\n          Position: index + 1,\n          Name: currentTeam.cleanName,\n          Played: currentTeam.matchesPlayed,\n          Wins: currentTeam.seasonWins_overall,\n          Draws: currentTeam.seasonDraws_overall,\n          Losses: currentTeam.seasonLosses_overall,\n          For: currentTeam.seasonGoals,\n          Against:\n            currentTeam.seasonConceded_home + currentTeam.seasonConceded_away,\n          GoalDifference: currentTeam.seasonGoalDifference,\n          Form: last5,\n          Points: currentTeam.points,\n        };\n        rawPosition = team.Position\n\n        leagueInstance.push(team);\n      }\n      tableArray.push(leagueInstance);\n    }\n  });\n}\n\nexport async function renderTable(index) {\n  let league = tableArray[index];\n  if (league !== undefined) {\n    ReactDOM.render(\n      <LeagueTable Teams={league} Key={`League${index}`} />,\n      document.getElementById(`leagueName${index}`)\n    );\n  }\n}\n\nasync function createFixture(match, result, mockBool) {\n  let roundedHomeOdds;\n  let roundedAwayOdds;\n  let roundedBTTSOdds;\n  let homeFraction;\n  let awayFraction;\n  let bttsFraction;\n\n  if (selectedOdds === \"Fractional\") {\n    if (match.homeOdds !== 0 && match.awayOdds !== 0) {\n      roundedHomeOdds = (Math.round(match.homeOdds * 5) / 5).toFixed(1);\n      roundedAwayOdds = (Math.round(match.awayOdds * 5) / 5).toFixed(1);\n\n      if (roundedHomeOdds < 1.1) {\n        roundedHomeOdds = 1.1;\n      }\n      if (roundedAwayOdds < 1.1) {\n        roundedAwayOdds = 1.1;\n      }\n\n      try {\n        homeFraction = oddslib\n          .from(\"decimal\", roundedHomeOdds)\n          .to(\"fractional\", { precision: 1 });\n        awayFraction = oddslib\n          .from(\"decimal\", roundedAwayOdds)\n          .to(\"fractional\", { precision: 1 });\n      } catch (error) {\n        console.log(error);\n      }\n    } else {\n      homeFraction = \"N/A\";\n      awayFraction = \"N/A\";\n    }\n\n    if (match.bttsOdds !== 0) {\n      roundedBTTSOdds = (Math.round(match.bttsOdds * 5) / 5).toFixed(1);\n\n      if (roundedBTTSOdds < 1.1) {\n        roundedBTTSOdds = 1.1;\n      }\n\n      try {\n        bttsFraction = oddslib\n          .from(\"decimal\", roundedBTTSOdds)\n          .to(\"fractional\", { precision: 1 });\n      } catch (error) {\n        console.log(error);\n      }\n    } else {\n      bttsFraction = \"N/A\";\n    }\n  } else if (selectedOdds === \"Decimal\") {\n    if (match.homeOdds !== 0 && match.awayOdds !== 0) {\n      homeFraction = match.homeOdds;\n      awayFraction = match.awayOdds;\n    } else {\n      homeFraction = \"N/A\";\n      awayFraction = \"N/A\";\n    }\n\n    if (match.bttsOdds !== 0) {\n      bttsFraction = match.bttsOdds;\n    } else {\n      bttsFraction = \"N/A\";\n    }\n  }\n\n  match.fractionHome = homeFraction;\n  match.fractionAway = awayFraction;\n\n  match.bttsFraction = bttsFraction;\n\n  match.game = match.homeTeam + \" v \" + match.awayTeam;\n\n  if (mockBool !== true) {\n    ReactDOM.render(\n      <Fixture\n        fixtures={matches}\n        result={result}\n        mock={mockBool}\n        className={\"individualFixture\"}\n      />,\n      document.getElementById(\"FixtureContainer\")\n    );\n  } else if (mockBool === true) {\n    ReactDOM.render(\n      <Fixture\n        fixtures={matches}\n        result={result}\n        mock={mockBool}\n        className={\"individualFixture\"}\n      />,\n      document.getElementById(\"FixtureContainer\")\n    );\n  }\n}\n\nvar myHeaders = new Headers();\nmyHeaders.append(\"Origin\", \"https://gregdorward.github.io\");\n\nexport async function generateFixtures(day, radioState, selectedOdds) {\n  let url;\n  switch (day) {\n    case \"lastSaturday\":\n      url = saturday;\n      break;\n    case \"historic\":\n      url = historic;\n      break;\n    case \"yesterdaysFixtures\":\n      url = yesterday;\n      break;\n    case \"todaysFixtures\":\n      url = today;\n      break;\n    case \"tomorrowsFixtures\":\n      url = tomorrow;\n      break;\n    default:\n      break;\n  }\n\n  fixtureResponse = await fetch(url);\n\n  await fixtureResponse.json().then((fixtures) => {\n    fixtureArray = Array.from(fixtures.data);\n  });\n\n  let form;\n  let formArray;\n  var isFormStored;\n  var isStoredLocally;\n  let storedForm = await fetch(\n    `${process.env.REACT_APP_EXPRESS_SERVER}form${day}`,\n    {\n      method: \"GET\",\n      headers: {\n        Accept: \"application/json\",\n      },\n    }\n  );\n  if (storedForm.status === 201) {\n    await storedForm.json().then((form) => {\n      formArray = Array.from(form.allForm);\n      isFormStored = true;\n      isStoredLocally = false;\n      allForm = formArray;\n    });\n  } else if (storedForm.status === 200) {\n    await storedForm.json().then((form) => {\n      formArray = Array.from(form.allForm);\n      isFormStored = true;\n      isStoredLocally = false;\n      allForm = formArray;\n    });\n  } else {\n    isFormStored = false;\n    isStoredLocally = false;\n  }\n\n  ReactDOM.render(\n    <div>\n      <div className=\"LoadingText\">Loading all league data</div>\n      <ThreeDots height=\"3em\" />\n    </div>,\n    document.getElementById(\"Buttons\")\n  );\n\n  league = await fetch(\n    `${process.env.REACT_APP_EXPRESS_SERVER}leagues/${currentDay}${month}${year}`\n  );\n\n  var leaguePositions = [];\n  if (league.status === 200) {\n    await league.json().then((leagues) => {\n      leagueArray = Array.from(leagues.leagueArray);\n    });\n    generateTables(leagueArray);\n  } else {\n    for (let i = 0; i < orderedLeagues.length; i++) {\n      league = await fetch(\n        `${process.env.REACT_APP_EXPRESS_SERVER}tables/${orderedLeagues[i].element.id}/${currentDay}${month}${year}`\n      );\n      // eslint-disable-next-line no-loop-func\n      await league.json().then((table) => {\n        leagueArray.push(table);\n      });\n      generateTables(leagueArray);\n    }\n  }\n\n  for (let i = 0; i < 35; i++) {\n    for (\n      let x = 0;\n      x < leagueArray[i].data.all_matches_table_overall.length;\n      x++\n    ) {\n      let string = leagueArray[i].data.all_matches_table_overall[x];\n      let stringHome = leagueArray[i].data.all_matches_table_home[x];\n      let stringAway = leagueArray[i].data.all_matches_table_away[x];\n\n      leaguePositions.push({\n        name: string.cleanName,\n        position: string.position,\n        rawPosition: x+1,\n        homeFormName: stringHome.cleanName,\n        awayFormName: stringAway.cleanName,\n        homeSeasonWinPercentage: stringHome.seasonWins,\n        awaySeasonWinPercentage: stringAway.seasonWins,\n        homeSeasonLossPercentage: stringHome.seasonLosses_home,\n        awaySeasonLossPercentage: stringAway.seasonLosses_away,\n        homeSeasonDrawPercentage: stringHome.seasonDraws,\n        awaySeasonDrawPercentage: stringAway.seasonDraws,\n        homeSeasonMatchesPlayed: stringHome.matchesPlayed,\n        awaySeasonMatchesPlayed: stringAway.matchesPlayed,\n        ppg: string.ppg_overall,\n      });\n    }\n  }\n  console.log(leaguePositions)\n\n  let previousLeagueName;\n\n  for (let i = 0; i < orderedLeagues.length; i++) {\n    leagueGames = fixtureArray.filter(\n      (game) => game.competition_id === orderedLeagues[i].element.id\n    );\n\n    for (const fixture of leagueGames) {\n      const unixTimestamp = fixture.date_unix;\n      const milliseconds = unixTimestamp * 1000;\n      const dateObject = new Date(milliseconds);\n\n      let match = {};\n      if (orderedLeagues[i].name !== previousLeagueName) {\n        match.leagueName = orderedLeagues[i].name;\n        match.leagueIndex = i;\n      } else {\n        match.leagueName = null;\n      }\n      match.id = fixture.id;\n      match.competition_id = fixture.competition_id;\n      match.time = dateObject.toLocaleString(\"en-GB\", {\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n      });\n      match.homeTeam = fixture.home_name;\n      match.awayTeam = fixture.away_name;\n      match.homeOdds = fixture.odds_ft_1;\n      match.awayOdds = fixture.odds_ft_2;\n      match.drawOdds = fixture.odds_ft_x;\n      match.homeDoubleChance = fixture.odds_doublechance_1x;\n      match.awayDoubleChance = fixture.odds_doublechance_x2;\n      match.bttsOdds = fixture.odds_btts_yes;\n      match.homeId = fixture.homeID;\n      match.awayId = fixture.awayID;\n      match.form = [];\n      match.homeTeamInfo = [];\n      match.awayTeamInfo = [];\n      match.btts = false;\n\n      previousLeagueName = orderedLeagues[i].name;\n\n      let homeTeaminLeague;\n      let awayTeaminLeague;\n      let teamPositionHome;\n      let teamPositionHomeTable;\n      let teamPositionAwayTable;\n      let homeTeamWinPercentageHome;\n      let awayTeamWinPercentageAway;\n      let homeTeamLossPercentageHome;\n      let awayTeamLossPercentageAway;\n      let homeTeamDrawPercentageHome;\n      let awayTeamDrawPercentageAway;\n      let teamPositionAway;\n      let teamPositionPrefix;\n      let homePrefix;\n      let homePrefixHomeTable;\n      let awayPrefix;\n      let awayPrefixAwayTable;\n      let homeSeasonPPG;\n      let awaySeasonPPG;\n\n      async function getPrefix(position) {\n        switch (position) {\n          case 1:\n          case 21:\n          case 31:\n            teamPositionPrefix = \"st\";\n            break;\n          case 2:\n          case 22:\n          case 32:\n            teamPositionPrefix = \"nd\";\n            break;\n          case 3:\n          case 23:\n          case 33:\n            teamPositionPrefix = \"rd\";\n            break;\n          case 4:\n          case 5:\n          case 6:\n          case 7:\n          case 8:\n          case 9:\n          case 10:\n          case 11:\n          case 12:\n          case 13:\n          case 14:\n          case 15:\n          case 16:\n          case 17:\n          case 18:\n          case 19:\n          case 20:\n          case 24:\n          case 25:\n          case 26:\n          case 27:\n          case 28:\n          case 29:\n          case 30:\n          case 34:\n          case 35:\n          case 36:\n          case 37:\n          case 38:\n          case 39:\n          case 40:\n            teamPositionPrefix = \"th\";\n            break;\n          default:\n            break;\n        }\n        return teamPositionPrefix;\n      }\n\n      try {\n        homeTeaminLeague = leaguePositions.find(\n          (team) => team.name === match.homeTeam\n        );\n\n        let homeTeaminHomeLeague = leaguePositions.find(\n          (team) => team.homeFormName === match.homeTeam\n        );\n\n        console.log(homeTeaminHomeLeague)\n        teamPositionHome = homeTeaminLeague.position;\n        teamPositionHomeTable = homeTeaminHomeLeague.position;\n\n        homeTeamWinPercentageHome =\n          (homeTeaminHomeLeague.homeSeasonWinPercentage /\n            homeTeaminHomeLeague.homeSeasonMatchesPlayed) *\n          100;\n\n        homeTeamLossPercentageHome =\n          (homeTeaminHomeLeague.homeSeasonLossPercentage /\n            homeTeaminHomeLeague.homeSeasonMatchesPlayed) *\n          100;\n\n        homeTeamDrawPercentageHome =\n          (homeTeaminHomeLeague.homeSeasonDrawPercentage /\n            homeTeaminHomeLeague.homeSeasonMatchesPlayed) *\n          100;\n\n        homePrefix = await getPrefix(teamPositionHome);\n        homePrefixHomeTable = await getPrefix(teamPositionHomeTable);\n\n        homeSeasonPPG = homeTeaminLeague.ppg.toFixed(2);\n      } catch (error) {\n        console.log(error);\n        teamPositionHome = \"N/A\";\n        homePrefix = \"\";\n        homePrefixHomeTable = \"\";\n        homeSeasonPPG = \"N/A\";\n      }\n\n      try {\n        awayTeaminLeague = leaguePositions.find(\n          (team) => team.name === match.awayTeam\n        );\n\n        let awayTeaminAwayLeague = leaguePositions.find(\n          (team) => team.awayFormName === match.awayTeam\n        );\n\n        teamPositionAway = awayTeaminLeague.position;\n        teamPositionAwayTable = awayTeaminAwayLeague.position;\n\n        awayTeamWinPercentageAway =\n          (awayTeaminAwayLeague.awaySeasonWinPercentage /\n            awayTeaminAwayLeague.awaySeasonMatchesPlayed) *\n          100;\n\n        awayTeamLossPercentageAway =\n          (awayTeaminAwayLeague.awaySeasonLossPercentage /\n            awayTeaminAwayLeague.awaySeasonMatchesPlayed) *\n          100;\n\n        awayTeamDrawPercentageAway =\n          (awayTeaminAwayLeague.awaySeasonDrawPercentage /\n            awayTeaminAwayLeague.awaySeasonMatchesPlayed) *\n          100;\n\n        console.log(teamPositionAwayTable);\n\n        awayPrefix = await getPrefix(teamPositionAway);\n        awayPrefixAwayTable = await getPrefix(teamPositionAwayTable);\n\n        awaySeasonPPG = awayTeaminLeague.ppg.toFixed(2);\n      } catch (error) {\n        console.log(error);\n        teamPositionAway = \"N/A\";\n        awayPrefix = \"\";\n        awaySeasonPPG = \"N/A\";\n      }\n\n      if (!isFormStored) {\n        form = await getForm(match);\n\n        // if (\n        //   form[0].data[0].stats.additional_info &&\n        //   form[1].data[0].stats.additional_info\n        // ) {\n\n        //   //get the last 5 games stats from a big block of text\n        //   var homeExtract = form[0].data[0].stats.additional_info.replace(\n        //     /[\"']/g,\n        //     \"\"\n        //   );\n\n        //   var slug = homeExtract.split(\",53:\").pop().toUpperCase();\n        let homeFormString5 =\n          form[0].data[0].stats.additional_info.formRun_overall.toUpperCase();\n        let awayFormString5 =\n          form[1].data[0].stats.additional_info.formRun_overall.toUpperCase();\n        let homeFormString6 =\n          form[0].data[1].stats.additional_info.formRun_overall.toUpperCase();\n        let awayFormString6 =\n          form[1].data[1].stats.additional_info.formRun_overall.toUpperCase();\n        let homeFormString10 =\n          form[0].data[2].stats.additional_info.formRun_overall.toUpperCase();\n        let awayFormString10 =\n          form[1].data[2].stats.additional_info.formRun_overall.toUpperCase();\n        lastFiveFormHome = Array.from(homeFormString5);\n        lastSixFormHome = Array.from(homeFormString6);\n        lastTenFormHome = Array.from(homeFormString10);\n        lastFiveFormAway = Array.from(awayFormString5);\n        lastSixFormAway = Array.from(awayFormString6);\n        lastTenFormAway = Array.from(awayFormString10);\n\n        if (teamPositionHome === 0) {\n          teamPositionHome = \"N/A\";\n          teamPositionHomeTable = \"N/A\";\n          homePrefix = \"\";\n          homePrefixHomeTable = \"\";\n        }\n\n        if (teamPositionAway === 0) {\n          teamPositionAway = \"N/A\";\n          teamPositionAwayTable = \"N/A\";\n          awayPrefix = \"\";\n          awayPrefixAwayTable = \"\";\n        }\n        // } else {\n        //   lastFiveFormHome = \"N/A\"\n        //   lastFiveFormAway = \"N/A\"\n        // }\n\n        allForm.push({\n          id: match.id,\n          home: {\n            teamName: match.homeTeam,\n            0: {\n              XGOverall: parseFloat(form[0].data[0].stats.xg_for_avg_overall),\n              XG: parseFloat(form[0].data[0].stats.xg_for_avg_home),\n              ScoredOverall: parseFloat(\n                form[0].data[0].stats.seasonScoredNum_overall\n              ),\n              ScoredAverage: parseFloat(\n                form[0].data[0].stats.seasonScoredAVG_home\n              ),\n              PlayedHome: parseFloat(\n                form[0].data[0].stats.seasonMatchesPlayed_home\n              ),\n              PlayedAway: parseFloat(\n                form[0].data[0].stats.seasonMatchesPlayed_away\n              ),\n              ConcededOverall: parseFloat(\n                form[0].data[0].stats.seasonConcededNum_overall\n              ),\n              ConcededAverage: parseFloat(\n                form[0].data[0].stats.seasonConcededAVG_home\n              ),\n              XGAgainstAvgOverall: parseFloat(\n                form[0].data[0].stats.xg_against_avg_overall\n              ),\n              XGAgainstAverage: parseFloat(\n                form[0].data[0].stats.xg_against_avg_home\n              ),\n              CleanSheetPercentage: parseFloat(\n                form[0].data[0].stats.seasonCSPercentage_home\n              ),\n              AveragePossessionOverall: parseFloat(\n                form[0].data[0].stats.possessionAVG_overall\n              ),\n              AveragePossession: parseFloat(\n                form[0].data[0].stats.possessionAVG_home\n              ),\n              AverageShotsOnTargetOverall: parseFloat(\n                form[0].data[0].stats.shotsOnTargetAVG_overall\n              ),\n              AverageShotsOnTarget: parseFloat(\n                form[0].data[0].stats.shotsOnTargetAVG_home\n              ),\n              AverageDangerousAttacksOverall: parseFloat(\n                form[0].data[0].stats.dangerous_attacks_avg_overall\n              ),\n              PPG: parseFloat(form[0].data[0].stats.seasonPPG_home),\n              AttacksHome: parseFloat(form[0].data[0].stats.attacks_avg_home),\n              AttacksAway: parseFloat(form[0].data[0].stats.attacks_avg_away),\n              AverageDangerousAttacks: parseFloat(\n                form[0].data[0].stats.dangerous_attacks_avg_home\n              ),\n              homeAttackAdvantage: parseFloat(\n                form[0].data[0].stats.homeAttackAdvantage\n              ),\n              homeDefenceAdvantage: parseFloat(\n                form[0].data[0].stats.homeDefenceAdvantage\n              ),\n              BTTSPercentage: parseInt(\n                form[0].data[0].stats.seasonBTTSPercentage_home\n              ),\n              LastFiveForm: lastFiveFormHome,\n              LastSixForm: lastSixFormHome,\n              LastTenForm: lastTenFormHome,\n              LeaguePosition: `${teamPositionHome}${homePrefix}`,\n              SeasonPPG: homeSeasonPPG,\n            },\n            1: {\n              XGOverall: parseFloat(form[0].data[1].stats.xg_for_avg_overall),\n              XG: parseFloat(form[0].data[1].stats.xg_for_avg_home),\n              ScoredOverall: parseFloat(\n                form[0].data[1].stats.seasonScoredNum_overall\n              ),\n              ScoredAverage: parseFloat(\n                form[0].data[1].stats.seasonScoredAVG_home\n              ),\n              PlayedHome: parseFloat(\n                form[0].data[1].stats.seasonMatchesPlayed_home\n              ),\n              PlayedAway: parseFloat(\n                form[0].data[1].stats.seasonMatchesPlayed_away\n              ),\n              ConcededOverall: parseFloat(\n                form[0].data[1].stats.seasonConcededNum_overall\n              ),\n              ConcededAverage: parseFloat(\n                form[0].data[1].stats.seasonConcededAVG_home\n              ),\n              XGAgainstAvgOverall: parseFloat(\n                form[0].data[1].stats.xg_against_avg_overall\n              ),\n              XGAgainstAverage: parseFloat(\n                form[0].data[1].stats.xg_against_avg_home\n              ),\n              CleanSheetPercentage: parseFloat(\n                form[0].data[1].stats.seasonCSPercentage_home\n              ),\n              AveragePossessionOverall: parseFloat(\n                form[0].data[1].stats.possessionAVG_overall\n              ),\n              AveragePossession: parseFloat(\n                form[0].data[1].stats.possessionAVG_home\n              ),\n              AverageShotsOnTargetOverall: parseFloat(\n                form[0].data[1].stats.shotsOnTargetAVG_overall\n              ),\n              AverageShotsOnTarget: parseFloat(\n                form[0].data[1].stats.shotsOnTargetAVG_home\n              ),\n              AverageDangerousAttacksOverall: parseFloat(\n                form[0].data[1].stats.dangerous_attacks_avg_overall\n              ),\n              PPG: parseFloat(form[0].data[1].stats.seasonPPG_home),\n              AttacksHome: parseFloat(form[0].data[1].stats.attacks_avg_home),\n              AttacksAway: parseFloat(form[0].data[1].stats.attacks_avg_away),\n              AverageDangerousAttacks: parseFloat(\n                form[0].data[1].stats.dangerous_attacks_avg_home\n              ),\n              homeAttackAdvantage: parseFloat(\n                form[0].data[1].stats.homeAttackAdvantage\n              ),\n              homeDefenceAdvantage: parseFloat(\n                form[0].data[1].stats.homeDefenceAdvantage\n              ),\n              BTTSPercentage: parseInt(\n                form[0].data[1].stats.seasonBTTSPercentage_home\n              ),\n              LastFiveForm: lastFiveFormHome,\n              LastSixForm: lastSixFormHome,\n              LastTenForm: lastTenFormHome,\n              LeaguePosition: `${teamPositionHome}${homePrefix}`,\n              SeasonPPG: homeSeasonPPG,\n            },\n            2: {\n              XGOverall: parseFloat(form[0].data[2].stats.xg_for_avg_overall),\n              XG: parseFloat(form[0].data[2].stats.xg_for_avg_home),\n              ScoredOverall: parseFloat(\n                form[0].data[2].stats.seasonScoredNum_overall\n              ),\n              ScoredAverage: parseFloat(\n                form[0].data[2].stats.seasonScoredAVG_home\n              ),\n              PlayedHome: parseFloat(\n                form[0].data[2].stats.seasonMatchesPlayed_home\n              ),\n              PlayedAway: parseFloat(\n                form[0].data[2].stats.seasonMatchesPlayed_away\n              ),\n              ConcededOverall: parseFloat(\n                form[0].data[2].stats.seasonConcededNum_overall\n              ),\n              ConcededAverage: parseFloat(\n                form[0].data[2].stats.seasonConcededAVG_home\n              ),\n              XGAgainstAvgOverall: parseFloat(\n                form[0].data[2].stats.xg_against_avg_overall\n              ),\n              XGAgainstAverage: parseFloat(\n                form[0].data[2].stats.xg_against_avg_home\n              ),\n              CleanSheetPercentage: parseFloat(\n                form[0].data[2].stats.seasonCSPercentage_home\n              ),\n              AveragePossessionOverall: parseFloat(\n                form[0].data[2].stats.possessionAVG_overall\n              ),\n              AveragePossession: parseFloat(\n                form[0].data[2].stats.possessionAVG_home\n              ),\n              AverageShotsOnTargetOverall: parseFloat(\n                form[0].data[2].stats.shotsOnTargetAVG_overall\n              ),\n              AverageShotsOnTarget: parseFloat(\n                form[0].data[2].stats.shotsOnTargetAVG_home\n              ),\n              AverageDangerousAttacksOverall: parseFloat(\n                form[0].data[2].stats.dangerous_attacks_avg_overall\n              ),\n              PPG: parseFloat(form[0].data[2].stats.seasonPPG_home),\n              AttacksHome: parseFloat(form[0].data[2].stats.attacks_avg_home),\n              AttacksAway: parseFloat(form[0].data[2].stats.attacks_avg_away),\n              AverageDangerousAttacks: parseFloat(\n                form[0].data[2].stats.dangerous_attacks_avg_home\n              ),\n              homeAttackAdvantage: parseFloat(\n                form[0].data[2].stats.homeAttackAdvantage\n              ),\n              homeDefenceAdvantage: parseFloat(\n                form[0].data[2].stats.homeDefenceAdvantage\n              ),\n              BTTSPercentage: parseInt(\n                form[0].data[2].stats.seasonBTTSPercentage_home\n              ),\n              LastFiveForm: lastFiveFormHome,\n              LastSixForm: lastSixFormHome,\n              LastTenForm: lastTenFormHome,\n              LeaguePosition: `${teamPositionHome}${homePrefix}`,\n              SeasonPPG: homeSeasonPPG,\n            },\n          },\n          away: {\n            teamName: match.awayTeam,\n            0: {\n              XGOverall: parseFloat(form[1].data[0].stats.xg_for_avg_overall),\n              XG: parseFloat(form[1].data[0].stats.xg_for_avg_away),\n              ScoredOverall: parseFloat(\n                form[1].data[0].stats.seasonScoredNum_overall\n              ),\n              ScoredAverage: parseFloat(\n                form[1].data[0].stats.seasonScoredAVG_away\n              ),\n              PlayedHome: parseFloat(\n                form[1].data[0].stats.seasonMatchesPlayed_home\n              ),\n              PlayedAway: parseFloat(\n                form[1].data[0].stats.seasonMatchesPlayed_away\n              ),\n              ConcededOverall: parseFloat(\n                form[1].data[0].stats.seasonConcededNum_overall\n              ),\n              ConcededAverage: parseFloat(\n                form[1].data[0].stats.seasonConcededAVG_away\n              ),\n              XGAgainstAvgOverall: parseFloat(\n                form[1].data[0].stats.xg_against_avg_overall\n              ),\n              XGAgainstAverage: parseFloat(\n                form[1].data[0].stats.xg_against_avg_away\n              ),\n              CleanSheetPercentage: parseFloat(\n                form[1].data[0].stats.seasonCSPercentage_away\n              ),\n              AveragePossessionOverall: parseFloat(\n                form[1].data[0].stats.possessionAVG_overall\n              ),\n              AveragePossession: parseFloat(\n                form[1].data[0].stats.possessionAVG_away\n              ),\n              AverageShotsOnTargetOverall: parseFloat(\n                form[1].data[0].stats.shotsOnTargetAVG_overall\n              ),\n              AverageShotsOnTarget: parseFloat(\n                form[1].data[0].stats.shotsOnTargetAVG_away\n              ),\n              AverageDangerousAttacksOverall: parseFloat(\n                form[1].data[0].stats.dangerous_attacks_avg_overall\n              ),\n              PPG: parseFloat(form[1].data[0].stats.seasonPPG_away),\n              AttacksAverage: parseFloat(\n                form[1].data[0].stats.attacks_avg_away\n              ),\n              AverageDangerousAttacks: parseFloat(\n                form[1].data[0].stats.dangerous_attacks_avg_away\n              ),\n              BTTSPercentage: parseInt(\n                form[0].data[0].stats.seasonBTTSPercentage_away\n              ),\n              LastFiveForm: lastFiveFormAway,\n              LastSixForm: lastSixFormAway,\n              LastTenForm: lastTenFormAway,\n              LeaguePosition: `${teamPositionAway}${awayPrefix}`,\n              SeasonPPG: awaySeasonPPG,\n            },\n            1: {\n              XGOverall: parseFloat(form[1].data[1].stats.xg_for_avg_overall),\n              XG: parseFloat(form[1].data[1].stats.xg_for_avg_away),\n              ScoredOverall: parseFloat(\n                form[1].data[1].stats.seasonScoredNum_overall\n              ),\n              ScoredAverage: parseFloat(\n                form[1].data[1].stats.seasonScoredAVG_away\n              ),\n              PlayedHome: parseFloat(\n                form[1].data[1].stats.seasonMatchesPlayed_home\n              ),\n              PlayedAway: parseFloat(\n                form[1].data[1].stats.seasonMatchesPlayed_away\n              ),\n              ConcededOverall: parseFloat(\n                form[1].data[1].stats.seasonConcededNum_overall\n              ),\n              ConcededAverage: parseFloat(\n                form[1].data[1].stats.seasonConcededAVG_away\n              ),\n              XGAgainstAvgOverall: parseFloat(\n                form[1].data[1].stats.xg_against_avg_overall\n              ),\n              XGAgainstAverage: parseFloat(\n                form[1].data[1].stats.xg_against_avg_away\n              ),\n              CleanSheetPercentage: parseFloat(\n                form[1].data[1].stats.seasonCSPercentage_away\n              ),\n              AveragePossessionOverall: parseFloat(\n                form[1].data[1].stats.possessionAVG_overall\n              ),\n              AveragePossession: parseFloat(\n                form[1].data[1].stats.possessionAVG_away\n              ),\n              AverageShotsOnTargetOverall: parseFloat(\n                form[1].data[1].stats.shotsOnTargetAVG_overall\n              ),\n              AverageShotsOnTarget: parseFloat(\n                form[1].data[1].stats.shotsOnTargetAVG_away\n              ),\n              AverageDangerousAttacksOverall: parseFloat(\n                form[1].data[1].stats.dangerous_attacks_avg_overall\n              ),\n              PPG: parseFloat(form[1].data[1].stats.seasonPPG_away),\n              AttacksAverage: parseFloat(\n                form[1].data[1].stats.attacks_avg_away\n              ),\n              AverageDangerousAttacks: parseFloat(\n                form[1].data[1].stats.dangerous_attacks_avg_away\n              ),\n              BTTSPercentage: parseInt(\n                form[0].data[1].stats.seasonBTTSPercentage_away\n              ),\n              LastFiveForm: lastFiveFormAway,\n              LastSixForm: lastSixFormAway,\n              LastTenForm: lastTenFormAway,\n              LeaguePosition: `${teamPositionAway}${awayPrefix}`,\n              SeasonPPG: awaySeasonPPG,\n            },\n            2: {\n              XGOverall: parseFloat(form[1].data[2].stats.xg_for_avg_overall),\n              XG: parseFloat(form[1].data[2].stats.xg_for_avg_away),\n              ScoredOverall: parseFloat(\n                form[1].data[2].stats.seasonScoredNum_overall\n              ),\n              ScoredAverage: parseFloat(\n                form[1].data[2].stats.seasonScoredAVG_away\n              ),\n              PlayedHome: parseFloat(\n                form[1].data[2].stats.seasonMatchesPlayed_home\n              ),\n              PlayedAway: parseFloat(\n                form[1].data[2].stats.seasonMatchesPlayed_away\n              ),\n              ConcededOverall: parseFloat(\n                form[1].data[2].stats.seasonConcededNum_overall\n              ),\n              ConcededAverage: parseFloat(\n                form[1].data[2].stats.seasonConcededAVG_away\n              ),\n              XGAgainstAvgOverall: parseFloat(\n                form[1].data[2].stats.xg_against_avg_overall\n              ),\n              XGAgainstAverage: parseFloat(\n                form[1].data[2].stats.xg_against_avg_away\n              ),\n              CleanSheetPercentage: parseFloat(\n                form[1].data[2].stats.seasonCSPercentage_away\n              ),\n              AveragePossessionOverall: parseFloat(\n                form[1].data[2].stats.possessionAVG_overall\n              ),\n              AveragePossession: parseFloat(\n                form[1].data[2].stats.possessionAVG_away\n              ),\n              AverageShotsOnTargetOverall: parseFloat(\n                form[1].data[2].stats.shotsOnTargetAVG_overall\n              ),\n              AverageShotsOnTarget: parseFloat(\n                form[1].data[2].stats.shotsOnTargetAVG_away\n              ),\n              AverageDangerousAttacksOverall: parseFloat(\n                form[1].data[2].stats.dangerous_attacks_avg_overall\n              ),\n              PPG: parseFloat(form[1].data[2].stats.seasonPPG_away),\n              AttacksAverage: parseFloat(\n                form[1].data[2].stats.attacks_avg_away\n              ),\n              AverageDangerousAttacks: parseFloat(\n                form[1].data[2].stats.dangerous_attacks_avg_away\n              ),\n              BTTSPercentage: parseInt(\n                form[0].data[2].stats.seasonBTTSPercentage_away\n              ),\n              LastFiveForm: lastFiveFormAway,\n              LastSixForm: lastSixFormAway,\n              LastTenForm: lastTenFormAway,\n              LeaguePosition: `${teamPositionAway}${awayPrefix}`,\n              SeasonPPG: awaySeasonPPG,\n            },\n          },\n        });\n      }\n\n      match.homeBadge = fixture.home_image;\n      match.awayBadge = fixture.away_image;\n\n      \n\n      match.homePpg = fixture.home_ppg.toFixed(2);\n      match.homeFormColour = await applyColour(match.homePpg);\n\n      match.awayPpg = fixture.away_ppg.toFixed(2);\n      match.awayFormColour = await applyColour(match.awayPpg);\n\n      match.lastFiveFormHome = lastFiveFormHome;\n      match.lastFiveFormAway = lastFiveFormAway;\n      match.homeRawPosition = homeTeaminLeague.rawPosition\n      match.awayRawPosition = awayTeaminLeague.rawPosition\n\n      match.homeTeamHomePosition = `${teamPositionHomeTable}${homePrefixHomeTable}`;\n      match.awayTeamAwayPosition = `${teamPositionAwayTable}${awayPrefixAwayTable}`;\n\n      match.homeTeamWinPercentage = homeTeamWinPercentageHome;\n      match.awayTeamWinPercentage = awayTeamWinPercentageAway;\n\n      match.homeTeamLossPercentage = homeTeamLossPercentageHome;\n      match.awayTeamLossPercentage = awayTeamLossPercentageAway;\n\n      match.homeTeamDrawPercentage = homeTeamDrawPercentageHome;\n      match.awayTeamDrawPercentage = awayTeamDrawPercentageAway;\n\n      match.status = fixture.status;\n\n      match.btts_potential = fixture.btts_potential;\n      match.game = match.homeTeam + \" v \" + match.awayTeam;\n\n      match.homeGoals = fixture.homeGoalCount;\n      match.awayGoals = fixture.awayGoalCount;\n\n      match.expectedGoalsHomeToDate = fixture.team_a_xg_prematch;\n      match.expectedGoalsAwayToDate = fixture.team_b_xg_prematch;\n\n      console.log(match)\n      console.log(fixture)\n\n\n      if (match.status !== \"canceled\" || match.status !== \"suspended\") {\n        matches.push(match);\n        await createFixture(match, false);\n      }\n\n      // console.log(allForm)\n    }\n    // }\n    ReactDOM.render(\n      <Button\n        text={\"Generate predictions\"}\n        onClickEvent={() => getScorePrediction(day)}\n      />,\n      document.getElementById(\"Buttons\")\n    );\n  }\n  if (!isStoredLocally) {\n    await fetch(`${process.env.REACT_APP_EXPRESS_SERVER}allForm${day}`, {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ allForm }),\n    });\n  }\n  await fetch(\n    `${process.env.REACT_APP_EXPRESS_SERVER}leagues/${currentDay}${month}${year}`,\n    {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ leagueArray }),\n    }\n  );\n}\n","/Users/gregdorward/Development/football-predictions/src/components/createStatsDiv.js",[],"/Users/gregdorward/Development/football-predictions/src/logic/getForm.js",["134","135"],"import { proxyurl } from \"../App\";\n\nconst allTeamForm = [];\n\nexport async function applyColour(value) {\n  let colour;\n  switch (true) {\n    case value < 0.49:\n      colour = \"#CD5C5C\";\n      break;\n    case value >= 0.5 && value <= 1:\n      colour = \"#F08080\";\n      break;\n    case value >= 1.01 && value <= 1.25:\n      colour = \"#FFA07A\";\n      break;\n    case value >= 1.26 && value <= 1.5:\n      colour = \"#FFFFE0\";\n      break;\n    case value >= 1.51 && value <= 2:\n      colour = \"#CFDBC5\";\n      break;\n    case value >= 2.01 && value <= 2.5:\n      colour = \"#8AA37B\";\n      break;\n    case value >= 2.51 && value <= 3:\n      colour = \"#3F6826\";\n      break;\n    default:\n      colour = \"white\";\n      break;\n  }\n  return colour;\n}\n\nexport async function getForm(match) {\n  const teams = [match.homeId, match.awayId];\n  const fixtureForm = [];\n\n  for (let i = 0; i < teams.length; i++) {\n    const team = teams[i];\n\n    let response = await fetch(\n      `${process.env.REACT_APP_EXPRESS_SERVER}form/${team}`\n    );\n    await response.json().then((formData) => {\n      console.log(formData.data[0].season_format)\n      fixtureForm[i] = formData;\n      console.log(fixtureForm[i])\n    });\n  }\n  return fixtureForm;\n}\n","/Users/gregdorward/Development/football-predictions/src/components/Button.js",[],"/Users/gregdorward/Development/football-predictions/src/logic/getScorePredictions.js",["136","137","138","139","140","141","142","143","144","145"],"/Users/gregdorward/Development/football-predictions/src/components/CollapsableElement.js",[],"/Users/gregdorward/Development/football-predictions/src/components/TextSection.js",[],"/Users/gregdorward/Development/football-predictions/src/logic/getStats.js",["146","147"],"import ReactDOM from \"react-dom\";\nimport { Button } from \"../components/Button\";\nimport Stats from \"../components/createStatsDiv\";\nimport Div from \"../components/Div\";\nimport { selectedOption } from \"../components/radio\";\nimport { allForm, leagueArray } from \"../logic/getFixtures\";\nimport { getTeamStats } from \"../logic/getTeamStats\";\nimport { getPointsFromLastX } from \"../logic/getScorePredictions\";\n\nlet testBool;\n\nexport async function createStatsDiv(game, mock) {\n  if (game.status !== \"void\") {\n    let bool = mock;\n\n    if (bool !== true) {\n      let radioSelected = 10;\n\n      function toggle() {\n        testBool = testBool ? false : true;\n        if (testBool === true) {\n          // set stats element to display flex\n          return { display: \"block\" };\n        } else {\n          // set stats element to display none\n          return { display: \"none\" };\n        }\n      }\n\n      let style = toggle();\n\n      let index;\n      let divider;\n      if (radioSelected === 5) {\n        index = 0;\n        divider = 5;\n      } else if (radioSelected === 6) {\n        index = 1;\n        divider = 6;\n      } else if (radioSelected === 10) {\n        index = 2;\n        divider = 10;\n      }\n\n      let gameStats = allForm.find((match) => match.id === game.id);\n\n      let homeTeam = gameStats.home.teamName;\n      let awayTeam = gameStats.away.teamName;\n\n      let time = game.time;\n\n      gameStats.home[index].last5Points = getPointsFromLastX(\n        gameStats.home[index].LastFiveForm\n      );\n\n      gameStats.home[index].last6Points = getPointsFromLastX(\n        gameStats.home[index].LastSixForm\n      );\n\n      gameStats.home[index].last10Points = getPointsFromLastX(\n        gameStats.home[index].LastTenForm\n      );\n\n      gameStats.away[index].last5Points = getPointsFromLastX(\n        gameStats.away[index].LastFiveForm\n      );\n\n      gameStats.away[index].last6Points = getPointsFromLastX(\n        gameStats.away[index].LastSixForm\n      );\n\n      gameStats.away[index].last10Points = getPointsFromLastX(\n        gameStats.away[index].LastTenForm\n      );\n\n      async function getPointAverage(pointTotal, games) {\n        return pointTotal / games;\n      }\n\n      let homeFiveGameAverage = await getPointAverage(\n        gameStats.home[index].last5Points,\n        5\n      );\n      let homeSixGameAverage = await getPointAverage(\n        gameStats.home[index].last6Points,\n        6\n      );\n      let homeTenGameAverage = await getPointAverage(\n        gameStats.home[index].last10Points,\n        10\n      );\n\n      let awayFiveGameAverage = await getPointAverage(\n        gameStats.away[index].last5Points,\n        5\n      );\n      let awaySixGameAverage = await getPointAverage(\n        gameStats.away[index].last6Points,\n        6\n      );\n      let awayTenGameAverage = await getPointAverage(\n        gameStats.away[index].last10Points,\n        10\n      );\n\n      async function getLastGameResult(lastGame) {\n        let text;\n        switch (true) {\n          case lastGame === \"L\":\n            text = \"Lost\";\n            break;\n          case lastGame === \"D\":\n            text = \"Drew\";\n            break;\n          case lastGame === \"W\":\n            text = \"Won\";\n            break;\n          default:\n            break;\n        }\n        return text;\n      }\n\n      async function compareFormTrend(five, six, ten) {\n        let text;\n        if (five >= 2.5) {\n          switch (true) {\n            case five > six && six > ten:\n              text =\n                \"Outstanding recent form with solid improvement over last 10 games\";\n              break;\n            case five > six && six < ten:\n              text =\n                \"Outstanding recent form which has improved with some inconsistency over last 10 games\";\n              break;\n            case five === six && six > ten:\n              text =\n                \"Outstanding recent form with most improvement in the last 6\";\n              break;\n            case five === six && six < ten:\n              text = \"Outstanding recent form with a slight dip in the last 6\";\n              break;\n            case five === six && six === ten:\n              text = \"Consistently outstanding form over the last 10\";\n              break;\n            case five < six && six === ten:\n              text =\n                \"Outstanding recent form but slightly worsening in the last 5\";\n              break;\n            case five < six && six > ten:\n              text =\n                \"Outstanding recent form but slightly fluctuating over the last 10\";\n              break;\n            case five < six && six < ten:\n              text = \"Outstanding recent form but beginning to worsen recently\";\n              break;\n            default:\n              break;\n          }\n        } else if (five < 2.5 && five >= 2) {\n          switch (true) {\n            case five > six && six > ten:\n              text =\n                \"Very good recent form with solid improvement over last 10 games\";\n              break;\n            case five > six && six < ten:\n              text =\n                \"Very good recent form which has improved with some inconsistency over last 10 games\";\n              break;\n            case five === six && six > ten:\n              text =\n                \"Very good recent form with most improvement in the last 6\";\n              break;\n            case five === six && six < ten:\n              text = \"Very good recent form with a slight dip in the last 6\";\n              break;\n            case five === six && six === ten:\n              text = \"Very good outstanding form over the last 10\";\n              break;\n            case five < six && six === ten:\n              text =\n                \"Very good recent form but slightly worsening in the last 5\";\n              break;\n            case five < six && six > ten:\n              text =\n                \"Very good recent form but slightly fluctuating over the last 10\";\n              break;\n            case five < six && six < ten:\n              text = \"Very good recent form but beginning to worsen recently\";\n              break;\n            default:\n              break;\n          }\n        } else if (five < 2 && five >= 1.5) {\n          switch (true) {\n            case five > six && six > ten:\n              text =\n                \"Good recent form with solid improvement over last 10 games\";\n              break;\n            case five > six && six < ten:\n              text =\n                \"Good recent form which has improved with some inconsistency over last 10 games\";\n              break;\n            case five === six && six > ten:\n              text = \"Good recent form with most improvement in the last 6\";\n              break;\n            case five === six && six < ten:\n              text = \"Good recent form with a slight dip in the last 6\";\n              break;\n            case five === six && six === ten:\n              text = \"Good outstanding form over the last 10\";\n              break;\n            case five < six && six === ten:\n              text = \"Good recent form but slightly worsening in the last 5\";\n              break;\n            case five < six && six > ten:\n              text =\n                \"Good recent form but slightly fluctuating over the last 10\";\n              break;\n            case five < six && six < ten:\n              text = \"Good recent form but worsening consistently\";\n              break;\n            default:\n              break;\n          }\n        } else if (five < 1.5 && five >= 1) {\n          switch (true) {\n            case five > six && six > ten:\n              text =\n                \"Average recent form with solid improvement over last 10 games\";\n              break;\n            case five > six && six < ten:\n              text =\n                \"Average recent form which has improved with some inconsistency over last 10 games\";\n              break;\n            case five === six && six > ten:\n              text = \"Average recent form with most improvement in the last 6\";\n              break;\n            case five === six && six < ten:\n              text = \"Average recent form with a slight dip in the last 6\";\n              break;\n            case five === six && six === ten:\n              text = \"Consistently average form over the last 10\";\n              break;\n            case five < six && six === ten:\n              text = \"Average recent form but slightly worsening in the last 5\";\n              break;\n            case five < six && six > ten:\n              text =\n                \"Average recent form, slightly fluctuating over the last 10\";\n              break;\n            case five < six && six < ten:\n              text = \"Average recent form, declining consistently\";\n              break;\n            default:\n              break;\n          }\n        } else if (five < 1 && five >= 0.5) {\n          switch (true) {\n            case five > six && six > ten:\n              text =\n                \"Poor recent form with gradual improvement over last 10 games\";\n              break;\n            case five > six && six < ten:\n              text =\n                \"Poor recent form but improving with some inconsistency over last 10 games\";\n              break;\n            case five === six && six > ten:\n              text =\n                \"Poor recent form with some improvement shown in the last 6\";\n              break;\n            case five === six && six < ten:\n              text = \"Poor recent form with a dip in the last 6\";\n              break;\n            case five === six && six === ten:\n              text = \"Consistently poor form over the last 10\";\n              break;\n            case five < six && six === ten:\n              text = \"Poor recent form, slightly worsening in the last 5\";\n              break;\n            case five < six && six > ten:\n              text = \"Poor recent form, slightly fluctuating over the last 10\";\n              break;\n            case five < six && six < ten:\n              text = \"Poor recent form, declining consistently\";\n              break;\n            default:\n              text = \"Poor recent form\";\n              break;\n          }\n        } else if (five < 0.5) {\n          switch (true) {\n            case five > six && six > ten:\n              text =\n                \"Terrible recent form with gradual improvement over last 10 games\";\n              break;\n            case five > six && six < ten:\n              text =\n                \"Terrible recent form with a slight improvement in the last 5\";\n              break;\n            case five === six && six > ten:\n              text =\n                \"Terrible recent form but improving slightly in the last 6\";\n              break;\n            case five === six && six < ten:\n              text = \"Terrible recent form with a dip in the last 6\";\n              break;\n            case five === six && six === ten:\n              text = \"Consistently terrible form over the last 10\";\n              break;\n            case five < six && six === ten:\n              text = \"Terrible recent form, worsening further in the last 5\";\n              break;\n            case five < six && six > ten:\n              text =\n                \"Terrible recent form, slightly fluctuating over the last 10\";\n              break;\n            case five < six && six < ten:\n              text = \"Terrible recent form, declining consistently\";\n              break;\n            default:\n              break;\n          }\n        }\n        return text;\n      }\n\n      let homeFormTrend = await compareFormTrend(\n        homeFiveGameAverage,\n        homeSixGameAverage,\n        homeTenGameAverage\n      );\n      let awayFormTrend = await compareFormTrend(\n        awayFiveGameAverage,\n        awaySixGameAverage,\n        awayTenGameAverage\n      );\n      let homeLastGame = await getLastGameResult(\n        gameStats.home[index].LastFiveForm[4]\n      );\n      let awayLastGame = await getLastGameResult(\n        gameStats.away[index].LastFiveForm[4]\n      );\n\n      const formDataMatch = [];\n\n      formDataMatch.push({\n        btts: game.btts_potential,\n      });\n\n      const formDataHome = [];\n\n      formDataHome.push({\n        name: game.homeTeam,\n        Last5: gameStats.home[index].LastFiveForm,\n        AverageGoals: gameStats.home[index].ScoredAverage,\n        AverageConceeded: gameStats.home[index].ConcededAverage,\n        AverageXG: gameStats.home[index].XG,\n        AverageXGConceded: gameStats.home[index].XGAgainstAverage,\n        AveragePossession: gameStats.home[index].AveragePossession,\n        AverageShotsOnTarget: gameStats.home[index].AverageShotsOnTarget,\n        AverageDangerousAttacks: gameStats.home[index].AverageDangerousAttacks,\n        homeOrAway: \"Home\",\n        leaguePosition: gameStats.home[index].LeaguePosition,\n        Last5PPG: gameStats.home[index].PPG,\n        SeasonPPG: gameStats.home[index].SeasonPPG,\n        formTrend: homeFormTrend,\n        lastGame: homeLastGame,\n      });\n\n      const formDataAway = [];\n\n      formDataAway.push({\n        name: game.awayTeam,\n        Last5: gameStats.away[index].LastFiveForm,\n        AverageGoals: gameStats.away[index].ScoredAverage,\n        AverageConceeded: gameStats.away[index].ConcededAverage,\n        AverageXG: gameStats.away[index].XG,\n        AverageXGConceded: gameStats.away[index].XGAgainstAverage,\n        AveragePossession: gameStats.away[index].AveragePossession,\n        AverageShotsOnTarget: gameStats.away[index].AverageShotsOnTarget,\n        AverageDangerousAttacks: gameStats.away[index].AverageDangerousAttacks,\n        homeOrAway: \"Away\",\n        leaguePosition: gameStats.away[index].LeaguePosition,\n        Last5PPG: gameStats.away[index].PPG,\n        SeasonPPG: gameStats.away[index].SeasonPPG,\n        formTrend: awayFormTrend,\n        lastGame: awayLastGame,\n      });\n      ReactDOM.render(\n        <div style={style}>\n          <Div className=\"MatchTime\" text={`Kick off: ${time} GMT`}></Div>\n        </div>,\n        document.getElementById(\"stats\" + homeTeam)\n      );\n\n      ReactDOM.render(\n        <div style={style}>\n          <div className=\"H2HStats\" id={`H2HStats${game.id}`}></div>\n          <div className=\"TrendsHome\" id={`TrendsHome${game.id}`}></div>\n          <div className=\"TrendsAway\" id={`TrendsAway${game.id}`}></div>\n        </div>,\n        document.getElementById(\"history\" + homeTeam)\n      );\n\n      ReactDOM.render(\n        <Stats\n          style={style}\n          homeOrAway=\"Home\"\n          gameCount={divider}\n          key={formDataHome[0].name}\n          last5={formDataHome[0].Last5}\n          className={formDataHome[0].homeOrAway}\n          name={formDataHome[0].name}\n          goals={formDataHome[0].AverageGoals}\n          conceeded={formDataHome[0].AverageConceeded}\n          XG={formDataHome[0].AverageXG}\n          XGConceded={formDataHome[0].AverageXGConceded}\n          possession={formDataHome[0].AveragePossession}\n          sot={formDataHome[0].AverageShotsOnTarget}\n          dangerousAttacks={formDataHome[0].AverageDangerousAttacks}\n          leaguePosition={formDataHome[0].leaguePosition}\n          rawPosition = {game.homeRawPosition}\n          homeOrAwayLeaguePosition={game.homeTeamHomePosition}\n          winPercentage={game.homeTeamWinPercentage}\n          lossPercentage={game.homeTeamLossPercentage}\n          drawPercentage={game.homeTeamDrawPercentage}\n          ppg={formDataHome[0].SeasonPPG}\n          formTrend={[\n            homeTenGameAverage.toFixed(2),\n            homeSixGameAverage.toFixed(2),\n            homeFiveGameAverage.toFixed(2),\n          ]}\n          lastGame={homeLastGame}\n        />,\n        document.getElementById(\"home\" + homeTeam)\n      );\n\n      ReactDOM.render(\n        <Stats\n          style={style}\n          homeOrAway=\"Away\"\n          gameCount={divider}\n          key={formDataAway[0].name}\n          last5={formDataAway[0].Last5}\n          className={formDataAway[0].homeOrAway}\n          name={formDataAway[0].name}\n          goals={formDataAway[0].AverageGoals}\n          conceeded={formDataAway[0].AverageConceeded}\n          XG={formDataAway[0].AverageXG}\n          XGConceded={formDataAway[0].AverageXGConceded}\n          possession={formDataAway[0].AveragePossession}\n          rawPosition = {game.awayRawPosition}\n          sot={formDataAway[0].AverageShotsOnTarget}\n          dangerousAttacks={formDataAway[0].AverageDangerousAttacks}\n          leaguePosition={formDataAway[0].leaguePosition}\n          homeOrAwayLeaguePosition={game.awayTeamAwayPosition}\n          winPercentage={game.awayTeamWinPercentage}\n          lossPercentage={game.awayTeamLossPercentage}\n          drawPercentage={game.awayTeamDrawPercentage}\n          ppg={formDataAway[0].SeasonPPG}\n          formTrend={[\n            awayTenGameAverage.toFixed(2),\n            awaySixGameAverage.toFixed(2),\n            awayFiveGameAverage.toFixed(2),\n          ]}\n          lastGame={awayLastGame}\n        />,\n        document.getElementById(\"away\" + awayTeam)\n      );\n\n      ReactDOM.render(\n        <Button\n          className=\"MoreStats\"\n          style={style}\n          onClickEvent={() =>\n            getTeamStats(game.id, game.homeTeam, game.awayTeam)\n          }\n          text={\"More detail\"}\n        ></Button>,\n        document.getElementById(`H2HStats${game.id}`)\n      );\n    }\n  }\n}\n","/Users/gregdorward/Development/football-predictions/src/components/Div.js",[],"/Users/gregdorward/Development/football-predictions/src/components/Fixture.js",["148","149","150","151"],"import React, { Fragment } from \"react\";\nimport { CreateBadge } from \"./createBadge\";\nimport Collapsable from \"../components/CollapsableElement\";\nimport { createStatsDiv } from \"../logic/getStats\";\nimport { Button } from \"../components/Button\";\nimport { renderTable, tableArray } from \"../logic/getFixtures\";\n\nlet resultValue;\nlet leagueName;\nconst text =\n  \"XG Tipping formulates predictions based on recent form data ranging from points per game to each teams attacking potency\\n Expected Goals in previous matches are used to determine whether teams might be over or underperforming and predictions are weighted as such\\n Once all fixtures have loaded, click on “Get Predictions”\\n Predictions are displayed on the right and the results on the left\\n Click on an individual fixture for detailed stats for both teams.\";\n\nfunction GetDivider(fixture) {\n  const matchStatus = fixture.status;\n  const isPrediction = resultValue;\n\n  if (isPrediction === false && matchStatus !== \"complete\") {\n    return (\n      <div className=\"divider\" data-cy={\"divider-\" + fixture.fixture.id}>\n        {\"V\"}\n      </div>\n    );\n  } else if (isPrediction === false && matchStatus === \"complete\") {\n    return (\n      <div\n        className=\"Result\"\n        data-cy={\"result-\" + fixture.fixture.id}\n      >{`${fixture.fixture.homeGoals} - ${fixture.fixture.awayGoals}`}</div>\n    );\n  } else if (isPrediction === true && matchStatus === \"complete\") {\n    let outcome;\n    let prediction;\n\n    switch (true) {\n      case fixture.fixture.homeGoals > fixture.fixture.awayGoals:\n        outcome = 0;\n        fixture.fixture.winner = fixture.fixture.homeTeam;\n        fixture.fixture.outcome = \"homeWin\";\n        break;\n      case fixture.fixture.homeGoals === fixture.fixture.awayGoals:\n        outcome = 1;\n        fixture.fixture.winner = \"draw\";\n        fixture.fixture.outcome = \"draw\";\n\n        break;\n      case fixture.fixture.homeGoals < fixture.fixture.awayGoals:\n        outcome = 2;\n        fixture.fixture.winner = fixture.fixture.awayTeam;\n        fixture.fixture.outcome = \"awayWin\";\n\n        break;\n      default:\n        break;\n    }\n\n    switch (true) {\n      case fixture.fixture.goalsA > fixture.fixture.goalsB:\n        prediction = 0;\n        break;\n      case fixture.fixture.goalsA === fixture.fixture.goalsB:\n        prediction = 1;\n        break;\n      case fixture.fixture.goalsA < fixture.fixture.goalsB:\n        prediction = 2;\n        break;\n      default:\n        break;\n    }\n\n    if (fixture.fixture.homeGoals > 0 && fixture.fixture.awayGoals > 0) {\n      fixture.fixture.bttsOutcome = \"bttsWon\";\n    } else {\n      fixture.fixture.bttsOutcome = \"bttsLost\";\n    }\n\n    if (outcome === prediction) {\n      // console.log(fixture.fixture.game);\n      if (fixture.fixture.homeOdds !== 0) {\n        switch (true) {\n          case outcome === 0:\n            fixture.fixture.profit = fixture.fixture.homeOdds;\n            break;\n          case outcome === 1:\n            fixture.fixture.profit = fixture.fixture.drawOdds;\n            break;\n          case outcome === 2:\n            fixture.fixture.profit = fixture.fixture.awayOdds;\n            break;\n          default:\n            break;\n        }\n      } else fixture.fixture.profit = 1;\n\n      let name = \"CorrectScore\";\n\n      if (\n        fixture.fixture.goalsA === fixture.fixture.homeGoals &&\n        fixture.fixture.goalsB === fixture.fixture.awayGoals\n      ) {\n        fixture.fixture.exactScore = true;\n        return (\n          <Fragment>\n            <div className=\"Result\">{`${fixture.fixture.homeGoals} - ${fixture.fixture.awayGoals}`}</div>\n            <div\n              className=\"ExactScore\"\n              key={fixture.fixture.homeTeam}\n              data-cy={\"score-\" + fixture.fixture.id}\n            >{`${fixture.fixture.goalsA} - ${fixture.fixture.goalsB}`}</div>\n          </Fragment>\n        );\n      } else {\n        fixture.fixture.exactScore = false;\n        return (\n          <Fragment>\n            <div className=\"Result\">{`${fixture.fixture.homeGoals} - ${fixture.fixture.awayGoals}`}</div>\n            <div\n              className=\"CorrectScore\"\n              key={fixture.fixture.homeTeam}\n              data-cy={\"score-\" + fixture.fixture.id}\n            >{`${fixture.fixture.goalsA} - ${fixture.fixture.goalsB}`}</div>\n          </Fragment>\n        );\n      }\n      // console.log(`profit ${fixture.fixture.profit}`);\n    } else if (outcome !== prediction) {\n      if (fixture.fixture.homeOdds !== 0) {\n        fixture.fixture.profit = 0;\n      } else {\n        fixture.fixture.profit = 1;\n      }\n      // console.log(fixture.fixture.game);\n      // console.log(`profit ${fixture.fixture.profit}`);\n      fixture.fixture.exactScore = false;\n      return (\n        <Fragment>\n          <div className=\"Result\">{`${fixture.fixture.homeGoals} - ${fixture.fixture.awayGoals}`}</div>\n          <div\n            className=\"IncorrectScore\"\n            key={fixture.fixture.awayTeam}\n          >{`${fixture.fixture.goalsA} - ${fixture.fixture.goalsB}`}</div>\n        </Fragment>\n      );\n    }\n  } else {\n    return (\n      <Fragment>\n        <div className=\"KOTime\">{`${fixture.fixture.time}`}</div>\n        <div\n          className=\"score\"\n          key={fixture.fixture.awayTeam}\n        >{`${fixture.fixture.goalsA} - ${fixture.fixture.goalsB}`}</div>\n      </Fragment>\n    );\n  }\n}\n\nfunction getStyle(bool) {\n  return \"individualFixture\";\n}\n\nfunction renderLeagueName(fixture) {\n  let name = fixture.leagueName;\n  if (name === null) {\n    return <div></div>;\n  } else {\n    return (\n      <div>\n        <div\n          className=\"leagueName\"\n          key={`leagueName${fixture.leagueIndex}div`}\n          onClick={() => renderTable(fixture.leagueIndex)}\n        >\n          {fixture.leagueName} &#9776;\n        </div>\n        <div\n          className=\"LeagueTable\"\n          key={`leagueName${fixture.leagueIndex}`}\n          id={`leagueName${fixture.leagueIndex}`}\n        ></div>\n      </div>\n    );\n  }\n}\n\nconst SingleFixture = ({ fixture }) => (\n  <div key={fixture.game}>\n    {renderLeagueName(fixture)}\n    <li\n      className={getStyle(fixture.btts)}\n      key={fixture.id}\n      onClick={() => createStatsDiv(fixture)}\n      data-cy={fixture.id}\n    >\n      <div className=\"HomeOdds\">{fixture.fractionHome}</div>\n      <div className=\"homeTeam\">{fixture.homeTeam}</div>\n      <GetDivider\n        result={resultValue}\n        status={fixture.status}\n        fixture={fixture}\n      />\n      {/* <div className=\"divider\">{\"V\"}</div> */}\n      <div className=\"awayTeam\">{fixture.awayTeam}</div>\n      <CreateBadge\n        image={fixture.homeBadge}\n        ClassName=\"HomeBadge\"\n        alt=\"Home team badge\"\n        flexShrink={5}\n      />\n      <CreateBadge\n        image={fixture.awayBadge}\n        ClassName=\"AwayBadge\"\n        alt=\"Away team badge\"\n      />\n      <div className=\"AwayOdds\">{fixture.fractionAway}</div>\n    </li>\n    <div className=\"StatsDiv\">\n      <div id={\"stats\" + fixture.homeTeam}></div>\n      <Fragment>\n        <div\n          className=\"StatsContainer\"\n          data-cy={\"StatsContainer-\" + fixture.id}\n        >\n          <div className=\"HomeStats\" id={\"home\" + fixture.homeTeam}></div>\n          <div className=\"AwayStats\" id={\"away\" + fixture.awayTeam}></div>\n        </div>\n      </Fragment>\n      <div className=\"MatchHistory\" id={\"history\" + fixture.homeTeam}></div>\n    </div>\n  </div>\n);\n\nlet newText = text.split(\"\\n\").map((i) => {\n  return <p>{i}</p>;\n});\n\nconst List = ({ fixtures }) => (\n  <div>\n    <Fragment>\n      <Collapsable\n        className={\"HowToUse\"}\n        buttonText={\"Show / Hide help\"}\n        text={newText}\n      />\n    </Fragment>\n    <div id=\"Headers\"></div>\n    <p>\n      <a\n        className=\"DonationLink\"\n        href=\"#bitcoin\"\n        style={{\n          fontSize: \"1.2em\",\n          textDecoration: \"none\",\n          color: \"white\",\n          padding: \"0.4em\",\n        }}\n      >\n        Donate &#8595;\n      </a>\n    </p>\n    <ul className=\"FixtureList\" id=\"FixtureList\">\n      {fixtures.map((fixture, i) => (\n        <SingleFixture fixture={fixture} key={fixture.game}/>\n      ))}\n    </ul>\n    <div className=\"bitcoin\" id=\"bitcoin\">\n      Donations towards running costs welcome\n      <span className=\"bitcoinSymbol\">&#x20bf;itcoin address</span>\n      <span className=\"bitcoinAddress\">\n        bc1q7j62txkvhfu0dt3l0s07saze6pjnyzs26wfgp0\n      </span>\n    </div>\n  </div>\n);\n\nexport function Fixture(props) {\n  resultValue = props.result;\n\n  return <List fixtures={props.fixtures} result={resultValue} />;\n}\n","/Users/gregdorward/Development/football-predictions/src/components/CollapsableDiv.js",[],"/Users/gregdorward/Development/football-predictions/src/components/Increment.js",[],"/Users/gregdorward/Development/football-predictions/src/logic/getBTTSPotential.js",["152","153","154","155","156","157","158"],"export async function getBTTSPotential(allForm, match, index, homeGoals, awayGoals) {\n\n  let homeTeam = match.homeTeam;\n  let awayTeam = match.awayTeam;\n\n\n  let home = allForm.findIndex(function (item, i) {\n    return item.home.teamName === homeTeam;\n  });\n\n  let away = allForm.findIndex(function (item, i) {\n    return item.away.teamName === awayTeam;\n  });\n  if(home !== -1 && away !== -1){\n\n\n  let homeBTTS = allForm[home].home[index].BTTSPercentage;\n  let awayBTTS = allForm[away].away[index].BTTSPercentage;\n  let homeG = homeGoals;\n  let awayG = awayGoals;\n  let totalGoals = homeG + awayG\n\n  let homeGoalsScoredAverage = allForm[home].home[index].ScoredAverage\n  let awayGoalsScoredAverage = allForm[away].away[index].ScoredAverage\n\n  let homeGoalsConceededAverage = allForm[home].home[index].ConcededAverage\n  let awayGoalsConceededAverage = allForm[away].away[index].ConcededAverage\n\n  let homeXG = allForm[home].home[index].XG;\n  let awayXG = allForm[away].away[index].XG;\n\n  let homeXGAgainst = allForm[home].home[index].XGAgainstAverage;\n  let awayXGAgainst = allForm[away].away[index].XGAgainstAverage;\n\n  let homeGoalsAveragedOut = (homeGoalsScoredAverage + homeXG) / 2\n  let awayGoalsAveragedOut = (awayGoalsScoredAverage + awayXG) / 2 \n\n  let homeGoalsConceededAveragedOut = (homeGoalsConceededAverage + homeXGAgainst) / 2\n  let awayGoalsConceededAveragedOut = (awayGoalsConceededAverage + awayXGAgainst) / 2\n\n\n  let homeCleansheets = allForm[home].home[index].CleanSheetPercentage\n  let awayCleansheets = allForm[away].away[index].CleanSheetPercentage\n\n  let homePPG = allForm[home].home[index].PPG\n  let awayPPG = allForm[away].away[index].PPG\n\n  let dangerousAttacksHome = allForm[away].home[index].AverageDangerousAttacks;\n  let dangerousAttacksAway = allForm[away].away[index].AverageDangerousAttacks;\n\n  match.combinedBTTS = (homeBTTS + awayBTTS) / 2;\n\nif(match.bttsFraction !== \"N/A\" && match.status !== \"suspended\" && match.status !== \"canceled\"){\n  if (\n    match.combinedBTTS >= 60 &&\n    // match.btts_potential >= 60 &&\n    match.awayOdds < 3 &&\n    // homePPG > 1 &&\n    // homeXG >= 1.1 && \n    // awayXG >= 1.1 &&\n    // homeXGAgainst > 1.1 &&\n    // awayXGAgainst > 1.1 &&\n    homeGoalsAveragedOut > 1 &&\n    awayGoalsAveragedOut > 1 &&\n    homeGoalsConceededAveragedOut > 1 &&\n    awayGoalsConceededAveragedOut > 1 &&\n    homeG >= 1 &&\n    awayG >= 1\n  ) {\n    match.btts = true;\n    match.bttsChosen = true;\n  } else {\n    match.btts = false;\n    match.bttsChosen = false;\n  }\n}\n  \n  }\n  return match;\n}\n\n","/Users/gregdorward/Development/football-predictions/src/components/OddsRadio.js",[],"/Users/gregdorward/Development/football-predictions/src/logic/getTeamStats.js",["159","160","161"],"import ReactDOM from \"react-dom\";\nimport HeadToHead from \"../components/HeadToHead\";\nimport BulletList from \"../components/BulletList\";\nimport { Fragment } from \"react\";\nimport Table from \"@material-ui/core/Table\";\nimport CustomizedTables from \"../components/Table\";\nimport { matches } from \"./getFixtures\";\n\nexport async function getTeamStats(id, home, away) {\n  console.log(\"EXECUTED\");\n  let identifier = id;\n  let bestHomeOdds;\n  let bestHomeOddsProvider;\n  let bestAwayOdds;\n  let bestAwayOddsProvider\n  \n  let match = await fetch(\n    `${process.env.REACT_APP_EXPRESS_SERVER}match/${identifier}`\n  );\n   await match.json().then(async (match) => {\n    console.log(match.data)\n    let matchArr = match.data.h2h.previous_matches_ids\n    let previousMatchDetails;\n    let secondToPreviousMatchDetails;\n\n    let oddsComparisonHomeArray = []\n    let oddsComparisonAwayArray = []\n\n    if(match.data.odds_comparison){\n    oddsComparisonHomeArray = match.data.odds_comparison[\"FT Result\"][1];\n    oddsComparisonAwayArray = match.data.odds_comparison[\"FT Result\"][2];\n\n    let sortedHomeOdds = Object.entries(oddsComparisonHomeArray).sort((a, b) => b[1] - a[1])\n    let sortedAwayOdds = Object.entries(oddsComparisonAwayArray).sort((a, b) => b[1] - a[1])\n\n    bestHomeOddsProvider = sortedHomeOdds[0][0]\n    bestHomeOdds = sortedHomeOdds[0][1]\n    bestAwayOddsProvider = sortedAwayOdds[0][0]\n    bestAwayOdds = sortedAwayOdds[0][1]\n    } else {\n      bestHomeOddsProvider = \"N/A\"\n      bestHomeOdds = \"N/A\"\n      bestAwayOddsProvider = \"N/A\"\n      bestAwayOdds = \"N/A\"\n    }\n\n    if(match.data.h2h.previous_matches_results.totalMatches > 0){\n      matchArr.sort((a, b) => b.date_unix - a.date_unix);\n      let lastMatch = matchArr[0].id\n      let secondToLastMatch = matchArr[1].id\n\n      let previousMatch = await fetch(\n        `${process.env.REACT_APP_EXPRESS_SERVER}match/${lastMatch}`\n      );\n      let dateObject;\n      let date;\n      let date2;\n      await previousMatch.json().then(async (game) => {\n        previousMatchDetails = game.data\n        console.log(previousMatchDetails)\n        const unixTimestamp = previousMatchDetails.date_unix;\n        const milliseconds = unixTimestamp * 1000;\n        dateObject = new Date(milliseconds);\n         date = `${dateObject.getDate()}/${dateObject.getMonth()+1}/${dateObject.getFullYear()}`\n\n         let secondToPreviousMatch = await fetch(\n          `${process.env.REACT_APP_EXPRESS_SERVER}match/${secondToLastMatch}`\n        );\n        let dateObject2;\n        await secondToPreviousMatch.json().then((game) => {\n          secondToPreviousMatchDetails = game.data\n          console.log(secondToPreviousMatchDetails)\n          const unixTimestamp = secondToPreviousMatchDetails.date_unix;\n          const milliseconds = unixTimestamp * 1000;\n          dateObject2 = new Date(milliseconds);\n          date2 = `${dateObject2.getDate()}/${dateObject2.getMonth()+1}/${dateObject2.getFullYear()}`\n        })\n  \n      })\n\n      ReactDOM.render(\n        <Fragment>\n          <h3>Fixture history</h3>\n          <HeadToHead\n            className={\"PreviousMatchStats\"}\n            homeTeam={home}\n            awayTeam={away}\n            stadium={match.data.stadium_name}\n            matches={match.data.h2h.previous_matches_results.totalMatches}\n            homeWins={match.data.h2h.previous_matches_results.team_a_wins}\n            awayWins={match.data.h2h.previous_matches_results.team_b_wins}\n            draws={match.data.h2h.previous_matches_results.draw}\n            averageGoals={match.data.h2h.betting_stats.avg_goals}\n            bestHomeOdds = {`${bestHomeOddsProvider} - ${bestHomeOdds}`}\n            bestAwayOdds = {`${bestAwayOddsProvider} - ${bestAwayOdds}`}\n            lastGameStadiumName={previousMatchDetails.stadium_name}\n            lastGameHomeGoals={previousMatchDetails.homeGoalCount}\n            lastGameAwayGoals={previousMatchDetails.awayGoalCount}\n            lastGameHomeTeam={previousMatchDetails.home_name}\n            lastGameAwayTeam={previousMatchDetails.away_name}\n            lastGameDate={date}\n            secondToLastGameStadiumName={secondToPreviousMatchDetails.stadium_name}\n            secondToLastGameHomeGoals={secondToPreviousMatchDetails.homeGoalCount}\n            secondToLastGameAwayGoals={secondToPreviousMatchDetails.awayGoalCount}\n            secondToLastGameHomeTeam={secondToPreviousMatchDetails.home_name}\n            secondToLastGameAwayTeam={secondToPreviousMatchDetails.away_name}\n            secondToLastGameDate={date2}\n          ></HeadToHead>\n          <CustomizedTables\n            o05Stat={match.data.h2h.betting_stats.over05Percentage}\n            o15Stat={match.data.h2h.betting_stats.over15Percentage}\n            o15Forecast={match.data.o15_potential}\n            o05Odds={match.data.odds_ft_over05}\n            u05Odds={match.data.odds_ft_under05}\n            o15Odds={match.data.odds_ft_over15}\n            u15Odds={match.data.odds_ft_under15}\n            o25Stat={match.data.h2h.betting_stats.over25Percentage}\n            o25Forecast={match.data.o25_potential}\n            o25Odds={match.data.odds_ft_over25}\n            u25Odds={match.data.odds_ft_under25}\n            o35Stat={match.data.h2h.betting_stats.over35Percentage}\n            o35Forecast={match.data.o35_potential}\n            o35Odds={match.data.odds_ft_over35}\n            u35Odds={match.data.odds_ft_under35}\n            BTTSStat={match.data.h2h.betting_stats.bttsPercentage}\n            BTTSForecast={match.data.btts_potential}\n            BTTSOdds={match.data.odds_btts_yes}\n            BTTSOddsNo={match.data.odds_btts_no}\n            CornersStat={\"–\"}\n            CornersForecast={match.data.corners_potential}\n            CornersOdds={match.data.odds_corners_over_105}\n          />\n        </Fragment>,\n        document.getElementById(`H2HStats${identifier}`)\n      );\n    } else {\n      ReactDOM.render(\n        <Fragment>\n          <h3>Fixture history</h3>\n          <HeadToHead\n            className={\"PreviousMatchStats\"}\n            homeTeam={home}\n            awayTeam={away}\n            stadium={match.data.stadium_name}\n            matches={match.data.h2h.previous_matches_results.totalMatches}\n            homeWins={match.data.h2h.previous_matches_results.team_a_wins}\n            awayWins={match.data.h2h.previous_matches_results.team_b_wins}\n            draws={match.data.h2h.previous_matches_results.draw}\n            averageGoals={match.data.h2h.betting_stats.avg_goals}\n            lastGameStadiumName=\"N/A\"\n            lastGameHomeGoals=\"previous\"\n            lastGameAwayGoals=\"match\"\n            lastGameHomeTeam=\"No\"\n            lastGameAwayTeam=\"data\"\n            lastGameDate=\"\"\n            secondToLastGameStadiumName=\"N/A\"\n            secondToLastGameHomeGoals=\"previous\"\n            secondToLastGameAwayGoals=\"match\"\n            secondToLastGameHomeTeam=\"No\"\n            secondToLastGameAwayTeam=\"data\"\n            secondToLastGameDate=\"\"\n          ></HeadToHead>\n          <CustomizedTables\n            o15Stat={match.data.h2h.betting_stats.over15Percentage}\n            o15Forecast={match.data.o15_potential}\n            o15Odds={match.data.odds_ft_over15}\n            o25Stat={match.data.h2h.betting_stats.over25Percentage}\n            o25Forecast={match.data.o25_potential}\n            o25Odds={match.data.odds_ft_over25}\n            BTTSStat={match.data.h2h.betting_stats.bttsPercentage}\n            BTTSForecast={match.data.btts_potential}\n            BTTSOdds={match.data.odds_btts_yes}\n            CornersStat={\"–\"}\n            CornersForecast={match.data.corners_potential}\n            CornersOdds={match.data.odds_corners_over_105}\n          />\n        </Fragment>,\n        document.getElementById(`H2HStats${identifier}`)\n      );\n    }\n\n\n  });\n}\n","/Users/gregdorward/Development/football-predictions/src/components/HeadToHead.js",[],"/Users/gregdorward/Development/football-predictions/src/components/BulletList.js",[],"/Users/gregdorward/Development/football-predictions/src/components/Table.js",["162"],"import React from \"react\";\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\n\nconst StyledTableCell = withStyles((theme) => ({\n  head: {\n    backgroundColor: \"#172A3A\",\n    color: theme.palette.common.white,\n    padding: 10,\n    textAlign: \"center\",\n    fontSize: \"2em\",\n    fontFamily: 'inherit',\n    border: \"none\",\n    margin: \"none\"\n  },\n  body: {\n    fontSize: \"2em\",\n    fontFamily: 'inherit',\n    padding: 10,\n    color: \"white\",\n    border: \"none\",\n    margin: \"none\",\n  },\n}))(TableCell);\n\nconst StyledTableRow = withStyles((theme) => ({\n  root: {\n    \"&:nth-of-type(odd)\": {\n      backgroundColor: \"#294A66\",\n      textAlign: \"center\",\n    },\n    \"&:nth-of-type(even)\": {\n      backgroundColor: \"#172B3A\",\n      textAlign: \"center\",\n    },\n  },\n}))(TableRow);\n\n\nexport default function CustomizedTables(props) {\n\n\n  return (\n    <TableContainer component={Paper} className=\"StatsTable\">\n      <Table aria-label=\"customized table\">\n        <TableHead>\n          <TableRow>\n            <StyledTableCell>Stat</StyledTableCell>\n            <StyledTableCell>H2H history</StyledTableCell>\n            <StyledTableCell>Odds (yes)</StyledTableCell>\n            <StyledTableCell>Odds (no)</StyledTableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n        <StyledTableRow key=\"O05\">\n            <StyledTableCell component=\"th\" scope=\"row\" align=\"center\" padding=\"5\">\n              Over 0.5 Goals %\n            </StyledTableCell>\n            <StyledTableCell component=\"th\" scope=\"row\" align=\"center\">\n              {`${props.o05Stat}%`}\n            </StyledTableCell>\n            <StyledTableCell align=\"center\">{props.o05Odds}</StyledTableCell>\n            <StyledTableCell align=\"center\">{props.u05Odds}</StyledTableCell>\n          </StyledTableRow>\n          <StyledTableRow key=\"O15\">\n            <StyledTableCell component=\"th\" scope=\"row\" align=\"center\" padding=\"5\">\n              Over 1.5 Goals %\n            </StyledTableCell>\n            <StyledTableCell component=\"th\" scope=\"row\" align=\"center\">\n              {`${props.o15Stat}%`}\n            </StyledTableCell>\n            <StyledTableCell align=\"center\">{props.o15Odds}</StyledTableCell>\n            <StyledTableCell align=\"center\">{props.u15Odds}</StyledTableCell>\n          </StyledTableRow>\n          <StyledTableRow key=\"O25\">\n            <StyledTableCell component=\"th\" scope=\"row\" align=\"center\">\n              Over 2.5 Goals %\n            </StyledTableCell>\n            <StyledTableCell component=\"th\" scope=\"row\" align=\"center\">\n              {`${props.o25Stat}%`}\n            </StyledTableCell>\n            <StyledTableCell align=\"center\">{props.o25Odds}</StyledTableCell>\n            <StyledTableCell align=\"center\">{props.u25Odds}</StyledTableCell>\n          </StyledTableRow>\n          <StyledTableRow key=\"O35\">\n            <StyledTableCell component=\"th\" scope=\"row\" align=\"center\">\n              Over 3.5 Goals %\n            </StyledTableCell>\n            <StyledTableCell component=\"th\" scope=\"row\" align=\"center\">\n              {`${props.o35Stat}%`}\n            </StyledTableCell>\n            <StyledTableCell align=\"center\">{props.o35Odds}</StyledTableCell>\n            <StyledTableCell align=\"center\">{props.u35Odds}</StyledTableCell>\n          </StyledTableRow>\n          <StyledTableRow key=\"BTTS\">\n            <StyledTableCell component=\"th\" scope=\"row\" align=\"center\">\n              BTTS %\n            </StyledTableCell>\n            <StyledTableCell component=\"th\" scope=\"row\" align=\"center\">\n              {`${props.BTTSStat}%`}\n            </StyledTableCell>\n            <StyledTableCell align=\"center\">{props.BTTSOdds}</StyledTableCell>\n            <StyledTableCell align=\"center\">{props.BTTSOddsNo}</StyledTableCell>\n          </StyledTableRow>\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}\n","/Users/gregdorward/Development/football-predictions/src/components/LeagueTable.js",["163"],"import React from \"react\";\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\n\nconst StyledTableCell = withStyles((theme) => ({\n  head: {\n    backgroundColor: \"#172A3A\",\n    color: theme.palette.common.white,\n    padding: \"0.35em\",\n    paddingTop: \"0.5em\",\n    paddingBottom: \"0.5em\",\n    textAlign: \"left\",\n    fontSize: \"1.9em\",\n    fontFamily: \"inherit\",\n    border: \"none\",\n    margin: \"none\",\n  },\n  body: {\n    fontSize: \"1.9em\",\n    textAlign: \"left\",\n    fontFamily: \"inherit\",\n    padding: \"0.35em\",\n    paddingTop: \"0.5em\",\n    paddingBottom: \"0.5em\",\n    border: \"none\",\n    margin: \"none\",\n    color: \"white\",\n  },\n}))(TableCell);\n\nconst StyledTableRow = withStyles((theme) => ({\n  root: {\n    \"&:nth-of-type(odd)\": {\n      backgroundColor: \"#1D3549\",\n      textAlign: \"center\",\n    },\n    \"&:nth-of-type(even)\": {\n      backgroundColor: \"#172B3A\",\n      textAlign: \"center\",\n    },\n  },\n}))(TableRow);\n\nfunction styleForm(formIndicator) {\n  let className;\n  if (formIndicator === \"W\") {\n    className = \"winLeague\";\n  } else if (formIndicator === \"D\") {\n    className = \"drawLeague\";\n  } else if (formIndicator === \"L\") {\n    className = \"lossLeague\";\n  } \n  return className;\n}\n\nexport default function LeagueTable(props) {\n\n  let rows = props.Teams.map((team, i) => (\n    <StyledTableRow key={`${props.Key}row${i}`}>\n      <StyledTableCell component=\"th\" scope=\"row\">\n        {`${team.Position}`}\n      </StyledTableCell>\n      <StyledTableCell component=\"th\" scope=\"row\">\n        {`${team.Name}`}\n      </StyledTableCell>\n      <StyledTableCell component=\"th\" scope=\"row\">\n        {`${team.Played}`}\n      </StyledTableCell>\n      <StyledTableCell component=\"th\" scope=\"row\">\n        {`${team.Wins}`}\n      </StyledTableCell>\n      <StyledTableCell component=\"th\" scope=\"row\">\n        {`${team.Draws}`}\n      </StyledTableCell>\n      <StyledTableCell component=\"th\" scope=\"row\">\n        {`${team.Losses}`}\n      </StyledTableCell>\n      <StyledTableCell component=\"th\" scope=\"row\">\n        {`${team.For}`}\n      </StyledTableCell>\n      <StyledTableCell component=\"th\" scope=\"row\">\n        {`${team.Against}`}\n      </StyledTableCell>\n      <StyledTableCell component=\"th\" scope=\"row\">\n        {`${team.GoalDifference}`}\n      </StyledTableCell>\n      <StyledTableCell component=\"th\" scope=\"row\">\n        {`${team.Points}`}\n      </StyledTableCell>\n      <StyledTableCell\n        component=\"th\"\n        scope=\"row\"\n        style={{ textAlign: \"center\" }}\n      >\n        <span className={styleForm(team.Form[0])}>{team.Form[0]}</span>\n        <span className={styleForm(team.Form[1])}>{team.Form[1]}</span>\n        <span className={styleForm(team.Form[2])}>{team.Form[2]}</span>\n        <span className={styleForm(team.Form[3])}>{team.Form[3]}</span>\n        <span className={styleForm(team.Form[4])}>{team.Form[4]}</span>\n      </StyledTableCell>\n    </StyledTableRow>\n  ));\n\n  for (let i = 0; i < props.Teams.length; i++) {\n    return (\n      <TableContainer component={Paper} className=\"StatsTable\">\n        <Table aria-label=\"customized table\" key={props.Key}>\n          <TableHead>\n            <TableRow>\n              <StyledTableCell>P</StyledTableCell>\n              <StyledTableCell>Team</StyledTableCell>\n              <StyledTableCell>Pld</StyledTableCell>\n              <StyledTableCell>W</StyledTableCell>\n              <StyledTableCell>D</StyledTableCell>\n              <StyledTableCell>L</StyledTableCell>\n              <StyledTableCell>GF</StyledTableCell>\n              <StyledTableCell>GA</StyledTableCell>\n              <StyledTableCell>GD</StyledTableCell>\n              <StyledTableCell>Pts</StyledTableCell>\n              <StyledTableCell style={{ textAlign: \"center\" }}>\n                Form\n              </StyledTableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>{rows}</TableBody>\n        </Table>\n      </TableContainer>\n    );\n  }\n}\n",{"ruleId":"164","replacedBy":"165"},{"ruleId":"166","replacedBy":"167"},{"ruleId":"168","severity":1,"message":"169","line":4,"column":8,"nodeType":"170","messageId":"171","endLine":4,"endColumn":13},{"ruleId":"168","severity":1,"message":"172","line":22,"column":3,"nodeType":"170","messageId":"171","endLine":22,"endColumn":8},{"ruleId":"168","severity":1,"message":"173","line":24,"column":3,"nodeType":"170","messageId":"171","endLine":24,"endColumn":24},{"ruleId":"168","severity":1,"message":"174","line":25,"column":3,"nodeType":"170","messageId":"171","endLine":25,"endColumn":11},{"ruleId":"168","severity":1,"message":"175","line":26,"column":3,"nodeType":"170","messageId":"171","endLine":26,"endColumn":12},{"ruleId":"168","severity":1,"message":"176","line":29,"column":8,"nodeType":"170","messageId":"171","endLine":29,"endColumn":17},{"ruleId":"168","severity":1,"message":"177","line":3,"column":26,"nodeType":"170","messageId":"171","endLine":3,"endColumn":34},{"ruleId":"168","severity":1,"message":"178","line":151,"column":9,"nodeType":"170","messageId":"171","endLine":151,"endColumn":20},{"ruleId":"168","severity":1,"message":"177","line":1,"column":10,"nodeType":"170","messageId":"171","endLine":1,"endColumn":18},{"ruleId":"168","severity":1,"message":"179","line":3,"column":7,"nodeType":"170","messageId":"171","endLine":3,"endColumn":18},{"ruleId":"168","severity":1,"message":"180","line":518,"column":13,"nodeType":"170","messageId":"171","endLine":518,"endColumn":22},{"ruleId":"168","severity":1,"message":"181","line":624,"column":15,"nodeType":"170","messageId":"171","endLine":624,"endColumn":19},{"ruleId":"168","severity":1,"message":"182","line":909,"column":10,"nodeType":"170","messageId":"171","endLine":909,"endColumn":28},{"ruleId":"168","severity":1,"message":"183","line":909,"column":30,"nodeType":"170","messageId":"171","endLine":909,"endColumn":48},{"ruleId":"168","severity":1,"message":"184","line":995,"column":11,"nodeType":"170","messageId":"171","endLine":995,"endColumn":29},{"ruleId":"168","severity":1,"message":"185","line":999,"column":11,"nodeType":"170","messageId":"171","endLine":999,"endColumn":33},{"ruleId":"168","severity":1,"message":"186","line":1027,"column":11,"nodeType":"170","messageId":"171","endLine":1027,"endColumn":36},{"ruleId":"168","severity":1,"message":"187","line":1045,"column":14,"nodeType":"170","messageId":"171","endLine":1045,"endColumn":33},{"ruleId":"168","severity":1,"message":"188","line":1046,"column":11,"nodeType":"170","messageId":"171","endLine":1046,"endColumn":37},{"ruleId":"168","severity":1,"message":"189","line":1624,"column":7,"nodeType":"170","messageId":"171","endLine":1624,"endColumn":20},{"ruleId":"168","severity":1,"message":"190","line":5,"column":10,"nodeType":"170","messageId":"171","endLine":5,"endColumn":24},{"ruleId":"168","severity":1,"message":"191","line":6,"column":19,"nodeType":"170","messageId":"171","endLine":6,"endColumn":30},{"ruleId":"168","severity":1,"message":"192","line":5,"column":10,"nodeType":"170","messageId":"171","endLine":5,"endColumn":16},{"ruleId":"168","severity":1,"message":"193","line":6,"column":23,"nodeType":"170","messageId":"171","endLine":6,"endColumn":33},{"ruleId":"168","severity":1,"message":"194","line":9,"column":5,"nodeType":"170","messageId":"171","endLine":9,"endColumn":15},{"ruleId":"168","severity":1,"message":"195","line":94,"column":11,"nodeType":"170","messageId":"171","endLine":94,"endColumn":15},{"ruleId":"168","severity":1,"message":"196","line":21,"column":7,"nodeType":"170","messageId":"171","endLine":21,"endColumn":17},{"ruleId":"168","severity":1,"message":"197","line":42,"column":7,"nodeType":"170","messageId":"171","endLine":42,"endColumn":22},{"ruleId":"168","severity":1,"message":"198","line":43,"column":7,"nodeType":"170","messageId":"171","endLine":43,"endColumn":22},{"ruleId":"168","severity":1,"message":"199","line":45,"column":7,"nodeType":"170","messageId":"171","endLine":45,"endColumn":14},{"ruleId":"168","severity":1,"message":"200","line":46,"column":7,"nodeType":"170","messageId":"171","endLine":46,"endColumn":14},{"ruleId":"168","severity":1,"message":"201","line":48,"column":7,"nodeType":"170","messageId":"171","endLine":48,"endColumn":27},{"ruleId":"168","severity":1,"message":"202","line":49,"column":7,"nodeType":"170","messageId":"171","endLine":49,"endColumn":27},{"ruleId":"168","severity":1,"message":"203","line":3,"column":8,"nodeType":"170","messageId":"171","endLine":3,"endColumn":18},{"ruleId":"168","severity":1,"message":"204","line":5,"column":8,"nodeType":"170","messageId":"171","endLine":5,"endColumn":13},{"ruleId":"168","severity":1,"message":"205","line":7,"column":10,"nodeType":"170","messageId":"171","endLine":7,"endColumn":17},{"ruleId":"168","severity":1,"message":"206","line":2,"column":22,"nodeType":"170","messageId":"171","endLine":2,"endColumn":32},{"ruleId":"168","severity":1,"message":"206","line":2,"column":22,"nodeType":"170","messageId":"171","endLine":2,"endColumn":32},"no-native-reassign",["207"],"no-negated-in-lhs",["208"],"no-unused-vars","'Radio' is defined but never used.","Identifier","unusedVar","'today' is defined but never used.","'generatePriorFixtures' is defined but never used.","'tomorrow' is defined but never used.","'yesterday' is defined but never used.","'TextBlock' is defined but never used.","'proxyurl' is defined but never used.","'rawPosition' is assigned a value but never used.","'allTeamForm' is assigned a value but never used.","'declining' is defined but never used.","'text' is assigned a value but never used.","'last3WeightingHome' is assigned a value but never used.","'last3WeightingAway' is assigned a value but never used.","'goalsForComparison' is assigned a value but never used.","'goalsAgainstComparison' is assigned a value but never used.","'fiveGameAverageComparison' is assigned a value but never used.","'seasonPPGComparison' is assigned a value but never used.","'attackingPotencyComparison' is assigned a value but never used.","'radioSelected' is assigned a value but never used.","'selectedOption' is defined but never used.","'leagueArray' is defined but never used.","'Button' is defined but never used.","'tableArray' is defined but never used.","'leagueName' is defined but never used.","'name' is assigned a value but never used.","'totalGoals' is assigned a value but never used.","'homeCleansheets' is assigned a value but never used.","'awayCleansheets' is assigned a value but never used.","'homePPG' is assigned a value but never used.","'awayPPG' is assigned a value but never used.","'dangerousAttacksHome' is assigned a value but never used.","'dangerousAttacksAway' is assigned a value but never used.","'BulletList' is defined but never used.","'Table' is defined but never used.","'matches' is defined but never used.","'makeStyles' is defined but never used.","no-global-assign","no-unsafe-negation"]