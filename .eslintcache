[{"/Users/greg/Development/Predictor/src/index.js":"1","/Users/greg/Development/Predictor/src/reportWebVitals.js":"2","/Users/greg/Development/Predictor/src/App.js":"3","/Users/greg/Development/Predictor/src/components/Success.js":"4","/Users/greg/Development/Predictor/src/components/PasswordReset.js":"5","/Users/greg/Development/Predictor/src/components/Under25.js":"6","/Users/greg/Development/Predictor/src/components/Over25.js":"7","/Users/greg/Development/Predictor/src/components/BTTSFixtures.js":"8","/Users/greg/Development/Predictor/src/components/CancelSubscription.js":"9","/Users/greg/Development/Predictor/src/components/HighestScoringTeams.js":"10","/Users/greg/Development/Predictor/src/components/Cancel.js":"11","/Users/greg/Development/Predictor/src/components/Team.js":"12","/Users/greg/Development/Predictor/src/components/BTTSTeams.js":"13","/Users/greg/Development/Predictor/src/components/HighestScoringFixtures.js":"14","/Users/greg/Development/Predictor/src/logic/store.js":"15","/Users/greg/Development/Predictor/src/components/OddsRadio.js":"16","/Users/greg/Development/Predictor/src/components/Button.js":"17","/Users/greg/Development/Predictor/src/components/Logo.js":"18","/Users/greg/Development/Predictor/src/components/Fixture.js":"19","/Users/greg/Development/Predictor/src/components/Contact.js":"20","/Users/greg/Development/Predictor/src/components/ProtectedContent.js":"21","/Users/greg/Development/Predictor/src/components/DarkModeToggle.js":"22","/Users/greg/Development/Predictor/src/components/Login.js":"23","/Users/greg/Development/Predictor/src/logic/hasUserPaid.js":"24","/Users/greg/Development/Predictor/src/logic/authProvider.js":"25","/Users/greg/Development/Predictor/src/components/CollapsableElement.js":"26","/Users/greg/Development/Predictor/src/logic/getFixtures.js":"27","/Users/greg/Development/Predictor/src/firebase.js":"28","/Users/greg/Development/Predictor/src/logic/getStatsInsights.js":"29","/Users/greg/Development/Predictor/src/components/createBadge.js":"30","/Users/greg/Development/Predictor/src/logic/dataSlice.js":"31","/Users/greg/Development/Predictor/src/components/LeagueName.js":"32","/Users/greg/Development/Predictor/src/components/GameStats.js":"33","/Users/greg/Development/Predictor/src/logic/getScorePredictions.js":"34","/Users/greg/Development/Predictor/src/components/Slider.js":"35","/Users/greg/Development/Predictor/src/components/SliderDiff.js":"36","/Users/greg/Development/Predictor/src/logic/getForm.js":"37","/Users/greg/Development/Predictor/src/components/LeagueTable.js":"38","/Users/greg/Development/Predictor/src/components/TeamOfTheSeason.js":"39","/Users/greg/Development/Predictor/src/logic/getStats.js":"40","/Users/greg/Development/Predictor/src/components/StatTable.js":"41","/Users/greg/Development/Predictor/src/logic/compareFormTrend.js":"42","/Users/greg/Development/Predictor/src/components/Carousel.js":"43","/Users/greg/Development/Predictor/src/logic/getBTTSPotential.js":"44","/Users/greg/Development/Predictor/src/components/Increment.js":"45","/Users/greg/Development/Predictor/src/components/PlayerStatsList.js":"46","/Users/greg/Development/Predictor/src/components/StreakStats.js":"47","/Users/greg/Development/Predictor/src/components/CollapsableStats.js":"48","/Users/greg/Development/Predictor/src/components/MissingPlayersList.js":"49","/Users/greg/Development/Predictor/src/components/TeamRankingsFlexView.js":"50","/Users/greg/Development/Predictor/src/components/MultitypeChart.js":"51","/Users/greg/Development/Predictor/src/components/Div.js":"52","/Users/greg/Development/Predictor/src/components/SofaScore.js":"53","/Users/greg/Development/Predictor/src/components/createStatsDiv.js":"54","/Users/greg/Development/Predictor/src/components/CarouselXGChart.js":"55","/Users/greg/Development/Predictor/src/components/Chart.js":"56","/Users/greg/Development/Predictor/src/components/RankingsSection.js":"57","/Users/greg/Development/Predictor/src/components/HamburgerMenu.js":"58","/Users/greg/Development/Predictor/src/components/SeasonPreview.js":"59","/Users/greg/Development/Predictor/src/components/PrivacyPolicy.js":"60","/Users/greg/Development/Predictor/src/components/StarRating.js":"61","/Users/greg/Development/Predictor/src/components/PredictionTypeRadio.js":"62","/Users/greg/Development/Predictor/src/components/PlayerStatTable.js":"63","/Users/greg/Development/Predictor/src/components/FutureFixture.js":"64","/Users/greg/Development/Predictor/src/components/FutureFixturesSideBySide.js":"65","/Users/greg/Development/Predictor/src/components/ShareShortlistButton.js":"66"},{"size":2316,"mtime":1760036624889,"results":"67","hashOfConfig":"68"},{"size":362,"mtime":1748355148688,"results":"69","hashOfConfig":"68"},{"size":23963,"mtime":1760526670513,"results":"70","hashOfConfig":"68"},{"size":391,"mtime":1760088141118,"results":"71","hashOfConfig":"68"},{"size":1135,"mtime":1760087948574,"results":"72","hashOfConfig":"68"},{"size":3300,"mtime":1760088221582,"results":"73","hashOfConfig":"68"},{"size":5009,"mtime":1761034236196,"results":"74","hashOfConfig":"68"},{"size":3471,"mtime":1760036631523,"results":"75","hashOfConfig":"68"},{"size":2718,"mtime":1748355148682,"results":"76","hashOfConfig":"68"},{"size":3434,"mtime":1760994386559,"results":"77","hashOfConfig":"68"},{"size":318,"mtime":1760036665612,"results":"78","hashOfConfig":"68"},{"size":19357,"mtime":1760106833390,"results":"79","hashOfConfig":"68"},{"size":3701,"mtime":1760036638620,"results":"80","hashOfConfig":"68"},{"size":3504,"mtime":1760994401252,"results":"81","hashOfConfig":"68"},{"size":283,"mtime":1748355148688,"results":"82","hashOfConfig":"68"},{"size":956,"mtime":1760087937457,"results":"83","hashOfConfig":"68"},{"size":291,"mtime":1760036656875,"results":"84","hashOfConfig":"68"},{"size":393,"mtime":1756998191029,"results":"85","hashOfConfig":"68"},{"size":23001,"mtime":1760698735034,"results":"86","hashOfConfig":"68"},{"size":2370,"mtime":1760036708481,"results":"87","hashOfConfig":"68"},{"size":555,"mtime":1748355148683,"results":"88","hashOfConfig":"68"},{"size":1227,"mtime":1760036731698,"results":"89","hashOfConfig":"68"},{"size":3721,"mtime":1759228931953,"results":"90","hashOfConfig":"68"},{"size":375,"mtime":1748355148688,"results":"91","hashOfConfig":"68"},{"size":1902,"mtime":1748355148687,"results":"92","hashOfConfig":"68"},{"size":1139,"mtime":1760036693354,"results":"93","hashOfConfig":"68"},{"size":58454,"mtime":1760976415137,"results":"94","hashOfConfig":"68"},{"size":692,"mtime":1748355148687,"results":"95","hashOfConfig":"68"},{"size":5954,"mtime":1748355148688,"results":"96","hashOfConfig":"68"},{"size":345,"mtime":1760036725025,"results":"97","hashOfConfig":"68"},{"size":848,"mtime":1748355148687,"results":"98","hashOfConfig":"68"},{"size":4207,"mtime":1760443578256,"results":"99","hashOfConfig":"68"},{"size":157123,"mtime":1761034639935,"results":"100","hashOfConfig":"68"},{"size":163863,"mtime":1761049111047,"results":"101","hashOfConfig":"68"},{"size":1488,"mtime":1760088117332,"results":"102","hashOfConfig":"68"},{"size":1089,"mtime":1760088121696,"results":"103","hashOfConfig":"68"},{"size":476,"mtime":1748355148687,"results":"104","hashOfConfig":"68"},{"size":25102,"mtime":1760443581588,"results":"105","hashOfConfig":"68"},{"size":8288,"mtime":1760443585860,"results":"106","hashOfConfig":"68"},{"size":60131,"mtime":1760899969688,"results":"107","hashOfConfig":"68"},{"size":2916,"mtime":1760088132383,"results":"108","hashOfConfig":"68"},{"size":10575,"mtime":1748355148687,"results":"109","hashOfConfig":"68"},{"size":917,"mtime":1748355148682,"results":"110","hashOfConfig":"68"},{"size":1044,"mtime":1758826090396,"results":"111","hashOfConfig":"68"},{"size":1340,"mtime":1760087906492,"results":"112","hashOfConfig":"68"},{"size":3814,"mtime":1760088015087,"results":"113","hashOfConfig":"68"},{"size":2144,"mtime":1760088137298,"results":"114","hashOfConfig":"68"},{"size":440,"mtime":1760036698574,"results":"115","hashOfConfig":"68"},{"size":654,"mtime":1760087929110,"results":"116","hashOfConfig":"68"},{"size":2609,"mtime":1760100513236,"results":"117","hashOfConfig":"68"},{"size":2125,"mtime":1760967678636,"results":"118","hashOfConfig":"68"},{"size":175,"mtime":1760036761802,"results":"119","hashOfConfig":"68"},{"size":3061,"mtime":1760088125223,"results":"120","hashOfConfig":"68"},{"size":37749,"mtime":1760108728337,"results":"121","hashOfConfig":"68"},{"size":1159,"mtime":1748355148682,"results":"122","hashOfConfig":"68"},{"size":16015,"mtime":1761040081117,"results":"123","hashOfConfig":"68"},{"size":1278,"mtime":1748355148683,"results":"124","hashOfConfig":"68"},{"size":1853,"mtime":1754470705978,"results":"125","hashOfConfig":"68"},{"size":3831,"mtime":1760088113209,"results":"126","hashOfConfig":"68"},{"size":4156,"mtime":1760088038938,"results":"127","hashOfConfig":"68"},{"size":715,"mtime":1753906092591,"results":"128","hashOfConfig":"68"},{"size":983,"mtime":1760088028839,"results":"129","hashOfConfig":"68"},{"size":3315,"mtime":1760088024358,"results":"130","hashOfConfig":"68"},{"size":465,"mtime":1760087639030,"results":"131","hashOfConfig":"68"},{"size":2608,"mtime":1760087647836,"results":"132","hashOfConfig":"68"},{"size":1651,"mtime":1759145818119,"results":"133","hashOfConfig":"68"},{"filePath":"134","messages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"137"},"10md9h3",{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"140","messages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"137"},{"filePath":"143","messages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"145","messages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"147","messages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"149","messages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"151","messages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"153","messages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"155","messages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"159","messages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"137"},{"filePath":"162","messages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"164","messages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"170","messages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"172","messages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"174","messages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"137"},{"filePath":"177","messages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"179","messages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"181","messages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"183","messages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"137"},{"filePath":"186","messages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"188","messages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"190","messages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"192","messages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"137"},{"filePath":"195","messages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"197","messages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"199","messages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"201","messages":"202","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"203","messages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"137"},{"filePath":"206","messages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":50,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"208","messages":"209","errorCount":0,"fatalErrorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"210","messages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"212","messages":"213","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"214","messages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"216","messages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"218","messages":"219","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"137"},{"filePath":"221","messages":"222","errorCount":0,"fatalErrorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"137"},{"filePath":"224","messages":"225","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"226","messages":"227","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"228","messages":"229","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"230","messages":"231","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"232","messages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"234","messages":"235","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"236","messages":"237","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"238","messages":"239","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"240","messages":"241","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"242","messages":"243","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"244","messages":"245","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246","usedDeprecatedRules":"137"},{"filePath":"247","messages":"248","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"249","messages":"250","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"137"},{"filePath":"252","messages":"253","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"254","usedDeprecatedRules":"137"},{"filePath":"255","messages":"256","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"257","messages":"258","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"259","messages":"260","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"261","messages":"262","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"263","messages":"264","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"265","messages":"266","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"267","messages":"268","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"269","messages":"270","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"271","messages":"272","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"273","messages":"274","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"275","messages":"276","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"277","messages":"278","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},"/Users/greg/Development/Predictor/src/index.js",["279"],"import ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter as Router, Route, Routes, HashRouter } from \"react-router-dom\";\nimport TeamPage from \"./components/Team\";\nimport {SuccessPage} from \"./components/Success\"\nimport {CancelPage} from \"./components/Cancel\"\nimport PasswordReset from \"./components/PasswordReset\";\nimport { Provider } from \"react-redux\";\nimport store from \"./logic/store\"; // Import your Redux store\nimport CancelSubscription from \"./components/CancelSubscription\"\nimport Over25 from \"./components/Over25\"\nimport Under25 from \"./components/Under25\"\nimport HighestScoringTeams from \"./components/HighestScoringTeams\"\nimport HighestScoringFixtures from \"./components/HighestScoringFixtures\";\nimport BTTSFixtures from \"./components/BTTSFixtures\";\nimport BTTSTeams from \"./components/BTTSTeams\";\nimport SeasonPreview from \"./components/SeasonPreview\";\n\n\nReactDOM.render(\n  // <React.StrictMode>\n    <Provider store={store}>\n    <HashRouter>\n        <Routes>\n          <Route path=\"/fixture\" element={<TeamPage />} />\n          <Route path=\"/success\" element={<SuccessPage />} />\n          <Route path=\"/cancel\" element={<CancelPage />} />\n          <Route path=\"/reset\" element={<PasswordReset />} />\n          <Route path=\"/o25\" element={<Over25 />} />\n          <Route path=\"/u25\" element={<Under25 />} />\n          <Route path=\"/teamshigh\" element={<HighestScoringTeams />} />\n          <Route path=\"/fixtureshigh\" element={<HighestScoringFixtures />} />\n          <Route path=\"/bttsfixtures\" element={<BTTSFixtures />} />\n          <Route path=\"/bttsteams\" element={<BTTSTeams />} />\n          <Route path=\"/cancelsubscription\" element={<CancelSubscription/>} />\n          <Route path=\"/\" exact element={<App />} />\n          <Route path=\"/seasonpreviews\" element={<SeasonPreview />} />\n          {/* <Route path=\"/\" element={<Fixture />} /> */}\n        </Routes>\n        </HashRouter>\n    </Provider>\n    ,\n  // </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["280","281"],"/Users/greg/Development/Predictor/src/reportWebVitals.js",[],"/Users/greg/Development/Predictor/src/App.js",["282","283","284"],"import { Fragment, useEffect, useState, lazy, Suspense } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Button } from \"./components/Button\";\nimport OddsRadio from \"./components/OddsRadio\";\nimport PredictionTypeRadio from \"./components/PredictionTypeRadio\";\nimport ThemeToggle from \"./components/DarkModeToggle\";\nimport { selectedOdds } from \"./components/OddsRadio\";\nimport Collapsable from \"./components/CollapsableElement\";\nimport StripePolicies from \"./components/Contact\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport { AuthProvider, useAuth } from \"./logic/authProvider\";\nimport { getAuth } from \"firebase/auth\";\nimport Login from \"./components/Login\";\nimport { getCurrentUser } from \"./components/ProtectedContent\";\nimport { userDetail } from \"./logic/authProvider\";\nimport { checkUserPaidStatus } from \"./logic/hasUserPaid\";\nimport HamburgerMenu from \"./components/HamburgerMenu\";\nimport {\n  FacebookShareButton,\n  FacebookIcon,\n  RedditShareButton,\n  RedditIcon,\n  TelegramShareButton,\n  TelegramIcon,\n  TwitterShareButton,\n  TwitterIcon,\n  WhatsappShareButton,\n  WhatsappIcon,\n} from \"react-share\";\nimport { generateFixtures } from \"./logic/getFixtures\";\nimport { BrowserRouter as Router, Route, Routes, Link } from \"react-router-dom\";\nimport PrivacyPolicy from \"./components/PrivacyPolicy\";\nimport Over18Badge from './components/images/18.png';\n\nexport const proxyurl = \"https://safe-caverns-99679.herokuapp.com/\";\nexport var fixtureList = [];\nexport let allLeagueData = [];\n\nexport const availableLeagues = [];\nexport var orderedLeagues = [];\n\nlet loggedIn;\nexport let paid = false;\nconst LazyLogo = lazy(() => import('./components/Logo'));\n\n\nconst menuItems = ['Home', 'bttsteams', 'Services', 'Contact'];\n\nconst leagueOrder = [\n  15050, //premier league 25 12325\n  14930, //championship 25 12451\n  14934, //league 1 25 12446\n  14935, //league 2 25 12422\n  15657, //National league 25 12622\n  15845, //National league north 25\n  15844, //National league south 25\n  14956, //La Liga 25 12316\n  15000, //Scottish Prem 25 12455\n  14968, //Bundesliga 25 12529\n  15068, //Serie A 25 12530\n  14932, //French Prem 25 12337\n  15115, //Portagul Prem 25 12931\n  14936, //Dutch Prem 25 12322\n  14937, //Belgian Pro League 25 12137\n  16263, //sweden 25\n  15055, //Danish Prem 24/25 12132\n  16260, //Norway Prem 25\n  14923, //Austrian Prem 25 12472\n  15163, //Greek Prem 25 12734\n  14972, //turkey 25 12641\n  15031, //Polish prem 25 12120\n  15047, //Swiss prem 25 12326\n  15053, //Croatia 25 12121\n  14973, //Czecjh 25 12336\n  14089, // Finland 25 14089\n  // 14951, // Ulraine 25 12483\n  // 15065, // Serbia 25 12138\n  // 15063, // Slovenia 25 12476\n  // 14933, // Slovakia 25 12944\n  13952, //Irish Prem 25\n  15066, //Spanish secunda 25 12467\n  15632, //Italy serie B 24 12621\n  14931, //Bundesliga 2 25 12528\n  14954, //French League 2 25 12338\n  14987, //Dutch League 2 25\n  15061, //Scottish Championship 25 12456\n  14943, //Scottish league 1 25 12474\n  15209, //Scottish league 2 25 12453\n  13973, //MLS 25,\n  14236, //Canada 25\n  14231, //Brazil prem 25\n  15746, //Argentina prem 23 15310\n  // 14086, // Columbia 25\n  // 14116, // Chile 25\n  // 14626, // Uraguay 25\n  15234, //Mexico prem 25 12136\n  16036, //Australian A league 24/25 13703\n  16243, //S Korea 25,\n  16242, //Japan 25\n  13964, // WC Qual Europe 26,\n  10121, // WC Qual SA 26,\n  // 11426, // WC Qual ConCaf 26\n  // 12801, // WC Qual Aus 26,\n  13734, //Nations league 24\n  14924, // Champs league 25 12321\n  15002, //Europa 25 12327\n  14904, //Europa Conference 25 12278\n  16261, // Copa Libertadores 25\n];\n\n// const sofaScoreIds = [\n//   {\n//     15050: 17, //EPL\n//   },\n//   {\n//     14930: 18 //Championship\n//   },\n//   {\n//     14934: 24 //League 1\n//   },\n//   {\n//     14935: 25 //League 2\n//   },\n//   {\n//     12622: 173 //Conference\n//   },\n//   {\n//     14956:\n//   },\n//   {},\n//   {},\n//   {},\n//   {},\n//   {},\n//   {},\n//   {},\n//   {},\n//   {},\n//   {},\n//   {},\n//   {},\n//   {},\n//   {},\n//   {},\n//   {},\n//   {},\n//   {},\n//   // 13734, //Nations league 24/25\n//   15050, //premier league 22/23\n//   14930, //championship 22/23\n//   14934, //league 1 22/23\n//   14935, //league 2 22/23\n//   12622, //National league 22/23\n//   14956, //La Liga 22/23\n//   15000, //Scottish Prem 22/23\n//   14968, //Bundesliga 22/23\n//   15068, //Serie A 22/23\n//   14932, //French Prem 22/23\n//   15115, //Portagul Prem 22/23\n//   14936, //Dutch Prem 22/23\n//   14937, //Belgian Pro League 22/23\n//   16263, //sweden 24\n//   15055, //Danish Prem 24/25\n//   16260, //Norway Prem 23\n//   14923, //Austrian Prem 22/23\n//   15163, //Greek Prem 22/23\n//   14972, //turkey\n//   15031, //Polish prem 22/23\n//   15047, //Swiss prem 22/23\n//   15053, //Croatia 24/25\n//   14973, //Czecjh 24/25\n//   13952, //Irish Prem 23\n//   14924, // Champs league\n//   15002, //Europa\n//   15066, //Spanish secunda 22/23\n//   12621, //Italy serie B 22/23\n//   14931, //Bundesliga 2 22/23\n//   // 12623, //German 3rd tier 22/23\n//   14954, //French League 2 22/23\n//   15061, //Scottish Championship 22/23\n//   14943, //Scottish league 1 22/23\n//   15209, //Scottish league 2 22/23\n//   12827, //Women's prem 23/24\n//   13973, //MLS 25,\n//   14236, //Canada 25\n//   14231, //Brazil prem 24\n//   15310, //Argentina prem 23\n//   15234, //Mexico prem 23/24\n//   12933, //National league North and South 22/23\n//   16036, //Australian A league 24/25\n//   16243, //S Korea 25,\n//   16242, //Japan 25\n//   12772, //Saudi 24/25\n//   13964, // WC Qual Europe,\n//   10121, // WC Qual SA,\n//   11426, // WC Qual ConCaf\n//   12801, // WC Qual Aus,\n// ];\n\nexport let date;\nlet dateSS;\nlet dateFootyStats;\nlet string;\nlet dateString;\nlet dateUnformatted;\nlet todaysDateUnformatted;\n\nasync function calculateDate(dateString) {\n  const day = dateString.getDate();\n  const month = dateString.getMonth() + 1;\n  const year = dateString.getFullYear();\n  return [`${month}${day}${year}`, `${year}-${month}-${day}`];\n}\n\nasync function convertTimestampForSofaScore(timestamp) {\n  let newDate = new Date(timestamp);\n\n  let year = newDate.getFullYear();\n  let month = String(newDate.getMonth() + 1).padStart(2, \"0\"); // Adding 1 to month because it is zero-based\n  let day = String(newDate.getDate()).padStart(2, \"0\");\n\n  let converted = `${year}-${month}-${day}`;\n\n  return converted;\n}\n\n(async function fetchLeagueData() {\n  let leagueList;\n  if (userDetail) {\n    paid = await checkUserPaidStatus(userDetail.uid);\n  } else {\n    paid = false;\n  }\n  let now = new Date();\n  let dateNow = await calculateDate(now);\n  console.log(dateNow)\n  leagueList = await fetch(\n    `${process.env.REACT_APP_EXPRESS_SERVER}leagueList/${dateNow[0]}`\n  );\n\n  let leagueArray;\n  await leagueList.json().then((leagues) => {\n    leagueArray = Array.from(leagues.data);\n  });\n\n  console.log(leagueArray)\n  for (let i = 0; i < leagueArray.length; i++) {\n    const league = leagueArray[i];\n    const name = leagueArray[i].name;\n\n    for (let x = 0; x < league.season.length; x++) {\n      const element = league.season[x];\n\n      if (\n        element.year === 2025 ||\n        element.year === 20252026 ||\n        element.year === 2026 ||\n        element.year === -1\n      ) {\n        if (\n          element.id !== 5874 &&\n          element.id !== 12623\n        ) {\n          availableLeagues.push({ name: name, element });\n        }\n      }\n    }\n\n    async function mapOrder(array, order, key) {\n      array.sort(function (a, b) {\n        var A = a.element[key],\n          B = b.element[key];\n\n        if (order.indexOf(A) > order.indexOf(B)) {\n          return 1;\n        } else {\n          return -1;\n        }\n      });\n      return array;\n    }\n    //leagues ordered by id\n    orderedLeagues = await mapOrder(availableLeagues, leagueOrder, \"id\");\n  }\n  return orderedLeagues;\n})();\n\nexport async function getLeagueList() {\n  let i = 0;\n  date = new Date();\n  string = \"Today\";\n  loggedIn = await getCurrentUser();\n\n\n  async function decrementDate(num, date) {\n    i = i - num;\n    console.log(i);\n    if (i > -120) {\n      date.setDate(date.getDate() - num);\n      dateUnformatted = date;\n      dateSS = await convertTimestampForSofaScore(date);\n      [date, dateFootyStats] = await calculateDate(date);\n      string = dateFootyStats;\n      dateString = date;\n      await renderButtons();\n    }\n  }\n\n  async function incrementDateV2(num, date) {\n    i = i + num;\n    console.log(i);\n    if (i <= 4) {\n      date.setDate(date.getDate() + num);\n      dateUnformatted = date;\n      dateSS = await convertTimestampForSofaScore(date);\n      [date, dateFootyStats] = await calculateDate(date);\n      string = dateFootyStats;\n      dateString = date;\n      console.log(dateString);\n      await renderButtons();\n    }\n  }\n\n  const todayRaw = new Date();\n  const tomorrowsDate = new Date(todayRaw);\n  tomorrowsDate.setDate(todayRaw.getDate() + 1);\n\n  const yesterdaysDate = new Date(todayRaw);\n  yesterdaysDate.setDate(todayRaw.getDate() - 1);\n\n  const saturdayDate = new Date(todayRaw);\n  saturdayDate.setDate(todayRaw.getDate() - ((saturdayDate.getDay() + 6) % 7) - 2);\n\n  const historicDate = new Date(todayRaw);\n  historicDate.setDate(todayRaw.getDate() - ((historicDate.getDay() + 6) % 7) - 9);\n\n  // Run calculateDate on all in parallel\n  const [\n    [today, todayFootyStats]\n  ] = await Promise.all([\n    calculateDate(todayRaw)\n  ]);\n\n  const [\n    todaySS,\n  ] = await Promise.all([\n    convertTimestampForSofaScore(new Date())\n  ]);\n\n  const text =\n    \"Select a day you would like to retrieve fixtures for from the options above\\n A list of games will be returned once the data has loaded\\n Once all fixtures have loaded, click on “Get Predictions and Stats” to see our forecasted outcomes for every game\\n If a game has completed, the predictions is displayed on the right and the actual result on the left\\n Each individual fixture is tappable/clickable. By doing so, you can access a range of detailed stats, from comparative charts, granular performance measures to previous meetings.\\n All games are subject to the same automated prediction algorithm with the outcome being a score prediction. Factors that determine the tip include the following, amongst others:\\n - Goal differentials\\n - Expected goal differentials \\n - Attack/Defence performance\\n - Form trends over time\\n - Home/Away records\\n - WDL records\\n - Points per game \\n - A range of other comparative factors\\n  –\\n\";\n\n  const text2 =\n    \"A range of tools are available should you wish to use them\\n Build a multi - Use the '+' or '-' buttons to add or remove a game deemed to be one of our highest confidence tips from the day\\n Exotic of the day: A pre-built exotic multi comprising of our highest confidence tips\\n BTTS games: Games where both teams to score is deemed a likely outcome\\n Over 2.5 goals tips: Games where over 2.5 goals are most likely to be scored\\n SSH Tips: Comprises only games where the expected goal differentials between each team are at their greatest. We believe this shows a true disparity in the form of the two opposing teams\\n Tap the 'How to use' option to hide this text\";\n\n  let textJoined = text.concat(text2);\n\n  let newText = textJoined.split(\"\\n\").map((i) => {\n    return <p>{i}</p>;\n  });\n\n  async function renderButtons(loginStatus) {\n    ReactDOM.render(\n      <div className=\"FixtureButtons\">\n        <h6>{loginStatus}</h6>\n        <Button\n          text={`<`}\n          className=\"FixturesButtonAmend\"\n          onClickEvent={async () => await decrementDate(1, date)}\n        />\n        <Button\n          text={dateFootyStats !== undefined ? dateFootyStats : date}\n          className=\"FixturesButtonToday\"\n          onClickEvent={async () =>\n            fixtureList.push(\n              await generateFixtures(\n                \"todaysFixtures\",\n                dateString,\n                selectedOdds,\n                dateFootyStats,\n                false,\n                today,\n                dateSS,\n                dateUnformatted\n              )\n            )\n          }\n        />\n        <Button\n          text={`>`}\n          className=\"FixturesButtonAmend\"\n          onClickEvent={async () => await incrementDateV2(1, date)}\n        />\n      </div>,\n      document.getElementById(\"Buttons\")\n    );\n  }\n\n  ReactDOM.render(\n    <div className=\"FixtureButtons\">\n      <Button\n        text={`<`}\n        className=\"FixturesButtonAmend\"\n        onClickEvent={async () => await decrementDate(1, date)}\n      />\n      <Button\n        text={`${string}`}\n        className=\"FixturesButtonToday\"\n        onClickEvent={async () =>\n          fixtureList.push(\n            await generateFixtures(\n              \"todaysFixtures\",\n              today,\n              selectedOdds,\n              todayFootyStats,\n              true,\n              today,\n              todaySS,\n              todaysDateUnformatted\n            )\n          )\n        }\n      />\n      <Button\n        text={`>`}\n        className=\"FixturesButtonAmend\"\n        onClickEvent={async () => await incrementDateV2(1, date)}\n      />\n    </div>,\n    document.getElementById(\"Buttons\")\n  );\n  ReactDOM.render(\n    <div className=\"OddsRadios\">\n      <OddsRadio value=\"Fractional odds\"></OddsRadio>\n      <OddsRadio value=\"Decimal odds\"></OddsRadio>\n    </div>,\n    document.getElementById(\"Checkbox\")\n  );\n  ReactDOM.render(\n    <><h6 className=\"PredictionTypeText\">Prediction algorithm type</h6>\n      <div className=\"PredictionRadios\">\n        <PredictionTypeRadio value=\"SSH Tips\"></PredictionTypeRadio>\n        <PredictionTypeRadio value=\"AI Tips\"></PredictionTypeRadio>\n      </div></>,\n    document.getElementById(\"CheckboxTwo\")\n  );\n  ReactDOM.render(\n    <Fragment>\n      <Collapsable\n        // className={\"HowToUse\"}\n        buttonText={\"How to use\"}\n        element={newText}\n      />\n    </Fragment>,\n    document.getElementById(\"XGDiff\")\n  );\n\n  if (loggedIn) {\n    ReactDOM.render(\n      <><div className=\"WelcomeBack\">Welcome back {loggedIn.email}</div></>,\n      document.getElementById(\"Email\")\n    );\n  } else {\n    ReactDOM.render(\n      <>\n        <h3 className=\"MembersGetMore\">Discover the most in depth stats and tips available</h3>\n        <div><p className=\"MembersGetMore\">Join as a free user or upgrade to premium for as little as £1/week, cancel anytime</p></div>\n        <Login />\n      </>\n      , document.getElementById(\"Email\"));\n  }\n}\n\n// Replace with your own Stripe public key\nexport const stripePromise = loadStripe(\n  \"pk_live_51QojxLBrqiWlVPadBxhtoj499YzoC8YjFUIVQwCcTe8B7ZUG47NbYAam2wvNox2mUmzd0WgQh4PWKaIQaxKxubig00yEzjNuVQ\"\n);\n\nexport const handleCheckout = async (priceId) => {\n  const stripe = await stripePromise;\n  const auth = getAuth();\n  const user = auth.currentUser;\n\n  if (!user) {\n    alert(\"Please sign-up or login before purchasing\");\n    return;\n  }\n\n  const response = await fetch(\n    `${process.env.REACT_APP_EXPRESS_SERVER}create-checkout-session`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ priceId, uid: user.uid }), // Send uid\n    }\n  );\n\n  const session = await response.json();\n\n  const result = await stripe.redirectToCheckout({ sessionId: session.id });\n\n  if (result.error) {\n    console.error(\"Checkout error:\", result.error.message);\n  }\n};\n\nconst welcomeTextUnsplitOne = `The ultimate football resource. Comprehensive stats, analysis and transparent tips for 40+ leagues and cups.\\n `;\nlet welcomeTextOne = welcomeTextUnsplitOne.split(\"\\n\").map((i) => {\n  return <p>{i}</p>;\n});\n\nfunction AppContent() {\n  const { user, isPaidUser } = useAuth();\n\n  const [data, setData] = useState({\n    loading: true,\n  });\n\n  useEffect(() => {\n    async function fetchData() {\n      let now = new Date();\n      let dateNow = await calculateDate(now);\n      const [\n        todaySS,\n      ] = await Promise.all([\n        convertTimestampForSofaScore(new Date())]);\n\n\n      fixtureList.push(\n        await generateFixtures(\n          \"todaysFixtures\",\n          dateNow[0],\n          selectedOdds,\n          dateNow[1],\n          true,\n          dateNow[0],\n          todaySS,\n          new Date()\n        ))\n\n\n      // Update the component state with the fetched data\n      setData({\n        loading: false,\n      });\n    }\n\n    fetchData();\n  }, []); // The empty dependency array ensures this runs only o\n\n  getLeagueList();\n\n  return (\n    <div className=\"App\">\n      <div className=\"DarkMode\">\n        <Suspense fallback={<div></div>}>\n          <LazyLogo />\n        </Suspense>\n        <a\n          className=\"BeGamblingAware\"\n          href=\"https://www.begambleaware.org\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          begambleaware\n        </a>\n        <ThemeToggle />\n      </div>\n      <HamburgerMenu />\n      <nav className=\"hidden md:flex gap-6\">\n        {menuItems.map((item) => (\n          <a\n            key={item}\n            href={`#${item.toLowerCase()}`}\n            className=\"text-lg font-semibold hover:text-blue-500\"\n          >\n            {item}\n          </a>\n        ))}\n      </nav>\n      <div id=\"LoadingContainer\" className=\"LoadingContainer\" />\n      <div id=\"RadioContainer\" className=\"RadioContainer\">\n        <div id=\"RadioText\" />\n        <div id=\"RadioButtons\" />\n      </div>\n      <div id=\"Email\" className=\"Email\"></div>\n      <div id=\"Day\" />\n\n\n      <div id=\"ExplainerText\" />\n      <div id=\"Loading\" className=\"Loading\"></div>\n      <div id=\"Buttons\" className=\"Buttons\">\n      </div>\n      <Collapsable buttonText={\"Options \\u{2630}\"} className={\"Options\"} element={\n        <><div id=\"Checkbox\" /><div id=\"CheckboxTwo\" className=\"CheckboxTwo\" /></>\n      }>\n      </Collapsable>\n\n      {user ? (\n        isPaidUser ? (\n          // If the user is logged in and is a paying customer, show the cancel button\n          <div />\n        ) : (\n          // If the user is logged in but is NOT a paying customer, show subscribe buttons\n          <div className=\"SubscribeContainer\">\n            <span className=\"MembershipInfo\">\n              Full fixtures and multis are restricted to premium\n              members. Memberships can be cancelled at any time and prices will\n              differ in currencies other than GBP. Payments are securely hosted\n              by Stripe.\n            </span>\n            <button\n              onClick={() => handleCheckout(\"price_1QrQ4ZBrqiWlVPadCkhLhtiZ\")}\n              className=\"SubscribeButton\"\n            >\n              Subscribe for £1/week\n            </button>\n            <button\n              onClick={() => handleCheckout(\"price_1QrQ5NBrqiWlVPadFBuBKKSM\")}\n              className=\"SubscribeButton\"\n            >\n              Subscribe for £3/month\n            </button>\n            <button\n              onClick={() => handleCheckout(\"price_1QrQ75BrqiWlVPadEML30BoJ\")}\n              className=\"SubscribeButton\"\n            >\n              Subscribe for £30/year\n            </button>\n          </div>\n        )\n      ) : (\n        // If the user is not logged in, show nothing\n        <div></div>\n      )}\n\n      <div id=\"GeneratePredictions\" className=\"GeneratePredictions\" />\n      <div id=\"MultiPlaceholder\" className=\"MultiPlaceholder\" />\n      <div id=\"shortlistRender\" />\n      <Collapsable buttonText={\"ROI\"} className={\"ROI\"} element={<div id=\"successMeasure2\" />} />\n      <div id=\"highLowLeagues\" className=\"HighLowLeagues\" />\n      <div id=\"risk\" />\n      <div id=\"successMeasure\" />\n      <div id=\"tables\" />\n      <div id=\"homeBadge\" />\n      <div id=\"FixtureContainerHeaders\"></div>\n\n      <div id=\"FixtureContainer\">\n        <h6 className=\"WelcomeText\">{welcomeTextOne}</h6>\n        <div>\n          <h6 className=\"WelcomeText\">\n            <ul className=\"AllLeagues\" key=\"league-list\">\n              <li className=\"League\" key=\"premier-league\">\n                Premier League\n              </li>\n              <li className=\"League\" key=\"english-football-league\">\n                English Football League\n              </li>\n              <li className=\"League\" key=\"la-liga\">\n                La Liga\n              </li>\n              <li className=\"League\" key=\"serie-a\">\n                Serie A\n              </li>\n              <li className=\"League\" key=\"bundesliga\">\n                Bundesliga\n              </li>\n              <li className=\"League\" key=\"ligue-1\">\n                Ligue 1\n              </li>\n              <li className=\"League\" key=\"mls\">\n                MLS\n              </li>\n              <li className=\"League\" key=\"primeira-liga\">\n                Primeira Liga\n              </li>\n              <li className=\"League\" key=\"champions-league\">\n                UEFA Champions League\n              </li>\n              <li className=\"League\" key=\"loads-more\">\n                Loads more...\n              </li>\n            </ul>\n            <a\n              className=\"SocialLink\"\n              href=\"https://www.reddit.com/r/xgtipping/\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              r/xgtipping\n            </a>\n          </h6>\n        </div>\n      </div>\n      <div id=\"XGDiff\" />\n\n      {user ? (\n        isPaidUser ? (\n          // If the user is logged in and is a paying customer, show the cancel button\n          <button\n            onClick={() => {\n              window.location.href =\n                \"https://https://www.soccerstatshub.com/#/cancelsubscription\";\n            }}\n            className=\"CancelButton\"\n          >\n            Cancel Subscription\n          </button>\n        ) : (\n          <div />\n        )\n      ) : (\n        // If the user is not logged in, show nothing\n        <div></div>\n      )}\n      <div className=\"Social\">\n        <TwitterShareButton\n          url={\"https://www.soccerstatshub.com\"}\n          title={\"#SoccerStatsHub\"}\n          className=\"ShareButton\"\n        >\n          <TwitterIcon size={\"3em\"} round={true} />\n        </TwitterShareButton>\n        <RedditShareButton\n          url={\"https://www.soccerstatshub.com\"}\n          title={\"Soccer Stats Hub\"}\n          className=\"ShareButton\"\n        >\n          <RedditIcon size={\"3em\"} round={true} />\n        </RedditShareButton>\n        <FacebookShareButton\n          url={\"https://www.soccerstatshub.com\"}\n          quote={\"SoccerStatsHub - data-driven football predictions\"}\n          className=\"ShareButton\"\n        >\n          <FacebookIcon size={\"3em\"} round={true} />\n        </FacebookShareButton>\n        <WhatsappShareButton\n          url={\"https://www.soccerstatshub.com\"}\n          title={\"SoccerStatsHub\"}\n          separator=\": \"\n          className=\"ShareButton\"\n        >\n          <WhatsappIcon size={\"3em\"} round={true} />\n        </WhatsappShareButton>\n        <TelegramShareButton\n          url={\"SoccerStatsHub\"}\n          title={\"Soccer Stats Hub\"}\n          className=\"ShareButton\"\n        >\n          <TelegramIcon size={\"3em\"} round={true} />\n        </TelegramShareButton>\n      </div>\n      <div>Soccer Stats Hub is for users over 18 years of age only</div>\n      <img\n        src={Over18Badge} // Use the imported path here\n        alt=\"18+ only\"\n        className=\"age-badge\" // Add your CSS class here\n      />\n      <Collapsable buttonText={\"Terms and Conditions\"} element={<StripePolicies />} />\n      <Collapsable buttonText={\"Privacy Policy\"} element={<PrivacyPolicy />} />\n      <div className=\"bitcoin\" id=\"bitcoin\">\n        <a\n          href=\"https://www.ko-fi.com/xgtipping\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          Donations\n        </a>\n        <span className=\"bitcoinSymbol\">&#x20bf;itcoin address</span>\n        <span className=\"bitcoinAddress\">\n          bc1q7j62txkvhfu0dt3l0s07saze6pjnyzs26wfgp0\n        </span>\n      </div>\n    </div>\n  );\n}\n\nexport default function App() {\n  return (\n    <AuthProvider>\n      <Routes>\n        <Route path=\"/\" element={<AppContent />} />\n      </Routes>\n    </AuthProvider>\n  );\n}\n","/Users/greg/Development/Predictor/src/components/Success.js",[],"/Users/greg/Development/Predictor/src/components/PasswordReset.js",[],"/Users/greg/Development/Predictor/src/components/Under25.js",[],"/Users/greg/Development/Predictor/src/components/Over25.js",["285"],"/Users/greg/Development/Predictor/src/components/BTTSFixtures.js",[],"/Users/greg/Development/Predictor/src/components/CancelSubscription.js",[],"/Users/greg/Development/Predictor/src/components/HighestScoringTeams.js",[],"/Users/greg/Development/Predictor/src/components/Cancel.js",[],"/Users/greg/Development/Predictor/src/components/Team.js",["286"],"import { useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { CreateBadge } from \"./createBadge\";\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n} from \"chart.js\";\nimport { Bar } from \"react-chartjs-2\";\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\nfunction TeamPage() {\n  const [dataState, setData] = useState([]);\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    try {\n      const responseHome = await fetch(\n        `${process.env.REACT_APP_EXPRESS_SERVER}team/${storedFixtureDetailsJson.homeId}`\n      );\n      const resultHome = await responseHome.json();\n\n      const responseAway = await fetch(\n        `${process.env.REACT_APP_EXPRESS_SERVER}team/${storedFixtureDetailsJson.awayId}`\n      );\n      const resultAway = await responseAway.json();\n      // setData(result.data.stadium_name);\n\n      let indexHome = resultHome.data.findIndex(\n        (x) => x.season_format === \"Domestic League\"\n      );\n      let indexAway = resultAway.data.findIndex(\n        (x) => x.season_format === \"Domestic League\"\n      );\n\n      if (resultHome.data[indexHome].stats.seasonScoredNum_overall) {\n        setData((test) => ({\n          ...test,\n          scoredOverallHome:\n            resultHome.data[indexHome].stats.seasonScoredNum_overall,\n          playedHomeOnly:\n            resultHome.data[indexHome].stats.seasonMatchesPlayed_home,\n          scoredOverallHomeOnly:\n            resultHome.data[indexHome].stats.seasonScoredNum_home,\n          conceededOverallHome:\n            resultHome.data[indexHome].stats.seasonConcededNum_overall,\n          conceededOverallHomeOnly:\n            resultHome.data[indexHome].stats.seasonConcededNum_home,\n\n          PPGOverallHome: resultHome.data[indexHome].stats.seasonPPG_overall,\n          PPGOverallHomeOnly: resultHome.data[indexHome].stats.seasonPPG_home,\n          leaguePosition_overallHome:\n            resultHome.data[indexHome].stats.leaguePosition_overall,\n          leaguePosition_HomeOnly:\n            resultHome.data[indexHome].stats.leaguePosition_home,\n          averageAttendance:\n            resultHome.data[indexHome].stats.average_attendance_home,\n          BTTSPercentage_overallHome:\n            resultHome.data[indexHome].stats.seasonBTTSPercentage_overall,\n          BTTSAndWinPercentage_Home:\n            resultHome.data[indexHome].stats.BTTS_and_win_percentage_overall,\n          BTTSAndLosePercentage_Home:\n            resultHome.data[indexHome].stats.BTTS_and_lose_percentage_overall,\n          BTTSBothHalvesHome:\n            resultHome.data[indexHome].stats\n              .BTTS_both_halves_percentage_overall,\n          GoalDifferenceHT_overall_Home:\n            resultHome.data[indexHome].stats.GoalDifferenceHT_overall,\n          GD_2hg_overall_Home: resultHome.data[indexHome].stats.gd_2hg_overall,\n          leadingAtHTPercentage_overallHome:\n            resultHome.data[indexHome].stats.leadingAtHTPercentage_overall,\n          seasonOver15Percentage_overallHome:\n            resultHome.data[indexHome].stats.seasonOver15Percentage_overall,\n          seasonOver25Percentage_overallHome:\n            resultHome.data[indexHome].stats.seasonOver25Percentage_overall,\n          seasonOver35Percentage_overallHome:\n            resultHome.data[indexHome].stats.seasonOver35Percentage_overall,\n          seasonOver45Percentage_overallHome:\n            resultHome.data[indexHome].stats.seasonOver45Percentage_overall,\n          scoredBothHalvesPercentage_overallHome:\n            resultHome.data[indexHome].stats.scoredBothHalvesPercentage_overall,\n          shots_on_target_per_goals_scored_overallHome:\n            resultHome.data[indexHome].stats.additional_info\n              .shots_on_target_per_goals_scored_overall,\n          cornersTotalAVG_overallHome:\n            resultHome.data[indexHome].stats.cornersTotalAVG_overall,\n          cardsAVG_overallHome:\n            resultHome.data[indexHome].stats.cardsAVG_overall,\n          foulsAVG_overallHome:\n            resultHome.data[indexHome].stats.foulsAVG_overall,\n          penalties_won_per_match_overallHome:\n            resultHome.data[indexHome].stats.additional_info\n              .penalties_won_per_match_overall,\n          penalty_in_a_match_percentage_overallHome:\n            resultHome.data[indexHome].stats.additional_info\n              .penalty_in_a_match_percentage_overall,\n\n          scoredOverallAway:\n            resultAway.data[indexAway].stats.seasonScoredNum_overall,\n          playedAwayOnly:\n            resultAway.data[indexAway].stats.seasonMatchesPlayed_away,\n          scoredOverallAwayOnly:\n            resultAway.data[indexAway].stats.seasonScoredNum_away,\n          conceededOverallAway:\n            resultAway.data[indexAway].stats.seasonConcededNum_overall,\n          conceededOverallAwayOnly:\n            resultAway.data[indexAway].stats.seasonConcededNum_away,\n\n          PPGOverallAway: resultAway.data[indexAway].stats.seasonPPG_overall,\n          PPGOverallAwayOnly: resultAway.data[indexAway].stats.seasonPPG_away,\n          leaguePosition_overallAway:\n            resultAway.data[indexAway].stats.leaguePosition_overall,\n          leaguePosition_AwayOnly:\n            resultAway.data[indexAway].stats.leaguePosition_away,\n          BTTSPercentage_overallAway:\n            resultAway.data[indexAway].stats.seasonBTTSPercentage_overall,\n          BTTSAndWinPercentage_Away:\n            resultAway.data[indexAway].stats.BTTS_and_win_percentage_overall,\n          BTTSAndLosePercentage_Away:\n            resultAway.data[indexAway].stats.BTTS_and_lose_percentage_overall,\n          BTTSBothHalvesAway:\n            resultAway.data[indexAway].stats\n              .BTTS_both_halves_percentage_overall,\n          GoalDifferenceHT_overall_Away:\n            resultAway.data[indexAway].stats.GoalDifferenceHT_overall,\n          GD_2hg_overall_Away: resultAway.data[indexAway].stats.gd_2hg_overall,\n          leadingAtHTPercentage_overallAway:\n            resultAway.data[indexAway].stats.leadingAtHTPercentage_overall,\n          seasonOver15Percentage_overallAway:\n            resultAway.data[indexAway].stats.seasonOver15Percentage_overall,\n          seasonOver25Percentage_overallAway:\n            resultAway.data[indexAway].stats.seasonOver25Percentage_overall,\n          seasonOver35Percentage_overallAway:\n            resultAway.data[indexAway].stats.seasonOver35Percentage_overall,\n          seasonOver45Percentage_overallAway:\n            resultAway.data[indexAway].stats.seasonOver45Percentage_overall,\n          scoredBothHalvesPercentage_overallAway:\n            resultAway.data[indexAway].stats.scoredBothHalvesPercentage_overall,\n          shots_on_target_per_goals_scored_overallAway:\n            resultAway.data[indexAway].stats.additional_info\n              .shots_on_target_per_goals_scored_overall,\n\n          cornersTotalAVG_overallAway:\n            resultAway.data[indexAway].stats.cornersTotalAVG_overall,\n          cardsAVG_overallAway:\n            resultAway.data[indexAway].stats.cardsAVG_overall,\n          foulsAVG_overallAway:\n            resultAway.data[indexAway].stats.foulsAVG_overall,\n          penalties_won_per_match_overallAway:\n            resultAway.data[indexAway].stats.additional_info\n              .penalties_won_per_match_overall,\n          penalty_in_a_match_percentage_overallAway:\n            resultAway.data[indexAway].stats.additional_info\n              .penalty_in_a_match_percentage_overall,\n        }));\n      }\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n    }\n  };\n\n  const storedDataHome = useSelector((state) => state.data.dataHome);\n  const jsonDataHome = JSON.parse(storedDataHome);\n  const propertyNamesHome = Object.entries(jsonDataHome);\n\n  const storedDataHomeDef = useSelector((state) => state.data.dataHomeDef);\n  const jsonDataHomeDef = JSON.parse(storedDataHomeDef);\n  const propertyNamesHomeDef = Object.entries(jsonDataHomeDef);\n\n  const storedDataallTeamResultsHome = useSelector(\n    (state) => state.data.allTeamResultsHome\n  );\n  const jsonDataallTeamResultsHome = JSON.parse(storedDataallTeamResultsHome);\n  const propertyNamesallTeamResultsHome = Object.values(\n    jsonDataallTeamResultsHome\n  );\n\n  const homeDetails = useSelector((state) => state.data.homeDetails);\n  const jsonHomeDetails = JSON.parse(homeDetails);\n\n  const storedDataAway = useSelector((state) => state.data.dataAway);\n  const jsonDataAway = JSON.parse(storedDataAway);\n  const propertyNamesAway = Object.entries(jsonDataAway);\n\n  const storedDataAwayDef = useSelector((state) => state.data.dataAwayDef);\n  const jsonDataAwayDef = JSON.parse(storedDataAwayDef);\n  const propertyNamesAwayDef = Object.entries(jsonDataAwayDef);\n\n  const storedDataallTeamResultsAway = useSelector(\n    (state) => state.data.allTeamResultsAway\n  );\n  const jsonDataallTeamResultsAway = JSON.parse(storedDataallTeamResultsAway);\n  const propertyNamesallTeamResultsAway = Object.values(\n    jsonDataallTeamResultsAway\n  );\n\n  const awayDetails = useSelector((state) => state.data.awayDetails);\n  const jsonAwayDetails = JSON.parse(awayDetails);\n\n  const storedFixtureDetails = useSelector(\n    (state) => state.data.fixtureDetails\n  );\n  const storedFixtureDetailsJson = JSON.parse(storedFixtureDetails);\n  console.log(jsonAwayDetails);\n\n  const options = {\n    plugins: {\n      title: {\n        display: true,\n        text: \"Team comparison\",\n      },\n    },\n    aspectRatio: 0.5,\n    maintainAspectRatio: true,\n    responsive: true,\n    scales: {\n      x: {\n        stacked: true,\n      },\n      y: {\n        stacked: true,\n        display: false,\n      },\n    },\n  };\n  const labels = [\n    storedFixtureDetailsJson.homeTeamName,\n    storedFixtureDetailsJson.awayTeamName,\n  ];\n\n  const data = {\n    labels,\n    datasets: [\n      {\n        data: [\n          jsonHomeDetails[\"Attacking Strength\"],\n          jsonAwayDetails[\"Attacking Strength\"],\n        ],\n        label: \"Attacking Strength\",\n        backgroundColor: \"#030061\",\n      },\n      {\n        data: [\n          jsonHomeDetails[\"Defensive Strength\"],\n          jsonAwayDetails[\"Defensive Strength\"],\n        ],\n        label: \"Defensive Strength\",\n        backgroundColor: \"#CC3314\",\n      },\n    ],\n  };\n\n  return (\n    <div className=\"TeamStatsContainer\">\n      <div className=\"FixtureHeadingContiner\">\n        <CreateBadge\n          image={storedFixtureDetailsJson.homeTeamBadge}\n          ClassName=\"HomeTeamBadge\"\n          alt=\"Home team badge\"\n        ></CreateBadge>\n        {`${storedFixtureDetailsJson.homeTeamName} v ${storedFixtureDetailsJson.awayTeamName}`}\n        <CreateBadge\n          image={storedFixtureDetailsJson.awayTeamBadge}\n          ClassName=\"AwayTeamBadge\"\n          alt=\"Away team badge\"\n        ></CreateBadge>\n      </div>\n      <h3>\n        {storedFixtureDetailsJson.stadium} KO: {storedFixtureDetailsJson.time} |\n        Average Attendance: {dataState.averageAttendance}\n      </h3>\n      <h3>\n        Soccer Stats Hub Prediction: {storedFixtureDetailsJson.homeGoals} -{\" \"}\n        {storedFixtureDetailsJson.awayGoals}\n      </h3>\n      <div className=\"TeamStats\">\n        <ul className=\"HomeTeamStats\">\n          <h3>{storedFixtureDetailsJson.homeTeamName}</h3>\n          {propertyNamesHome.map(([key, value], index) => (\n            <li key={index}>\n              <strong>{key}:</strong>{\" \"}\n              {typeof value === \"object\" ? JSON.stringify(value) : value}\n            </li>\n          ))}\n          <ul className=\"HomeTeamStats\">\n            {propertyNamesHomeDef.map(([key, value], index) => (\n              <li key={index}>\n                <strong>{key}:</strong>{\" \"}\n                {typeof value === \"object\" ? JSON.stringify(value) : value}\n              </li>\n            ))}\n          </ul>\n          <li>Scored overall: {dataState.scoredOverallHome}</li>\n          <li>Conceeded overall: {dataState.conceededOverallHome}</li>\n          <li>\n            Average scored home only:{\" \"}\n            {(\n              dataState.scoredOverallHomeOnly / dataState.playedHomeOnly\n            ).toFixed(2)}\n          </li>\n          <li>\n            Average conceeded home only:{\" \"}\n            {(\n              dataState.conceededOverallHomeOnly / dataState.playedHomeOnly\n            ).toFixed(2)}\n          </li>\n          <li>PPG overall: {dataState.PPGOverallHome}</li>\n          <li>PPG home only: {dataState.PPGOverallHomeOnly}</li>\n          <li>League position: {dataState.leaguePosition_overallHome}</li>\n          <li>\n            League position home only: {dataState.leaguePosition_HomeOnly}\n          </li>\n          <li>BTTS {dataState.BTTSPercentage_overallHome}%</li>\n          <li>BTTS and win: {dataState.BTTSAndWinPercentage_Home}%</li>\n          <li>BTTS and lose: {dataState.BTTSAndLosePercentage_Home}%</li>\n          <li>BTTS both halves: {dataState.BTTSBothHalvesHome}%</li>\n          <li>\n            Goal diff 1st half only: {dataState.GoalDifferenceHT_overall_Home}\n          </li>\n          <li>Goal diff 2nd half only: {dataState.GD_2hg_overall_Home}</li>\n          <li>\n            Leading at half time: {dataState.leadingAtHTPercentage_overallHome}%\n          </li>\n          <li>\n            Over 1.5 goals in games:{\" \"}\n            {dataState.seasonOver15Percentage_overallHome}%\n          </li>\n          <li>\n            Over 2.5 goals in games:{\" \"}\n            {dataState.seasonOver25Percentage_overallHome}%\n          </li>\n          <li>\n            Over 3.5 goals in games:{\" \"}\n            {dataState.seasonOver35Percentage_overallHome}%\n          </li>\n          <li>\n            Over 4.5 goals in games:{\" \"}\n            {dataState.seasonOver45Percentage_overallHome}%\n          </li>\n          <li>\n            Scored both halves:{\" \"}\n            {dataState.scoredBothHalvesPercentage_overallHome}%\n          </li>\n          <li>\n            SOTs per goal:{\" \"}\n            {dataState.shots_on_target_per_goals_scored_overallHome}\n          </li>\n          <li>Corners in game avg: {dataState.cornersTotalAVG_overallHome}</li>\n          <li>Cards avg: {dataState.cardsAVG_overallHome}</li>\n          <li>Fouls against avg: {dataState.foulsAVG_overallHome}</li>\n          <li>\n            Penalties won avg: {dataState.penalties_won_per_match_overallHome}\n          </li>\n          <li>\n            Penalties in match:{\" \"}\n            {dataState.penalty_in_a_match_percentage_overallHome}%\n          </li>\n        </ul>\n        <ul className=\"AwayTeamStats\">\n          <h3>{storedFixtureDetailsJson.awayTeamName}</h3>\n          {propertyNamesAway.map(([key, value], index) => (\n            <li key={index}>\n              <strong>{key}:</strong>{\" \"}\n              {typeof value === \"object\" ? JSON.stringify(value) : value}\n            </li>\n          ))}\n          <ul className=\"AwayTeamStats\">\n            {propertyNamesAwayDef.map(([key, value], index) => (\n              <li key={index}>\n                <strong>{key}:</strong>{\" \"}\n                {typeof value === \"object\" ? JSON.stringify(value) : value}\n              </li>\n            ))}\n          </ul>\n          <li>Scored overall: {dataState.scoredOverallAway}</li>\n          <li>Conceeded overall: {dataState.conceededOverallAway}</li>\n          <li>\n            Average scored away only:{\" \"}\n            {(\n              dataState.scoredOverallAwayOnly / dataState.playedAwayOnly\n            ).toFixed(2)}\n          </li>\n          <li>\n            Average conceeded away only:{\" \"}\n            {(\n              dataState.conceededOverallAwayOnly / dataState.playedAwayOnly\n            ).toFixed(2)}\n          </li>\n          <li>PPG overall: {dataState.PPGOverallAway}</li>\n          <li>PPG away only: {dataState.PPGOverallAwayOnly}</li>\n          <li>League position: {dataState.leaguePosition_overallAway}</li>\n          <li>\n            League position away only: {dataState.leaguePosition_AwayOnly}\n          </li>\n          <li>BTTS: {dataState.BTTSPercentage_overallAway}%</li>\n          <li>BTTS and win: {dataState.BTTSAndWinPercentage_Away}%</li>\n          <li>BTTS and lose: {dataState.BTTSAndLosePercentage_Away}%</li>\n          <li>BTTS both halves: {dataState.BTTSBothHalvesAway}%</li>\n          <li>\n            Goal diff 1st half only: {dataState.GoalDifferenceHT_overall_Away}\n          </li>\n          <li>Goal diff 2nd half only: {dataState.GD_2hg_overall_Away}</li>\n          <li>\n            Leading at half time: {dataState.leadingAtHTPercentage_overallAway}%\n          </li>\n          <li>\n            Over 1.5 goals in games:{\" \"}\n            {dataState.seasonOver15Percentage_overallAway}%\n          </li>\n          <li>\n            Over 2.5 goals in games:{\" \"}\n            {dataState.seasonOver25Percentage_overallAway}%\n          </li>\n          <li>\n            Over 3.5 goals in games:{\" \"}\n            {dataState.seasonOver35Percentage_overallAway}%\n          </li>\n          <li>\n            Over 4.5 goals in games:{\" \"}\n            {dataState.seasonOver45Percentage_overallAway}%\n          </li>\n          <li>\n            Scored both halves:{\" \"}\n            {dataState.scoredBothHalvesPercentage_overallAway}%\n          </li>\n          <li>\n            SOTs per goal:{\" \"}\n            {dataState.shots_on_target_per_goals_scored_overallAway}\n          </li>\n          <li>Corners in game avg: {dataState.cornersTotalAVG_overallAway}</li>\n          <li>Cards avg: {dataState.cardsAVG_overallAway}</li>\n          <li>Fouls against avg: {dataState.foulsAVG_overallAway}</li>\n          <li>\n            Penalties won avg: {dataState.penalties_won_per_match_overallAway}\n          </li>\n          <li>\n            Penalties in match:{\" \"}\n            {dataState.penalty_in_a_match_percentage_overallAway}%\n          </li>\n        </ul>\n        <div className=\"ChartContainer\">\n          <span className=\"Spacer\"></span>\n          <Bar options={options} data={data} className=\"ComparisonBar\" />\n          <span className=\"Spacer\"></span>\n        </div>\n        <ul className=\"HomeTeamResults\">\n          {propertyNamesallTeamResultsHome.map((match, index) => (\n            <>\n              <div className=\"MatchDate\">{match.date}</div>\n              <div className=\"ResultRowOverviewSmall\">\n                <div className=\"columnOverviewHomeSmall\">{match.homeTeam}</div>\n                <span className=\"columnOverviewScoreSmall\">\n                  {match.homeGoals} : {match.awayGoals}\n                </span>\n                <div className=\"columnOverviewAwaySmall\">{match.awayTeam}</div>\n              </div>\n            </>\n          ))}\n        </ul>\n        <ul className=\"AwayTeamResults\">\n          {propertyNamesallTeamResultsAway.map((match, index) => (\n            <>\n              <div className=\"MatchDate\">{match.date}</div>\n              <div className=\"ResultRowOverviewSmall\">\n                <div className=\"columnOverviewHomeSmall\">{match.homeTeam}</div>\n                <span className=\"columnOverviewScoreSmall\">\n                  {match.homeGoals} : {match.awayGoals}\n                </span>\n                <div className=\"columnOverviewAwaySmall\">{match.awayTeam}</div>\n              </div>\n            </>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default TeamPage;\n","/Users/greg/Development/Predictor/src/components/BTTSTeams.js",[],"/Users/greg/Development/Predictor/src/components/HighestScoringFixtures.js",[],"/Users/greg/Development/Predictor/src/logic/store.js",[],"/Users/greg/Development/Predictor/src/components/OddsRadio.js",[],"/Users/greg/Development/Predictor/src/components/Button.js",[],"/Users/greg/Development/Predictor/src/components/Logo.js",[],"/Users/greg/Development/Predictor/src/components/Fixture.js",["287","288","289","290","291","292","293"],"import { Fragment, useState, useEffect, useRef, lazy, Suspense } from \"react\";\nimport { CreateBadge } from \"./createBadge\";\nimport { useDispatch } from \"react-redux\";\nimport { setData } from \"../logic/dataSlice\";\nimport { Provider } from \"react-redux\";\nimport store from \"../logic/store\"; // Import your Redux store\nimport { clicked } from \"../logic/getScorePredictions\";\nimport { userDetail } from \"../logic/authProvider\";\nimport { checkUserPaidStatus } from \"../logic/hasUserPaid\";\nimport { userTips } from \"./GameStats\";\nimport { leagueStatsArray } from \"../logic/getScorePredictions\";\nimport LeagueName from './LeagueName';\nimport ShareShortlistButton from \"./ShareShortlistButton\";\nconst LazyGameStats = lazy(() => import('./GameStats'));\n\nlet resultValue;\nlet paid;\nvar count;\nlet mockValue;\nvar setCount;\nfunction toggle(bool) {\n  count = !bool;\n  return count;\n}\n\nlet tipOutcome = undefined;\n\nfunction GetDivider(fixture, mock) {\n  const matchStatus = fixture.status;\n  let isPrediction = resultValue;\n\n  if (fixture.fixture.omit === true && matchStatus !== \"complete\") {\n    isPrediction = true;\n    return (\n      <div className=\"KOAndPrediction\">\n        <div className=\"KOTime\">{`${fixture.fixture.time}`}</div>\n      </div>\n    );\n  } else if (mockValue === true && matchStatus === \"complete\") {\n    isPrediction = false;\n    return (\n      <div className=\"KOAndPrediction\">\n        <div className=\"KOTime\">{`${fixture.fixture.time}`}</div>\n      </div>\n    );\n  } else if (mockValue === true && matchStatus !== \"complete\") {\n    isPrediction = true;\n    return (\n      <div className=\"KOAndPrediction\">\n        <div className=\"KOTime\">{`${fixture.fixture.time}`}</div>\n      </div>\n    );\n  } else if (isPrediction === false && matchStatus !== \"complete\") {\n    return (\n      <div className=\"KOAndPrediction\">\n        <div className=\"KOTime\">{`${fixture.fixture.time}`}</div>\n      </div>\n    );\n  } else if (isPrediction === false && matchStatus === \"complete\") {\n    return (\n      <div className=\"KOAndPrediction\">\n        <div className=\"KOTime\">{`${fixture.fixture.time}`}</div>\n      </div>\n    );\n  } else if (isPrediction === true && matchStatus === \"complete\") {\n    let outcome;\n    let prediction;\n\n    switch (true) {\n      case fixture.fixture.homeGoals > fixture.fixture.awayGoals:\n        outcome = 0;\n        fixture.fixture.winner = fixture.fixture.homeTeam;\n        fixture.fixture.outcome = \"homeWin\";\n        break;\n      case fixture.fixture.homeGoals === fixture.fixture.awayGoals:\n        outcome = 1;\n        fixture.fixture.winner = \"draw\";\n        fixture.fixture.outcome = \"draw\";\n\n        break;\n      case fixture.fixture.homeGoals < fixture.fixture.awayGoals:\n        outcome = 2;\n        fixture.fixture.winner = fixture.fixture.awayTeam;\n        fixture.fixture.outcome = \"awayWin\";\n\n        break;\n      default:\n        break;\n    }\n\n    switch (true) {\n      case fixture.fixture.goalsA > fixture.fixture.goalsB:\n        prediction = 0;\n        break;\n      case fixture.fixture.goalsA === fixture.fixture.goalsB:\n        prediction = 1;\n        break;\n      case fixture.fixture.goalsA < fixture.fixture.goalsB:\n        prediction = 2;\n        break;\n      default:\n        break;\n    }\n\n    if (fixture.fixture.omit === true) {\n      return (\n        <Fragment>\n          <div\n            className=\"Omitted\"\n            key={fixture.fixture.homeTeam}\n            data-cy={\"score-\" + fixture.fixture.id}\n          ></div>\n        </Fragment>\n      );\n    } else if (outcome === prediction) {\n      if (fixture.fixture.homeOdds !== 0) {\n        switch (true) {\n          case outcome === 0:\n            fixture.fixture.profit = fixture.fixture.homeOdds;\n            break;\n          case outcome === 1:\n            fixture.fixture.profit = fixture.fixture.drawOdds;\n            break;\n          case outcome === 2:\n            fixture.fixture.profit = fixture.fixture.awayOdds;\n            break;\n          default:\n            break;\n        }\n      } else fixture.fixture.profit = 1;\n\n      if (\n        fixture.fixture.goalsA === fixture.fixture.homeGoals &&\n        fixture.fixture.goalsB === fixture.fixture.awayGoals\n      ) {\n        fixture.fixture.exactScore = true;\n        tipOutcome = \"exact\";\n        return null;\n      } else {\n        fixture.fixture.exactScore = false;\n        tipOutcome = \"correct\";\n        return null;\n      }\n    } else if (outcome !== prediction) {\n      if (fixture.fixture.homeOdds !== 0) {\n        fixture.fixture.profit = 0;\n      } else {\n        fixture.fixture.profit = 1;\n      }\n      // fixture.fixture.exactScore = false;\n      tipOutcome = \"incorrect\";\n      return null;\n    }\n  } else {\n    return (\n      <div className=\"KOAndPrediction\">\n        <div className=\"KOTime\">{`${fixture.fixture.time}`}</div>\n      </div>\n    );\n  }\n}\n\nconst downArrow = \"\\u{2630}\";\nconst rightArrow = \"\\u{29C9}\";\n\nexport let testing;\n\nfunction SingleFixture({\n  fixture,\n  count,\n  mock,\n  checked,\n  onToggle,\n  showShortlist,\n}) {\n  const dispatch = useDispatch();\n  const [showGameStats, setShowGameStats] = useState(false);\n  const [isLoadingGameStats, setIsLoadingGameStats] = useState(false); // New loading state\n\n  function StoreData() {\n    const fixtureDetails = {\n      id: fixture.id,\n      homeTeamName: fixture.homeTeam,\n      homeId: fixture.homeId,\n      homeTeamBadge: fixture.homeBadge,\n      awayTeamName: fixture.awayTeam,\n      awayId: fixture.awayId,\n      awayTeamBadge: fixture.awayBadge,\n      stadium: fixture.stadium,\n      time: fixture.time,\n      homeGoals: fixture.goalsA,\n      awayGoals: fixture.goalsB,\n    };\n\n    const homeDetails = {\n      \"Attacking Strength\": fixture.formHome.attackingStrength,\n      \"Defensive Strength\": fixture.formHome.defensiveStrength,\n    };\n\n    const awayDetails = {\n      \"Attacking Strength\": fixture.formAway.attackingStrength,\n      \"Defensive Strength\": fixture.formAway.defensiveStrength,\n    };\n\n    const dataToSend = {\n      key1: \"value1\",\n      key2: \"value2\",\n    };\n    fixture.formHome.defensiveMetrics[\"Clean Sheet Percentage\"] =\n      fixture.formHome.CleanSheetPercentage;\n    fixture.formAway.defensiveMetrics[\"Clean Sheet Percentage\"] =\n      fixture.formAway.CleanSheetPercentage;\n\n    localStorage.setItem(\n      \"homeForm\",\n      JSON.stringify(fixture.formHome.attackingMetrics)\n    );\n    localStorage.setItem(\n      \"homeFormDef\",\n      JSON.stringify(fixture.formHome.defensiveMetrics)\n    );\n    localStorage.setItem(\n      \"allTeamResultsHome\",\n      JSON.stringify(fixture.formHome.allTeamResults)\n    );\n    localStorage.setItem(\"homeDetails\", JSON.stringify(homeDetails));\n\n    localStorage.setItem(\n      \"awayForm\",\n      JSON.stringify(fixture.formAway.attackingMetrics)\n    );\n    localStorage.setItem(\n      \"awayFormDef\",\n      JSON.stringify(fixture.formAway.defensiveMetrics)\n    );\n    localStorage.setItem(\n      \"allTeamResultsAway\",\n      JSON.stringify(fixture.formAway.allTeamResults)\n    );\n    localStorage.setItem(\"awayDetails\", JSON.stringify(awayDetails));\n\n    localStorage.setItem(\"fixtureDetails\", JSON.stringify(fixtureDetails));\n\n    dispatch(setData(dataToSend));\n    dispatch(setData({ key1: \"value1\", key2: \"value2\" }));\n  }\n\n  async function handleButtonClick() {\n    if (userDetail) {\n      paid = await checkUserPaidStatus(userDetail.uid);\n      if (clicked === true && paid) {\n        StoreData();\n        window.open(\"/#/fixture\");\n      } else {\n        alert(\"Premium feature only\");\n      }\n    } else {\n      paid = false;\n    }\n  }\n\n  function styleForm(formIndicator) {\n    let className;\n    if (formIndicator === \"W\") {\n      className = \"winSmall\";\n    } else if (formIndicator === \"D\") {\n      className = \"drawSmall\";\n    } else if (formIndicator === \"L\") {\n      className = \"lossSmall\";\n    }\n    return className;\n  }\n\n  const handleGameStatsClick = () => {\n    if (!clicked) {\n      alert(\"Tap Get Predictions to fetch all game stats first\");\n      return;\n    }\n    setIsLoadingGameStats(true);\n    StoreData();\n    setTimeout(() => {\n      setShowGameStats(!showGameStats);\n      setIsLoadingGameStats(false); // Set loading to false after \"loading\"\n    }, 1);\n  };\n\n  return (\n    <div key={fixture.game}>\n      <LeagueName fixture={fixture} mock={mock} showShortlist={showShortlist} />\n      <div className={`individualFixtureContainerfalse`}>\n        <li\n          className={`individualFixture${fixture.omit}`}\n          key={fixture.id}\n          data-cy={fixture.id}\n        // onClick={handleGameStatsClick}\n        // onClick={onToggle} // Toggle checked state on click\n        // style={{ display: checked ? \"lightblue\" : \"white\" }} // Change background when checked\n        >\n          <div className=\"MatchDetail\">\n            <GetDivider\n              result={resultValue}\n              status={fixture.status}\n              fixture={fixture}\n            />\n            <input\n              type=\"checkbox\"\n              checked={checked}\n              onChange={onToggle}\n              className=\"star\"\n              id={`shortlist-${fixture.id}`} // Unique ID for label association\n            />\n          </div>\n          <div className={`HomeAndAwayContainer${fixture.predictionOutcome}`}>\n            <div className=\"HomeContainer\">\n              <div className=\"HomeOdds\">{fixture.fractionHome}</div>\n              <CreateBadge\n                image={fixture.homeBadge}\n                ClassName=\"HomeBadge\"\n                alt=\"Home team badge\"\n                flexShrink={5}\n              />\n              <div className=\"homeTeam\">\n                {\" \"}\n                {fixture.homeTeam}{\" \"}\n                {fixture.formHome ? `(${fixture.formHome.LeaguePosition})` : \"\"}\n              </div>\n              <div className=\"score\" key={fixture.homeTeam}>\n                {fixture.goalsA !== undefined ? `${fixture.goalsA}` : `-`}\n              </div>\n              <div className={`result`}>\n                {fixture.status === \"complete\" ? `${fixture.homeGoals}` : `-`}\n              </div>\n              <div className={`Last5`}>\n                {fixture.formHome && (\n                  <>\n                    <span\n                      className={styleForm(\n                        fixture.formHome.resultsAll[4] || \"\"\n                      )}\n                    ></span>\n                    <span\n                      className={styleForm(\n                        fixture.formHome.resultsAll[3] || \"\"\n                      )}\n                    ></span>\n                    <span\n                      className={styleForm(\n                        fixture.formHome.resultsAll[2] || \"\"\n                      )}\n                    ></span>\n                    <span\n                      className={styleForm(\n                        fixture.formHome.resultsAll[1] || \"\"\n                      )}\n                    ></span>\n                    <span\n                      className={styleForm(\n                        fixture.formHome.resultsAll[0] || \"\"\n                      )}\n                    ></span>\n                  </>\n                )}\n              </div>\n              <button className=\"GameStatsTwo\" onClick={handleButtonClick}>\n                {rightArrow}\n              </button>\n            </div>\n            <div className=\"AwayContainer\">\n              <div className=\"AwayOdds\">{fixture.fractionAway}</div>\n              <CreateBadge\n                image={fixture.awayBadge}\n                ClassName=\"AwayBadge\"\n                alt=\"Away team badge\"\n              />\n              <div className=\"awayTeam\">\n                {fixture.awayTeam}{\" \"}\n                {fixture.formAway ? `(${fixture.formAway.LeaguePosition})` : \"\"}\n              </div>\n              <div className=\"score\" key={fixture.awayTeam}>\n                {fixture.goalsB !== undefined ? `${fixture.goalsB}` : `-`}\n              </div>\n              <div className=\"result\">\n                {fixture.status === \"complete\" ? `${fixture.awayGoals}` : `-`}\n              </div>\n              <div className={`Last5`}>\n                {fixture.formAway && (\n                  <>\n                    <span\n                      className={styleForm(\n                        fixture.formAway.resultsAll[4] || \"\"\n                      )}\n                    ></span>\n                    <span\n                      className={styleForm(\n                        fixture.formAway.resultsAll[3] || \"\"\n                      )}\n                    ></span>\n                    <span\n                      className={styleForm(\n                        fixture.formAway.resultsAll[2] || \"\"\n                      )}\n                    ></span>\n                    <span\n                      className={styleForm(\n                        fixture.formAway.resultsAll[1] || \"\"\n                      )}\n                    ></span>\n                    <span\n                      className={styleForm(\n                        fixture.formAway.resultsAll[0] || \"\"\n                      )}\n                    ></span>\n                  </>\n                )}\n              </div>\n              <button className=\"GameStats\" onClick={handleGameStatsClick}>\n                {downArrow}\n              </button>\n            </div>\n          </div>\n        </li>\n   </div>\n      {isLoadingGameStats && <div className=\"LoadingMessage\">Loading Game Stats...</div>}{\" \"}\n      {/* Show loading message */}\n      <Suspense fallback={<div>Loading game statistics...</div>}>\n\n        {/* The condition ensures LazyGameStats is only mounted when ready */}\n        {showGameStats && !isLoadingGameStats && (\n          <LazyGameStats\n            game={fixture}\n            displayBool={true}\n            stats={\n              leagueStatsArray && leagueStatsArray[`leagueStats${fixture.leagueID}`]\n                ? leagueStatsArray[`leagueStats${fixture.leagueID}`]\n                : null\n            }\n          />\n        )}\n      </Suspense>\n    </div>\n  );\n}\n\nasync function submitTips() {\n  if (userDetail?.uid && userTips) {\n    await fetch(`${process.env.REACT_APP_EXPRESS_SERVER}tips`, {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(userTips),\n    });\n    alert(\"Tips submitted\");\n  } else {\n    return;\n  }\n\n  localStorage.removeItem(\"userTips\");\n  userTips.length = 0;\n}\n\nconst List = ({\n  fixtures,\n  mock,\n  showShortlist,\n  setShowShortlist,\n  // You may also want to accept fullUncappedFixtures here if that was part of your final solution\n}) => {\n  // ⭐️ showShortlist state is now received via props, not local state ⭐️\n  const [selectedFixtures, setSelectedFixtures] = useState([]);\n\n  // You need to resolve this variable being undefined if it's not a prop or local state\n  // console.log(showShortlist); \n\n  const isInitialMount = useRef(true);\n\n  // 1. URL READING EFFECT (Loads shortlist from URL for persistence and sets initial view state)\n  useEffect(() => {\n    const params = new URLSearchParams(window.location.search);\n    const shortlistParam = params.get('shortlist');\n    const viewParam = params.get('view');\n\n    // Use the fixtures prop for reading, as Fixture is now passing the correct source dynamically \n    // (or, if needed, you'd use a dedicated fullUncappedFixtures prop here)\n    if (fixtures && fixtures.length > 0) {\n\n      if (shortlistParam) {\n        const sharedFixtureIds = shortlistParam.split(',').map(id => parseInt(id, 10));\n\n        // Use the fixtures prop for filtering. Assuming Fixture passes the FULL list \n        // on the second render, the initial set here might still be capped if the timing is tight.\n        // For production, you MUST use the uncapped list here (e.g., props.fullUncappedFixtures)\n        const sharedShortlist = fixtures.filter(fixture =>\n          sharedFixtureIds.includes(fixture.id)\n        );\n\n        if (sharedShortlist.length > 0) {\n          setSelectedFixtures(sharedShortlist);\n\n          // ⭐️ Use the prop setter for initial state ⭐️\n          if (viewParam === 'shortlist') {\n            setShowShortlist(true);\n          } else if (showShortlist) {\n            // If the view was active but the URL no longer requests it, turn it off.\n            setShowShortlist(false);\n          }\n\n          isInitialMount.current = false;\n          return;\n        }\n      }\n\n      isInitialMount.current = false;\n    }\n\n  }, [fixtures, setSelectedFixtures, setShowShortlist, showShortlist]);\n  // Note: Added 'showShortlist' to dependencies to allow the else if branch to work on re-renders\n\n  // ----------------------------------------------------------------------\n\n  // 2. URL WRITING EFFECT (Persists user changes to URL) - UNCHANGED\n  useEffect(() => {\n    if (isInitialMount.current) {\n      return;\n    }\n\n    const pathname = window.location.pathname;\n    const params = new URLSearchParams(window.location.search);\n    const hasInitialShortlist = params.get('shortlist') !== null;\n\n    if (hasInitialShortlist && selectedFixtures.length === 0) {\n      return;\n    }\n\n    if (selectedFixtures.length > 0) {\n      const selectedFixtureIds = selectedFixtures.map(f => f.id).join(',');\n      params.set('shortlist', selectedFixtureIds);\n    } else {\n      params.delete('shortlist');\n    }\n\n    const newSearchParams = params.toString();\n\n    if (newSearchParams === '') {\n      window.history.replaceState(null, '', pathname);\n    } else {\n      const newUrl = `${pathname}?${newSearchParams}`;\n      window.history.replaceState(null, '', newUrl);\n    }\n\n  }, [selectedFixtures]);\n\n  // Function to handle the toggle button click\n  const handleToggleShortlistView = () => {\n    const newState = !showShortlist;\n\n    // ⭐️ Use the prop setter for dynamic state change ⭐️\n    setShowShortlist(newState);\n\n    // Modify the URL parameters based on the new state\n    const params = new URLSearchParams(window.location.search);\n\n    if (newState === true) {\n      params.set('view', 'shortlist');\n    } else {\n      params.delete('view');\n    }\n\n    const newUrl = `${window.location.pathname}?${params.toString()}`;\n\n    if (params.toString() === '') {\n      window.history.replaceState(null, '', window.location.pathname);\n    } else {\n      window.history.replaceState(null, '', newUrl);\n    }\n  };\n\n  const handleToggle = (fixture) => {\n    setSelectedFixtures((prev) => {\n      const index = prev.findIndex((f) => f.id === fixture.id);\n      if (index !== -1) {\n        return prev.filter((_, i) => i !== index);\n      } else {\n        return [...prev, fixture];\n      }\n    });\n  };\n\n  // Convert array into an indexed object\n  const shortlist = Object.fromEntries(\n    selectedFixtures.map((fixture, i) => [i, fixture])\n  );\n\n\n  const selectedFixtureIds = selectedFixtures.map(fixture => fixture.id);\n  const baseUrl = window.location.origin + window.location.pathname;\n\n  // Assume fixtureIdsString is already defined (e.g., \"101,205\")\n  const fixtureIdsString = selectedFixtures.map(fixture => fixture.id).join(',');\n\n  // Append the 'view' parameter to indicate the shortlist view should be active\n  const shareableLink = `${baseUrl}?shortlist=${fixtureIdsString}&view=shortlist`;\n\n\n  return mock === true ? (\n    <>\n      <div>\n        <div id=\"Headers\"></div>\n        <ul className=\"FixtureList\" id=\"FixtureList\">\n          {/* Note: Check your original rendering logic here - it seems slightly off. \n             If !showShortlist is true, you render selectedFixtures? That's unusual.\n             Assuming the non-mock version is correct: (showShortlist ? selectedFixtures : fixtures) \n          */}\n          {(showShortlist ? selectedFixtures : fixtures).map((fixture) => (\n            <SingleFixture\n              shortlist={shortlist}\n              showShortlist={showShortlist}\n              fixture={fixture}\n              key={fixture.id}\n              mock={mock}\n              checked={selectedFixtures.some((f) => f.id === fixture.id)}\n              onToggle={() => handleToggle(fixture)}\n            />\n          ))}\n        </ul>\n      </div>\n    </>\n  ) : (\n    <>\n      <ShortlistButton\n        toggleShortlist={handleToggleShortlistView}\n        showShortlist={showShortlist}\n      />\n      <ShareShortlistButton selectedFixtures={selectedFixtures} />\n      <SubmitTipsButton submit={() => submitTips()} />\n      <div>\n        <div id=\"Headers\"></div>\n        <ul className=\"FixtureList\" id=\"FixtureList\">\n          {/* Renders shortlist when toggle is ON, full list (which is the source list) when OFF */}\n          {(showShortlist ? selectedFixtures : fixtures).map((fixture) => (\n            <SingleFixture\n              shortlist={shortlist}\n              showShortlist={showShortlist}\n              fixture={fixture}\n              key={fixture.id}\n              mock={mock}\n              checked={selectedFixtures.some((f) => f.id === fixture.id)}\n              onToggle={() => handleToggle(fixture)}\n            />\n          ))}\n        </ul>\n      </div>\n    </>\n  );\n};\n\nfunction ShortlistButton({ toggleShortlist, showShortlist }) {\n  // Conditionally set the text and class based on the state\n  const buttonText = showShortlist\n    ? \"Disable Shortlist\"  // Unicode for up arrow\n    : \"Show Shortlist \\u272A\"; // Unicode for star\n\n  const buttonClass = showShortlist\n    ? \"ShortlistButton active\"\n    : \"ShortlistButton\";\n\n  return (\n    <button\n      onClick={toggleShortlist}\n      className={buttonClass}\n    >\n      {buttonText}\n    </button>\n  );\n}\n\nfunction SubmitTipsButton({ submit }) {\n  return (\n    <button\n      className=\"SubmitTipsButton\"\n      onClick={submit}\n    >\n      Submit My Tips\n    </button>\n  );\n}\n\nexport function Fixture(props) {\n  const [count, setCount] = useState(false);\n  // ⭐️ Re-introduce state here to control the view ⭐️\n  const [showShortlist, setShowShortlist] = useState(false);\n  resultValue = props.result;\n\n  // Dynamically choose the list source based on the toggle state\n  const listSource = showShortlist\n    ? props.uncappedFixtures // Full list when toggle is ON\n    : props.fixtures;         // Capped list when toggle is OFF\n\n  // The cap text logic\n  const showCapText = !props.paid && props.capped === true && !showShortlist;\n\n  return (\n    <Provider store={store}>\n      <List\n        fixtures={listSource}\n        // ⭐️ Pass state and setter DOWN ⭐️\n        showShortlist={showShortlist}\n        setShowShortlist={setShowShortlist}\n\n        result={resultValue}\n        count={count}\n        mock={props.mock}\n      />\n      {!props.paid && props.capped === true && (\n        <>\n          <div className=\"LockIcon\">🔒</div>\n          <div className=\"LockText\">\n            {props.originalLength} games have been capped at {props.newLength} for free users\n            with full stats available for those returned - sign up for access to\n            50 leagues and cups\n          </div>\n        </>\n      )}{\" \"}\n    </Provider>\n  );\n}\n","/Users/greg/Development/Predictor/src/components/Contact.js",[],"/Users/greg/Development/Predictor/src/components/ProtectedContent.js",[],"/Users/greg/Development/Predictor/src/components/DarkModeToggle.js",[],"/Users/greg/Development/Predictor/src/components/Login.js",["294","295"],"import { useState } from \"react\";\nimport { signInWithEmailAndPassword, createUserWithEmailAndPassword } from \"firebase/auth\";\nimport { doc, setDoc, getDoc } from \"firebase/firestore\";\nimport { Eye, EyeOff } from \"lucide-react\"; // Eye icons for toggling password visibility\nimport { auth, db } from \"../firebase\"; // Adjust the path as needed\n\nexport let userIsPaid = false;\n\nconst Login = () => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isLogin, setIsLogin] = useState(true);\n  const [error, setError] = useState(\"\");\n  const [showPassword, setShowPassword] = useState(false); // State for toggling password visibility\n\n  const handleAuth = async (e) => {\n    e.preventDefault();\n    setError(\"\");\n    try {\n      let userCredential;\n      if (isLogin) {\n        userCredential = await signInWithEmailAndPassword(auth, email, password);\n      } else {\n        userCredential = await createUserWithEmailAndPassword(auth, email, password);\n        // Create Firestore user document with default isPaidUser set to false\n        await setDoc(doc(db, \"users\", userCredential.user.uid), {\n          email: userCredential.user.email,\n          isPaidUser: false,\n        });\n      }\n\n      // Fetch user subscription data from Firestore\n      const userRef = doc(db, \"users\", userCredential.user.uid);\n      const userSnap = await getDoc(userRef);\n\n      if (userSnap.exists()) {\n        const data = userSnap.data();\n        // Update the global variable\n        userIsPaid = data.isPaidUser;\n        console.log(\"User isPaid status:\", userIsPaid);\n      } else {\n        console.error(\"User document not found in Firestore\");\n      }\n    } catch (err) {\n      setError(err.message);\n    }\n  };\n\n  return (\n     <div>\n      <button className=\"SignUp\" onClick={() => setIsLogin(!isLogin)}>\n        {isLogin ? \"Need an account? Sign up\" : \"Enter your details below. Already have an account? Click to switch to login\"}\n      </button>\n      {error && <p style={{ color: \"red\" }}>{error}</p>}\n      \n      {/* ⭐️ LoginForm: Main Flex Container ⭐️ */}\n      <form onSubmit={handleAuth} className=\"LoginForm\">\n        \n        {/* ⭐️ InputGroup: Groups and stacks the inputs on the left ⭐️ */}\n        <div className=\"InputGroup\">\n          <input\n            type=\"email\"\n            placeholder=\"Email\"\n            value={email}\n            onChange={(e) => setEmail(e.target.value)}\n            required\n            className=\"LoginInput1\"\n          />\n\n          {/* Password Input with Toggle Button */}\n          <div className=\"PasswordContainer\">\n            <input\n              type={showPassword ? \"text\" : \"password\"}\n              placeholder=\"Password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              required\n              className=\"LoginInput2\"\n            />\n            <button\n              type=\"button\"\n              onClick={() => setShowPassword(!showPassword)}\n              className=\"TogglePasswordButton\"\n            >\n              {/* Replace with your actual icon components */}\n              {showPassword ? '👁️' : '🔒'} \n            </button>\n          </div>\n        </div>\n\n        {/* ⭐️ LoginSignUp: Submit button aligned to the right ⭐️ */}\n        <button type=\"submit\" className=\"LoginSignUp\">\n          {isLogin ? \"Login\" : \"Sign Up\"}\n        </button>\n        \n        <button\n          className=\"ResetPasswordLink\"\n          onClick={() => {\n            window.location.href = \"https://www.soccerstatshub.com/#/reset\";\n          }}\n        >\n          Reset password\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default Login;\n","/Users/greg/Development/Predictor/src/logic/hasUserPaid.js",[],"/Users/greg/Development/Predictor/src/logic/authProvider.js",[],"/Users/greg/Development/Predictor/src/components/CollapsableElement.js",[],"/Users/greg/Development/Predictor/src/logic/getFixtures.js",["296","297","298"],"import { Fragment, lazy, Suspense } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { orderedLeagues } from \"../App\";\nimport { getForm } from \"./getForm\";\nimport { Fixture } from \"../components/Fixture\";\nimport { Button } from \"../components/Button\";\nimport { Slide } from \"../components/Slider\";\nimport { getScorePrediction } from \"../logic/getScorePredictions\";\nimport { ThreeDots } from \"react-loading-icons\";\nimport { selectedOdds } from \"../components/OddsRadio\";\nimport { getPointsFromLastX } from \"../logic/getScorePredictions\";\nimport SlideDiff from \"../components/SliderDiff\";\nimport Collapsable from \"../components/CollapsableElement\";\nimport { userDetail } from \"./authProvider\";\nimport { leagueStatsArray, playerStatsArray } from \"../logic/getScorePredictions\";\nconst LazyLeagueTable = lazy(() => import('../components/LeagueTable'));\n\nvar oddslib = require(\"oddslib\");\n\nvar fixtureResponse;\nvar fixtureArray = [];\nexport var matches = [];\nexport var resultedMatches = [];\nexport let arrayOfGames = [];\n\nvar league;\nvar leagueID;\nvar leagueGames = [];\nexport var leagueArray = [];\nvar leagueIdArray = [];\nexport let leagueInstance;\nexport let groupInstance;\nexport let allLeagueResultsArrayOfObjects = [];\nexport let uniqueLeagueIDs = [];\nvar lastThreeFormHome;\nvar lastThreeFormAway;\nvar lastFiveFormHome;\nvar lastFiveFormAway;\nvar lastSixFormHome;\nvar lastSixFormAway;\nvar lastTenFormHome;\nvar lastTenFormAway;\nvar leagueOrAll;\nvar formRunHome;\nvar formRunAway;\nlet WDLinLeagueHome;\nlet WDLinLeagueAway;\nlet HomeAverageGoals;\nlet homeAverageGoals;\nlet HomeAverageConceded;\nlet homeAverageConceded;\nlet AwayAverageGoals;\nlet awayAverageGoals;\nlet AwayAverageConceded;\nlet awayAverageConceded;\nlet paid = false;\n\nexport async function diff(a, b) {\n  return parseFloat(a - b).toFixed(2);\n}\n\nexport let allForm = [];\nexport let tableArray = [];\nexport let basicTableArray = [];\nexport let bespokeLeagueArray = [];\ngroupInstance = [];\nleagueInstance = [];\n\nasync function convertTimestamp(timestamp) {\n  let newDate = new Date(timestamp);\n  let [day, month, year] = newDate.toLocaleDateString(\"en-US\").split(\"/\");\n\n  let converted = `${year}-${day}-${month}`;\n\n  return converted;\n}\nlet groups = false;\n\nexport async function generateTables(a, leagueIdArray, allResults) {\n  tableArray = [];\n  basicTableArray = [];\n  bespokeLeagueArray = [];\n  let i = 0;\n  leagueArray.forEach(function (league) {\n    let currentLeagueId = leagueIdArray[i];\n    i++;\n    leagueInstance = [];\n\n    //Skip MLS which has a weird format\n    if (\n      // !league.data.specific_tables[0]?.groups &&\n      // currentLeagueId !== 13973 &&\n      currentLeagueId !== 12933 &&\n      // currentLeagueId !== 13734 &&\n      league.data.specific_tables[0]?.table\n    ) {\n      for (\n        let index = 0;\n        index < league.data.specific_tables[0].table.length;\n        index++\n      ) {\n        let currentTeam = league.data.specific_tables[0].table[index];\n        let last5;\n        if (currentTeam.wdl_record.length < 5) {\n          last5 = currentTeam.wdl_record\n            .slice(`-${currentTeam.wdl_record.length}`)\n            .toUpperCase();\n        } else {\n          last5 = currentTeam.wdl_record.slice(-5).toUpperCase();\n        }\n        const team = {\n          LeagueID: currentLeagueId,\n          Position: index + 1,\n          Name: currentTeam.cleanName,\n          ID: currentTeam.id,\n          Played: currentTeam.matchesPlayed,\n          Wins: currentTeam.seasonWins_overall,\n          Draws: currentTeam.seasonDraws_overall,\n          Losses: currentTeam.seasonLosses_overall,\n          For: currentTeam.seasonGoals,\n          Against:\n            currentTeam.seasonConceded_home + currentTeam.seasonConceded_away,\n          GoalDifference: currentTeam.seasonGoalDifference,\n          Form: last5,\n          LastXPoints: getPointsFromLastX(last5.split(\"\")),\n          Points: currentTeam.points,\n          wdl: currentTeam.wdl_record,\n          seasonGoals: currentTeam.seasonGoals,\n          seasonConceded: currentTeam.seasonConceded,\n          zone:\n            currentTeam.zone.name !== null\n              ? currentTeam.zone.name\n              : \"mid-table\",\n        };\n        leagueInstance.push(team);\n      }\n\n      tableArray.push({ id: currentLeagueId, table: leagueInstance });\n      let basicElements = leagueInstance.map((item) => ({\n        LeagueID: item.LeagueID,\n        Name: item.Name,\n        Position: item.Position,\n        GoalDifference: item.GoalDifference,\n        Played: item.Played,\n        Points: item.Points,\n        Zone: item.zone,\n      }));\n      basicTableArray.push({ id: currentLeagueId, table: basicElements });\n    } else if (currentLeagueId === 13973\n    ) {\n      let instances;\n\n      if (currentLeagueId === 13973) {\n        if (league.data.specific_tables[0].groups) {\n          instances = league.data.specific_tables[0].groups;\n          groups = true\n        } else {\n          instances = null;\n          groups = false\n        }\n      }\n      if (groups) {\n        instances.forEach((group) => {\n          leagueInstance = [];\n          for (let index = 0; index < group.table.length; index++) {\n            let currentTeam = group.table[index];\n            let last5;\n            if (currentTeam.wdl_record.length < 5) {\n              last5 = currentTeam.wdl_record\n                .slice(`-${currentTeam.wdl_record.length}`)\n                .toUpperCase();\n            } else {\n              last5 = currentTeam.wdl_record.slice(-5).toUpperCase();\n            }\n            const team = {\n              LeagueID: currentLeagueId,\n              Position: index + 1,\n              Name: currentTeam.cleanName,\n              ID: currentTeam.id,\n              Played: currentTeam.matchesPlayed,\n              Wins: currentTeam.seasonWins_overall,\n              Draws: currentTeam.seasonDraws_overall,\n              Losses: currentTeam.seasonLosses_overall,\n              For: currentTeam.seasonGoals,\n              Against:\n                currentTeam.seasonConceded_home +\n                currentTeam.seasonConceded_away,\n              GoalDifference: currentTeam.seasonGoalDifference,\n              Form: last5,\n              LastXPoints: getPointsFromLastX(last5.split(\"\")),\n              Points: currentTeam.points,\n              wdl: currentTeam.wdl_record,\n              seasonGoals: currentTeam.seasonGoals,\n              seasonConceded: currentTeam.seasonConceded,\n            };\n            leagueInstance.push(team);\n          }\n          bespokeLeagueArray.push({\n            id: currentLeagueId,\n            group: group.name ? group.name : group.round,\n            table: leagueInstance,\n          });\n          let basicElements = leagueInstance.map((item) => ({\n            LeagueID: item.LeagueID,\n            Name: item.Name,\n            Position: item.Position,\n            GoalDifference: item.GoalDifference,\n            Played: item.Played,\n            Points: item.Points,\n          }));\n          basicTableArray.push({ id: currentLeagueId, table: basicElements });\n        });\n      }\n    } else if (league.data.league_table === null) {\n      for (\n        let index = 0;\n        index < league.data.all_matches_table_overall.length;\n        index++\n      ) {\n        let currentTeam = league.data.all_matches_table_overall[index];\n        let last5 = \"N/A\";\n        const team = {\n          LeagueID: currentLeagueId,\n          Position: index + 1,\n          Name: currentTeam.cleanName,\n          ID: currentTeam.id,\n          Played: currentTeam.matchesPlayed,\n          Wins: currentTeam.seasonWins_overall,\n          Draws: currentTeam.seasonDraws_overall,\n          Losses: currentTeam.seasonLosses_overall,\n          For: currentTeam.seasonGoals,\n          Against:\n            currentTeam.seasonConceded_home + currentTeam.seasonConceded_away,\n          GoalDifference: currentTeam.seasonGoalDifference,\n          Form: last5,\n          LastXPoints: getPointsFromLastX(last5.split(\"\")),\n          Points: currentTeam.points,\n          wdl: currentTeam.wdl_record,\n          seasonGoals: currentTeam.seasonGoals,\n          seasonConceded: currentTeam.seasonConceded,\n        };\n        leagueInstance.push(team);\n      }\n      tableArray.push({ id: currentLeagueId, table: leagueInstance });\n      let basicElements = leagueInstance.map((item) => ({\n        LeagueID: item.LeagueID,\n        Name: item.Name,\n        Position: item.Position,\n        GoalDifference: item.GoalDifference,\n        Played: item.Played,\n        Points: item.Points,\n      }));\n      basicTableArray.push({ id: currentLeagueId, table: basicElements });\n    }\n  });\n}\n\nfunction isWithin48Hours(targetDate) {\n  const now = new Date(); // Current date and time\n  const timeDifference = targetDate.getTime() - now.getTime(); // Difference in milliseconds\n  const fortyEightHoursInMs = 48 * 60 * 60 * 1000; // 48 hours in milliseconds\n  // Check if the target date is within the next 48 hours (positive difference)\n  // OR within the past 48 hours (negative difference, but absolute value less than 48 hours).\n  return Math.abs(timeDifference) <= fortyEightHoursInMs;\n}\n\nexport async function renderTable(index, results, id) {\n  let league;\n  //World cup table rendering\n\n  const nowInSeconds = Math.floor(Date.now() / 1000); // Current time in seconds\n  const twoWeeksAgo = nowInSeconds - 14 * 24 * 60 * 60; // Two week ago in seconds  console.log(oneWeekAgo)\n\n  let mostRecentGames = results.fixtures.filter(\n    (result) => result.date_unix >= twoWeeksAgo\n  );\n\n  if (id !== 13973 && id !== 12933) {\n    const leagueTable = tableArray.filter((table) => table.id === id);\n\n    league = leagueTable[0].table;\n\n    let statistics;\n    let leagueStatistics = await fetch(\n      `${process.env.REACT_APP_EXPRESS_SERVER}leagueStats/${id}`\n    );\n    await leagueStatistics.json().then((stats) => {\n      statistics = stats.data;\n    });\n\n    if (league !== undefined) {\n      ReactDOM.render(\n        <Suspense fallback={<div>Loading game statistics...</div>}>\n          <LazyLeagueTable\n            Teams={league}\n            Id={id}\n            Stats={statistics}\n            Key={`League${index}`}\n            GamesPlayed={statistics.game_week}\n            Results={mostRecentGames}\n            Date={todaysDateString}\n            RankingStats={leagueStatsArray[`leagueStats${id}`]}\n            PlayerRankingStats={playerStatsArray[`playerStats${id}`]}\n          // mostRecentGameweek={mostRecentGameweek}\n          />\n        </Suspense>,\n        document.getElementById(`leagueName${id}`)\n      );\n    }\n  } else if (groups) {\n\n    const leagueTable = bespokeLeagueArray.filter((table) => table.id === id);\n    const leagueTable1 = leagueTable[0].table;\n    const leagueTable2 = leagueTable[1].table;\n    const divisionName1 = leagueTable[0].group;\n    const divisionName2 = leagueTable[1].group;\n\n    let statistics;\n    let leagueStatistics = await fetch(\n      `${process.env.REACT_APP_EXPRESS_SERVER}leagueStats/${id}`\n    );\n    await leagueStatistics.json().then((stats) => {\n      statistics = stats.data;\n    });\n\n    if (leagueTable1 !== undefined && leagueTable2 !== undefined) {\n      ReactDOM.render(\n        <>\n          <Suspense fallback={<div>Loading game statistics...</div>}>\n            <LazyLeagueTable\n              Teams={leagueTable1}\n              Stats={statistics}\n              Id={id}\n              Division={divisionName1}\n              Key={`League${index}${divisionName1}`}\n              GamesPlayed={statistics.game_week}\n              Results={mostRecentGames}\n              RankingStats={leagueStatsArray[`leagueStats${id}`]}\n              PlayerRankingStats={playerStatsArray[`playerStats${id}`]}\n            />\n            <LazyLeagueTable\n              Teams={leagueTable2}\n              Division={divisionName2}\n              Stats={statistics}\n              Id={id}\n              Key={`League${index}${divisionName1}`}\n              GamesPlayed={statistics.game_week}\n              Results={mostRecentGames}\n              RankingStats={leagueStatsArray[`leagueStats${id}`]}\n              PlayerRankingStats={playerStatsArray[`playerStats${id}`]}\n\n            />\n          </Suspense>\n        </>,\n        document.getElementById(`leagueName${id}`)\n      );\n    }\n  }\n}\n\nasync function createFixture(match, result, mockBool) {\n  let roundedHomeOdds;\n  let roundedAwayOdds;\n  let roundedBTTSOdds;\n  let homeFraction;\n  let awayFraction;\n  let bttsFraction;\n\n  if (selectedOdds === \"Fractional odds\") {\n    if (match.homeOdds !== 0 && match.awayOdds !== 0) {\n      roundedHomeOdds = (Math.round(match.homeOdds * 5) / 5).toFixed(1);\n      roundedAwayOdds = (Math.round(match.awayOdds * 5) / 5).toFixed(1);\n\n      if (roundedHomeOdds < 1.1) {\n        roundedHomeOdds = 1.1;\n      }\n      if (roundedAwayOdds < 1.1) {\n        roundedAwayOdds = 1.1;\n      }\n\n      if (match.homeOdds === 0.1 && match.awayOdds === 0.1) {\n        match.homeOdds = 3;\n        roundedHomeOdds = 3;\n        match.awayOdds = 3;\n        roundedAwayOdds = 3;\n      }\n\n      try {\n        homeFraction = oddslib\n          .from(\"decimal\", roundedHomeOdds)\n          .to(\"fractional\", { precision: 1 });\n        awayFraction = oddslib\n          .from(\"decimal\", roundedAwayOdds)\n          .to(\"fractional\", { precision: 1 });\n      } catch (error) {\n        console.log(error);\n      }\n    } else {\n      homeFraction = \"N/A\";\n      awayFraction = \"N/A\";\n    }\n\n    if (match.bttsOdds !== 0) {\n      roundedBTTSOdds = (Math.round(match.bttsOdds * 5) / 5).toFixed(1);\n\n      if (roundedBTTSOdds < 1.1) {\n        roundedBTTSOdds = 1.1;\n      }\n\n      try {\n        bttsFraction = oddslib\n          .from(\"decimal\", roundedBTTSOdds)\n          .to(\"fractional\", { precision: 1 });\n      } catch (error) {\n        console.log(error);\n      }\n    } else {\n      bttsFraction = \"N/A\";\n    }\n  } else if (selectedOdds === \"Decimal odds\") {\n    if (match.homeOdds !== 0 && match.awayOdds !== 0) {\n      homeFraction = match.homeOdds;\n      awayFraction = match.awayOdds;\n    } else {\n      homeFraction = \"N/A\";\n      awayFraction = \"N/A\";\n    }\n\n    if (match.bttsOdds !== 0) {\n      bttsFraction = match.bttsOdds;\n    } else {\n      bttsFraction = \"N/A\";\n    }\n  }\n\n  match.omit = false;\n  match.homeTeamWinsPercentage = match.homeTeamWinPercentage;\n  match.homeTeamLossesPercentage = match.homeTeamLossPercentage;\n  match.homeTeamDrawsPercentage = match.homeTeamDrawPercentage;\n\n  match.awayTeamWinsPercentage = match.awayTeamWinPercentage;\n  match.awayTeamLossesPercentage = match.awayTeamLossPercentage;\n  match.awayTeamDrawsPercentage = match.awayTeamDrawPercentage;\n  match.fractionHome = homeFraction;\n  match.fractionAway = awayFraction;\n\n  match.bttsFraction = bttsFraction;\n\n  match.game = match.homeTeam + \" v \" + match.awayTeam;\n}\n\nexport function RenderAllFixtures(props) {\n  let matches;\n  let uncappedFixtures;\n  let capped = false;\n  let paid = false;\n  if (userDetail) {\n    paid = userDetail.isPaid;\n  }\n  const originalLength = props.matches.length;\n  let newLength;\n  if (paid === true) {\n    matches = props.matches;\n    uncappedFixtures = props.matches;\n    newLength = matches.length;\n  } else {\n    if (originalLength > 20) {\n      matches = props.matches.slice(0, 20);\n      uncappedFixtures = props.matches;\n      capped = true;\n      newLength = 20;\n    } else {\n      const slicePercent = 0.5; // 50%\n      const sliceCount = Math.ceil(props.matches.length * slicePercent);\n      matches = props.matches.slice(0, sliceCount);\n      uncappedFixtures = props.matches;\n      capped = true;\n      newLength = sliceCount;\n    }\n  }\n\n  uniqueLeagueIDs = [...new Set(matches.map(match => match.leagueID))];\n\n  return (\n    <Fixture\n      fixtures={matches}\n      uncappedFixtures={uncappedFixtures}\n      result={props.result}\n      mock={false}\n      className={\"individualFixture\"}\n      paid={paid}\n      capped={capped}\n      originalLength={originalLength}\n      newLength={newLength}\n      stats={props.stats}\n    />\n  );\n}\n//     document.getElementById(\"FixtureContainer\")\n\nvar myHeaders = new Headers();\nmyHeaders.append(\"Origin\", \"https://gregdorward.github.io\");\n\nlet isFunctionRunning = false;\n\nexport let dynamicDate;\nlet todaysDateString;\n\nexport async function generateFixtures(\n  day,\n  date,\n  selectedOdds,\n  footyStatsFormattedDate,\n  current,\n  todaysDate,\n  dateSS,\n  unformattedDate\n) {\n  if (!isFunctionRunning) {\n    isFunctionRunning = true;\n    todaysDateString = todaysDate;\n\n    ReactDOM.render(\n      <div>\n        <div className=\"LoadingText\">\n          Loading all league, fixture & form data, please be patient...\n        </div>\n        <ThreeDots className=\"MainLoading\" height=\"3em\" fill=\"#fe8c00\" />\n      </div>,\n      document.getElementById(\"Loading\")\n    );\n\n    //cleanup if different day is selected\n    ReactDOM.render(\n      <div></div>,\n      document.getElementById(\"GeneratePredictions\")\n    );\n    ReactDOM.render(<div></div>, document.getElementById(\"MultiPlaceholder\"));\n\n\n    const url = `${process.env.REACT_APP_EXPRESS_SERVER}matches/${footyStatsFormattedDate}`;\n    const formUrl = `${process.env.REACT_APP_EXPRESS_SERVER}form/${date}`;\n    console.log(unformattedDate);\n    dynamicDate = unformattedDate;\n\n    matches = [];\n    fixtureArray = [];\n\n    league = await fetch(\n      `${process.env.REACT_APP_EXPRESS_SERVER}leagues/${todaysDate}`\n    );\n\n    ReactDOM.render(<div></div>, document.getElementById(\"FixtureContainer\"));\n\n    fixtureResponse = await fetch(url);\n\n    await fixtureResponse.json().then((fixtures) => {\n      fixtureArray = Array.from(fixtures.data);\n    });\n\n    let form;\n    let formArray = [];\n    allForm = [];\n    let isFormStored;\n    let isStoredLocally;\n    let leaguesStored = false;\n    let storedForm = await fetch(formUrl);\n    if (storedForm.status === 201 || storedForm.status === 200) {\n      await storedForm.json().then((form) => {\n        formArray = Array.from(form.allForm);\n        isFormStored = true;\n        isStoredLocally = true;\n        allForm = formArray;\n      });\n    } else {\n      isFormStored = false;\n      isStoredLocally = false;\n    }\n\n    leagueIdArray = [];\n    for (let i = 0; i < orderedLeagues.length; i++) {\n      leagueID = orderedLeagues[i].element.id;\n      leagueIdArray.push(leagueID);\n    }\n\n    var leaguePositions = [];\n    leagueArray = [];\n\n    let allLeagueResults;\n\n    allLeagueResults = await fetch(\n      `${process.env.REACT_APP_EXPRESS_SERVER}results`\n    );\n\n    if (league.status === 200) {\n      leaguesStored = true;\n      console.log(\"leagues fetched from s3\");\n    }\n\n    if (\n      league.status === 200 &&\n      (allLeagueResults.status === 201 || allLeagueResults.status === 200)\n    ) {\n      console.log(\"Not fetching leagues\");\n      await league.json().then((leagues) => {\n        leagueArray = Array.from(leagues.leagueArray);\n      });\n      updateResults(false);\n\n      await allLeagueResults.json().then((allGames) => {\n        allLeagueResultsArrayOfObjects = Array.from(allGames);\n      });\n\n      leaguesStored = true;\n      generateTables(\n        leagueArray,\n        leagueIdArray,\n        allLeagueResultsArrayOfObjects\n      );\n\n\n      const isYouthOrReserveTeam = (name) => {\n        const lowered = name.toLowerCase().trim();\n        return (\n          lowered.includes(\"u16\") ||\n          lowered.includes(\"u17\") ||\n          lowered.includes(\"u18\") ||\n          lowered.includes(\"u19\") ||\n          lowered.includes(\"u20\") ||\n          lowered.includes(\"u21\") ||\n          lowered.includes(\"u23\") ||\n          lowered.includes(\"reserves\") ||\n          lowered.includes(\"reserve\") ||\n          lowered.endsWith(\" b\") ||  // only match \"Team B\", not \"FBK Balkan\"\n          lowered.endsWith(\" ii\")    // match \"Team II\"\n        );\n      };\n      arrayOfGames = [];\n\n      try {\n        const sofaScore = await fetch(\n          `${process.env.REACT_APP_EXPRESS_SERVER}scheduledEvents/${dateSS}`\n        );\n\n        const games = await sofaScore.json();\n\n        games.forEach((game) => {\n          const homeName = game.homeTeam || \"\";\n          const awayName = game.awayTeam || \"\";\n\n          // if(homeName.contains(\"U17\") || awayName.contains(\"U17\")) {\n          // console.log(homeName, awayName);\n          // }\n\n          if (isYouthOrReserveTeam(homeName) || isYouthOrReserveTeam(awayName)) {\n            return;\n          }\n\n          arrayOfGames.push({\n            homeTeam: game.homeTeam,\n            homeId: game.homeId !== undefined ? game.homeId : null,\n            awayTeam: game.awayTeam,\n            awayId: game.awayId !== undefined ? game.awayId : null,\n            id: game.id,\n            time: game.time,\n            homeGoals: game.homeScore !== undefined ? game.homeScore : \"-\",\n            awayGoals: game.awayScore !== undefined ? game.awayScore : \"-\",\n          });\n        });\n      } catch (error) {\n        console.error(\n          \"An error occurred while fetching or processing data:\",\n          error\n        );\n        // You might want to add more specific error handling here,\n        // such as setting a default value for arrayOfGames or logging the error to a server.\n      }\n    } else {\n      allLeagueResultsArrayOfObjects = [];\n      console.log(\"Fetching leagues\");\n      for (let i = 0; i < orderedLeagues.length; i++) {\n        league = await fetch(\n          `${process.env.REACT_APP_EXPRESS_SERVER}tables/${orderedLeagues[i].element.id}/${todaysDate}`\n        );\n        // eslint-disable-next-line no-loop-func\n        await league.json().then((table) => {\n          leagueArray.push(table);\n        });\n        leaguesStored = false;\n      }\n\n      //set variable for date X amount of days in the past and use that to filter the results\n\n      let startDate = (new Date().getTime() / 1000).toFixed(0);\n      // deduct 3 months\n      let targetDate = startDate - 23778463;\n\n      for (const orderedLeague of orderedLeagues) {\n        let fixtures = await fetch(\n          `${process.env.REACT_APP_EXPRESS_SERVER}leagueFixtures/${orderedLeague.element.id}`\n        );\n\n        let games = await fixtures.json();\n        let gamesFiltered;\n        let gamesShortened;\n        if (games.pager.current_page < games.pager.max_page) {\n          const page2 = await fetch(\n            `${process.env.REACT_APP_EXPRESS_SERVER}leagueFixtures/${orderedLeague.element.id}&page=2`\n          );\n          let page2Data = await page2.json();\n\n          const gamesConcat = games.data.concat(page2Data.data);\n          const gamesConcatFiltered = gamesConcat.filter(\n            (game) => game.status === \"complete\"\n          );\n\n          let mostRecentResults = gamesConcatFiltered.filter(\n            (game) => game.date_unix > targetDate\n          );\n          let sorted = mostRecentResults.sort(\n            (a, b) => a.date_unix - b.date_unix\n          );\n          gamesShortened = sorted.slice(-600);\n          gamesFiltered = gamesShortened;\n        } else {\n          gamesFiltered = games.data.filter(\n            (game) => game.status === \"complete\"\n          );\n\n          if (current) {\n            let mostRecentResults = gamesFiltered.filter(\n              (game) => game.date_unix > targetDate\n            );\n            gamesFiltered = mostRecentResults.slice(-600);\n          }\n        }\n\n        const shortenedResults = gamesFiltered.map(\n          ({\n            home_name,\n            away_name,\n            homeGoalCount,\n            awayGoalCount,\n            home_ppg,\n            away_ppg,\n            date_unix,\n            team_a_xg,\n            team_b_xg,\n            odds_ft_1,\n            odds_ft_2,\n            team_a_shots,\n            team_b_shots,\n            team_a_corners,\n            team_b_corners,\n            team_a_shotsOnTarget,\n            team_b_shotsOnTarget,\n            team_a_red_cards,\n            team_b_red_cards,\n            team_a_possession,\n            team_b_possession,\n            team_a_dangerous_attacks,\n            team_b_dangerous_attacks,\n            pre_match_teamA_overall_ppg,\n            pre_match_teamB_overall_ppg,\n            game_week,\n          }) => ({\n            home_name,\n            away_name,\n            homeGoalCount,\n            awayGoalCount,\n            home_ppg,\n            away_ppg,\n            date_unix,\n            team_a_xg,\n            team_b_xg,\n            odds_ft_1,\n            odds_ft_2,\n            team_a_shots,\n            team_b_shots,\n            team_a_corners,\n            team_b_corners,\n            team_a_shotsOnTarget,\n            team_b_shotsOnTarget,\n            team_a_red_cards,\n            team_b_red_cards,\n            team_a_possession,\n            team_b_possession,\n            team_a_dangerous_attacks,\n            team_b_dangerous_attacks,\n            pre_match_teamA_overall_ppg,\n            pre_match_teamB_overall_ppg,\n            game_week,\n          })\n        );\n\n        let leagueObj = {\n          name: orderedLeague.name,\n          id: orderedLeague.element.id,\n          fixtures: shortenedResults,\n        };\n\n        allLeagueResultsArrayOfObjects.push(leagueObj);\n      }\n      updateResults(true);\n      generateTables(\n        leagueArray,\n        leagueIdArray,\n        allLeagueResultsArrayOfObjects\n      );\n    }\n\n    let teamPositionPrefix;\n\n    async function getPrefix(position) {\n      switch (position) {\n        case 1:\n        case 21:\n        case 31:\n        case 41:\n          teamPositionPrefix = \"st\";\n          break;\n        case 2:\n        case 22:\n        case 32:\n        case 42:\n          teamPositionPrefix = \"nd\";\n          break;\n        case 3:\n        case 23:\n        case 33:\n        case 43:\n          teamPositionPrefix = \"rd\";\n          break;\n        case 4:\n        case 5:\n        case 6:\n        case 7:\n        case 8:\n        case 9:\n        case 10:\n        case 11:\n        case 12:\n        case 13:\n        case 14:\n        case 15:\n        case 16:\n        case 17:\n        case 18:\n        case 19:\n        case 20:\n        case 24:\n        case 25:\n        case 26:\n        case 27:\n        case 28:\n        case 29:\n        case 30:\n        case 34:\n        case 35:\n        case 36:\n        case 37:\n        case 38:\n        case 39:\n        case 40:\n        case 44:\n        case 45:\n        case 46:\n        case 47:\n        case 48:\n          teamPositionPrefix = \"th\";\n          break;\n        default:\n          break;\n      }\n      return teamPositionPrefix;\n    }\n\n    // Helper to get leagueInstance length\n    function getLeagueInstanceLength(data) {\n      if (data.league_table !== null) {\n        return data.league_table.length;\n      }\n      return data.all_matches_table_overall.length;\n    }\n\n    for (let i = 0; i < leagueArray.length; i++) {\n      let leagueInstance;\n      let homeLeague;\n      let awayLeague;\n\n      if (leagueArray[i].data.league_table !== null) {\n        leagueInstance = leagueArray[i].data.league_table;\n        homeLeague = leagueArray[i].data.all_matches_table_home;\n        awayLeague = leagueArray[i].data.all_matches_table_away;\n      } else {\n        leagueInstance = leagueArray[i].data.all_matches_table_overall;\n        homeLeague = leagueArray[i].data.all_matches_table_home;\n        awayLeague = leagueArray[i].data.all_matches_table_away;\n      }\n\n      for (let x = 0; x < leagueInstance.length; x++) {\n        let regularSeason = leagueArray[i].data.specific_tables.find(\n          (season) =>\n            season.round === \"Regular Season\" ||\n            season.round === \"2025\" ||\n            season.round === \"2024/2025\" ||\n            season.round === \"Apertura\" ||\n            season.round === \"1st Phase\" ||\n            season.round === \"2026\" ||\n            season.round === \"-1\"\n        );\n        let string;\n\n        if (regularSeason !== undefined && regularSeason.table) {\n          string = regularSeason.table[x];\n          homeLeague = leagueArray[i].data.all_matches_table_home;\n          awayLeague = leagueArray[i].data.all_matches_table_away;\n        } else {\n          string = leagueArray[i].data.all_matches_table_overall[x];\n          homeLeague = leagueArray[i].data.all_matches_table_home;\n          awayLeague = leagueArray[i].data.all_matches_table_away;\n        }\n\n        let stringHome = homeLeague[x];\n        let stringAway = awayLeague[x];\n\n        if (string) {\n          leaguePositions.push({\n            name: string.cleanName,\n            position: x + 1,\n            rawPosition: x + 1,\n            homeFormName: stringHome ? stringHome.cleanName : string.cleanName,\n            awayFormName: stringAway ? stringAway.cleanName : string.cleanName,\n            homeSeasonWinPercentage: stringHome\n              ? stringHome.seasonWins\n              : string.seasonWins,\n            awaySeasonWinPercentage: stringAway\n              ? stringAway.seasonWins\n              : string.seasonWins,\n            homeSeasonLossPercentage: stringHome\n              ? stringHome.seasonLosses_home\n              : string.seasonLosses_home,\n            awaySeasonLossPercentage: stringAway\n              ? stringAway.seasonLosses_away\n              : string.seasonLosses_away,\n            homeSeasonDrawPercentage: stringHome\n              ? stringHome.seasonDraws\n              : string.seasonDraws,\n            awaySeasonDrawPercentage: stringAway\n              ? stringAway.seasonDraws\n              : string.seasonDraws,\n            homeSeasonMatchesPlayed: stringHome\n              ? stringHome.matchesPlayed\n              : string.matchesPlayed,\n            awaySeasonMatchesPlayed: stringAway\n              ? stringAway.matchesPlayed\n              : string.matchesPlayed,\n            ppg: string.points / string.matchesPlayed,\n            wdl: string.wdl_record ? string.wdl_record : \"\",\n            played: string.matchesPlayed,\n            seasonGoals: string.seasonGoals,\n            seasonConceded: string.seasonConceded,\n          });\n        }\n      }\n    }\n\n    let previousLeagueName;\n\n    for (let i = 0; i < orderedLeagues.length; i++) {\n      leagueID = orderedLeagues[i].element.id;\n      leagueGames = fixtureArray.filter(\n        (game) => game.competition_id === orderedLeagues[i].element.id\n      );\n\n      for (const fixture of leagueGames) {\n        const unixTimestamp = fixture.date_unix;\n        const milliseconds = unixTimestamp * 1000;\n        const dateObject = new Date(milliseconds);\n        let match = {};\n        if (orderedLeagues[i].name !== previousLeagueName) {\n          match.leagueName = orderedLeagues[i].name;\n          match.leagueDesc = orderedLeagues[i].name;\n          match.leagueIndex = i;\n          match.leagueID = leagueID;\n        } else {\n          match.leagueName = null;\n          match.leagueDesc = orderedLeagues[i].name;\n          match.leagueIndex = i;\n          match.leagueID = leagueID;\n        }\n        match.id = fixture.id;\n        match.competition_id = fixture.competition_id;\n        match.date = fixture.date_unix;\n        match.time = dateObject.toLocaleString(\"en-GB\", {\n          hour: \"2-digit\",\n          minute: \"2-digit\",\n        });\n        match.homeTeam = fixture.home_name;\n        match.awayTeam = fixture.away_name;\n        match.stadium = fixture.stadium_name;\n        match.refereeID = fixture.refereeID;\n        match.homeOdds = +fixture.odds_ft_1.toFixed(2);\n        match.awayOdds = +fixture.odds_ft_2.toFixed(2);\n        match.drawOdds = +fixture.odds_ft_x.toFixed(2);\n        match.homeDoubleChance = fixture.odds_doublechance_1x;\n        match.awayDoubleChance = fixture.odds_doublechance_x2;\n        match.bttsOdds = fixture.odds_btts_yes;\n        match.homeId = fixture.homeID;\n        match.awayId = fixture.awayID;\n        match.form = [];\n        match.btts = false;\n\n        previousLeagueName = orderedLeagues[i].name;\n\n        let homeTeaminLeague;\n        let awayTeaminLeague;\n        let teamPositionHome;\n        let teamPositionHomeTable;\n        let teamPositionAwayTable;\n        let homeTeamWinPercentageHome;\n        let awayTeamWinPercentageAway;\n        let homeTeamLossPercentageHome;\n        let awayTeamLossPercentageAway;\n        let homeTeamDrawPercentageHome;\n        let awayTeamDrawPercentageAway;\n        let teamPositionAway;\n        let homePrefix;\n        let homePrefixHomeTable;\n        let awayPrefix;\n        let awayPrefixAwayTable;\n        let homeSeasonPPG;\n        let awaySeasonPPG;\n\n        try {\n          homeTeaminLeague = leaguePositions.find(\n            (team) => team.name === match.homeTeam\n          );\n\n          // console.log(leaguePositions)\n\n          let homeTeaminHomeLeague = leaguePositions.find(\n            (team) => team.homeFormName === match.homeTeam\n          );\n\n          teamPositionHome = homeTeaminLeague.position;\n          teamPositionHomeTable = homeTeaminHomeLeague.position;\n\n          WDLinLeagueHome = Array.from(homeTeaminLeague.wdl.toUpperCase());\n          HomeAverageGoals =\n            homeTeaminLeague.seasonGoals / homeTeaminLeague.played;\n          HomeAverageConceded =\n            homeTeaminLeague.seasonConceded / homeTeaminLeague.played;\n\n          homeTeamWinPercentageHome =\n            (homeTeaminHomeLeague.homeSeasonWinPercentage /\n              homeTeaminHomeLeague.homeSeasonMatchesPlayed) *\n            100;\n\n          homeTeamLossPercentageHome =\n            (homeTeaminHomeLeague.homeSeasonLossPercentage /\n              homeTeaminHomeLeague.homeSeasonMatchesPlayed) *\n            100;\n\n          homeTeamDrawPercentageHome =\n            (homeTeaminHomeLeague.homeSeasonDrawPercentage /\n              homeTeaminHomeLeague.homeSeasonMatchesPlayed) *\n            100;\n\n          homePrefix = await getPrefix(teamPositionHome);\n          homePrefixHomeTable = await getPrefix(teamPositionHomeTable);\n\n          homeSeasonPPG = homeTeaminLeague.ppg.toFixed(2);\n        } catch (error) {\n          console.log(error);\n          teamPositionHome = \"N/A\";\n          homePrefix = \"\";\n          homePrefixHomeTable = \"\";\n          homeSeasonPPG = \"N/A\";\n          homeTeaminLeague = {\n            rawPosition: \"N/A\",\n          };\n          WDLinLeagueHome = [];\n        }\n\n        try {\n          awayTeaminLeague = leaguePositions.find(\n            (team) => team.name === match.awayTeam\n          );\n\n          let awayTeaminAwayLeague = leaguePositions.find(\n            (team) => team.awayFormName === match.awayTeam\n          );\n\n          teamPositionAway = awayTeaminLeague.position;\n          teamPositionAwayTable = awayTeaminAwayLeague.position;\n\n          WDLinLeagueAway = Array.from(awayTeaminLeague.wdl.toUpperCase());\n          AwayAverageGoals =\n            awayTeaminLeague.seasonGoals / awayTeaminLeague.played;\n          AwayAverageConceded =\n            awayTeaminLeague.seasonConceded / awayTeaminLeague.played;\n\n          awayTeamWinPercentageAway =\n            (awayTeaminAwayLeague.awaySeasonWinPercentage /\n              awayTeaminAwayLeague.awaySeasonMatchesPlayed) *\n            100;\n\n          awayTeamLossPercentageAway =\n            (awayTeaminAwayLeague.awaySeasonLossPercentage /\n              awayTeaminAwayLeague.awaySeasonMatchesPlayed) *\n            100;\n\n          awayTeamDrawPercentageAway =\n            (awayTeaminAwayLeague.awaySeasonDrawPercentage /\n              awayTeaminAwayLeague.awaySeasonMatchesPlayed) *\n            100;\n\n          awayPrefix = await getPrefix(teamPositionAway);\n          awayPrefixAwayTable = await getPrefix(teamPositionAwayTable);\n\n          awaySeasonPPG = awayTeaminLeague.ppg.toFixed(2);\n        } catch (error) {\n          console.log(error);\n          teamPositionAway = \"N/A\";\n          awayPrefix = \"\";\n          awaySeasonPPG = \"N/A\";\n          awayTeaminLeague = {\n            rawPosition: \"N/A\",\n          };\n          WDLinLeagueAway = [];\n        }\n\n        if (!isFormStored) {\n          form = await getForm(match);\n\n          let homeFormString5 =\n            form[0].data[0].stats.additional_info.formRun_overall.toUpperCase();\n          let awayFormString5 =\n            form[1].data[0].stats.additional_info.formRun_overall.toUpperCase();\n          let homeFormString6 =\n            form[0].data[1].stats.additional_info.formRun_overall.toUpperCase();\n          let awayFormString6 =\n            form[1].data[1].stats.additional_info.formRun_overall.toUpperCase();\n          let homeFormString10 =\n            form[0].data[2].stats.additional_info.formRun_overall.toUpperCase();\n          let awayFormString10 =\n            form[1].data[2].stats.additional_info.formRun_overall.toUpperCase();\n\n          let homeFormRun =\n            form[0].data[2].stats.additional_info.formRun_home.toUpperCase();\n          let awayFormRun =\n            form[1].data[2].stats.additional_info.formRun_away.toUpperCase();\n\n          if (WDLinLeagueHome.length >= 10) {\n            lastThreeFormHome = WDLinLeagueHome.slice(-3);\n            lastFiveFormHome = WDLinLeagueHome.slice(-5);\n            lastSixFormHome = WDLinLeagueHome.slice(-6);\n            lastTenFormHome = WDLinLeagueHome.slice(-10);\n            lastThreeFormAway = WDLinLeagueAway.slice(-3);\n            lastFiveFormAway = WDLinLeagueAway.slice(-5);\n            lastSixFormAway = WDLinLeagueAway.slice(-6);\n            lastTenFormAway = WDLinLeagueAway.slice(-10);\n            leagueOrAll = \"League\";\n            homeAverageGoals = HomeAverageGoals;\n            homeAverageConceded = HomeAverageConceded;\n            awayAverageGoals = AwayAverageGoals;\n            awayAverageConceded = AwayAverageConceded;\n          } else if (WDLinLeagueHome.length >= 6) {\n            lastThreeFormHome = WDLinLeagueHome.slice(-3);\n            lastFiveFormHome = WDLinLeagueHome.slice(-5);\n            lastSixFormHome = WDLinLeagueHome.slice(-6);\n            lastTenFormHome = Array.from(homeFormString10);\n            lastThreeFormAway = WDLinLeagueAway.slice(-3);\n            lastFiveFormAway = WDLinLeagueAway.slice(-5);\n            lastSixFormAway = WDLinLeagueAway.slice(-6);\n            lastTenFormAway = Array.from(awayFormString10);\n            leagueOrAll = \"League\";\n\n            homeAverageGoals = HomeAverageGoals;\n            homeAverageConceded = HomeAverageConceded;\n            awayAverageGoals = AwayAverageGoals;\n            awayAverageConceded = AwayAverageConceded;\n          } else if (WDLinLeagueHome.length >= 5) {\n            lastThreeFormHome = WDLinLeagueHome.slice(-3);\n            lastFiveFormHome = WDLinLeagueHome.slice(-5);\n            lastSixFormHome = Array.from(homeFormString6);\n            lastTenFormHome = Array.from(homeFormString10);\n            lastThreeFormAway = WDLinLeagueAway.slice(-3);\n            lastFiveFormAway = WDLinLeagueAway.slice(-5);\n            lastSixFormAway = Array.from(awayFormString6);\n            lastTenFormAway = Array.from(awayFormString10);\n            leagueOrAll = \"League\";\n\n            homeAverageGoals = HomeAverageGoals;\n            homeAverageConceded = HomeAverageConceded;\n            awayAverageGoals = AwayAverageGoals;\n            awayAverageConceded = AwayAverageConceded;\n          } else {\n            lastThreeFormHome = [\n              homeFormString5[2],\n              homeFormString5[3],\n              homeFormString5[4],\n            ];\n            lastFiveFormHome = Array.from(homeFormString5);\n            lastSixFormHome = Array.from(homeFormString6);\n            lastTenFormHome = Array.from(homeFormString10);\n            lastThreeFormAway = [\n              awayFormString5[2],\n              awayFormString5[3],\n              awayFormString5[4],\n            ];\n\n            lastFiveFormAway = Array.from(awayFormString5);\n            lastSixFormAway = Array.from(awayFormString6);\n            lastTenFormAway = Array.from(awayFormString10);\n\n            leagueOrAll = \"All\";\n\n            homeAverageGoals = undefined;\n            homeAverageConceded = undefined;\n            awayAverageGoals = undefined;\n            awayAverageConceded = undefined;\n          }\n\n          formRunHome = Array.from(homeFormRun);\n          formRunAway = Array.from(awayFormRun);\n\n          if (\n            teamPositionHome === 0 ||\n            form[0].data[0].season_format !== \"Domestic League\"\n          ) {\n            teamPositionHome = \"N/A\";\n            teamPositionHomeTable = \"N/A\";\n            homePrefix = \"\";\n            homePrefixHomeTable = \"\";\n          }\n          if (\n            teamPositionAway === 0 ||\n            form[0].data[0].season_format !== \"Domestic League\"\n          ) {\n            teamPositionAway = \"N/A\";\n            teamPositionAwayTable = \"N/A\";\n            awayPrefix = \"\";\n            awayPrefixAwayTable = \"\";\n          }\n          allForm.push({\n            id: match.id,\n            teamIDHome: match.homeId,\n            teamIDAway: match.awayId,\n            leagueId: leagueID,\n            home: {\n              teamName: match.homeTeam,\n              0: {},\n              1: {},\n              2: {\n                XGOverall: parseFloat(form[0].data[2].stats.xg_for_avg_overall),\n                XG: parseFloat(form[0].data[2].stats.xg_for_avg_home),\n                ScoredOverall: parseFloat(\n                  form[0].data[2].stats.seasonScoredNum_overall\n                ),\n                ScoredAverage: parseFloat(\n                  form[0].data[2].stats.seasonScoredAVG_home\n                ),\n                PlayedHome: parseFloat(\n                  form[0].data[2].stats.seasonMatchesPlayed_home\n                ),\n                PlayedAway: parseFloat(\n                  form[0].data[2].stats.seasonMatchesPlayed_away\n                ),\n                ConcededOverall: parseFloat(\n                  form[0].data[2].stats.seasonConcededNum_overall\n                ),\n                ConcededAverage: parseFloat(\n                  form[0].data[2].stats.seasonConcededAVG_home\n                ),\n                XGAgainstAvgOverall: parseFloat(\n                  form[0].data[2].stats.xg_against_avg_overall\n                ),\n                XGAgainstAverage: parseFloat(\n                  form[0].data[2].stats.xg_against_avg_home\n                ),\n                CleanSheetPercentage: parseFloat(\n                  form[0].data[2].stats.seasonCSPercentage_overall\n                ),\n                AveragePossessionOverall: parseFloat(\n                  form[0].data[2].stats.possessionAVG_overall\n                ),\n                AveragePossession: parseFloat(\n                  form[0].data[2].stats.possessionAVG_home\n                ),\n                AverageShotsOnTargetOverall: parseFloat(\n                  form[0].data[2].stats.shotsOnTargetAVG_overall\n                ),\n                AverageShotsOnTarget: parseFloat(\n                  form[0].data[2].stats.shotsOnTargetAVG_home\n                ),\n                AverageShots: parseFloat(\n                  form[0].data[2].stats.shotsAVG_overall\n                ),\n                AverageShotsHomeOrAway: parseFloat(\n                  form[0].data[2].stats.shotsAVG_home\n                ),\n                AverageDangerousAttacksOverall: parseFloat(\n                  form[0].data[2].stats.dangerous_attacks_avg_overall\n                ),\n                PPG: parseFloat(form[0].data[2].stats.seasonPPG_overall),\n                AttacksHome: parseFloat(form[0].data[2].stats.attacks_avg_home),\n                AttacksAway: parseFloat(form[0].data[2].stats.attacks_avg_away),\n                AverageDangerousAttacks: parseFloat(\n                  form[0].data[2].stats.dangerous_attacks_avg_home\n                ),\n                homeAttackAdvantage: parseFloat(\n                  form[0].data[2].stats.homeAttackAdvantage\n                ),\n                homeDefenceAdvantage: parseFloat(\n                  form[0].data[2].stats.homeDefenceAdvantage\n                ),\n                BTTSPercentage: parseInt(\n                  form[0].data[2].stats.seasonBTTSPercentage_home\n                ),\n                lastThreeForm:\n                  lastThreeFormHome !== undefined\n                    ? lastThreeFormHome.reverse()\n                    : \"N/A\",\n                LastFiveForm:\n                  lastFiveFormHome !== undefined\n                    ? lastFiveFormHome.reverse()\n                    : \"N/A\",\n                LastSixForm:\n                  lastSixFormHome !== undefined\n                    ? lastSixFormHome.reverse()\n                    : \"N/A\",\n                LastTenForm:\n                  lastTenFormHome !== undefined\n                    ? lastTenFormHome.reverse()\n                    : \"N/A\",\n                LeagueOrAll: leagueOrAll,\n                LeaguePosition: `${teamPositionHome}${homePrefix}`,\n                homeRawPosition:\n                  homeTeaminLeague.rawPosition !== undefined\n                    ? homeTeaminLeague.rawPosition\n                    : 0,\n                homeTeamHomePositionRaw: teamPositionHomeTable,\n                SeasonPPG: homeSeasonPPG,\n                WinPercentage: homeTeamWinPercentageHome,\n                LossPercentage: homeTeamLossPercentageHome,\n                DrawPercentage: homeTeamDrawPercentageHome,\n                formRun: formRunHome,\n                goalDifference:\n                  form[0].data[2].stats.seasonGoalDifference_overall,\n                goalDifferenceHomeOrAway:\n                  form[0].data[2].stats.seasonGoalDifference_home,\n                BttsPercentage:\n                  form[0].data[2].stats.seasonBTTSPercentage_overall,\n                BttsPercentageHomeOrAway:\n                  form[0].data[2].stats.seasonBTTSPercentage_home,\n                CardsTotal: form[0].data[2].stats.cardsTotal_overall,\n                CornersAverage: form[0].data[2].stats.cornersAVG_overall,\n                ScoredBothHalvesPercentage:\n                  form[0].data[2].stats.scoredBothHalvesPercentage_overall,\n                LastMatch: await convertTimestamp(\n                  form[0].data[0].last_updated_match_timestamp\n                ),\n                WDLRecord: WDLinLeagueHome,\n                LeagueAverageGoals: homeAverageGoals,\n                LeagueAverageConceded: homeAverageConceded,\n              },\n            },\n            away: {\n              teamName: match.awayTeam,\n              0: {},\n              1: {},\n              2: {\n                XGOverall: parseFloat(form[1].data[2].stats.xg_for_avg_overall),\n                XG: parseFloat(form[1].data[2].stats.xg_for_avg_away),\n                ScoredOverall: parseFloat(\n                  form[1].data[2].stats.seasonScoredNum_overall\n                ),\n                ScoredAverage: parseFloat(\n                  form[1].data[2].stats.seasonScoredAVG_away\n                ),\n                PlayedHome: parseFloat(\n                  form[1].data[2].stats.seasonMatchesPlayed_home\n                ),\n                PlayedAway: parseFloat(\n                  form[1].data[2].stats.seasonMatchesPlayed_away\n                ),\n                ConcededOverall: parseFloat(\n                  form[1].data[2].stats.seasonConcededNum_overall\n                ),\n                ConcededAverage: parseFloat(\n                  form[1].data[2].stats.seasonConcededAVG_away\n                ),\n                XGAgainstAvgOverall: parseFloat(\n                  form[1].data[2].stats.xg_against_avg_overall\n                ),\n                XGAgainstAverage: parseFloat(\n                  form[1].data[2].stats.xg_against_avg_away\n                ),\n                CleanSheetPercentage: parseFloat(\n                  form[1].data[2].stats.seasonCSPercentage_overall\n                ),\n                AveragePossessionOverall: parseFloat(\n                  form[1].data[2].stats.possessionAVG_overall\n                ),\n                AveragePossession: parseFloat(\n                  form[1].data[2].stats.possessionAVG_away\n                ),\n                AverageShotsOnTargetOverall: parseFloat(\n                  form[1].data[2].stats.shotsOnTargetAVG_overall\n                ),\n                AverageShotsOnTarget: parseFloat(\n                  form[1].data[2].stats.shotsOnTargetAVG_away\n                ),\n                AverageShots: parseFloat(\n                  form[1].data[2].stats.shotsAVG_overall\n                ),\n                AverageShotsHomeOrAway: parseFloat(\n                  form[1].data[2].stats.shotsAVG_away\n                ),\n                AverageDangerousAttacksOverall: parseFloat(\n                  form[1].data[2].stats.dangerous_attacks_avg_overall\n                ),\n                PPG: parseFloat(form[1].data[2].stats.seasonPPG_overall),\n                AttacksAverage: parseFloat(\n                  form[1].data[2].stats.attacks_avg_away\n                ),\n                AverageDangerousAttacks: parseFloat(\n                  form[1].data[2].stats.dangerous_attacks_avg_away\n                ),\n                BTTSPercentage: parseInt(\n                  form[1].data[2].stats.seasonBTTSPercentage_away\n                ),\n                lastThreeForm:\n                  lastThreeFormAway !== undefined\n                    ? lastThreeFormAway.reverse()\n                    : \"N/A\",\n                LastFiveForm:\n                  lastFiveFormAway !== undefined\n                    ? lastFiveFormAway.reverse()\n                    : \"N/A\",\n                LastSixForm:\n                  lastSixFormAway !== undefined\n                    ? lastSixFormAway.reverse()\n                    : \"N/A\",\n                LastTenForm:\n                  lastTenFormAway !== undefined\n                    ? lastTenFormAway.reverse()\n                    : \"N/A\",\n                LeagueOrAll: leagueOrAll,\n                LeaguePosition: `${teamPositionAway}${awayPrefix}`,\n                awayRawPosition: awayTeaminLeague.rawPosition\n                  ? awayTeaminLeague.rawPosition\n                  : 0,\n                awayTeamAwayPositionRaw: teamPositionAwayTable,\n                SeasonPPG: awaySeasonPPG,\n                WinPercentage: awayTeamWinPercentageAway,\n                LossPercentage: awayTeamLossPercentageAway,\n                DrawPercentage: awayTeamDrawPercentageAway,\n                formRun: formRunAway,\n                goalDifference:\n                  form[1].data[2].stats.seasonGoalDifference_overall,\n                goalDifferenceHomeOrAway:\n                  form[1].data[2].stats.seasonGoalDifference_away,\n                BttsPercentage:\n                  form[1].data[2].stats.seasonBTTSPercentage_overall,\n                BttsPercentageHomeOrAway:\n                  form[1].data[2].stats.seasonBTTSPercentage_away,\n                CardsTotal: form[1].data[2].stats.cardsTotal_overall,\n                CornersAverage: form[1].data[2].stats.cornersAVG_overall,\n                ScoredBothHalvesPercentage:\n                  form[1].data[2].stats.scoredBothHalvesPercentage_overall,\n                LastMatch: await convertTimestamp(\n                  form[1].data[0].last_updated_match_timestamp\n                ),\n                WDLRecord: WDLinLeagueAway,\n                LeagueAverageGoals: awayAverageGoals,\n                LeagueAverageConceded: awayAverageConceded,\n              },\n            },\n          });\n        }\n\n        match.matches_completed_minimum = fixture.matches_completed_minimum;\n        match.homeBadge = fixture.home_image;\n        match.awayBadge = fixture.away_image;\n\n        match.homePpg = fixture.home_ppg.toFixed(2);\n        match.awayPpg = fixture.away_ppg.toFixed(2);\n\n        match.lastFiveFormHome = lastFiveFormHome;\n        match.lastFiveFormAway = lastFiveFormAway;\n\n        match.homeRawPosition = homeTeaminLeague.rawPosition;\n        match.awayRawPosition = awayTeaminLeague.rawPosition;\n\n        match.homeTeamHomePosition = `${teamPositionHomeTable}${homePrefixHomeTable}`;\n        match.awayTeamAwayPosition = `${teamPositionAwayTable}${awayPrefixAwayTable}`;\n\n        match.homeTeamHomePositionRaw = teamPositionHomeTable;\n        match.awayTeamAwayPositionRaw = teamPositionAwayTable;\n\n        match.homeTeamWinPercentage = homeTeamWinPercentageHome;\n        match.awayTeamWinPercentage = awayTeamWinPercentageAway;\n\n        match.homeTeamLossPercentage = homeTeamLossPercentageHome;\n        match.awayTeamLossPercentage = awayTeamLossPercentageAway;\n\n        match.homeTeamDrawPercentage = homeTeamDrawPercentageHome;\n        match.awayTeamDrawPercentage = awayTeamDrawPercentageAway;\n        match.status = fixture.status;\n        match.over25Odds = fixture.odds_ft_over25;\n        match.btts_potential = fixture.btts_potential;\n        match.game = match.homeTeam + \" v \" + match.awayTeam;\n        match.homeGoals = fixture.homeGoalCount;\n        match.awayGoals = fixture.awayGoalCount;\n\n        match.expectedGoalsHomeToDate = fixture.team_a_xg_prematch;\n        match.expectedGoalsAwayToDate = fixture.team_b_xg_prematch;\n        match.game_week = fixture.game_week;\n\n        if (match.status !== \"canceled\" || match.status !== \"suspended\") {\n          matches.push(match);\n          await createFixture(match, false);\n        }\n      }\n\n      if (matches.length > 0) {\n        ReactDOM.render(\n          <Fragment>\n            <Button\n              text={\"Get Predictions & Stats\"}\n              onClickEvent={() => getScorePrediction(day)}\n              className={\"GeneratePredictions\"}\n            />\n            <div className=\"Version\">Prediction engine v1.6.1 (20/10/25)</div>\n            <div className=\"MissingPredictionsNotice\">If predictions are missing on games with little data, switch to AI tips in the options, above</div>\n            <Collapsable\n              buttonText={\"Filters\"}\n              className={\"Filters2\"}\n              element={\n                <div className=\"FilterContainer\">\n                  <h6>\n                    Use the below filters to remove predictions that don't meet\n                    the set criteria. These will be greyed out and not included\n                    in multi-builders and ROI stats\n                  </h6>\n                  <h6>Goals for/against differential filter</h6>\n                  <div>\n                    I'm looking for tips where the goal differential between\n                    teams is at least...\n                  </div>\n                  <SlideDiff\n                    value=\"0\"\n                    text=\"all games\"\n                    useCase=\"gd\"\n                    lower=\"0\"\n                    upper=\"30\"\n                  ></SlideDiff>\n                  <h6>Goals for/against home or away differential filter</h6>\n                  <div>\n                    I'm looking for tips where the goal differential (home or\n                    away only) between teams is at least...\n                  </div>\n                  <SlideDiff\n                    value=\"0\"\n                    text=\"all games\"\n                    useCase=\"gdHorA\"\n                    lower=\"0\"\n                    upper=\"30\"\n                  ></SlideDiff>\n                  <Fragment>\n                    <h6>XG for/against differential filter</h6>\n                    <div>\n                      I'm looking for tips where the XG differential between\n                      teams is at least...\n                    </div>\n                    <SlideDiff\n                      value=\"0\"\n                      text=\"all games\"\n                      useCase=\"xg\"\n                      lower=\"0\"\n                      upper=\"30\"\n                    ></SlideDiff>\n                  </Fragment>\n                  <Fragment>\n                    <h6>Last 6 points differential filter</h6>\n                    <div>\n                      I'm looking for tips where the points differential between\n                      teams is at least...\n                    </div>\n                    <SlideDiff\n                      value=\"0\"\n                      text=\"all games\"\n                      useCase=\"last10\"\n                      lower=\"0\"\n                      upper=\"18\"\n                    ></SlideDiff>\n                  </Fragment>\n                  <Fragment>\n                    <h6>Choose your risk profile</h6>\n                    <div>\n                      I'm looking for tips where the odds are between...\n                    </div>\n                    <Slide value=\"1\" text=\"all games\"></Slide>\n                  </Fragment>\n                </div>\n              }\n            />\n          </Fragment>,\n          document.getElementById(\"GeneratePredictions\")\n        );\n      }\n\n      // }\n    }\n\n    ReactDOM.render(\n      <div>\n        <div className=\"LoadingText\"></div>\n      </div>,\n      document.getElementById(\"Loading\")\n    );\n\n    async function updateResults(bool) {\n      console.log(\"updating results\");\n      if (allLeagueResultsArrayOfObjects.length > 0 && bool === true) {\n        await fetch(`${process.env.REACT_APP_EXPRESS_SERVER}results`, {\n          method: \"DELETE\",\n          headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n          },\n        }).then(async () => {\n          await fetch(`${process.env.REACT_APP_EXPRESS_SERVER}results`, {\n            method: \"POST\",\n            headers: {\n              Accept: \"application/json\",\n              \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(allLeagueResultsArrayOfObjects),\n          });\n        });\n      } else {\n        console.log(\"EMPTY RESULTS\");\n      }\n    }\n\n    if (!isStoredLocally) {\n      await fetch(`${process.env.REACT_APP_EXPRESS_SERVER}allForm/${date}`, {\n        method: \"POST\",\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ allForm }),\n      });\n      await updateResults(true);\n    }\n    if (!leaguesStored) {\n      await fetch(\n        `${process.env.REACT_APP_EXPRESS_SERVER}leagues/${todaysDate}`,\n        {\n          method: \"POST\",\n          headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({ leagueArray }),\n        }\n      );\n    }\n\n    // const allFixtures = await RenderAllFixtures(matches, false)\n\n    ReactDOM.render(\n      <RenderAllFixtures matches={matches} result={false} bool={false} />,\n      document.getElementById(\"FixtureContainer\")\n    );\n    // ReactDOM.render(<RenderAllFixtures matches={matches} bool={false}/>),document.getElementById(\"FixtureContainer\")\n    setTimeout(() => {\n      isFunctionRunning = false;\n    }, 1000);\n  }\n}\n","/Users/greg/Development/Predictor/src/firebase.js",[],"/Users/greg/Development/Predictor/src/logic/getStatsInsights.js",[],"/Users/greg/Development/Predictor/src/components/createBadge.js",[],"/Users/greg/Development/Predictor/src/logic/dataSlice.js",[],"/Users/greg/Development/Predictor/src/components/LeagueName.js",["299"],"import { useState, useEffect } from \"react\";\nimport { allLeagueResultsArrayOfObjects } from \"../logic/getFixtures\";\nimport { renderTable } from \"../logic/getFixtures\";\n\n\nconst sofaScoreIds = [\n  { 15050: 17 }, //EPL\n  { 14930: 18 }, //Championship\n  { 14934: 24 }, //League 1\n  { 14935: 25 }, //League 2\n  { 14968: 35 }, //Bundesliga\n  { 14956: 8 }, //La Liga\n  { 14924: 7 }, //Champions League\n  { 13734: 10783 }, //Nations league 24/25\n  { 13878: 357 }, // Club World Cup 25\n    { 16261: 384 }, // Copa Libertadores 25\n\n  { 15068: 23 }, //Serie A\n\n  { 14932: 34 }, //Ligue 1,\n  { 15000: 36 }, //Scottish Prem\n  { 15115: 44 }, //Portugal\n  { 14936: 35 }, //Dutch\n  { 14937: 38 }, //Belgium\n  { 16263: 40 }, //Sweden\n  { 15055: 39 }, //Denmark\n  { 16260: 20 }, //Norway\n  { 14923: 45 }, //Austrian Prem 22/23\n  { 15163: 185 }, //Greek Prem 22/23\n  { 14972: 52 }, //turkey\n  { 15031: 202 }, //Polish prem 22/23\n  { 15047: 215 }, //Swiss prem 22/23\n  { 15053: 170 }, //Croatia 24/25\n  { 14973: 172 }, //Czecjh 24/25\n\n  { 14089: 41 }, // Finland 25\n  { 14951: 218 }, // Ulraine 25\n  { 15065: 210 }, // Serbia 25\n  { 15063: 212 }, // Slovenia 25\n  { 14933: 211 }, // Slovakia 25\n\n  { 13952: 192 }, //Irish Prem\n  { 16036: 136 }, //Aus A League\n  { 15002: 679 }, //Europa\n  { 14904: 17015 }, //Europa Conference\n  { 15066: 54 }, //Spanish secunda 22/23\n  { 15632: 53 }, //Italy serie B 22/23\n  { 14931: 44 }, //Bundesliga 2 22/23\n  { 14954: 182 }, //French League 2 22/23\n  { 14987: 131 }, //Dutch League 2 25\n  { 15061: 206 }, //Scottish Championship 22/23\n  { 14943: 207 }, //Scottish league 1 22/23\n  { 15209: 209 }, //Scottish league 2 22/23\n    { 13973: 242 }, //MLS\n  { 13967: 13363 }, // USL\n  { 14236: 13470 }, //Canada 25\n  { 14231: 325 }, //Brazil prem 24\n  { 15746: 155 }, //Argentina prem 23\n  { 14086: 11539}, //Colombia 25\n    { 14626: 278}, //Uraguay 25\n\n  { 15234: 11621 }, //Mexico prem 23/24\n  { 15657: 173 }, //National league\n  { 15845: 176 }, //National league north 25\n  { 15844: 174 }, //National league south 25\n  { 16243: 410 }, //S Korea 25,\n  { 16242: 196 }, //Japan 25\n  { 12772: 955 }, //Saudi 24/25\n  { 13964: 11}, // World Cup 26 EU Qualifiers\n  { 10121: 295 }, // World Cup 26 SA Qualifiers\n\n  // 11426, // WC Qual ConCaf\n  // 12801\n];\n\n\nexport default function LeagueName({ fixture, mock, showShortlist }) {\n  const [logoUrl, setLogoUrl] = useState(null);\n\nconst name = showShortlist ? fixture.leagueDesc : fixture.leagueName; \n const id =\n    allLeagueResultsArrayOfObjects.length > 0\n      ? allLeagueResultsArrayOfObjects[fixture.leagueIndex].id\n      : null;\n\n  useEffect(() => {\n    async function fetchLogo() {\n      const found = sofaScoreIds.find((obj) => obj[id] !== undefined);\n      const value = found ? found[id] : null;\n      if (!value) return;\n\n      const logoPath = `${process.env.REACT_APP_EXPRESS_SERVER}logo/${value}`;\n      try {\n        // Optionally verify it loads first\n        const response = await fetch(logoPath);\n        if (response.ok) {\n          setLogoUrl(logoPath); // Use the URL directly\n        } else {\n          console.error(\"Failed to fetch logo URL:\", response.status);\n        }\n      } catch (error) {\n        console.error(\"Error fetching logo URL:\", error);\n      }\n      fixture.sofaScoreId = value\n    }\n\n    fetchLogo();\n  }, [id]);\n\n  if (mock === true || name === null) {\n    return <div></div>;\n  }\n\n  return (\n    <div>\n      <div\n        className=\"leagueName\"\n        id={`league${id}`}\n        key={`leagueName${id}div`}\n        onClick={() =>\n          renderTable(\n            fixture.leagueIndex,\n            allLeagueResultsArrayOfObjects[fixture.leagueIndex],\n            id\n          )\n        }\n        style={{ display: \"flex\", alignItems: \"center\" }}\n      >\n        <div className=\"LeagueAndLogo\">\n          {logoUrl && (\n            <img\n              className=\"LeagueLogo\"\n              src={logoUrl}\n              alt={`${name} Logo`}\n            />\n          )}\n          {showShortlist ? fixture.leagueDesc : fixture.leagueName} &#9776;\n        </div>\n      </div>\n\n      <div\n        className=\"LeagueTable\"\n        key={`leagueName${id}`}\n        id={`leagueName${id}`}\n      ></div>\n    </div>\n  );\n}\n","/Users/greg/Development/Predictor/src/components/GameStats.js",["300","301","302","303","304","305","306","307","308","309","310","311","312","313","314","315","316","317","318","319","320","321","322","323","324","325","326","327","328","329","330","331","332","333","334","335","336","337","338","339","340","341","342","343","344","345","346","347","348","349"],"/Users/greg/Development/Predictor/src/logic/getScorePredictions.js",["350","351","352","353","354","355","356","357","358","359","360","361","362","363","364","365","366","367","368","369","370","371","372","373","374","375","376"],"/Users/greg/Development/Predictor/src/components/Slider.js",[],"/Users/greg/Development/Predictor/src/components/SliderDiff.js",[],"/Users/greg/Development/Predictor/src/logic/getForm.js",[],"/Users/greg/Development/Predictor/src/components/LeagueTable.js",[],"/Users/greg/Development/Predictor/src/components/TeamOfTheSeason.js",["377","378"],"import { useState, useEffect } from \"react\";\n//tournaments/search (Deprecated)\n//Use ID to call tournaments/get-seasons\n\n// const footyStatsToSofaScore = [\n//   {\n//     //Prem 25\n//     15050: {\n//       id: 17,\n//       season: 76986,\n//     },\n//     //Championship 25\n//     14930: {\n//       id: 18,\n//       season: 77347,\n//     },\n//     //League 1\n//     14934: {\n//       id: 24,\n//       season: 77352,\n//     },\n//     //League 2\n//     14935: {\n//       id: 25,\n//       season: 77351,\n//     },\n//     12622: {\n//       id: 173,\n//       season: 63807, // Conference 24/25\n//     },\n//     //Bundesliga\n//     14968: {\n//       id: 35,\n//       season: 77333,\n//     },\n//     //La Liga 25\n//     14956: {\n//       id: 8,\n//       season: 77559,\n//     },\n//     15000: {\n//       id: 36,\n//       season: 77128, // Scottish Premiership 25\n//     },\n//     //Champions league 25\n//     14924: {\n//       id: 7,\n//       season: 76953,\n//     },\n//     //Serie A 25\n//     15068: {\n//       id: 23,\n//       season: 76457,\n//     },\n//     //MLS\n//     13973: {\n//       id: 242,\n//       season: 70158,\n//     },\n//     //Ligue 1 25\n//     14932: {\n//       id: 34,\n//       season: 77356,\n//     },\n//     15115: {\n//       id: 238,\n//       season: 77806, // Portuguese Primeira Liga 25\n//     },\n//     16261: {\n//       id: 384,\n//       season: 70083, // Copa Libertadores\n//     },\n//     14936: {\n//       id: 37,\n//       season: 77012, // Eredivisie\n//     },\n//     14937: {\n//       id: 9,\n//       season: 77849, // Belgian Pro League\n//     },\n//     16263: {\n//       id: 40,\n//       season: 69956, // Scottish Premiership\n//     },\n//     15055: {\n//       id: 39,\n//       season: 76491, // Danish Superliga\n//     },\n//     16260: {\n//       id: 20,\n//       season: 70174, // Norwegian Eliteserien\n//     },\n//     14923: {\n//       id: 45,\n//       season: 77382, // Austrian Bundesliga\n//     },\n//     15163: {\n//       id: 185,\n//       season: 78175, // Greek Super League\n//     },\n//     14972: {\n//       id: 52, // Turkish Super Lig\n//       season: 78175,\n//     },\n//     15031: {\n//       id: 202,\n//       season: 76477, // Ekstraklasa\n//     },\n//     15066: {\n//       id: 54,\n//       season: 77558, // Spanish Segunda Division\n//     },\n//     14931: {\n//       id: 44,\n//       season: 77354, // Bundesliga 2\n//     },\n//     14954: {\n//       id: 182,\n//       season: 77357, // French Ligue 2\n//     },\n//     15061: {\n//       id: 206,\n//       season: 77037, // Scottish Championship 25\n//     },\n//     15062: {\n//       id: 207,\n//       season: 77037, // Scottish League One 25\n//     },\n//     15064: {\n//       id: 209,\n//       season: 77045, // Scottish League Two 25\n//     },\n//     15047: {\n//       id: 215,\n//       season: 77152, // Swiss Super League\n//     },\n//     15053: {\n//       id: 170,\n//       season: 77152, // Croatian First League\n//     },\n//     14973: {\n//       id: 172,\n//       season: 77019, // Czech First League\n//     },\n//     14089: {\n//       id: 41,\n//       season: 70853, // Finnish Veikkausliiga\n//     },\n//     14951: {\n//       id: 218,\n//       season: 77625, // Ukrainian Premier League\n//     },\n//     15063: {\n//       id: 212,\n//       season: 62660, // Slovenian Prva Liga\n//     },\n//     14933: {\n//       id: 211,\n//       season: 77154, // Slovak Super Liga\n//     },\n//     15065: {\n//       id: 210,\n//       season: 77625, // Serbian SuperLiga \n//     },\n//     15234: {\n//       id: 11621,\n//       season: 76500, // Liga MX 25\n//     },\n//     14231: {\n//       id: 325,\n//       season: 72034, // Brazil Serie A\n//     },\n//     14305: {\n//       id: 390,\n//       season: 72603, // Brazil Serie B\n//     },\n//     13878: {\n//       id: 357,\n//       season: 69619, // Club World Cup\n//     },\n//     13734: {\n//       id: 10783,\n//       season: 58337, // UEFA Nations League 25\n//     },\n//     14086: {\n//       id: 11539,\n//       season: 70681, // Colombian Liga BetPlay 25\n//     },\n//     14626: {\n//       id: 278,\n//       season: 71306, // Uruguayan Primera Division 25\n//     },\n//     15310: {\n//       id: 155,\n//       season: 70268, // Argentina Primera Division 25\n//     },\n//     16242: {\n//       id: 196,\n//       season: 69871, // J League 25\n//     },\n//     16243: {\n//       id: 410,\n//       season: 70830, // K League 25\n//     },\n//     12772: {\n//       id: 955,\n//       season: 63998, // Saudi Pro League 24/25\n//     },\n//     13967: {\n//       id: 13363,\n//       season: 70263 // USL 25\n//     },\n//     14236: {\n//       id: 13470,\n//       season: 72315 // Canadian Premier League 25\n//     },\n//     13964: {\n//       id: 11,\n//       season: 69427, // World Cup EU 2026\n//     },\n//     10121: {\n//       id: 295,\n//       season: 53820, // World Cup SA 2026\n//     },\n//     13952: {\n//       id: 192,\n//       season: 69981, // Ireland 24/25\n//     },\n//     16036: {\n//       id: 136,\n//       season: 64864, // A League 24/25\n//     },\n//     15002: {\n//       id: 679,\n//       season: 76984, // UEFA Europa League 25\n//     },\n//     14904: {\n//       id: 17015,\n//       season: 76960, // UEFA Europa Conference League 24/25\n//     },\n//   },\n// ];\n\n\nexport const rounds = [\n  {\n    17: 76986,\n    18: 77347,\n    24: 77352,\n    25: 77351,\n    173: 63807,\n    174: 78227,\n    176: 78282,\n    35: 77333,\n    8: 77559,\n    36: 77128,\n    7: 76953,\n    23: 76457,\n    242: 70158,\n    34: 77356,\n    238: 77806,\n    384: 70083,\n    37: 77012,\n    9: 77849,\n    40: 69956,\n    39: 76491,\n    20: 70174,\n    45: 77382,\n    185: 78175,\n    52: 78175,\n    202: 76477,\n    54: 77558,\n    44: 77354,\n    182: 77357,\n    206: 77037,\n    207: 77037,\n    209: 77045,\n    215: 77152,\n    170: 77152,\n    172: 77019,\n    41: 70853,\n    218: 77625,\n    212: 62660,\n    131: 77156,\n    211: 77154,\n    210: 77625,\n    11621: 76500,\n    325: 72034,\n    390: 72603,\n    357: 69619,\n    10783: 58337,\n    11539: 70681,\n    278: 71306,\n    155: 70268,\n    196: 69871,\n    410: 70830,\n    955: 63998,\n    13363: 70263,\n    13470: 72315,\n    11: 69427,\n    295: 53820,\n    192: 69981,\n    136: 64864,\n    679: 76984,\n    17015: 76960,\n  },\n];\n\n\nconst TeamOfTheSeason = (props) => {\n  const [roundId, setRoundId] = useState(null);\n  const seasonId = 61627; // Update this dynamically if needed\n  const id = props.id\n  //WILL NEED TO BE UPDATED NEXT SEASON\n\n  const baseUrl = `https://widgets.sofascore.com/embed/unique-tournament/${id}`;\n\n  const derivedRoundId = (() => {\n    for (const mapping of rounds) {\n      if (mapping.hasOwnProperty(id)) {\n        return mapping[id];\n      }\n    }\n    console.warn(`No matching media ID found for ID: ${id}`);\n    return null;\n  })();\n\n  console.log(id)\n  console.log(derivedRoundId)\n\n  useEffect(() => {\n    const fetchRoundId = async () => {\n      try {\n        // Fetch rounds data to get the correct round ID\n        const roundsResponse = await fetch(\n          `${process.env.REACT_APP_EXPRESS_SERVER}round/${id}/${derivedRoundId}`\n        );\n        let roundsData = await roundsResponse.json();\n\n        // Get the round ID from the first round in the data\n        if (roundsData.rounds?.length > 0) {\n          const firstRoundId = roundsData.rounds[0]?.id; // Grabbing the id from index 0\n          setRoundId(firstRoundId); // Set the roundId state\n        } else {\n          console.error(\"No rounds data found.\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching SofaScore API:\", error);\n      }\n    };\n\n    fetchRoundId();\n  }, [id, roundId]);\n\n  return (\n    <div className=\"TeamOfTheSeason\">\n      {derivedRoundId ? (\n        <iframe\n          width=\"100%\"\n          height=\"700\"\n          // style={{ display: 'block', maxWidth: '700px' }}\n          src={`${baseUrl}/season/${derivedRoundId}/round/${roundId}/teamOfTheWeek?widgetBackground=Gray&showCompetitionLogo=true&v=2`}\n          frameBorder=\"0\"\n          scrolling=\"no\"\n          title=\"SofaScore Team of the Week\"\n        ></iframe>\n      ) : (\n        <p>Loading Team of the Week...</p>\n      )}\n      <div\n        style={{\n          fontSize: \"12px\",\n          fontFamily: \"Arial, sans-serif\",\n          textAlign: \"left\",\n        }}\n      >\n      </div>\n    </div>\n  );\n};\n\nexport default TeamOfTheSeason;\n","/Users/greg/Development/Predictor/src/logic/getStats.js",["379","380","381","382","383","384","385","386","387","388","389","390","391","392","393","394","395","396","397","398","399","400","401","402","403","404"],"import ReactDOM from \"react-dom\";\nimport { allForm } from \"../logic/getFixtures\";\nimport { getPointsFromLastX } from \"../logic/getScorePredictions\";\nimport { allLeagueResultsArrayOfObjects } from \"../logic/getFixtures\";\nimport GenerateFormSummary from \"../logic/compareFormTrend\";\nimport { clicked } from \"../logic/getScorePredictions\";\nimport { userDetail } from \"../logic/authProvider\";\nimport { checkUserPaidStatus } from \"../logic/hasUserPaid\";\n\nexport async function getPointAverage(pointTotal, games) {\n  return pointTotal / games;\n}\n\n\nexport async function calculateAttackingStrength(stats) {\n  // Define weights for each metric (you can adjust these based on your preference)\n  const weights = {\n    // averagePossession: 0.1,\n    \"Average Dangerous Attacks\": 0.1,\n    \"Average Shots\": 0.1,\n    \"Average Shots On Target\": 0.1,\n    \"Average Expected Goals\": 0.2,\n    \"Recent XG\": 0.2,\n    \"Average Goals\": 0.2,\n    Corners: 0,\n    \"Average Shot Value\": 0.1,\n  };\n\n  // Define the ranges for normalization\n  const ranges = {\n    // League average Dangerous Attacks is highly variable\n    \"Average Dangerous Attacks\": { min: 20, max: 80 }, \n    \n    // League average Shots is typically 12-14\n    \"Average Shots\": { min: 7, max: 19 }, \n    \n    // League average Shots On Target is typically 4.5-5.5\n    \"Average Shots On Target\": { min: 3, max: 7 }, \n    \n    // League average XG scored is typically 1.3 - 1.5\n    \"Average Expected Goals\": { min: 0.6, max: 2.2 }, \n    \"Recent XG\": { min: 0.6, max: 2.2 },\n    \n    // League average Goals scored is typically 1.3 - 1.5\n    \"Average Goals\": { min: 0.5, max: 3 }, \n    \n    // League average Corners is typically 5-6\n    Corners: { min: 3, max: 8 },\n    \n    // Speculative range for average shot value (XG/Shot)\n    \"Average Shot Value\": { min: 5, max: 25 },\n  };\n\n  // Normalize each metric value and calculate the weighted sum\n  let weightedSum = 0;\n  for (const metric in stats) {\n    if (\n      stats.hasOwnProperty(metric) &&\n      weights.hasOwnProperty(metric) &&\n      ranges.hasOwnProperty(metric)\n    ) {\n      const normalizedValue = Math.max(\n        0,\n        Math.min(\n          1,\n          (stats[metric] - ranges[metric].min) /\n          (ranges[metric].max - ranges[metric].min)\n        )\n      );\n      weightedSum += normalizedValue * weights[metric];\n    } else {\n      console.log(metric);\n    }\n  }\n\n  return parseFloat(weightedSum.toFixed(2));\n}\n\nexport async function calculateDefensiveStrength(stats, normalizedValue = 1) {\n  let normValue = normalizedValue;\n  // Define weights for each metric (you can adjust these based on your preference)\n  const weights = {\n    \"Average XG Against\": 0.25,\n    \"Recent XG Against\": 0.25,\n    \"Average Goals Against\": 0.3,\n    \"Average SOT Against\": 0.2,\n  };\n\n  // Define the ranges for normalization\n  const ranges = {\n    // League average XG conceded is typically 1.3 - 1.5\n    \"Average XG Against\": { min: 0.6, max: 2.2 }, \n    \"Recent XG Against\": { min: 0.6, max: 2.2 },\n    \n    // League average Goals conceded is typically 1.3 - 1.5\n    \"Average Goals Against\": { min: 0.5, max: 2.3 }, \n    \n    // League average SOT conceded is typically 4 - 5\n    \"Average SOT Against\": { min: 2, max: 7 }, \n  };\n\n  // Normalize each metric value and calculate the weighted sum\n  let weightedSum = 0;\n  for (const metric in stats) {\n    if (\n      stats.hasOwnProperty(metric) &&\n      weights.hasOwnProperty(metric) &&\n      ranges.hasOwnProperty(metric)\n    ) {\n      let normalizedValueRaw =\n        (stats[metric] - ranges[metric].min) / (ranges[metric].max - ranges[metric].min);\n      let normalizedValueClamped = Math.max(0, Math.min(1, normalizedValueRaw));\n\n      // 🟢 Correctly reverse the score: Low Goals Against (0) should yield Strength Score (1)\n      let reversedScore = 1 - normalizedValueClamped;\n      // If XG Against is at MIN, normalizedValueClamped = 0. reversedScore = 1. (Strong Defense)\n\n      weightedSum += reversedScore * weights[metric];\n      // You can remove the unused 'normValue' parameter completely if you always use 1.\n    }\n  }\n\n  return parseFloat(weightedSum.toFixed(2));\n}\n\nexport async function calculateMetricStrength(metricName, metricValue) {\n  // Define weights for each metric (you can adjust these based on your preference)\n  const weights = {\n    averagePossession: 1,\n    xgFor: 1,\n    xgAgainst: 1,\n    directnessOverall: 1,\n    accuracyOverall: 1,\n  };\n\n  // Define the ranges for normalization\n  const ranges = {\n    averagePossession: { min: 20, max: 80 },\n    xgFor: { min: 0.25, max: 2.75 },\n    xgAgainst: { min: 0.25, max: 2.75 },\n    directnessOverall: { min: 0.5, max: 7 },\n    accuracyOverall: { min: 3, max: 40 },\n  };\n\n  // Ensure the metric is valid and exists in the weights and ranges objects\n  if (\n    !weights.hasOwnProperty(metricName) ||\n    !ranges.hasOwnProperty(metricName)\n  ) {\n    throw new Error(\"Invalid metric name or missing normalization range.\");\n  }\n\n  // Normalize the metric value\n  const normalizedValue =\n    (metricValue - ranges[metricName].min) /\n    (ranges[metricName].max - ranges[metricName].min);\n\n  // Calculate the weighted score\n  const weightedScore = normalizedValue * weights[metricName];\n\n  return parseFloat(weightedScore.toFixed(2));\n}\n\n\nexport async function getXGtoActualDifferentialStrength(XGDiff) {\n  let strength;\n  switch (true) {\n    case XGDiff >= 1.5:\n      strength = 10;\n      break;\n    case XGDiff >= 1 && XGDiff < 1.5:\n      strength = 9;\n      break;\n    case XGDiff >= 0.5 && XGDiff < 1:\n      strength = 8;\n      break;\n    case XGDiff >= 0.25 && XGDiff < 0.5:\n      strength = 7;\n      break;\n    case XGDiff > 0 && XGDiff < 0.25:\n      strength = 6;\n      break;\n    case XGDiff <= 0 && XGDiff > -0.25:\n      strength = 5;\n      break;\n    case XGDiff <= -0.25 && XGDiff > -0.5:\n      strength = 4;\n      break;\n    case XGDiff <= -0.5 && XGDiff > -1:\n      strength = 3;\n      break;\n    case XGDiff <= -1 && XGDiff > -1.5:\n      strength = 2;\n      break;\n    case XGDiff <= -1.5:\n      strength = 1;\n      break;\n    default:\n      strength = 1;\n      break;\n  }\n  return strength;\n}\n\n\nexport async function createStatsDiv(game, displayBool) {\n  if (game.status !== \"void\") {\n    // takes the displayBool boolean from the fixture onClick and sets the styling of the stats div from there\n    function styling(testBool) {\n      let bool = testBool;\n      if (bool === true && clicked === true) {\n        // set stats element to display flex\n        return { display: \"block\" };\n      } else {\n        // set stats element to display none\n        return { display: \"none\" };\n      }\n    }\n    let style = styling(displayBool);\n\n    if (clicked === false) {\n      alert(\"Tap Get Predictions to fetch all game stats first\");\n    } else {\n      let index = 2;\n      let divider = 10;\n\n      let gameStats = allForm.find((match) => match.id === game.id);\n      const gameArrayHome = [];\n      const gameArrayAway = [];\n      const gameArrayHomeTeamHomeGames = [];\n      const gameArrayAwayTeamAwayGames = [];\n      let goalDiffArrayHome;\n      let goalDiffArrayAway;\n      let xgDiffArrayHome;\n      let xgDiffArrayAway;\n      let sotDiffArrayHome;\n      let sotDiffArrayAway;\n\n      const homeForm = gameStats.home[index];\n      const awayForm = gameStats.away[index];\n\n      if (displayBool === true) {\n\n        const pos = allLeagueResultsArrayOfObjects\n          .map((i) => i.id)\n          .indexOf(gameStats.leagueId);\n        let matches = allLeagueResultsArrayOfObjects[pos];\n        // await fixtures.json().then((matches) => {\n        const resultHome = matches.fixtures.filter(\n          (game) =>\n            game.home_name === gameStats.home.teamName ||\n            game.away_name === gameStats.home.teamName\n        );\n\n        const resultHomeOnly = matches.fixtures.filter(\n          (game) => game.home_name === gameStats.home.teamName\n        );\n\n        resultHome.sort((a, b) => b.date_unix - a.date_unix);\n        resultHomeOnly.sort((a, b) => b.date_unix - a.date_unix);\n\n        for (let i = 0; i < resultHome.length; i++) {\n          let unixTimestamp = resultHome[i].date_unix;\n          let milliseconds = unixTimestamp * 1000;\n          let dateObject = new Date(milliseconds).toLocaleString(\"en-GB\", {\n            timeZone: \"UTC\",\n          });\n\n          let won;\n          let goalsScored;\n          let goalsConceeded;\n\n          switch (true) {\n            case resultHome[i].home_name === gameStats.home.teamName:\n              switch (true) {\n                case resultHome[i].homeGoalCount > resultHome[i].awayGoalCount:\n                  won = \"W\";\n                  goalsScored = resultHome[i].homeGoalCount;\n                  goalsConceeded = resultHome[i].awayGoalCount;\n                  break;\n                case resultHome[i].homeGoalCount ===\n                  resultHome[i].awayGoalCount:\n                  won = \"D\";\n                  goalsScored = resultHome[i].homeGoalCount;\n                  goalsConceeded = resultHome[i].awayGoalCount;\n                  break;\n                case resultHome[i].homeGoalCount < resultHome[i].awayGoalCount:\n                  won = \"L\";\n                  goalsScored = resultHome[i].homeGoalCount;\n                  goalsConceeded = resultHome[i].awayGoalCount;\n                  break;\n                default:\n                  break;\n              }\n              break;\n            case resultHome[i].away_name === gameStats.home.teamName:\n              switch (true) {\n                case resultHome[i].homeGoalCount > resultHome[i].awayGoalCount:\n                  won = \"L\";\n                  goalsScored = resultHome[i].homeGoalCount;\n                  goalsConceeded = resultHome[i].awayGoalCount;\n                  break;\n                case resultHome[i].homeGoalCount ===\n                  resultHome[i].awayGoalCount:\n                  won = \"D\";\n                  goalsScored = resultHome[i].homeGoalCount;\n                  goalsConceeded = resultHome[i].awayGoalCount;\n                  break;\n                case resultHome[i].homeGoalCount < resultHome[i].awayGoalCount:\n                  won = \"W\";\n                  goalsScored = resultHome[i].homeGoalCount;\n                  goalsConceeded = resultHome[i].awayGoalCount;\n                  break;\n                default:\n                  break;\n              }\n              break;\n            default:\n              break;\n          }\n\n          gameArrayHome.push({\n            id: resultHome[i].id,\n            date: dateObject,\n            homeTeam: resultHome[i].home_name,\n            homeGoals: resultHome[i].homeGoalCount,\n            homeXG: resultHome[i].team_a_xg,\n            homeOdds: resultHome[i].odds_ft_1,\n            awayTeam: resultHome[i].away_name,\n            awayGoals: resultHome[i].awayGoalCount,\n            awayXG: resultHome[i].team_b_xg,\n            awayOdds: resultHome[i].odds_ft_2,\n            won: won,\n            homeShots: resultHome[i].team_a_shots,\n            awayShots: resultHome[i].team_b_shots,\n            homeSot: resultHome[i].team_a_shotsOnTarget,\n            awaySot: resultHome[i].team_b_shotsOnTarget,\n            homeRed: resultHome[i].team_a_red_cards,\n            awayRed: resultHome[i].team_b_red_cards,\n            homePossession: resultHome[i].team_a_possession,\n            awayPossession: resultHome[i].team_b_possession,\n            homeDangerousAttacks: resultHome[i].team_a_dangerous_attacks,\n            awayDangerousAttacks: resultHome[i].team_b_dangerous_attacks,\n            homePPG: resultHome[i].pre_match_teamA_overall_ppg,\n            awayPPG: resultHome[i].pre_match_teamB_overall_ppg,\n            unixTimestamp: resultHome[i].date_unix,\n            goalsFor: goalsScored,\n            goalsAgainst: goalsConceeded,\n            btts:\n              resultHome[i].homeGoalCount > 0 && resultHome[i].awayGoalCount > 0\n                ? \"\\u2714\"\n                : \"\\u2718\",\n          });\n        }\n\n        for (let i = 0; i < resultHomeOnly.length; i++) {\n          let wonHomeOrAwayOnly;\n\n          switch (true) {\n            case resultHomeOnly[i].home_name === gameStats.home.teamName:\n              switch (true) {\n                case resultHomeOnly[i].homeGoalCount >\n                  resultHomeOnly[i].awayGoalCount:\n                  wonHomeOrAwayOnly = \"W\";\n                  gameArrayHomeTeamHomeGames.push(wonHomeOrAwayOnly);\n                  break;\n                case resultHomeOnly[i].homeGoalCount ===\n                  resultHomeOnly[i].awayGoalCount:\n                  wonHomeOrAwayOnly = \"D\";\n                  gameArrayHomeTeamHomeGames.push(wonHomeOrAwayOnly);\n                  break;\n                case resultHomeOnly[i].homeGoalCount <\n                  resultHomeOnly[i].awayGoalCount:\n                  wonHomeOrAwayOnly = \"L\";\n                  gameArrayHomeTeamHomeGames.push(wonHomeOrAwayOnly);\n                  break;\n                default:\n                  break;\n              }\n              break;\n\n            default:\n              break;\n          }\n        }\n\n        const resultAway = matches.fixtures.filter(\n          (game) =>\n            game.away_name === gameStats.away.teamName ||\n            game.home_name === gameStats.away.teamName\n        );\n\n        const resultAwayOnly = matches.fixtures.filter(\n          (game) => game.away_name === gameStats.away.teamName\n        );\n\n        resultAway.sort((a, b) => b.date_unix - a.date_unix);\n        resultAwayOnly.sort((a, b) => b.date_unix - a.date_unix);\n\n        for (let i = 0; i < resultAway.length; i++) {\n          let unixTimestamp = resultAway[i].date_unix;\n          let milliseconds = unixTimestamp * 1000;\n          let dateObject = new Date(milliseconds).toLocaleString(\"en-GB\", {\n            timeZone: \"UTC\",\n          });\n\n          let won;\n          let goalsScored;\n          let goalsConceeded;\n\n          switch (true) {\n            case resultAway[i].home_name === gameStats.away.teamName:\n              switch (true) {\n                case resultAway[i].homeGoalCount > resultAway[i].awayGoalCount:\n                  won = \"W\";\n                  goalsScored = resultAway[i].awayGoalCount;\n                  goalsConceeded = resultAway[i].homeGoalCount;\n                  break;\n                case resultAway[i].awayGoalCount ===\n                  resultAway[i].homeGoalCount:\n                  won = \"D\";\n                  goalsScored = resultAway[i].awayGoalCount;\n                  goalsConceeded = resultAway[i].homeGoalCount;\n                  break;\n                case resultAway[i].homeGoalCount < resultAway[i].awayGoalCount:\n                  won = \"L\";\n                  goalsScored = resultAway[i].awayGoalCount;\n                  goalsConceeded = resultAway[i].homeGoalCount;\n                  break;\n                default:\n                  break;\n              }\n              break;\n\n            case resultAway[i].away_name === gameStats.away.teamName:\n              switch (true) {\n                case resultAway[i].homeGoalCount > resultAway[i].awayGoalCount:\n                  won = \"L\";\n                  goalsScored = resultAway[i].awayGoalCount;\n                  goalsConceeded = resultAway[i].homeGoalCount;\n                  break;\n                case resultAway[i].homeGoalCount ===\n                  resultAway[i].awayGoalCount:\n                  won = \"D\";\n                  goalsScored = resultAway[i].awayGoalCount;\n                  goalsConceeded = resultAway[i].homeGoalCount;\n                  break;\n                case resultAway[i].homeGoalCount < resultAway[i].awayGoalCount:\n                  won = \"W\";\n                  goalsScored = resultAway[i].awayGoalCount;\n                  goalsConceeded = resultAway[i].homeGoalCount;\n                  break;\n                default:\n                  break;\n              }\n              break;\n            default:\n              break;\n          }\n\n          gameArrayAway.push({\n            id: resultAway[i].id,\n            date: dateObject,\n            homeTeam: resultAway[i].home_name,\n            homeGoals: resultAway[i].homeGoalCount,\n            homeXG: resultAway[i].team_a_xg,\n            homeOdds: resultAway[i].odds_ft_1,\n            awayTeam: resultAway[i].away_name,\n            awayGoals: resultAway[i].awayGoalCount,\n            awayXG: resultAway[i].team_b_xg,\n            awayOdds: resultAway[i].odds_ft_2,\n            won: won,\n            homeShots: resultAway[i].team_a_shots,\n            awayShots: resultAway[i].team_b_shots,\n            homeSot: resultAway[i].team_a_shotsOnTarget,\n            awaySot: resultAway[i].team_b_shotsOnTarget,\n            homeRed: resultAway[i].team_a_red_cards,\n            awayRed: resultAway[i].team_b_red_cards,\n            homePossession: resultAway[i].team_a_possession,\n            awayPossession: resultAway[i].team_b_possession,\n            homeDangerousAttacks: resultAway[i].team_a_dangerous_attacks,\n            awayDangerousAttacks: resultAway[i].team_b_dangerous_attacks,\n            homePPG: resultAway[i].pre_match_teamA_overall_ppg,\n            awayPPG: resultAway[i].pre_match_teamB_overall_ppg,\n            unixTimestamp: resultAway[i].date_unix,\n            goalsFor: goalsScored,\n            goalsAgainst: goalsConceeded,\n            btts:\n              resultAway[i].homeGoalCount > 0 && resultAway[i].awayGoalCount > 0\n                ? \"\\u2714\"\n                : \"\\u2718\",\n          });\n        }\n\n        for (let i = 0; i < resultAwayOnly.length; i++) {\n          let wonAwayOrAwayOnly;\n\n          switch (true) {\n            case resultAwayOnly[i].away_name === gameStats.away.teamName:\n              switch (true) {\n                case resultAwayOnly[i].awayGoalCount >\n                  resultAwayOnly[i].homeGoalCount:\n                  wonAwayOrAwayOnly = \"W\";\n                  gameArrayAwayTeamAwayGames.push(wonAwayOrAwayOnly);\n                  break;\n                case resultAwayOnly[i].awayGoalCount ===\n                  resultAwayOnly[i].homeGoalCount:\n                  wonAwayOrAwayOnly = \"D\";\n                  gameArrayAwayTeamAwayGames.push(wonAwayOrAwayOnly);\n                  break;\n                case resultAwayOnly[i].awayGoalCount <\n                  resultAwayOnly[i].homeGoalCount:\n                  wonAwayOrAwayOnly = \"L\";\n                  gameArrayAwayTeamAwayGames.push(wonAwayOrAwayOnly);\n                  break;\n                default:\n                  break;\n              }\n              break;\n\n            default:\n              break;\n          }\n        }\n\n        goalDiffArrayAway = awayForm.allTeamResults.map(\n          (a) => a.scored - a.conceeded\n        );\n        goalDiffArrayAway = goalDiffArrayAway.reverse();\n        xgDiffArrayAway = awayForm.allTeamResults.map(\n          (a) => a.XG - a.XGAgainst\n        );\n        xgDiffArrayAway = xgDiffArrayAway.reverse();\n\n        sotDiffArrayAway = awayForm.allTeamResults.map(\n          (a) => a.sot - a.sotAgainst\n        );\n        sotDiffArrayAway = sotDiffArrayAway.reverse();\n\n        gameArrayAway.sort((a, b) => b.unixTimestamp - a.unixTimestamp);\n\n        // });\n      }\n\n      const bttsArrayHome = Array.from(gameArrayHome, (x) => x.btts);\n\n\n      const bttsArrayAway = Array.from(gameArrayAway, (x) => x.btts);\n\n      let homeTeam = gameStats.home.teamName;\n      let awayTeam = gameStats.away.teamName;\n\n      let time = game.time;\n\n      if (homeForm.last3Points === undefined) {\n        homeForm.last3Points = getPointsFromLastX(homeForm.lastThreeForm);\n\n        homeForm.last5Points = getPointsFromLastX(homeForm.LastFiveForm);\n\n        homeForm.last6Points = getPointsFromLastX(homeForm.LastSixForm);\n\n        homeForm.last10Points = getPointsFromLastX(homeForm.LastTenForm);\n\n        homeForm.homePPGame = getPointsFromLastX(homeForm.resultsHome);\n\n        awayForm.last3Points = getPointsFromLastX(awayForm.lastThreeForm);\n\n        awayForm.last5Points = getPointsFromLastX(awayForm.LastFiveForm);\n\n        awayForm.last6Points = getPointsFromLastX(awayForm.LastSixForm);\n\n        awayForm.last10Points = getPointsFromLastX(awayForm.LastTenForm);\n\n        awayForm.awayPPGame = getPointsFromLastX(awayForm.resultsAway);\n      }\n\n      // let homeThreeGameAverage = await getPointAverage(\n      //   homeForm.last3Points,\n      //   3\n      // );\n\n      let homeFiveGameAverage = await getPointAverage(homeForm.last5Points, 5);\n\n      let homeSixGameAverage = await getPointAverage(homeForm.last6Points, 6);\n\n      let homeTenGameAverage = await getPointAverage(homeForm.last10Points, 10);\n\n      homeForm.homePPGAv = await getPointAverage(\n        homeForm.homePPGame,\n        homeForm.resultsHome.length\n      );\n      homeForm.tenGameAv = homeTenGameAverage;\n      homeForm.fiveGameAv = homeFiveGameAverage;\n\n      // let awayThreeGameAverage = await getPointAverage(\n      //   awayForm.last3Points,\n      //   3\n      // );\n\n      let awayFiveGameAverage = await getPointAverage(awayForm.last5Points, 5);\n\n      let awaySixGameAverage = await getPointAverage(awayForm.last6Points, 6);\n\n      let awayTenGameAverage = await getPointAverage(awayForm.last10Points, 10);\n\n      awayForm.awayPPGAv = await getPointAverage(\n        awayForm.awayPPGame,\n        awayForm.resultsAway.length\n      );\n      awayForm.tenGameAv = awayTenGameAverage;\n      awayForm.fiveGameAv = awayFiveGameAverage;\n\n      let paid;\n      if (userDetail) {\n        paid = await checkUserPaidStatus(userDetail.uid);\n      } else {\n        paid = false;\n      }\n\n      async function getPointsFromGames(formArr) {\n        const pairings = {\n          W: 3,\n          D: 1,\n          L: 0,\n        };\n        let newArr = [];\n        let arrayOfIndividualPoints = [];\n        let sum = 0;\n\n        for (let i = 0; i < formArr.length; i++) {\n          sum = sum + pairings[formArr[i]];\n          newArr.push(sum);\n          arrayOfIndividualPoints.push(pairings[formArr[i]]);\n        }\n        return [newArr, arrayOfIndividualPoints];\n      }\n\n      async function getLastGameResult(lastGame) {\n        let text;\n        switch (true) {\n          case lastGame === \"L\":\n            text = \"Lost\";\n            break;\n          case lastGame === \"D\":\n            text = \"Drew\";\n            break;\n          case lastGame === \"W\":\n            text = \"Won\";\n            break;\n          default:\n            break;\n        }\n        return text;\n      }\n\n      let homeFormTrend = [\n        homeFiveGameAverage.toFixed(2),\n        homeTenGameAverage.toFixed(2),\n      ];\n\n      let awayFormTrend = [\n        awayFiveGameAverage.toFixed(2),\n        awayTenGameAverage.toFixed(2),\n      ];\n\n      let formTextStringHome;\n      let formTextStringAway;\n\n      // if (displayBool === true && gameStats.home[2].LeagueOrAll === \"League\") {\n      //   console.log(1)\n      console.log(game)\n      formTextStringHome = await GenerateFormSummary(\n        homeForm,\n        homeForm.tenGameAv,\n        homeForm.fiveGameAv\n      );\n      formTextStringAway = await GenerateFormSummary(\n        awayForm,\n        awayForm.tenGameAv,\n        awayForm.fiveGameAv\n      );\n      // } else {\n      //   console.log(2)\n      //   formTextStringHome = \"\";\n      //   formTextStringAway = \"\";\n      // }\n\n      let favouriteRecordHome, favouriteRecordAway;\n      if (\n        homeForm.underdogCount &&\n        awayForm.underdogCount &&\n        homeForm.favouriteCount &&\n        awayForm.favouriteCount\n      ) {\n        favouriteRecordHome =\n          game.homeOdds < game.awayOdds || game.homeOdds === game.awayOdds\n            ? `${homeForm.teamName} have been favourites ${homeForm.favouriteCount\n            } times. Of these games, they have Won: ${homeForm.oddsReliabilityWin.toFixed(\n              0\n            )}%, Drawn:  ${homeForm.oddsReliabilityDraw.toFixed(\n              0\n            )}%, Lost:  ${homeForm.oddsReliabilityLose.toFixed(0)}%`\n            : `${homeForm.teamName} have been underdogs ${homeForm.underdogCount\n            } times. Of these games, they have Won: ${homeForm.oddsReliabilityWinAsUnderdog.toFixed(\n              0\n            )}%, Drawn:  ${homeForm.oddsReliabilityDrawAsUnderdog.toFixed(\n              0\n            )}%, Lost:  ${homeForm.oddsReliabilityLoseAsUnderdog.toFixed(\n              0\n            )}%`;\n        favouriteRecordAway =\n          game.homeOdds > game.awayOdds || game.homeOdds === game.awayOdds\n            ? `${awayForm.teamName} have been favourites ${awayForm.favouriteCount\n            } times. Of these games, they have Won: ${awayForm.oddsReliabilityWin.toFixed(\n              0\n            )}%, Drawn:  ${awayForm.oddsReliabilityDraw.toFixed(\n              0\n            )}%, Lost:  ${awayForm.oddsReliabilityLose.toFixed(0)}%`\n            : `${awayForm.teamName} have been underdogs ${awayForm.underdogCount\n            } times. Of these games, they have Won: ${awayForm.oddsReliabilityWinAsUnderdog.toFixed(\n              0\n            )}%, Drawn:  ${awayForm.oddsReliabilityDrawAsUnderdog.toFixed(\n              0\n            )}%, Lost:  ${awayForm.oddsReliabilityLoseAsUnderdog.toFixed(\n              0\n            )}%`;\n      } else if (\n        !homeForm.favouriteCount &&\n        awayForm.favouriteCount &&\n        !homeForm.underdogCount &&\n        awayForm.underdogCount\n      ) {\n        favouriteRecordHome =\n          \"No previous fixtures match the profile of this game.\";\n        favouriteRecordAway =\n          game.homeOdds > game.awayOdds || game.homeOdds === game.awayOdds\n            ? `${awayForm.teamName} have been favourites ${awayForm.favouriteCount\n            } times. Of these games, they have Won: ${awayForm.oddsReliabilityWin.toFixed(\n              0\n            )}%, Drawn:  ${awayForm.oddsReliabilityDraw.toFixed(\n              0\n            )}%, Lost:  ${awayForm.oddsReliabilityLose.toFixed(0)}%`\n            : `${awayForm.teamName} have been underdogs ${awayForm.underdogCount\n            } times. Of these games, they have Won: ${awayForm.oddsReliabilityWinAsUnderdog.toFixed(\n              0\n            )}%, Drawn:  ${awayForm.oddsReliabilityDrawAsUnderdog.toFixed(\n              0\n            )}%, Lost:  ${awayForm.oddsReliabilityLoseAsUnderdog.toFixed(\n              0\n            )}%`;\n      } else if (homeForm.oddsReliabilityWin && !awayForm.oddsReliabilityWin) {\n        favouriteRecordHome =\n          game.homeOdds < game.awayOdds || game.homeOdds === game.awayOdds\n            ? `${homeForm.teamName} have been favourites ${homeForm.favouriteCount\n            } times. Of these games, they have Won: ${homeForm.oddsReliabilityWin.toFixed(\n              0\n            )}%, Drawn:  ${homeForm.oddsReliabilityDraw.toFixed(\n              0\n            )}%, Lost:  ${homeForm.oddsReliabilityLose.toFixed(0)}%`\n            : `${homeForm.teamName} have been underdogs ${homeForm.underdogCount\n            } times. Of these games, they have Won: ${homeForm.oddsReliabilityWinAsUnderdog.toFixed(\n              0\n            )}%, Drawn:  ${homeForm.oddsReliabilityDrawAsUnderdog.toFixed(\n              0\n            )}%, Lost:  ${homeForm.oddsReliabilityLoseAsUnderdog.toFixed(\n              0\n            )}%`;\n        favouriteRecordAway =\n          \"No previous fixtures match the profile of this game.\";\n      } else if (!homeForm.oddsReliabilityWin && !awayForm.oddsReliabilityWin) {\n        favouriteRecordHome =\n          \"No previous fixtures match the profile of this game.\";\n        favouriteRecordAway =\n          \"No previous fixtures match the profile of this game.\";\n      }\n\n      // let homeAttackStrength = await getAttackStrength(\n      //   homeForm.ScoredOverall / 10\n      // );\n\n      const attackingMetricsHome = {\n        // averagePossession: homeForm.AveragePossessionOverall,\n        \"Average Dangerous Attacks\": homeForm.AverageDangerousAttacksOverall,\n        \"Average Shots\": homeForm.AverageShots,\n        \"Average Shots On Target\": homeForm.AverageShotsOnTargetOverall,\n        \"Average Expected Goals\": homeForm.XGOverall,\n        \"Recent XG\": homeForm.XGlast5 ? homeForm.XGlast5 : homeForm.XGOverall,\n        \"Average Goals\":\n          homeForm.averageScoredLeague !== undefined &&\n            homeForm.averageScoredLeague !== null\n            ? homeForm.averageScoredLeague\n            : homeForm.ScoredOverall / 10,\n      };\n      const attackingMetricsAway = {\n        // averagePossession: awayForm.AveragePossessionOverall,\n        \"Average Dangerous Attacks\": awayForm.AverageDangerousAttacksOverall,\n        \"Average Shots\": awayForm.AverageShots,\n        \"Average Shots On Target\": awayForm.AverageShotsOnTargetOverall,\n        \"Average Expected Goals\": awayForm.XGOverall,\n        \"Recent XG\": awayForm.XGlast5 ? awayForm.XGlast5 : awayForm.XGOverall,\n        \"Average Goals\":\n          awayForm.averageScoredLeague !== undefined &&\n            awayForm.averageScoredLeague !== null\n            ? awayForm.averageScoredLeague\n            : awayForm.ScoredOverall / 10,\n      };\n\n      const defensiveMetricsHome = {\n        \"Clean Sheet Percentage\": 100 - homeForm.CleanSheetPercentage,\n        \"Average XG Against\": homeForm.XGAgainstAvgOverall,\n        \"Recent XG Against\": homeForm.XGAgainstlast5\n          ? homeForm.XGAgainstlast5\n          : homeForm.XGAgainstAvgOverall,\n        \"Average Goals Against\":\n          homeForm.averageConceededLeague !== undefined &&\n            homeForm.averageConceededLeague !== null\n            ? homeForm.averageConceededLeague\n            : homeForm.ConcededOverall / 10,\n      };\n\n      const defensiveMetricsAway = {\n        \"Clean Sheet Percentage\": 100 - awayForm.CleanSheetPercentage,\n        \"Average XG Against\": awayForm.XGAgainstAvgOverall,\n        \"Recent XG Against\": awayForm.XGAgainstlast5\n          ? awayForm.XGAgainstlast5\n          : awayForm.XGAgainstAvgOverall,\n        \"Average Goals Against\":\n          awayForm.averageConceededLeague !== undefined &&\n            awayForm.averageConceededLeague !== null\n            ? awayForm.averageConceededLeague\n            : awayForm.ConcededOverall / 10,\n      };\n\n\n\n      let [formPointsHome, testArrayHome] = await getPointsFromGames(\n        gameStats.home[2].WDLRecord\n      );\n      let [formPointsAway, testArrayAway] = await getPointsFromGames(\n        gameStats.away[2].WDLRecord\n      );\n\n      let rollingGoalDiffHome = [\n        (gameStats.home[0].ScoredOverall - gameStats.home[0].ConcededOverall) /\n        10,\n        (gameStats.home[1].ScoredOverall - gameStats.home[1].ConcededOverall) /\n        6,\n        (gameStats.home[2].ScoredOverall - gameStats.home[2].ConcededOverall) /\n        5,\n      ];\n\n      let rollingGoalDiffAway = [\n        (gameStats.away[0].ScoredOverall - gameStats.away[0].ConcededOverall) /\n        10,\n        (gameStats.away[1].ScoredOverall - gameStats.away[1].ConcededOverall) /\n        6,\n        (gameStats.away[2].ScoredOverall - gameStats.away[2].ConcededOverall) /\n        5,\n      ];\n\n      const formDataMatch = [];\n\n      formDataMatch.push({\n        btts: game.btts_potential,\n      });\n\n      const formDataHome = [];\n\n      formDataHome.push({\n        name: game.homeTeam,\n        Last5: gameStats.home[2].LastFiveForm,\n        LeagueOrAll: gameStats.home[2].LeagueOrAll,\n        AverageGoals: homeForm.ScoredOverall / 10,\n        AverageConceeded: homeForm.ConcededOverall / 10,\n        AverageXG: homeForm.XGOverall,\n        AverageXGConceded: homeForm.XGAgainstAvgOverall,\n        AveragePossession: homeForm.AveragePossessionOverall,\n        AverageShotsOnTarget: homeForm.AverageShotsOnTargetOverall,\n        AverageDangerousAttacks: homeForm.AverageDangerousAttacksOverall,\n        homeOrAway: \"Home\",\n        leaguePosition: homeForm.LeaguePosition,\n        Last5PPG: homeForm.PPG,\n        SeasonPPG: homeForm.SeasonPPG,\n        formRun: homeForm.formRun,\n        goalDifference: homeForm.goalDifference,\n        goalDifferenceHomeOrAway: homeForm.goalDifferenceHomeOrAway,\n        CardsTotal: homeForm.CardsTotal || \"-\",\n        CornersAverage: homeForm.AverageCorners || \"-\",\n        FormTextStringHome: formTextStringHome,\n        FavouriteRecord:\n          favouriteRecordHome + `. ${homeForm.reliabilityString}`,\n        BTTSArray: bttsArrayHome,\n        Results: homeForm.resultsAll,\n        ResultsHorA: homeForm.resultsHome.reverse(),\n        XGSwing: homeForm.XGChangeRecently,\n        styleOfPlayOverall: homeForm.styleOfPlayOverall,\n        styleOfPlayHome: homeForm.styleOfPlayHome,\n      });\n\n      const formDataAway = [];\n\n      formDataAway.push({\n        name: game.awayTeam,\n        Last5: gameStats.away[2].LastFiveForm,\n        LeagueOrAll: gameStats.away[2].LeagueOrAll,\n        AverageGoals: awayForm.ScoredOverall / 10,\n        AverageConceeded: awayForm.ConcededOverall / 10,\n        AverageXG: awayForm.XGOverall,\n        AverageXGConceded: awayForm.XGAgainstAvgOverall,\n        AveragePossession: awayForm.AveragePossessionOverall,\n        AverageShotsOnTarget: awayForm.AverageShotsOnTargetOverall,\n        AverageDangerousAttacks: awayForm.AverageDangerousAttacksOverall,\n        homeOrAway: \"Away\",\n        leaguePosition: awayForm.LeaguePosition,\n        Last5PPG: awayForm.PPG,\n        SeasonPPG: awayForm.SeasonPPG,\n        formRun: awayForm.formRun,\n        goalDifference: awayForm.goalDifference,\n        goalDifferenceHomeOrAway: awayForm.goalDifferenceHomeOrAway,\n        CardsTotal: awayForm.CardsTotal || \"-\",\n        CornersAverage: awayForm.AverageCorners || \"-\",\n        FormTextStringAway: formTextStringAway,\n        FavouriteRecord:\n          favouriteRecordAway + `. ${awayForm.reliabilityString}`,\n        BTTSArray: bttsArrayAway,\n        Results: awayForm.resultsAll,\n        ResultsHorA: awayForm.resultsAway.reverse(),\n        XGSwing: awayForm.XGChangeRecently,\n        styleOfPlayOverall: awayForm.styleOfPlayOverall,\n        styleOfPlayAway: awayForm.styleOfPlayAway,\n      });\n\n      ReactDOM.render(\n        <div style={style}>\n          <div className=\"H2HStats\" id={`H2HStats${game.id}`}></div>\n          <div className=\"TrendsHome\" id={`TrendsHome${game.id}`}></div>\n          <div className=\"TrendsAway\" id={`TrendsAway${game.id}`}></div>\n        </div>,\n        document.getElementById(\"history\" + homeTeam)\n      );\n\n\n\n      // function StatsHome() {\n      //   return (\n      //     <div className=\"flex-childOne\">\n      //       <ul style={style}>\n      //         <Stats\n      //           style={style}\n      //           homeOrAway=\"Home\"\n      //           gameCount={divider}\n      //           key={formDataHome[0].name}\n      //           last5={formDataHome[0].Last5}\n      //           homeOrAwayResults={gameArrayHomeTeamHomeGames}\n      //           LeagueOrAll={formDataHome[0].LeagueOrAll}\n      //           className={\"KeyStatsHome\"}\n      //           name={formDataHome[0].name}\n      //           goals={homeForm.avgScored}\n      //           conceeded={homeForm.avgConceeded}\n      //           XG={homeForm.XGOverall.toFixed(2)}\n      //           XGConceded={homeForm.XGAgainstAvgOverall.toFixed(2)}\n      //           XGSwing={homeForm.XGChangeRecently}\n      //           possession={homeForm.AveragePossessionOverall.toFixed(2)}\n      //           sot={homeForm.AverageShotsOnTargetOverall.toFixed(2)}\n      //           dangerousAttacks={\n      //             homeForm.AverageDangerousAttacksOverall !== 0\n      //               ? homeForm.AverageDangerousAttacksOverall.toFixed(2)\n      //               : homeForm.AverageDangerousAttacks\n      //           }\n      //           leaguePosition={\n      //             formDataHome[0].leaguePosition !== undefined &&\n      //             formDataHome[0].leaguePosition !== \"undefined\"\n      //               ? formDataHome[0].leaguePosition\n      //               : 0\n      //           }\n      //           rawPosition={\n      //             game.homeRawPosition !== undefined &&\n      //             game.homeRawPosition !== \"undefined\"\n      //               ? game.homeRawPosition\n      //               : 0\n      //           }\n      //           homeOrAwayLeaguePosition={\n      //             game.homeTeamHomePosition !== undefined &&\n      //             game.homeTeamHomePosition !== \"undefined\"\n      //               ? game.homeTeamHomePosition\n      //               : 0\n      //           }\n      //           winPercentage={homeForm.homePPGAv ? homeForm.homePPGAv : \"N/A\"}\n      //           lossPercentage={\n      //             game.homeTeamLossPercentage\n      //               ? game.homeTeamLossPercentage\n      //               : \"N/A\"\n      //           }\n      //           drawPercentage={\n      //             game.homeTeamDrawPercentage\n      //               ? game.homeTeamDrawPercentage\n      //               : \"N/A\"\n      //           }\n      //           ppg={formDataHome[0].SeasonPPG}\n      //           formTrend={[\n      //             homeTenGameAverage.toFixed(2),\n      //             homeSixGameAverage.toFixed(2),\n      //             homeFiveGameAverage.toFixed(2),\n      //           ]}\n      //           formRun={homeForm.resultsAll.reverse()}\n      //           goalDifference={formDataHome[0].goalDifference}\n      //           goalDifferenceHomeOrAway={\n      //             formDataHome[0].goalDifferenceHomeOrAway\n      //           }\n      //           BttsPercentage={formDataHome[0].BttsPercentage}\n      //           BttsPercentageHomeOrAway={\n      //             formDataHome[0].BttsPercentageHomeOrAway\n      //           }\n      //           BTTSArray={formDataHome[0].BTTSArray}\n      //           Results={formDataHome[0].Results}\n      //           ResultsHorA={formDataHome[0].ResultsHorA}\n      //           CardsTotal={formDataHome[0].CardsTotal}\n      //           CornersAverage={homeForm.AverageCorners}\n      //           ScoredBothHalvesPercentage={\n      //             formDataHome[0].ScoredBothHalvesPercentage\n      //           }\n      //           FormTextString={formDataHome[0].FormTextStringHome}\n      //           FavouriteRecord={formDataHome[0].FavouriteRecord}\n      //           StyleOfPlay={formDataHome[0].styleOfPlayOverall}\n      //           StyleOfPlayHomeOrAway={formDataHome[0].styleOfPlayHome}\n      //         />\n      //       </ul>\n      //     </div>\n      //   );\n      // }\n\n      // function StatsAway() {\n      //   return (\n      //     <div className=\"flex-childTwo\">\n      //       <ul style={style}>\n      //         <Stats\n      //           style={style}\n      //           homeOrAway=\"Away\"\n      //           gameCount={divider}\n      //           key={formDataAway[0].name}\n      //           last5={formDataAway[0].Last5}\n      //           homeOrAwayResults={gameArrayAwayTeamAwayGames}\n      //           LeagueOrAll={formDataAway[0].LeagueOrAll}\n      //           className={\"KeyStatsAway\"}\n      //           classNameTwo={\"FormStatsAway\"}\n      //           name={formDataAway[0].name}\n      //           goals={awayForm.avgScored}\n      //           conceeded={awayForm.avgConceeded}\n      //           XG={awayForm.XGOverall.toFixed(2)}\n      //           XGConceded={awayForm.XGAgainstAvgOverall.toFixed(2)}\n      //           XGSwing={awayForm.XGChangeRecently}\n      //           //todo add goal diff and btts percentages\n      //           possession={awayForm.AveragePossessionOverall.toFixed(2)}\n      //           rawPosition={game.awayRawPosition ? game.awayRawPosition : 0}\n      //           sot={awayForm.AverageShotsOnTargetOverall.toFixed(2)}\n      //           dangerousAttacks={\n      //             awayForm.AverageDangerousAttacksOverall !== 0\n      //               ? awayForm.AverageDangerousAttacksOverall.toFixed(2)\n      //               : awayForm.AverageDangerousAttacks\n      //           }\n      //           leaguePosition={\n      //             formDataAway[0].leaguePosition !== undefined &&\n      //             formDataAway[0].leaguePosition !== \"undefined\"\n      //               ? formDataAway[0].leaguePosition\n      //               : 0\n      //           }\n      //           homeOrAwayLeaguePosition={\n      //             game.awayTeamAwayPosition !== undefined &&\n      //             game.awayTeamAwayPosition !== \"undefinedundefined\"\n      //               ? game.awayTeamAwayPosition\n      //               : 0\n      //           }\n      //           winPercentage={awayForm.awayPPGAv ? awayForm.awayPPGAv : \"N/A\"}\n      //           lossPercentage={\n      //             game.awayTeamLossPercentage\n      //               ? game.awayTeamLossPercentage\n      //               : \"N/A\"\n      //           }\n      //           drawPercentage={\n      //             game.awayTeamDrawPercentage\n      //               ? game.awayTeamDrawPercentage\n      //               : \"N/A\"\n      //           }\n      //           ppg={formDataAway[0].SeasonPPG}\n      //           formTrend={[\n      //             awayTenGameAverage.toFixed(2),\n      //             awaySixGameAverage.toFixed(2),\n      //             awayFiveGameAverage.toFixed(2),\n      //           ]}\n      //           formRun={awayForm.resultsAll.reverse()}\n      //           goalDifference={formDataAway[0].goalDifference}\n      //           goalDifferenceHomeOrAway={\n      //             formDataAway[0].goalDifferenceHomeOrAway\n      //           }\n      //           BttsPercentage={formDataAway[0].BttsPercentage}\n      //           BttsPercentageHomeOrAway={\n      //             formDataAway[0].BttsPercentageHomeOrAway\n      //           }\n      //           BTTSArray={formDataAway[0].BTTSArray}\n      //           Results={formDataAway[0].Results}\n      //           ResultsHorA={formDataAway[0].ResultsHorA}\n      //           CardsTotal={formDataAway[0].CardsTotal}\n      //           CornersAverage={awayForm.AverageCorners}\n      //           ScoredBothHalvesPercentage={\n      //             formDataAway[0].ScoredBothHalvesPercentage\n      //           }\n      //           FormTextString={formDataAway[0].FormTextStringAway}\n      //           FavouriteRecord={formDataAway[0].FavouriteRecord}\n      //           StyleOfPlay={formDataAway[0].styleOfPlayOverall}\n      //           StyleOfPlayHomeOrAway={formDataAway[0].styleOfPlayAway}\n      //         />\n      //       </ul>\n      //     </div>\n      //   );\n      // }\n\n      // let id, team1, team2, timestamp, homeGoals, awayGoals;\n\n      // async function getGameIdByHomeTeam(games, homeTeamName) {\n      //   const matchingGames = games.filter((game) =>\n      //     game.homeTeam.includes(homeTeamName)\n      //   );\n      //   if (matchingGames.length > 0) {\n      //     return matchingGames[0];\n      //   } else {\n      //     return null; // or any other value you prefer to return if no match is found\n      //   }\n      // }\n\n      // const matchingGame = await getGameIdByHomeTeam(\n      //   arrayOfGames,\n      //   game.homeTeam\n      // );\n\n      // if (matchingGame) {\n      //   id = matchingGame.id.toString();\n      //   team1 = matchingGame.homeTeam;\n      //   team2 = matchingGame.awayTeam;\n      //   timestamp = matchingGame.time;\n      //   homeGoals = matchingGame.homeGoals;\n      //   awayGoals = matchingGame.awayGoals;\n      // } else {\n      //   id = \"0\";\n      //   team1 = \"N/A\";\n      //   team2 = \"N/A\";\n      //   timestamp = 1;\n      //   homeGoals = \"-\";\n      //   awayGoals = \"-\";\n      // }\n\n      // if (homeForm.completeData === true && game.completeData === true) {\n      //   ReactDOM.render(\n      //     <>\n      //       <div style={style}>\n      //         <Collapsable\n      //           buttonText={\"Lineups & match action\"}\n      //           classNameButton=\"Lineups\"\n      //           element={\n      //             <>\n      //               <SofaLineupsWidget\n      //                 id={id}\n      //                 team1={team1}\n      //                 team2={team2}\n      //                 time={timestamp}\n      //                 homeGoals={homeGoals}\n      //                 awayGoals={awayGoals}\n      //               ></SofaLineupsWidget>\n      //             </>\n      //           }\n      //         />\n      //         <div style={style}>\n      //           <Div className=\"MatchTime\" text={`Kick off: ${time} GMT`}></Div>\n      //         </div>\n      //         <div id=\"AIInsightsContainer\" className=\"AIInsightsContainer\">\n      //         {!paid ? (\n      //           <div>Paid feature</div>\n      //         ) : (\n      //           <div></div>\n      //         )}\n      //           <Button\n      //             className=\"AIInsights\"\n      //             onClickEvent={() => generateAIInsights(game.id, homeForm, awayForm)}\n      //             text={\"Generate AI Insights\"}\n      //             disabled={!paid}\n      //           ></Button>\n      //         </div>\n      //         <div className=\"flex-container\">\n      //           <StatsHome />\n      //           <StatsAway />\n      //         </div>\n      //         <div className=\"Chart\" id={`Chart${game.id}`} style={style}>\n      //           <RadarChart\n      //             title=\"XG Tipping Strength Ratings - All Games\"\n      //             data={[\n      //               homeAttackStrength,\n      //               homeDefenceStrength,\n      //               homePossessionStrength,\n      //               homeXGForStrength,\n      //               homeXGAgainstStrength,\n      //               homeDirectnessStrength,\n      //               homeAccuracyOverallStrength,\n      //             ]}\n      //             data2={[\n      //               awayAttackStrength,\n      //               awayDefenceStrength,\n      //               awayPossessionStrength,\n      //               awayXGForStrength,\n      //               awayXGAgainstStrength,\n      //               awayDirectnessStrength,\n      //               awayAccuracyOverallStrength,\n      //             ]}\n      //             team1={game.homeTeam}\n      //             team2={game.awayTeam}\n      //           ></RadarChart>\n      //           <RadarChart\n      //             title=\"XG Tipping Strength Ratings - Last 5 games\"\n      //             data={[\n      //               homeAttackStrengthLast5,\n      //               homeDefenceStrengthLast5,\n      //               homePossessionStrengthLast5,\n      //               homeXGForStrengthLast5,\n      //               homeXGAgainstStrengthLast5,\n      //               homeDirectnessStrengthLast5,\n      //               homeAccuracyOverallStrengthLast5,\n      //             ]}\n      //             data2={[\n      //               awayAttackStrengthLast5,\n      //               awayDefenceStrengthLast5,\n      //               awayPossessionStrengthLast5,\n      //               awayXGForStrengthLast5,\n      //               awayXGAgainstStrengthLast5,\n      //               awayDirectnessStrengthLast5,\n      //               awayAccuracyOverallStrengthLast5,\n      //             ]}\n      //             team1={game.homeTeam}\n      //             team2={game.awayTeam}\n      //           ></RadarChart>\n      //           <RadarChart\n      //             title=\"XG Tipping Strength Ratings - Home/Away Games Only\"\n      //             data={[\n      //               homeOnlyAttackStrength,\n      //               homeOnlyDefenceStrength,\n      //               homeOnlyPossessionStrength,\n      //               homeOnlyXGForStrength,\n      //               homeOnlyXGAgainstStrength,\n      //               homeOnlyDirectnessStrength,\n      //               homeOnlyAccuracyOverallStrength,\n      //             ]}\n      //             data2={[\n      //               awayOnlyAttackStrength,\n      //               awayOnlyDefenceStrength,\n      //               awayOnlyPossessionStrength,\n      //               awayOnlyXGForStrength,\n      //               awayOnlyXGAgainstStrength,\n      //               awayOnlyDirectnessStrength,\n      //               awayOnlyAccuracyOverallStrength,\n      //             ]}\n      //             team1={game.homeTeam}\n      //             team2={game.awayTeam}\n      //           ></RadarChart>\n      //           <DoughnutChart\n      //             data={[homeForm.XGRating, awayForm.XGRating]}\n      //             homeTeam={game.homeTeam}\n      //             awayTeam={game.awayTeam}\n      //           ></DoughnutChart>\n      //           <BarChartTwo\n      //             text=\"Recent XG Differential Swing\"\n      //             homeTeam={homeForm.teamName}\n      //             awayTeam={awayForm.teamName}\n      //             data1={[homeForm.XGChangeRecently.toFixed(2)]}\n      //             data2={[awayForm.XGChangeRecently.toFixed(2)]}\n      //           ></BarChartTwo>\n      //           <BarChart\n      //             text=\"H2H - Home Team | Away Team\"\n      //             data1={[\n      //               homeForm.avgScored * 2,\n      //               awayForm.avgConceeded * 2,\n      //               homeForm.avPointsAll * 3,\n      //               homeForm.XGOverall * 2,\n      //               awayForm.XGAgainstAvgOverall * 2,\n      //               homeForm.AverageShotsOnTargetOverall,\n      //               homeForm.AverageDangerousAttacksOverall !== 0\n      //                 ? homeForm.AverageDangerousAttacksOverall / 7.5\n      //                 : homeForm.AverageDangerousAttacks / 7.5,\n      //               homeForm.AveragePossessionOverall / 7.5,\n      //               homeForm.goalDifferenceHomeOrAway / 10,\n      //               homeForm.AverageCorners,\n      //             ]}\n      //             data2={[\n      //               awayForm.avgScored * 2,\n      //               homeForm.avgConceeded * 2,\n      //               awayForm.avPointsAll * 3,\n      //               awayForm.XGOverall * 2,\n      //               homeForm.XGAgainstAvgOverall * 2,\n      //               awayForm.AverageShotsOnTargetOverall,\n      //               awayForm.AverageDangerousAttacksOverall !== 0\n      //                 ? awayForm.AverageDangerousAttacksOverall / 7.5\n      //                 : awayForm.AverageDangerousAttacks / 7.5,\n      //               awayForm.AveragePossessionOverall / 7.5,\n      //               awayForm.goalDifferenceHomeOrAway / 10,\n      //               awayForm.AverageCorners,\n      //             ]}\n      //           ></BarChart>\n      //           <Chart\n      //             height={3}\n      //             depth={0}\n      //             data1={formArrayHome}\n      //             data2={formArrayAway}\n      //             team1={game.homeTeam}\n      //             team2={game.awayTeam}\n      //             type={chartType}\n      //             tension={0}\n      //           ></Chart>\n      //           <MultilineChart\n      //             height={\n      //               Math.max(\n      //                 rollingGoalDiffTotalHome[\n      //                   rollingGoalDiffTotalHome.length - 1\n      //                 ],\n      //                 rollingGoalDiffTotalAway[\n      //                   rollingGoalDiffTotalAway.length - 1\n      //                 ]\n      //               ) > 2\n      //                 ? Math.max(\n      //                     rollingGoalDiffTotalHome[\n      //                       rollingGoalDiffTotalHome.length - 1\n      //                     ],\n      //                     rollingGoalDiffTotalAway[\n      //                       rollingGoalDiffTotalAway.length - 1\n      //                     ]\n      //                   )\n      //                 : 2\n      //             }\n      //             depth={\n      //               Math.min(\n      //                 rollingGoalDiffTotalHome[\n      //                   rollingGoalDiffTotalHome.length - 1\n      //                 ],\n      //                 rollingGoalDiffTotalAway[\n      //                   rollingGoalDiffTotalAway.length - 1\n      //                 ]\n      //               ) < -2\n      //                 ? Math.min(\n      //                     rollingGoalDiffTotalHome[\n      //                       rollingGoalDiffTotalHome.length - 1\n      //                     ],\n      //                     rollingGoalDiffTotalAway[\n      //                       rollingGoalDiffTotalAway.length - 1\n      //                     ]\n      //                   )\n      //                 : -2\n      //             }\n      //             data1={rollingGoalDiffTotalHome}\n      //             data2={rollingGoalDiffTotalAway}\n      //             data3={rollingXGDiffTotalHome}\n      //             data4={rollingXGDiffTotalAway}\n      //             team1={game.homeTeam}\n      //             team2={game.awayTeam}\n      //             type={\"Goal/XG difference over time\"}\n      //             tension={0.5}\n      //           ></MultilineChart>\n      //         </div>\n      //         <Div\n      //           text={`Last league games (most recent first)`}\n      //           className={\"LastGameHeader\"}\n      //         ></Div>\n      //         <div className=\"flex-container\">\n      //           <div className=\"flex-childOneOverviewSmall\">{overviewHome}</div>\n      //           <div className=\"flex-childTwoOverviewSmall\">{overviewAway}</div>\n      //         </div>\n      //         <h2>Results from similar profile games</h2>\n      //         <span>(Games where each team had similar odds)</span>\n      //         <h3>Most recent first</h3>\n      //         <div className=\"flex-container-similar\">\n      //           <div className=\"flex-childOneOverviewSmall\">\n      //             {similarGamesHome}\n      //           </div>\n      //           <div className=\"flex-childTwoOverviewSmall\">\n      //             {similarGamesAway}\n      //           </div>\n      //         </div>\n      //         <input type=\"hidden\" name=\"IL_IN_ARTICLE\" />\n      //         <Button\n      //           className=\"MoreStats\"\n      //           onClickEvent={() =>\n      //             getTeamStats(\n      //               game.id,\n      //               game.homeTeam,\n      //               game.awayTeam,\n      //               formDataHome[0].BttsPercentage,\n      //               formDataHome[0].BttsPercentageHomeOrAway,\n      //               formDataAway[0].BttsPercentage,\n      //               formDataAway[0].BttsPercentageHomeOrAway\n      //             )\n      //           }\n      //           text={\"Fixture trends + AI Preview\"}\n      //         ></Button>\n      //       </div>\n      //     </>,\n      //     document.getElementById(\"stats\" + homeTeam)\n      //   );\n      // } else if (\n      //   homeForm.completeData === false ||\n      //   game.completeData === false\n      // ) {\n      //   ReactDOM.render(\n      //     <>\n      //       <div style={style}>\n      //         <Collapsable\n      //           buttonText={\"Lineups & match action\"}\n      //           classNameButton=\"Lineups\"\n      //           element={\n      //             <>\n      //               <SofaLineupsWidget\n      //                 id={id}\n      //                 team1={team1}\n      //                 team2={team2}\n      //                 time={timestamp}\n      //                 homeGoals={homeGoals}\n      //                 awayGoals={awayGoals}\n      //               ></SofaLineupsWidget>\n      //             </>\n      //           }\n      //         />\n      //         <div className=\"Chart\" id={`Chart${game.id}`} style={style}>\n      //           <RadarChart\n      //             title=\"XG Tipping Strength Ratings - All Games\"\n      //             data={[\n      //               homeAttackStrength,\n      //               homeDefenceStrength,\n      //               homePossessionStrength,\n      //               homeXGForStrength,\n      //               homeXGAgainstStrength,\n      //               homeDirectnessStrength,\n      //               homeAccuracyOverallStrength,\n      //             ]}\n      //             data2={[\n      //               awayAttackStrength,\n      //               awayDefenceStrength,\n      //               awayPossessionStrength,\n      //               awayXGForStrength,\n      //               awayXGAgainstStrength,\n      //               awayDirectnessStrength,\n      //               awayAccuracyOverallStrength,\n      //             ]}\n      //             team1={game.homeTeam}\n      //             team2={game.awayTeam}\n      //           ></RadarChart>\n      //         </div>\n      //         <div style={style}>\n      //           <Div className=\"MatchTime\" text={`Kick off: ${time} GMT`}></Div>\n      //           {/* <Div\n      //             text={`Last league games (most recent first)`}\n      //             className={\"LastGameHeader\"}\n      //           ></Div> */}\n      //         </div>\n      //         {/* <div className=\"flex-container\">\n      //           <div className=\"flex-childOneOverviewSmall\">{overviewHome}</div>\n      //           <div className=\"flex-childTwoOverviewSmall\">{overviewAway}</div>\n      //         </div>\n      //         <div className=\"flex-container\">\n      //           <StatsHome />\n      //           <StatsAway />\n      //         </div> */}\n      //         <h2>Results from similar profile games</h2>\n      //         <span>(Games where each team had similar odds)</span>\n      //         <h3>Most recent first</h3>\n      //         <div className=\"flex-container-similar\">\n      //           <div className=\"flex-childOneOverviewSmall\">\n      //             {similarGamesHome}\n      //           </div>\n      //           <div className=\"flex-childTwoOverviewSmall\">\n      //             {similarGamesAway}\n      //           </div>\n      //         </div>\n      //         <input type=\"hidden\" name=\"IL_IN_ARTICLE\" />\n      //         <Button\n      //           className=\"MoreStats\"\n      //           onClickEvent={() =>\n      //             getTeamStats(\n      //               game.id,\n      //               game.homeTeam,\n      //               game.awayTeam,\n      //               formDataHome[0].BttsPercentage,\n      //               formDataHome[0].BttsPercentageHomeOrAway,\n      //               formDataAway[0].BttsPercentage,\n      //               formDataAway[0].BttsPercentageHomeOrAway\n      //             )\n      //           }\n      //           text={\"Fixture trends + AI Preview\"}\n      //         ></Button>\n      //       </div>\n      //     </>,\n      //     document.getElementById(\"stats\" + homeTeam)\n      //   );\n      // } else {\n      //   ReactDOM.render(\n      //     <>\n      //       <div style={style}>\n      //         <Collapsable\n      //           buttonText={\"Lineups & match action\"}\n      //           classNameButton=\"Lineups\"\n      //           element={\n      //             <>\n      //               <SofaLineupsWidget\n      //                 id={id}\n      //                 team1={team1}\n      //                 team2={team2}\n      //                 time={timestamp}\n      //                 homeGoals={homeGoals}\n      //                 awayGoals={awayGoals}\n      //               ></SofaLineupsWidget>\n      //             </>\n      //           }\n      //         />\n      //         <div style={style}>\n      //           <Div className=\"MatchTime\" text={`Kick off: ${time} GMT`}></Div>\n      //         </div>\n      //         <div className=\"flex-container\">\n      //           <StatsHome />\n      //           <StatsAway />\n      //         </div>\n      //         <Div\n      //           text={`AI Preview, last league games & h2h records (paid feature only)`}\n      //           className={\"LastGameHeader\"}\n      //         ></Div>\n      //       </div>\n      //     </>,\n      //     document.getElementById(\"stats\" + homeTeam)\n      //   );\n      // }\n    }\n\n    // ReactDOM.render(\n    //   <Button\n    //     className=\"MoreStats\"\n    //     style={style}\n    //     onClickEvent={() =>\n    //       getTeamStats(\n    //         game.id,\n    //         game.homeTeam,\n    //         game.awayTeam,\n    //         formDataHome[0].BttsPercentage,\n    //         formDataHome[0].BttsPercentageHomeOrAway,\n    //         formDataAway[0].BttsPercentage,\n    //         formDataAway[0].BttsPercentageHomeOrAway\n    //       )\n    //     }\n    //     text={\"Fixture trends\"}\n    //   ></Button>,\n    //   document.getElementById(`H2HStats${game.id}`)\n    // );\n  }\n}\n","/Users/greg/Development/Predictor/src/components/StatTable.js",[],"/Users/greg/Development/Predictor/src/logic/compareFormTrend.js",[],"/Users/greg/Development/Predictor/src/components/Carousel.js",[],"/Users/greg/Development/Predictor/src/logic/getBTTSPotential.js",[],"/Users/greg/Development/Predictor/src/components/Increment.js",[],"/Users/greg/Development/Predictor/src/components/PlayerStatsList.js",[],"/Users/greg/Development/Predictor/src/components/StreakStats.js",[],"/Users/greg/Development/Predictor/src/components/CollapsableStats.js",[],"/Users/greg/Development/Predictor/src/components/MissingPlayersList.js",[],"/Users/greg/Development/Predictor/src/components/TeamRankingsFlexView.js",[],"/Users/greg/Development/Predictor/src/components/MultitypeChart.js",["405"],"import {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n} from \"chart.js\";\nimport { Bar, Line } from \"react-chartjs-2\";\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\nconst MultiTypeChart = ({ dataArray, text, theme }) => {\n  // 1. Process the Data: Calculate the difference and labels\n  const labels = dataArray.map((_, index) => `Game ${index + 1}`); // Create labels like \"Index 1\", \"Index 2\", etc.\n  const barData = dataArray.map((item) => item[0] - item[1]); // Calculate the difference\n  let color;\n\n  if (theme === 'light') {\n    color = \"#020029\"\n  } else if (theme === 'dark') {\n    color = \"#ffffff\"\n  } else {\n    color = \"#f57701\"\n  }\n  // Create an array of colors based on the sign of the bar data\n  const backgroundColors = barData.map((value) =>\n    value >= 0 ? \"#01a501\" : \"#ae1001ff\"\n  );\n\n  // 2. Chart Data Structure:\n  const data = {\n    labels: labels,\n    datasets: [\n      {\n        type: \"bar\",\n        label: \"XG Difference\",\n        data: barData,\n        backgroundColor: backgroundColors, // Use the dynamic colors\n        borderColor: backgroundColors, // Match the border color\n        borderWidth: 0,\n      },\n    ],\n  };\n\n  // 3. Chart Options (customize as needed):\n  const options = {\n    responsive: true,\n    aspectRatio: 1.2,\n    maintainAspectRatio: true,\n    plugins: {\n      title: {\n        display: true,\n        text: text,\n        color: color,\n        font: {\n          size: 14,\n        },\n      },\n      legend: {\n        // Add this legend configuration\n        display: false, // Set display to false to hide the legend\n      },\n    },\n    scales: {\n      y: {\n        beginAtZero: true, // Start y-axis at 0\n        suggestedMin: -1.5,\n        suggestedMax: 1.5,\n        ticks: {\n          color: color,\n        }\n      },\n      x: {\n        ticks: {\n          color: color,\n        }\n      },\n    },\n  };\n\n  return <Bar data={data} options={options} className=\"BarChart\" />;\n};\n\nexport default MultiTypeChart;\n","/Users/greg/Development/Predictor/src/components/Div.js",[],"/Users/greg/Development/Predictor/src/components/SofaScore.js",["406"],"import PropTypes from \"prop-types\";\n\nconst SofaLineupsWidget = ({\n  id,\n  team1,\n  team2,\n  time,\n  homeGoals,\n  awayGoals,\n}) => {\n  console.log(team1)\n  const iframeSrc = `https://widgets.sofascore.com/embed/lineups?id=${id}&widgetTheme=light`;\n\n  let differenceInSeconds, minutes;\n  const currentTime = new Date().getTime() / 1000;\n  // Calculate the difference in seconds\n  if (time > 0) {\n    differenceInSeconds = time - currentTime;\n    minutes = Math.floor(differenceInSeconds / 60);\n  } else {\n    minutes = -99999999;\n  }\n\n  if (team1 === \"N/A\") {\n    return <h6>No lineups available for this match yet</h6>;\n  } else if (minutes > 60) {\n    return (\n      <div>\n        <h6>Predicted lineups</h6>\n        <iframe\n          id={`sofa-lineups-embed-${id}`}\n          src={iframeSrc}\n          style={{\n            height: \"786px\",\n            maxWidth: \"800px\",\n            width: \"100%\",\n            border: \"0\",\n          }}\n          scrolling=\"no\"\n          title=\"SofaScore Lineups\"\n        ></iframe>\n        <div\n          style={{ fontSize: \"12px\", fontFamily: \"Open Sans, sans-serif\" }}\n        ></div>\n      </div>\n    );\n  } else if (minutes < 60 && minutes > 0) {\n    return (\n      <div>\n        <h6>Lineups</h6>\n        <iframe\n          id={`sofa-lineups-embed-${id}`}\n          src={iframeSrc}\n          style={{\n            height: \"786px\",\n            maxWidth: \"800px\",\n            width: \"100%\",\n            border: \"0\",\n          }}\n          scrolling=\"no\"\n          title=\"SofaScore Lineups\"\n        ></iframe>\n        <div\n          style={{ fontSize: \"12px\", fontFamily: \"Open Sans, sans-serif\" }}\n        ></div>\n      </div>\n    );\n  } else if (minutes < 0) {\n    return (\n      <div>\n        <div className=\"CurrentScore\">\n          Score: {`${team1}: ${homeGoals} - ${team2}: ${awayGoals}`}\n        </div>\n        <span>Score not live updated</span>\n        <h6 className=\"AttackingMomentum\">Live attacking momentum and goals</h6>\n        <iframe\n          width=\"100%\"\n          height=\"286\"\n          src={`https://widgets.sofascore.com/embed/attackMomentum?id=${id}&widgetTheme=light`}\n          frameborder=\"0\"\n          scrolling=\"no\"\n        ></iframe>\n        <div\n          style={{ fontSize: \"12px\", fontFamily: \"Open Sans, sans-serif\" }}\n        ></div>\n        <h6>Lineups and in-play ratings</h6>\n        <iframe\n          id={`sofa-lineups-embed-${id}`}\n          src={iframeSrc}\n          style={{\n            height: \"786px\",\n            maxWidth: \"800px\",\n            width: \"100%\",\n            border: \"0\",\n          }}\n          scrolling=\"no\"\n          title=\"SofaScore Lineups\"\n        ></iframe>\n        <div\n          style={{ fontSize: \"12px\", fontFamily: \"Open Sans, sans-serif\" }}\n        ></div>\n      </div>\n    );\n  } else {\n    return <h6>{`Lineups coming in approximately ${minutes - 60} minutes`}</h6>;\n  }\n};\n\nSofaLineupsWidget.propTypes = {\n  id: PropTypes.string.isRequired,\n  team1: PropTypes.string.isRequired,\n  team2: PropTypes.string.isRequired,\n};\n\nexport default SofaLineupsWidget;\n","/Users/greg/Development/Predictor/src/components/createStatsDiv.js",["407","408"],"import { Fragment } from \"react\";\nimport { CreateBadge } from \"./createBadge\";\nimport Collapsable from \"../components/CollapsableElement\";\nimport BarChart from \"../components/Chart\";\nfunction Stats(props) {\n  const { getCollapsableProps } = props;\n  let shouldOpen = props.clicked;\n\n  function styleForm(formIndicator) {\n    let className;\n    if (formIndicator === \"W\") {\n      className = \"win\";\n    } else if (formIndicator === \"D\") {\n      className = \"draw\";\n    } else if (formIndicator === \"L\") {\n      className = \"loss\";\n    }\n    return className;\n  }\n\n  function styleBTTS(BTTSBoolean) {\n    let className;\n    if (BTTSBoolean === \"\\u2714\") {\n      className = \"BTTSTrue\";\n    } else if (BTTSBoolean === \"\\u2718\") {\n      className = \"BTTSFalse\";\n    }\n    return className;\n  }\n\n  if (props.games === \"all\") {\n    return (\n      <Fragment>\n        <ul className={props.className ? props.className : \"\"} style={props.style ? props.style : {}}>\n          <CreateBadge image={props.badge} alt=\"Team badge\" ClassName={\"ColumnBadge\"} />\n          <li className=\"FormHeader\">League results (most recent on right)</li>\n          <li key={`last5League`} className=\"last5League\">\n            <span className={styleForm(props.Results && props.Results[5] ? props.Results[5] : \"\")}>\n              {props.Results && props.Results[5] ? props.Results[5] : \"\"}\n            </span>\n            <span className={styleForm(props.Results && props.Results[4] ? props.Results[4] : \"\")}>\n              {props.Results && props.Results[4] ? props.Results[4] : \"\"}\n            </span>\n            <span className={styleForm(props.Results && props.Results[3] ? props.Results[3] : \"\")}>\n              {props.Results && props.Results[3] ? props.Results[3] : \"\"}\n            </span>\n            <span className={styleForm(props.Results && props.Results[2] ? props.Results[2] : \"\")}>\n              {props.Results && props.Results[2] ? props.Results[2] : \"\"}\n            </span>\n            <span className={styleForm(props.Results && props.Results[1] ? props.Results[1] : \"\")}>\n              {props.Results && props.Results[1] ? props.Results[1] : \"\"}\n            </span>\n            <span className={styleForm(props.Results && props.Results[0] ? props.Results[0] : \"\")}>\n              {props.Results && props.Results[0] ? props.Results[0] : \"\"}\n            </span>\n          </li>\n          <li className=\"FormHeader\">\n            {props.homeOrAway ? props.homeOrAway : \"N/A\"} form (most recent on right)\n          </li>\n          <li key={`last5${props.homeOrAwayResults ? props.homeOrAwayResults : \"default\"}`} className=\"FormHomeOrAway\">\n            <span className={styleForm(props.ResultsHorA && props.ResultsHorA[5] ? props.ResultsHorA[5] : \"\")}>\n              {props.ResultsHorA && props.ResultsHorA[5] ? props.ResultsHorA[5] : \"\"}\n            </span>\n            <span className={styleForm(props.ResultsHorA && props.ResultsHorA[4] ? props.ResultsHorA[4] : \"\")}>\n              {props.ResultsHorA && props.ResultsHorA[4] ? props.ResultsHorA[4] : \"\"}\n            </span>\n            <span className={styleForm(props.ResultsHorA && props.ResultsHorA[3] ? props.ResultsHorA[3] : \"\")}>\n              {props.ResultsHorA && props.ResultsHorA[3] ? props.ResultsHorA[3] : \"\"}\n            </span>\n            <span className={styleForm(props.ResultsHorA && props.ResultsHorA[2] ? props.ResultsHorA[2] : \"\")}>\n              {props.ResultsHorA && props.ResultsHorA[2] ? props.ResultsHorA[2] : \"\"}\n            </span>\n            <span className={styleForm(props.ResultsHorA && props.ResultsHorA[1] ? props.ResultsHorA[1] : \"\")}>\n              {props.ResultsHorA && props.ResultsHorA[1] ? props.ResultsHorA[1] : \"\"}\n            </span>\n            <span className={styleForm(props.ResultsHorA && props.ResultsHorA[0] ? props.ResultsHorA[0] : \"\")}>\n              {props.ResultsHorA && props.ResultsHorA[0] ? props.ResultsHorA[0] : \"\"}\n            </span>\n          </li>\n          <li\n            key=\"BTTSArrayHomeOrAway\"\n            className=\"BTTSArrayHomeOrAway\"\n            data-cy={props.name ? props.name + \"BTTSArrayHomeOrAway\" : \"BTTSArrayHomeOrAway\"}\n          >\n            <div className=\"BTTSResults\">{props.BTTSArray ? `BTTS` : ``}</div>\n            <span className={styleBTTS(props.BTTSArray && props.BTTSArray[5] ? props.BTTSArray[5] : \"\")}>\n              {props.BTTSArray && props.BTTSArray[5] ? props.BTTSArray[5] : \"\"}\n            </span>\n            <span className={styleBTTS(props.BTTSArray && props.BTTSArray[4] ? props.BTTSArray[4] : \"\")}>\n              {props.BTTSArray && props.BTTSArray[4] ? props.BTTSArray[4] : \"\"}\n            </span>\n            <span className={styleBTTS(props.BTTSArray && props.BTTSArray[3] ? props.BTTSArray[3] : \"\")}>\n              {props.BTTSArray && props.BTTSArray[3] ? props.BTTSArray[3] : \"\"}\n            </span>\n            <span className={styleBTTS(props.BTTSArray && props.BTTSArray[2] ? props.BTTSArray[2] : \"\")}>\n              {props.BTTSArray && props.BTTSArray[2] ? props.BTTSArray[2] : \"\"}\n            </span>\n            <span className={styleBTTS(props.BTTSArray && props.BTTSArray[1] ? props.BTTSArray[1] : \"\")}>\n              {props.BTTSArray && props.BTTSArray[1] ? props.BTTSArray[1] : \"\"}\n            </span>\n            <span className={styleBTTS(props.BTTSArray && props.BTTSArray[0] ? props.BTTSArray[0] : \"\")}>\n              {props.BTTSArray && props.BTTSArray[0] ? props.BTTSArray[0] : \"\"}\n            </span>\n          </li>\n          <div className=\"FormSummaries\">\n            {props.FormTextString && (\n              <li className=\"FormSummaryHome\">\n                {props.FormTextString}\n              </li>\n            )}\n            <li className=\"StyleOfPlay\">{`Style: ${props.StyleOfPlay ? props.StyleOfPlay : \"N/A\"}`}</li>\n            <li className=\"StyleOfPlay\">{`${props.homeOrAway ? props.homeOrAway : \"N/A\"} style: ${props.StyleOfPlayHomeOrAway ? props.StyleOfPlayHomeOrAway : \"N/A\"}`}</li>\n            {/* <li className=\"FavouriteSummaryHome\">{props.FavouriteRecord ? props.FavouriteRecord : \"Graphs also only available to paying customers\"}</li> */}\n          </div>\n          <div className=\"AllStats\">\n            <Collapsable buttonText={`Key Stats`}\n              classNameButton=\"StatHeader\"\n              {...getCollapsableProps(\"Key Stats\")}\n              isOpen={true}\n              element={\n                <><li\n                  key=\"LeaguePosition\"\n                  className=\"LeaguePosition\"\n                  data-cy={props.name ? props.name + \"leaguePosition\" : \"leaguePosition\"}\n                >\n                  {`League position: ${props.leaguePosition !== undefined ? props.leaguePosition : \"N/A\"\n                    }`}\n                </li>\n                  <li\n                    key=\"TeamScored\"\n                    className=\"TeamScored\"\n                    data-cy={props.name ? props.name + \"teamScored\" : \"teamScored\"}\n                  >\n                    {`Avg goals scored: ${props.goals !== undefined ? props.goals : \"N/A\"}`}\n                  </li>\n                  <li\n                    key=\"TeamConceeded\"\n                    className=\"TeamConceeded\"\n                    data-cy={props.name ? props.name + \"teamConceded\" : \"teamConceded\"}\n                  >\n                    {`Avg goals conceeded: ${props.conceeded !== undefined ? props.conceeded : \"N/A\"}`}\n                  </li>\n                  <li key=\"TeamXG\" className=\"TeamXG\" data-cy={props.name ? props.name + \"teamXG\" : \"teamXG\"}>\n                    {`Avg XG: ${props.XG !== undefined ? props.XG : \"N/A\"}`}\n                  </li>\n                  <li\n                    key=\"TeamXGConceded\"\n                    className=\"TeamXGConceded\"\n                    data-cy={props.name ? props.name + \"teamXGConceded\" : \"teamXGConceded\"}\n                  >\n                    {`Avg XG conceded: ${props.XGConceded !== undefined ? props.XGConceded : \"N/A\"}`}\n                  </li>\n                  <li\n                    key=\"goalDifference\"\n                    className=\"goalDifference\"\n                    data-cy={props.name ? props.name + \"goalDifference\" : \"goalDifference\"}\n                  >\n                    {`Goal difference : `}\n                    <span>{props.goalDifference !== undefined ? props.goalDifference : \"N/A\"}</span>\n                  </li>\n                  <li\n                    key=\"goalDifferenceHorA\"\n                    className=\"goalDifferenceHorA\"\n                    data-cy={props.name ? props.name + \"goalDifference\" : \"goalDifference\"}\n                  >\n                    {`Goal difference ${props.homeOrAway ? props.homeOrAway : \"N/A\"} : ${props.goalDifferenceHomeOrAway !== undefined ? props.goalDifferenceHomeOrAway : \"N/A\"\n                      }`}\n                  </li>\n                  <li\n                    key=\"TeamPossession\"\n                    className=\"TeamPossession\"\n                    data-cy={props.name ? props.name + \"teamPossession\" : \"teamPossession\"}\n                  >\n                    {`Avg possession: ${props.possession !== undefined ? props.possession : \"N/A\"}%`}\n                  </li></>\n              }\n            />\n            <Collapsable\n              buttonText={`Attacking`}\n              {...getCollapsableProps(\"Attacking\")}\n              classNameButton=\"StatHeader\"\n              element={\n                <><li\n                  key=\"AverageShots\"\n                  className=\"AverageShots\"\n                  data-cy={props.name ? props.name + \"AverageShots\" : \"AverageShots\"}\n                >\n                  {`Avg shots: ${props.shots !== undefined ? props.shots : \"N/A\"}`}\n                </li><li\n                  key=\"AverageSOT\"\n                  className=\"AverageSOT\"\n                  data-cy={props.name ? props.name + \"averageSOT\" : \"averageSOT\"}\n                >\n                    {`Avg SOT: ${props.sot !== undefined ? props.sot : \"N/A\"}`}\n                  </li>\n                  <li key=\"ShootingAccuracy\" className=\"ShootingAccuracy\" data-cy={props.name ? props.name + \"shootingAccuracy\" : \"shootingAccuracy\"}>\n                    {`Shooting accuracy: ${props.shootingAccuracy !== undefined ? `${props.shootingAccuracy}%` : \"N/A\"}`}\n                  </li>\n                  <li key=\"ShotConversionRate\" className=\"GoalConversionRate\" data-cy={props.name ? props.name + \"goalConversionRate\" : \"goalConversionRate\"}>\n                    {`Shot conversion: ${props.goalConversionRate !== undefined ? `${props.goalConversionRate}%` : \"N/A\"}`}\n                  </li>\n                  <li key=\"BigChanceConversionRate\" className=\"BigChanceConversionRate\" data-cy={props.name ? props.name + \"bigChanceConversionRate\" : \"bigChanceConversionRate\"}>\n                    {`Big chance conversion: ${props.bigChanceConversionRate !== undefined ? `${props.bigChanceConversionRate}%` : \"N/A\"}`}\n                  </li>\n                  <li\n                    key=\"DangerousAttacks\"\n                    className=\"DangerousAttacks\"\n                    data-cy={props.name ? props.name + \"dangerousAttacks\" : \"dangerousAttacks\"}\n                  >\n                    {`Avg dangerous attacks: ${props.dangerousAttacks !== undefined ? props.dangerousAttacks : \"N/A\"}`}\n                  </li><li\n                    key=\"TeamShotsInsideBox\"\n                    className=\"TeamShotsInsideBox\"\n                    data-cy={props.name ? props.name + \"teamShotsInsideBox\" : \"teamShotsInsideBox\"}\n                  >\n                    {`Shots inside box: ${props.shotsInsideBox !== undefined ? props.shotsInsideBox : \"N/A\"}`}\n                  </li>\n                  <li key=\"GoalsFromInsideBox\" className=\"GoalsFromInsideBox\" data-cy={props.name ? props.name + \"goalsFromInsideBox\" : \"goalsFromInsideBox\"}>\n                    {`Goals from inside box: ${props.goalsFromInsideTheBox !== undefined ? props.goalsFromInsideTheBox : \"N/A\"}`}\n                  </li>\n                  <li key=\"GoalsFromOutsideBox\" className=\"GoalsFromOutsideBox\" data-cy={props.name ? props.name + \"goalsFromOutsideBox\" : \"goalsFromOutsideBox\"}>\n                    {`Goals from outside box: ${props.goalsFromOutsideTheBox !== undefined ? props.goalsFromOutsideTheBox : \"N/A\"}`}\n                  </li>\n                  <li\n                    key=\"fastBreakShots\"\n                    className=\"fastBreakShots\"\n                    data-cy={props.name ? props.name + \"fastBreakShots\" : \"fastBreakShots\"}\n                  >\n                    {`Fast break shots: ${props.fastBreakShots !== undefined ? props.fastBreakShots : \"N/A\"}`}\n                  </li>\n                  <li\n                    key=\"bigChances\"\n                    className=\"bigChances\"\n                    data-cy={props.name ? props.name + \"bigChances\" : \"bigChances\"}\n                  >\n                    {`Big chances created: ${props.bigChances !== undefined ? props.bigChances : \"N/A\"}`}\n                  </li>\n                  <li\n                    key=\"bigChancesMissed\"\n                    className=\"bigChancesMissed\"\n                    data-cy={props.name ? props.name + \"bigChancesMissed\" : \"bigChancesMissed\"}\n                  >\n                    {`Big chances missed: ${props.bigChancesMissed !== undefined ? props.bigChancesMissed : \"N/A\"}`}\n                  </li>\n                </>\n              }\n            />\n            <Collapsable\n              buttonText={`Defensive`}\n              classNameButton=\"StatHeader\"\n              {...getCollapsableProps(\"Defensive\")}\n\n              element={\n                <>\n                  <li key=\"CleanSheetPercentage\" className=\"CleanSheetPercentage\" data-cy={props.name ? props.name + \"cleanSheetPercentage\" : \"cleanSheetPercentage\"}>\n                    {`Clean sheet percentage: ${props.cleansheetPercentage !== undefined ? `${props.cleansheetPercentage}%` : \"N/A\"}`}\n                  </li>\n                  <li key=\"shotsOnTargetAgainst\" className=\"shotsOnTargetAgainst\" data-cy={props.name ? props.name + \"shotsOnTargetAgainst\" : \"shotsOnTargetAgainst\"}>\n                    {`Avg Shots on target against: ${props.shotsOnTargetAgainst !== undefined ? props.shotsOnTargetAgainst : \"N/A\"}`}\n                  </li>\n                  <li\n                    key=\"TeamShotsInsideBoxAgainst\"\n                    className=\"TeamShotsInsideBoxAgainst\"\n                    data-cy={props.name ? props.name + \"teamShotsInsideBoxAgainst\" : \"teamShotsInsideBoxAgainst\"}\n                  >\n                    {`Shots inside box against: ${props.shotsInsideBoxAgainst !== undefined ? props.shotsInsideBoxAgainst : \"N/A\"}`}\n                  </li>\n                  <li\n                    key=\"bigChancesConceded\"\n                    className=\"bigChancesConceded\"\n                    data-cy={props.name ? props.name + \"bigChancesConceded\" : \"bigChancesConceded\"}\n                  >\n                    {`Big chances against: ${props.bigChancesConceded !== undefined ? props.bigChancesConceded : \"N/A\"}`}\n                  </li>\n                  <li key=\"accurateCrossesAgainst\" className=\"accurateCrossesAgainst\" data-cy={props.name ? props.name + \"accurateCrossesAgainst\" : \"accurateCrossesAgainst\"}>\n                    {`Accurate crosses against: ${props.accurateCrossesAgainst !== undefined ? `${props.accurateCrossesAgainst}%` : \"N/A\"}`}\n                  </li>\n                  <li key=\"ErrorsLeadingToShotAgainst\" className=\"ErrorsLeadingToShotAgainst\" data-cy={props.name ? props.name + \"ErrorsLeadingToShotAgainst\" : \"ErrorsLeadingToShotAgainst\"}>\n                    {`Errors leading to shot against: ${props.errorsLeadingToShotAgainst !== undefined ? props.errorsLeadingToShotAgainst : \"N/A\"}`}\n                  </li>\n                </>\n              }\n            />\n            <Collapsable buttonText={\"In Possession\"}\n              classNameButton=\"StatHeader\"\n              {...getCollapsableProps(\"In Possession\")}\n              element={\n                <>\n                  <li key=\"PPAA\" className=\"PPAA\" data-cy={props.name ? props.name + \"PPAA\" : \"PPAA\"}>\n                    {`Passes per attacking action: ${props.PPAA !== undefined ? `${props.PPAA}` : \"N/A\"}`}\n                  </li>\n                  <li key=\"AccuratePassesPercentage\" className=\"AccuratePassesPercentage\" data-cy={props.name ? props.name + \"AccuratePassesPercentage\" : \"AccuratePassesPercentage\"}>\n                    {`Accurate passes: ${props.accuratePassesPercentage !== undefined ? `${props.accuratePassesPercentage}%` : \"N/A\"}`}\n                  </li>\n                  <li key=\"AccuratePassesOpponentHalf\" className=\"AccuratePassesOpponentHalf\" data-cy={props.name ? props.name + \"AccuratePassesOpponentHalf\" : \"AccuratePassesOpponentHalf\"}>\n                    {`Accurate attacking passes: ${props.accuratePassesOpponentHalf !== undefined ? `${props.accuratePassesOpponentHalf}%` : \"N/A\"}`}\n                  </li>\n                  <li key=\"AccuratePassesDefensiveHalf\" className=\"AccuratePassesDefensiveHalf\" data-cy={props.name ? props.name + \"AccuratePassesDefensiveHalf\" : \"AccuratePassesDefensiveHalf\"}>\n                    {`Accurate own half passes: ${props.accuratePassesDefensiveHalf !== undefined ? `${props.accuratePassesDefensiveHalf}%` : \"N/A\"}`}\n                  </li>\n                  <li key=\"LongBallPercentage\" className=\"LongBallPercentage\" data-cy={props.name ? props.name + \"LongBallPercentage\" : \"LongBallPercentage\"}>\n                    {`Long ball percentage: ${props.longBallPercentage !== undefined ? `${props.longBallPercentage}%` : \"N/A\"}`}\n                  </li>\n                  <li key=\"AccurateLongBallsPercentage\" className=\"AccurateLongBallsPercentage\" data-cy={props.name ? props.name + \"AccurateLongBallsPercentage\" : \"AccurateLongBallsPercentage\"}>\n                    {`Accurate long balls: ${props.accurateLongBallsPercentage !== undefined ? `${props.accurateLongBallsPercentage}%` : \"N/A\"}`}\n                  </li>\n                  <li key=\"AccurateCrosses\" className=\"AccurateCrosses\" data-cy={props.name ? props.name + \"AccurateCrosses\" : \"AccurateCrosses\"}>\n                    {`Accurate crosses: ${props.accurateCrosses !== undefined ? `${props.accurateCrosses}%` : \"N/A\"}`}\n                  </li>\n                  <li key=\"dribbleAttempts\" className=\"dribbleAttempts\" data-cy={props.name ? props.name + \"dribbleAttempts\" : \"dribbleAttempts\"}>\n                    {`Dribble attempts: ${props.dribbleAttempts !== undefined ? `${props.dribbleAttempts}` : \"N/A\"}`}\n                  </li>\n                  <li key=\"successfulDribbles\" className=\"successfulDribbles\" data-cy={props.name ? props.name + \"successfulDribbles\" : \"successfulDribbles\"}>\n                    {`Successful dribbles: ${props.successfulDribbles !== undefined ? `${props.successfulDribbles}` : \"N/A\"}`}\n                  </li>\n                  <li key=\"fastBreaksLeadingToShot\" className=\"fastBreaksLeadingToShot\" data-cy={props.name ? props.name + \"fastBreaksLeadingToShot\" : \"fastBreaksLeadingToShot\"}>\n                    {`Fast breaks leading to shot: ${props.fastBreaksLeadingToShot !== undefined ? `${props.fastBreaksLeadingToShot}%` : \"N/A\"}`}\n                  </li>\n                </>\n              }\n            />\n            <Collapsable buttonText={\"Out Of Possession\"}\n              classNameButton=\"StatHeader\"\n              {...getCollapsableProps(\"Out Of Possession\")}\n\n              element={\n                <>\n                  <li key=\"PPDA\" className=\"PPDA\" data-cy={props.name ? props.name + \"PPDA\" : \"PPDA\"}>\n                    {`Passes per defensive action: ${props.PPDA !== undefined ? `${props.PPDA}` : \"N/A\"}`}\n                  </li>\n                  {/* <span className=\"StatExplanation\">\n                    PPDA = Total Own Half Passes Against / Total Defensive Actions (Tackles + Interceptions + Clearances + Blocks)\n                  </span> */}\n                  <li key=\"tackles\" className=\"tackles\" data-cy={props.name ? props.name + \"tackles\" : \"tackles\"}>\n                    {`Successful tackles per game: ${props.tackles !== undefined ? `${props.tackles}` : \"N/A\"}`}\n                  </li>\n                  <li key=\"ballRecovery\" className=\"ballRecovery\" data-cy={props.name ? props.name + \"ballRecovery\" : \"ballRecovery\"}>\n                    {`Ball recoveries per game: ${props.ballRecovery !== undefined ? `${props.ballRecovery}` : \"N/A\"}`}\n                  </li>\n                  <li key=\"interceptions\" className=\"interceptions\" data-cy={props.name ? props.name + \"interceptions\" : \"interceptions\"}>\n                    {`Interceptions per game: ${props.interceptions !== undefined ? `${props.interceptions}` : \"N/A\"}`}\n                  </li>\n                  <li\n                    key=\"DuelsWon\"\n                    className=\"DuelsWon\"\n                    data-cy={props.name ? props.name + \"duelsWon\" : \"duelsWon\"}\n                  >\n                    {`Duels won: ${props.duelsWonPercentage !== undefined ? `${props.duelsWonPercentage}%` : \"N/A\"}`}\n                  </li>\n                  <li\n                    key=\"AerialDuelsWon\"\n                    className=\"AerialDuelsWon\"\n                    data-cy={props.name ? props.name + \"aerialDuelsWon\" : \"aerialDuelsWon\"}\n                  >\n                    {`Aerial duels won: ${props.aerialDuelsWonPercentage !== undefined ? `${props.aerialDuelsWonPercentage}%` : \"N/A\"}`}\n                  </li>\n                  <li key=\"accurateLongBallsAgainstPercentage\" className=\"accurateLongBallsAgainstPercentage\" data-cy={props.name ? props.name + \"accurateLongBallsAgainstPercentage\" : \"accurateLongBallsAgainstPercentage\"}>\n                    {`Long balls against success: ${props.accurateLongBallsAgainstPercentage !== undefined ? `${props.accurateLongBallsAgainstPercentage}%` : \"N/A\"}`}\n                  </li>\n                </>\n              }\n            />\n            <Collapsable buttonText={\"Form\"}\n              classNameButton=\"StatHeader\"\n              {...getCollapsableProps(\"Form\")}\n\n              element={\n                <> <li key=\"PPG\" className=\"PPG\" data-cy={props.name ? props.name + \"PPG\" : \"PPG\"}>\n                  {`Season PPG: ${props.ppg !== undefined ? props.ppg : \"N/A\"}`}\n                </li>\n                  <li\n                    key=\"FormTrend10a\"\n                    className=\"FormTrend\"\n                    data-cy={props.name ? props.name + \"FormTrend10\" : \"FormTrend10\"}\n                  >\n                    {`Last 10 PPG: ${props.formTrend && props.formTrend[0] !== undefined ? props.formTrend[0] : \"N/A\"}`}\n                  </li>\n                  <li\n                    key=\"FormTrend10b\"\n                    className=\"FormTrend\"\n                    data-cy={props.name ? props.name + \"FormTrend10\" : \"FormTrend10\"}\n                  >\n                    {`Last 6 PPG: ${props.formTrend && props.formTrend[1] !== undefined ? props.formTrend[1] : \"N/A\"}`}\n                  </li>\n                  <li\n                    key=\"FormTrend10c\"\n                    className=\"FormTrend\"\n                    data-cy={props.name ? props.name + \"FormTrend10\" : \"FormTrend10\"}\n                  >\n                    {`Last 5 PPG: ${props.formTrend && props.formTrend[2] !== undefined ? props.formTrend[2] : \"N/A\"}`}\n                  </li>\n                  <li\n                    key=\"WinPercentage\"\n                    className=\"WinPercentage\"\n                    data-cy={props.name ? props.name + \"WinPercentage\" : \"WinPercentage\"}\n                  >\n                    {props.homeOrAway && props.winPercentage !== undefined && props.winPercentage !== \"N/A\" ? `${props.homeOrAway} PPG: ${props.winPercentage.toFixed(2)}` : \"N/A\"}\n                  </li></>\n              }\n            />\n            <Collapsable buttonText={\"Discipline\"}\n              classNameButton=\"StatHeader\"\n              {...getCollapsableProps(\"Discipline\")}\n              element={\n                <> <li\n                  key=\"CardsTotal\"\n                  className=\"CardsTotal\"\n                  data-cy={props.name ? props.name + \"CardsTotal\" : \"CardsTotal\"}\n                >\n                  {`Yellow cards per game: ${props.CardsPerGame !== undefined ? props.CardsPerGame : \"N/A\"}`}\n                </li>\n                  <li\n                    key=\"RedCardsTotal\"\n                    className=\"RedCardsTotal\"\n                    data-cy={props.name ? props.name + \"RedCardsTotal\" : \"RedCardsTotal\"}\n                  >\n                    {`Red cards per game: ${props.RedCardsPerGame !== undefined ? props.RedCardsPerGame : \"N/A\"}`}\n                  </li>\n                  <li\n                    key=\"Fouls\"\n                    className=\"Fouls\"\n                    data-cy={props.name ? props.name + \"Fouls\" : \"Fouls\"}\n                  >\n                    {`Fouls per game: ${props.FoulsPerGame !== undefined ? props.FoulsPerGame : \"N/A\"}`}\n                  </li>\n                  <li key=\"PenaltiesConceded\" className=\"PenaltiesConceded\" data-cy={props.name ? props.name + \"PenaltiesConceded\" : \"PenaltiesConceded\"}>\n                    {`Penalties conceded: ${props.PenaltiesConceded !== undefined ? props.PenaltiesConceded : \"N/A\"}`}\n                  </li>\n                </>\n              }\n            />\n            <Collapsable buttonText={\"Set Pieces\"}\n              classNameButton=\"StatHeader\"\n              {...getCollapsableProps(\"Set Pieces\")}\n              element={\n                <> <li\n                  key=\"CornersAverage\"\n                  className=\"CornersAverage\"\n                  data-cy={props.name ? props.name + \"CornersAverage\" : \"CornersAverage\"}\n                >\n                  {`Corners average: ${props.CornersAverage !== undefined ? props.CornersAverage : \"N/A\"}`}\n                </li>\n                  <li\n                    key=\"FreeKickGoals\"\n                    className=\"FreeKickGoals\"\n                    data-cy={props.name ? props.name + \"FreeKickGoals\" : \"FreeKickGoals\"}\n                  >\n                    {`Free kick goals: ${props.FreeKickGoals !== undefined ? props.FreeKickGoals : \"N/A\"}`}\n                  </li>\n                </>\n              }\n            />\n            <Collapsable buttonText={\"Misc\"}\n              classNameButton=\"StatHeader\"\n              {...getCollapsableProps(\"Misc\")}\n              element={\n                <>         <li\n                  key=\"TeamAverageRating\"\n                  className=\"TeamAverageRating\"\n                  data-cy={props.name ? props.name + \"teamAverageRating\" : \"teamAverageRating\"}\n                >\n                  {`Avg rating: ${props.averageRating !== undefined ? props.averageRating : \"N/A\"}`}\n                </li>\n\n\n                  <li\n                    key=\"TeamXGSwing\"\n                    className=\"TeamXGSwing\"\n                    data-cy={props.name ? props.name + \"teamXGSwing\" : \"teamXGSwing\"}\n                  >\n                    {`XG difference swing (last 5): ${props.XGSwing !== undefined ? props.XGSwing?.toFixed(2) : \"N/A\"\n                      }`}\n                  </li>\n                  <li key=\"Offsides\" className=\"Offsides\" data-cy={props.name ? props.name + \"Offsides\" : \"Offsides\"}>\n                    {`Offsides per game: ${props.offsides !== undefined ? props.offsides : \"N/A\"}`}\n                  </li>\n                </>\n              }\n            />\n          </div>\n        </ul>\n        <div id=\"h2hStats\"></div>\n      </Fragment>\n    );\n  } else if (props.games === \"hOrA\") {\n    return (\n      <Fragment>\n        <ul className={props.className ? props.className : \"\"} style={props.style ? props.style : {}}>\n          <CreateBadge image={props.badge} alt=\"Team badge\" ClassName={\"ColumnBadge\"} />\n\n          <li className=\"FormHeader\">League results (most recent on right)</li>\n          <li key={`last5${props.homeOrAwayResults ? props.homeOrAwayResults : \"default\"}`} className=\"FormHomeOrAway\">\n            <span className={styleForm(props.ResultsHorA && props.ResultsHorA[5] ? props.ResultsHorA[5] : \"\")}>\n              {props.ResultsHorA && props.ResultsHorA[5] ? props.ResultsHorA[5] : \"\"}\n            </span>\n            <span className={styleForm(props.ResultsHorA && props.ResultsHorA[4] ? props.ResultsHorA[4] : \"\")}>\n              {props.ResultsHorA && props.ResultsHorA[4] ? props.ResultsHorA[4] : \"\"}\n            </span>\n            <span className={styleForm(props.ResultsHorA && props.ResultsHorA[3] ? props.ResultsHorA[3] : \"\")}>\n              {props.ResultsHorA && props.ResultsHorA[3] ? props.ResultsHorA[3] : \"\"}\n            </span>\n            <span className={styleForm(props.ResultsHorA && props.ResultsHorA[2] ? props.ResultsHorA[2] : \"\")}>\n              {props.ResultsHorA && props.ResultsHorA[2] ? props.ResultsHorA[2] : \"\"}\n            </span>\n            <span className={styleForm(props.ResultsHorA && props.ResultsHorA[1] ? props.ResultsHorA[1] : \"\")}>\n              {props.ResultsHorA && props.ResultsHorA[1] ? props.ResultsHorA[1] : \"\"}\n            </span>\n            <span className={styleForm(props.ResultsHorA && props.ResultsHorA[0] ? props.ResultsHorA[0] : \"\")}>\n              {props.ResultsHorA && props.ResultsHorA[0] ? props.ResultsHorA[0] : \"\"}\n            </span>\n          </li>\n          <div className=\"AllStats\">\n            <div className=\"FormSummaries\">\n              <li className=\"StyleOfPlay\">{`${props.homeOrAway ? props.homeOrAway : \"N/A\"} style: ${props.StyleOfPlayHomeOrAway ? props.StyleOfPlayHomeOrAway : \"N/A\"}`}</li>\n            </div>\n            <li\n              key=\"TeamScored\"\n              className=\"TeamScored\"\n              data-cy={props.name ? props.name + \"teamScored\" : \"teamScored\"}\n            >\n              {`Avg goals scored: ${props.goals !== undefined ? props.goals : \"N/A\"}`}\n            </li>\n            <li\n              key=\"TeamConceeded\"\n              className=\"TeamConceeded\"\n              data-cy={props.name ? props.name + \"teamConceded\" : \"teamConceded\"}\n            >\n              {`Avg goals conceeded: ${props.conceeded !== undefined ? props.conceeded : \"N/A\"}`}\n            </li>\n            <li\n              key=\"TeamPossession\"\n              className=\"TeamPossession\"\n              data-cy={props.name ? props.name + \"teamPossession\" : \"teamPossession\"}\n            >\n              {`Avg possession: ${props.possession !== undefined ? props.possession : \"N/A\"}%`}\n            </li>\n            <li key=\"TeamXG\" className=\"TeamXG\" data-cy={props.name ? props.name + \"teamXG\" : \"teamXG\"}>\n              {`Avg XG: ${props.XG !== undefined ? props.XG : \"N/A\"}`}\n            </li>\n            <li\n              key=\"TeamXGConceded\"\n              className=\"TeamXGConceded\"\n              data-cy={props.name ? props.name + \"teamXGConceded\" : \"teamXGConceded\"}\n            >\n              {`Avg XG conceded: ${props.XGConceded !== undefined ? props.XGConceded : \"N/A\"}`}\n            </li>\n            <li\n              key=\"goalDifferenceHorA\"\n              className=\"goalDifferenceHorA\"\n              data-cy={props.name ? props.name + \"goalDifference\" : \"goalDifference\"}\n            >\n              {`Goal difference ${props.homeOrAway ? props.homeOrAway : \"N/A\"} : ${props.goalDifferenceHomeOrAway !== undefined ? props.goalDifferenceHomeOrAway : \"N/A\"\n                }`}\n            </li>\n            <li\n              key=\"AverageShots\"\n              className=\"AverageShots\"\n              data-cy={props.name ? props.name + \"AverageShots\" : \"AverageShots\"}\n            >\n              {`Avg shots: ${props.shots !== undefined ? props.shots : \"N/A\"}`}\n            </li>\n            <li\n              key=\"AverageSOT\"\n              className=\"AverageSOT\"\n              data-cy={props.name ? props.name + \"averageSOT\" : \"averageSOT\"}\n            >\n              {`Avg shots on target: ${props.sot !== undefined ? props.sot : \"N/A\"}`}\n            </li>\n            <li\n              key=\"DangerousAttacks\"\n              className=\"DangerousAttacks\"\n              data-cy={props.name ? props.name + \"dangerousAttacks\" : \"dangerousAttacks\"}\n            >\n              {`Avg dangerous attacks: ${props.dangerousAttacks !== undefined ? props.dangerousAttacks : \"N/A\"}`}\n            </li>\n            <li\n              key=\"WinPercentage\"\n              className=\"WinPercentage\"\n              data-cy={props.name ? props.name + \"WinPercentage\" : \"WinPercentage\"}\n            >\n              {props.homeOrAway && props.winPercentage !== undefined && props.winPercentage !== \"N/A\" ? `${props.homeOrAway} PPG: ${props.winPercentage.toFixed(2)}` : \"N/A\"}\n            </li>\n            <li\n              key=\"CornersAverage\"\n              className=\"CornersAverage\"\n              data-cy={props.name ? props.name + \"CornersAverage\" : \"CornersAverage\"}\n            >\n              {`Corners average: ${props.CornersAverage !== undefined ? props.CornersAverage : \"N/A\"}`}\n            </li>\n          </div>\n        </ul>\n        <div id=\"h2hStats\"></div>\n      </Fragment>\n    );\n  } else if (props.games === \"last5\") {\n    return (\n      <Fragment>\n        <ul className={props.className ? props.className : \"\"} style={props.style ? props.style : {}}>\n          <CreateBadge image={props.badge} alt=\"Team badge\" ClassName={\"ColumnBadge\"} />\n          <li className=\"FormHeader\">\n            Last 5 games (All)\n          </li>\n          <li key={`last5League`} className=\"last5League\">\n            <span className={styleForm(props.Results && props.Results[4] ? props.Results[4] : \"\")}>\n              {props.Results && props.Results[4] ? props.Results[4] : \"\"}\n            </span>\n            <span className={styleForm(props.Results && props.Results[3] ? props.Results[3] : \"\")}>\n              {props.Results && props.Results[3] ? props.Results[3] : \"\"}\n            </span>\n            <span className={styleForm(props.Results && props.Results[2] ? props.Results[2] : \"\")}>\n              {props.Results && props.Results[2] ? props.Results[2] : \"\"}\n            </span>\n            <span className={styleForm(props.Results && props.Results[1] ? props.Results[1] : \"\")}>\n              {props.Results && props.Results[1] ? props.Results[1] : \"\"}\n            </span>\n            <span className={styleForm(props.Results && props.Results[0] ? props.Results[0] : \"\")}>\n              {props.Results && props.Results[0] ? props.Results[0] : \"\"}\n            </span>\n          </li>\n          <div className=\"AllStats\">\n            <li\n              key=\"TeamScored\"\n              className=\"TeamScored\"\n              data-cy={props.name ? props.name + \"teamScored\" : \"teamScored\"}\n            >\n              {`Avg goals scored: ${props.goals !== undefined ? props.goals : \"N/A\"}`}\n            </li>\n            <li\n              key=\"TeamConceeded\"\n              className=\"TeamConceeded\"\n              data-cy={props.name ? props.name + \"teamConceded\" : \"teamConceded\"}\n            >\n              {`Avg goals conceeded: ${props.conceeded !== undefined ? props.conceeded : \"N/A\"}`}\n            </li>\n            <li\n              key=\"TeamPossession\"\n              className=\"TeamPossession\"\n              data-cy={props.name ? props.name + \"teamPossession\" : \"teamPossession\"}\n            >\n              {`Avg possession: ${props.possession !== undefined ? props.possession : \"N/A\"}%`}\n            </li>\n            <li key=\"TeamXG\" className=\"TeamXG\" data-cy={props.name ? props.name + \"teamXG\" : \"teamXG\"}>\n              {`Avg XG: ${props.XG !== undefined ? props.XG : \"N/A\"}`}\n            </li>\n            <li\n              key=\"TeamXGConceded\"\n              className=\"TeamXGConceded\"\n              data-cy={props.name ? props.name + \"teamXGConceded\" : \"teamXGConceded\"}\n            >\n              {`Avg XG conceded: ${props.XGConceded !== undefined ? props.XGConceded : \"N/A\"}`}\n            </li>\n            <li\n              key=\"goalDifference\"\n              className=\"goalDifference\"\n              data-cy={props.name ? props.name + \"goalDifference\" : \"goalDifference\"}\n            >\n              {`Goal difference : `}\n              <span>{props.goalDifference !== undefined ? props.goalDifference : \"N/A\"}</span>\n            </li>\n            <li\n              key=\"AverageShots\"\n              className=\"AverageShots\"\n              data-cy={props.name ? props.name + \"AverageShots\" : \"AverageShots\"}\n            >\n              {`Avg shots: ${props.shots !== undefined ? props.shots : \"N/A\"}`}\n            </li>\n            <li\n              key=\"AverageSOT\"\n              className=\"AverageSOT\"\n              data-cy={props.name ? props.name + \"averageSOT\" : \"averageSOT\"}\n            >\n              {`Avg shots on target: ${props.sot !== undefined ? props.sot : \"N/A\"}`}\n            </li>\n            <li\n              key=\"DangerousAttacks\"\n              className=\"DangerousAttacks\"\n              data-cy={props.name ? props.name + \"dangerousAttacks\" : \"dangerousAttacks\"}\n            >\n              {`Avg dangerous attacks: ${props.dangerousAttacks !== undefined ? props.dangerousAttacks : \"N/A\"}`}\n            </li>\n            <li key=\"PPG\" className=\"PPG\" data-cy={props.name ? props.name + \"PPG\" : \"PPG\"}>\n              {`Last 5 PPG: ${props.ppg !== undefined ? props.ppg : \"N/A\"}`}\n            </li>\n            <li\n              key=\"CornersAverage\"\n              className=\"CornersAverage\"\n              data-cy={props.name ? props.name + \"CornersAverage\" : \"CornersAverage\"}\n            >\n              {`Corners average: ${props.CornersAverage !== undefined ? props.CornersAverage : \"N/A\"}`}\n            </li>\n          </div>\n        </ul>\n        <div id=\"h2hStats\"></div>\n      </Fragment>\n    );\n  }\n}\n\nexport default Stats;\n","/Users/greg/Development/Predictor/src/components/CarouselXGChart.js",[],"/Users/greg/Development/Predictor/src/components/Chart.js",["409","410"],"/Users/greg/Development/Predictor/src/components/RankingsSection.js",[],"/Users/greg/Development/Predictor/src/components/HamburgerMenu.js",[],"/Users/greg/Development/Predictor/src/components/SeasonPreview.js",[],"/Users/greg/Development/Predictor/src/components/PrivacyPolicy.js",[],"/Users/greg/Development/Predictor/src/components/StarRating.js",[],"/Users/greg/Development/Predictor/src/components/PredictionTypeRadio.js",[],"/Users/greg/Development/Predictor/src/components/PlayerStatTable.js",[],"/Users/greg/Development/Predictor/src/components/FutureFixture.js",[],"/Users/greg/Development/Predictor/src/components/FutureFixturesSideBySide.js",[],"/Users/greg/Development/Predictor/src/components/ShareShortlistButton.js",[],{"ruleId":"411","severity":1,"message":"412","line":5,"column":27,"nodeType":"413","messageId":"414","endLine":5,"endColumn":33},{"ruleId":"415","replacedBy":"416"},{"ruleId":"417","replacedBy":"418"},{"ruleId":"411","severity":1,"message":"412","line":31,"column":27,"nodeType":"413","messageId":"414","endLine":31,"endColumn":33},{"ruleId":"411","severity":1,"message":"419","line":31,"column":50,"nodeType":"413","messageId":"414","endLine":31,"endColumn":54},{"ruleId":"411","severity":1,"message":"420","line":517,"column":10,"nodeType":"413","messageId":"414","endLine":517,"endColumn":14},{"ruleId":"411","severity":1,"message":"421","line":114,"column":9,"nodeType":"413","messageId":"414","endLine":114,"endColumn":25},{"ruleId":"422","severity":1,"message":"423","line":28,"column":6,"nodeType":"424","endLine":28,"endColumn":8,"suggestions":"425"},{"ruleId":"411","severity":1,"message":"426","line":20,"column":5,"nodeType":"413","messageId":"414","endLine":20,"endColumn":13},{"ruleId":"411","severity":1,"message":"427","line":21,"column":10,"nodeType":"413","messageId":"414","endLine":21,"endColumn":16},{"ruleId":"411","severity":1,"message":"428","line":26,"column":5,"nodeType":"413","messageId":"414","endLine":26,"endColumn":15},{"ruleId":"411","severity":1,"message":"429","line":596,"column":9,"nodeType":"413","messageId":"414","endLine":596,"endColumn":27},{"ruleId":"411","severity":1,"message":"430","line":603,"column":9,"nodeType":"413","messageId":"414","endLine":603,"endColumn":22},{"ruleId":"411","severity":1,"message":"431","line":690,"column":17,"nodeType":"413","messageId":"414","endLine":690,"endColumn":25},{"ruleId":"411","severity":1,"message":"432","line":701,"column":9,"nodeType":"413","messageId":"414","endLine":701,"endColumn":20},{"ruleId":"411","severity":1,"message":"433","line":4,"column":10,"nodeType":"413","messageId":"414","endLine":4,"endColumn":13},{"ruleId":"411","severity":1,"message":"434","line":4,"column":15,"nodeType":"413","messageId":"414","endLine":4,"endColumn":21},{"ruleId":"411","severity":1,"message":"435","line":56,"column":5,"nodeType":"413","messageId":"414","endLine":56,"endColumn":9},{"ruleId":"411","severity":1,"message":"436","line":258,"column":10,"nodeType":"413","messageId":"414","endLine":258,"endColumn":25},{"ruleId":"411","severity":1,"message":"437","line":879,"column":14,"nodeType":"413","messageId":"414","endLine":879,"endColumn":37},{"ruleId":"422","severity":1,"message":"438","line":108,"column":6,"nodeType":"424","endLine":108,"endColumn":10,"suggestions":"439"},{"ruleId":"411","severity":1,"message":"440","line":46,"column":26,"nodeType":"413","messageId":"414","endLine":46,"endColumn":39},{"ruleId":"411","severity":1,"message":"441","line":101,"column":10,"nodeType":"413","messageId":"414","endLine":101,"endColumn":26},{"ruleId":"411","severity":1,"message":"442","line":103,"column":10,"nodeType":"413","messageId":"414","endLine":103,"endColumn":36},{"ruleId":"411","severity":1,"message":"443","line":103,"column":38,"nodeType":"413","messageId":"414","endLine":103,"endColumn":67},{"ruleId":"411","severity":1,"message":"444","line":107,"column":10,"nodeType":"413","messageId":"414","endLine":107,"endColumn":21},{"ruleId":"411","severity":1,"message":"445","line":110,"column":33,"nodeType":"413","messageId":"414","endLine":110,"endColumn":56},{"ruleId":"411","severity":1,"message":"446","line":111,"column":33,"nodeType":"413","messageId":"414","endLine":111,"endColumn":56},{"ruleId":"411","severity":1,"message":"447","line":112,"column":43,"nodeType":"413","messageId":"414","endLine":112,"endColumn":76},{"ruleId":"411","severity":1,"message":"448","line":113,"column":43,"nodeType":"413","messageId":"414","endLine":113,"endColumn":76},{"ruleId":"422","severity":1,"message":"449","line":123,"column":6,"nodeType":"424","endLine":123,"endColumn":16,"suggestions":"450"},{"ruleId":"411","severity":1,"message":"451","line":129,"column":10,"nodeType":"413","messageId":"414","endLine":129,"endColumn":25},{"ruleId":"411","severity":1,"message":"452","line":144,"column":10,"nodeType":"413","messageId":"414","endLine":144,"endColumn":22},{"ruleId":"411","severity":1,"message":"453","line":144,"column":24,"nodeType":"413","messageId":"414","endLine":144,"endColumn":39},{"ruleId":"411","severity":1,"message":"454","line":145,"column":10,"nodeType":"413","messageId":"414","endLine":145,"endColumn":22},{"ruleId":"411","severity":1,"message":"455","line":145,"column":24,"nodeType":"413","messageId":"414","endLine":145,"endColumn":39},{"ruleId":"411","severity":1,"message":"456","line":162,"column":10,"nodeType":"413","messageId":"414","endLine":162,"endColumn":33},{"ruleId":"411","severity":1,"message":"457","line":162,"column":35,"nodeType":"413","messageId":"414","endLine":162,"endColumn":61},{"ruleId":"411","severity":1,"message":"458","line":163,"column":10,"nodeType":"413","messageId":"414","endLine":163,"endColumn":26},{"ruleId":"411","severity":1,"message":"459","line":163,"column":28,"nodeType":"413","messageId":"414","endLine":163,"endColumn":47},{"ruleId":"411","severity":1,"message":"460","line":164,"column":10,"nodeType":"413","messageId":"414","endLine":164,"endColumn":26},{"ruleId":"411","severity":1,"message":"461","line":164,"column":28,"nodeType":"413","messageId":"414","endLine":164,"endColumn":47},{"ruleId":"411","severity":1,"message":"462","line":189,"column":34,"nodeType":"413","messageId":"414","endLine":189,"endColumn":59},{"ruleId":"411","severity":1,"message":"463","line":192,"column":33,"nodeType":"413","messageId":"414","endLine":192,"endColumn":57},{"ruleId":"411","severity":1,"message":"464","line":195,"column":38,"nodeType":"413","messageId":"414","endLine":195,"endColumn":67},{"ruleId":"411","severity":1,"message":"465","line":198,"column":37,"nodeType":"413","messageId":"414","endLine":198,"endColumn":65},{"ruleId":"411","severity":1,"message":"466","line":201,"column":39,"nodeType":"413","messageId":"414","endLine":201,"endColumn":69},{"ruleId":"411","severity":1,"message":"467","line":203,"column":38,"nodeType":"413","messageId":"414","endLine":203,"endColumn":67},{"ruleId":"411","severity":1,"message":"468","line":229,"column":34,"nodeType":"413","messageId":"414","endLine":229,"endColumn":59},{"ruleId":"411","severity":1,"message":"469","line":232,"column":33,"nodeType":"413","messageId":"414","endLine":232,"endColumn":57},{"ruleId":"411","severity":1,"message":"470","line":235,"column":38,"nodeType":"413","messageId":"414","endLine":235,"endColumn":67},{"ruleId":"411","severity":1,"message":"471","line":238,"column":37,"nodeType":"413","messageId":"414","endLine":238,"endColumn":65},{"ruleId":"411","severity":1,"message":"472","line":241,"column":39,"nodeType":"413","messageId":"414","endLine":241,"endColumn":69},{"ruleId":"411","severity":1,"message":"473","line":243,"column":38,"nodeType":"413","messageId":"414","endLine":243,"endColumn":67},{"ruleId":"411","severity":1,"message":"474","line":253,"column":38,"nodeType":"413","messageId":"414","endLine":253,"endColumn":67},{"ruleId":"411","severity":1,"message":"475","line":256,"column":38,"nodeType":"413","messageId":"414","endLine":256,"endColumn":67},{"ruleId":"411","severity":1,"message":"476","line":419,"column":19,"nodeType":"413","messageId":"414","endLine":419,"endColumn":29},{"ruleId":"422","severity":1,"message":"477","line":536,"column":6,"nodeType":"424","endLine":536,"endColumn":33,"suggestions":"478"},{"ruleId":"422","severity":1,"message":"477","line":543,"column":6,"nodeType":"424","endLine":543,"endColumn":33,"suggestions":"479"},{"ruleId":"422","severity":1,"message":"480","line":1024,"column":6,"nodeType":"424","endLine":1024,"endColumn":32,"suggestions":"481"},{"ruleId":"422","severity":1,"message":"482","line":1415,"column":6,"nodeType":"424","endLine":1415,"endColumn":15,"suggestions":"483"},{"ruleId":"411","severity":1,"message":"484","line":2294,"column":7,"nodeType":"413","messageId":"414","endLine":2294,"endColumn":11},{"ruleId":"411","severity":1,"message":"485","line":2331,"column":17,"nodeType":"413","messageId":"414","endLine":2331,"endColumn":30},{"ruleId":"411","severity":1,"message":"486","line":2368,"column":15,"nodeType":"413","messageId":"414","endLine":2368,"endColumn":25},{"ruleId":"411","severity":1,"message":"487","line":2374,"column":15,"nodeType":"413","messageId":"414","endLine":2374,"endColumn":29},{"ruleId":"411","severity":1,"message":"488","line":2377,"column":15,"nodeType":"413","messageId":"414","endLine":2377,"endColumn":25},{"ruleId":"411","severity":1,"message":"489","line":2383,"column":15,"nodeType":"413","messageId":"414","endLine":2383,"endColumn":29},{"ruleId":"422","severity":1,"message":"490","line":2851,"column":6,"nodeType":"424","endLine":2860,"endColumn":4,"suggestions":"491"},{"ruleId":"411","severity":1,"message":"492","line":2935,"column":11,"nodeType":"413","messageId":"414","endLine":2935,"endColumn":15},{"ruleId":"411","severity":1,"message":"493","line":3134,"column":24,"nodeType":"413","messageId":"414","endLine":3134,"endColumn":37},{"ruleId":"411","severity":1,"message":"494","line":3137,"column":24,"nodeType":"413","messageId":"414","endLine":3137,"endColumn":37},{"ruleId":"411","severity":1,"message":"495","line":967,"column":11,"nodeType":"413","messageId":"414","endLine":967,"endColumn":16},{"ruleId":"411","severity":1,"message":"496","line":968,"column":11,"nodeType":"413","messageId":"414","endLine":968,"endColumn":15},{"ruleId":"411","severity":1,"message":"497","line":1048,"column":11,"nodeType":"413","messageId":"414","endLine":1048,"endColumn":38},{"ruleId":"411","severity":1,"message":"498","line":1053,"column":11,"nodeType":"413","messageId":"414","endLine":1053,"endColumn":38},{"ruleId":"411","severity":1,"message":"499","line":1058,"column":14,"nodeType":"413","messageId":"414","endLine":1058,"endColumn":21},{"ruleId":"411","severity":1,"message":"500","line":1231,"column":11,"nodeType":"413","messageId":"414","endLine":1231,"endColumn":37},{"ruleId":"411","severity":1,"message":"501","line":1503,"column":16,"nodeType":"413","messageId":"414","endLine":1503,"endColumn":35},{"ruleId":"411","severity":1,"message":"502","line":1520,"column":16,"nodeType":"413","messageId":"414","endLine":1520,"endColumn":37},{"ruleId":"411","severity":1,"message":"503","line":1525,"column":16,"nodeType":"413","messageId":"414","endLine":1525,"endColumn":30},{"ruleId":"411","severity":1,"message":"504","line":1529,"column":16,"nodeType":"413","messageId":"414","endLine":1529,"endColumn":35},{"ruleId":"411","severity":1,"message":"505","line":1599,"column":16,"nodeType":"413","messageId":"414","endLine":1599,"endColumn":35},{"ruleId":"411","severity":1,"message":"506","line":1700,"column":7,"nodeType":"413","messageId":"414","endLine":1700,"endColumn":17},{"ruleId":"411","severity":1,"message":"507","line":1703,"column":9,"nodeType":"413","messageId":"414","endLine":1703,"endColumn":42},{"ruleId":"411","severity":1,"message":"508","line":1708,"column":9,"nodeType":"413","messageId":"414","endLine":1708,"endColumn":42},{"ruleId":"411","severity":1,"message":"509","line":1713,"column":9,"nodeType":"413","messageId":"414","endLine":1713,"endColumn":43},{"ruleId":"411","severity":1,"message":"510","line":1718,"column":9,"nodeType":"413","messageId":"414","endLine":1718,"endColumn":43},{"ruleId":"411","severity":1,"message":"511","line":1723,"column":9,"nodeType":"413","messageId":"414","endLine":1723,"endColumn":47},{"ruleId":"411","severity":1,"message":"512","line":1727,"column":9,"nodeType":"413","messageId":"414","endLine":1727,"endColumn":47},{"ruleId":"411","severity":1,"message":"513","line":1732,"column":9,"nodeType":"413","messageId":"414","endLine":1732,"endColumn":50},{"ruleId":"411","severity":1,"message":"514","line":1736,"column":9,"nodeType":"413","messageId":"414","endLine":1736,"endColumn":50},{"ruleId":"411","severity":1,"message":"515","line":1741,"column":9,"nodeType":"413","messageId":"414","endLine":1741,"endColumn":29},{"ruleId":"411","severity":1,"message":"516","line":1746,"column":9,"nodeType":"413","messageId":"414","endLine":1746,"endColumn":29},{"ruleId":"411","severity":1,"message":"517","line":1751,"column":9,"nodeType":"413","messageId":"414","endLine":1751,"endColumn":27},{"ruleId":"411","severity":1,"message":"518","line":1752,"column":9,"nodeType":"413","messageId":"414","endLine":1752,"endColumn":27},{"ruleId":"411","severity":1,"message":"519","line":1972,"column":5,"nodeType":"413","messageId":"414","endLine":1972,"endColumn":6},{"ruleId":"411","severity":1,"message":"520","line":2889,"column":7,"nodeType":"413","messageId":"414","endLine":2889,"endColumn":30},{"ruleId":"411","severity":1,"message":"521","line":2890,"column":7,"nodeType":"413","messageId":"414","endLine":2890,"endColumn":30},{"ruleId":"411","severity":1,"message":"522","line":312,"column":9,"nodeType":"413","messageId":"414","endLine":312,"endColumn":17},{"ruleId":"422","severity":1,"message":"523","line":353,"column":6,"nodeType":"424","endLine":353,"endColumn":19,"suggestions":"524"},{"ruleId":"411","severity":1,"message":"525","line":80,"column":7,"nodeType":"413","messageId":"414","endLine":80,"endColumn":16},{"ruleId":"411","severity":1,"message":"526","line":225,"column":11,"nodeType":"413","messageId":"414","endLine":225,"endColumn":18},{"ruleId":"411","severity":1,"message":"527","line":232,"column":11,"nodeType":"413","messageId":"414","endLine":232,"endColumn":28},{"ruleId":"411","severity":1,"message":"528","line":234,"column":11,"nodeType":"413","messageId":"414","endLine":234,"endColumn":26},{"ruleId":"411","severity":1,"message":"529","line":236,"column":11,"nodeType":"413","messageId":"414","endLine":236,"endColumn":27},{"ruleId":"411","severity":1,"message":"530","line":529,"column":9,"nodeType":"413","messageId":"414","endLine":529,"endColumn":26},{"ruleId":"411","severity":1,"message":"531","line":533,"column":9,"nodeType":"413","messageId":"414","endLine":533,"endColumn":24},{"ruleId":"411","severity":1,"message":"532","line":538,"column":9,"nodeType":"413","messageId":"414","endLine":538,"endColumn":25},{"ruleId":"411","severity":1,"message":"533","line":551,"column":11,"nodeType":"413","messageId":"414","endLine":551,"endColumn":19},{"ruleId":"411","severity":1,"message":"484","line":553,"column":11,"nodeType":"413","messageId":"414","endLine":553,"endColumn":15},{"ruleId":"411","severity":1,"message":"534","line":584,"column":11,"nodeType":"413","messageId":"414","endLine":584,"endColumn":29},{"ruleId":"411","severity":1,"message":"535","line":602,"column":11,"nodeType":"413","messageId":"414","endLine":602,"endColumn":29},{"ruleId":"411","severity":1,"message":"435","line":617,"column":9,"nodeType":"413","messageId":"414","endLine":617,"endColumn":13},{"ruleId":"411","severity":1,"message":"536","line":638,"column":22,"nodeType":"413","messageId":"414","endLine":638,"endColumn":39},{"ruleId":"411","severity":1,"message":"537","line":656,"column":11,"nodeType":"413","messageId":"414","endLine":656,"endColumn":24},{"ruleId":"411","severity":1,"message":"538","line":661,"column":11,"nodeType":"413","messageId":"414","endLine":661,"endColumn":24},{"ruleId":"411","severity":1,"message":"539","line":781,"column":13,"nodeType":"413","messageId":"414","endLine":781,"endColumn":33},{"ruleId":"411","severity":1,"message":"540","line":794,"column":13,"nodeType":"413","messageId":"414","endLine":794,"endColumn":33},{"ruleId":"411","severity":1,"message":"541","line":808,"column":13,"nodeType":"413","messageId":"414","endLine":808,"endColumn":33},{"ruleId":"411","severity":1,"message":"542","line":821,"column":13,"nodeType":"413","messageId":"414","endLine":821,"endColumn":33},{"ruleId":"411","severity":1,"message":"543","line":836,"column":12,"nodeType":"413","messageId":"414","endLine":836,"endColumn":26},{"ruleId":"411","severity":1,"message":"493","line":836,"column":28,"nodeType":"413","messageId":"414","endLine":836,"endColumn":41},{"ruleId":"411","severity":1,"message":"544","line":839,"column":12,"nodeType":"413","messageId":"414","endLine":839,"endColumn":26},{"ruleId":"411","severity":1,"message":"494","line":839,"column":28,"nodeType":"413","messageId":"414","endLine":839,"endColumn":41},{"ruleId":"411","severity":1,"message":"545","line":843,"column":11,"nodeType":"413","messageId":"414","endLine":843,"endColumn":30},{"ruleId":"411","severity":1,"message":"546","line":852,"column":11,"nodeType":"413","messageId":"414","endLine":852,"endColumn":30},{"ruleId":"411","severity":1,"message":"547","line":12,"column":15,"nodeType":"413","messageId":"414","endLine":12,"endColumn":19},{"ruleId":"548","severity":1,"message":"549","line":76,"column":9,"nodeType":"550","endLine":82,"endColumn":10},{"ruleId":"411","severity":1,"message":"551","line":4,"column":8,"nodeType":"413","messageId":"414","endLine":4,"endColumn":16},{"ruleId":"411","severity":1,"message":"552","line":7,"column":7,"nodeType":"413","messageId":"414","endLine":7,"endColumn":17},{"ruleId":"411","severity":1,"message":"553","line":321,"column":7,"nodeType":"413","messageId":"414","endLine":321,"endColumn":12},{"ruleId":"411","severity":1,"message":"554","line":458,"column":9,"nodeType":"413","messageId":"414","endLine":458,"endColumn":20},"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","no-native-reassign",["555"],"no-negated-in-lhs",["556"],"'Link' is defined but never used.","'data' is assigned a value but never used.","'allowedCountries' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.","ArrayExpression",["557"],"'setCount' is defined but never used.","'toggle' is defined but never used.","'tipOutcome' is assigned a value but never used.","'selectedFixtureIds' is assigned a value but never used.","'shareableLink' is assigned a value but never used.","'setCount' is assigned a value but never used.","'showCapText' is assigned a value but never used.","'Eye' is defined but never used.","'EyeOff' is defined but never used.","'paid' is assigned a value but never used.","'isWithin48Hours' is defined but never used.","'getLeagueInstanceLength' is defined but never used.","React Hook useEffect has a missing dependency: 'fixture'. Either include it or remove the dependency array.",["558"],"'stripePromise' is defined but never used.","'loadingTeamStats' is assigned a value but never used.","'loadingKeyPlayerComparison' is assigned a value but never used.","'setLoadingKeyPlayerComparison' is assigned a value but never used.","'loadingOdds' is assigned a value but never used.","'setHomePlayerAttributes' is assigned a value but never used.","'setAwayPlayerAttributes' is assigned a value but never used.","'setHomePlayerAttributesComparison' is assigned a value but never used.","'setAwayPlayerAttributesComparison' is assigned a value but never used.","React Hook useEffect has an unnecessary dependency: 'userTips'. Either exclude it or remove the dependency array. Outer scope values like 'userTips' aren't valid dependencies because mutating them doesn't re-render the component.",["559"],"'hasCompleteData' is assigned a value but never used.","'homeXGRating' is assigned a value but never used.","'setHomeXGRating' is assigned a value but never used.","'awayXGRating' is assigned a value but never used.","'setAwayXGRating' is assigned a value but never used.","'rollingSOTDiffTotalHome' is assigned a value but never used.","'setRollingSOTDiffTotalHome' is assigned a value but never used.","'similarGamesHome' is assigned a value but never used.","'setSimilarGamesHome' is assigned a value but never used.","'similarGamesAway' is assigned a value but never used.","'setSimilarGamesAway' is assigned a value but never used.","'setHomeXGForStrengthLast5' is assigned a value but never used.","'setHomeOnlyXGForStrength' is assigned a value but never used.","'setHomeXGAgainstStrengthLast5' is assigned a value but never used.","'setHomeOnlyXGAgainstStrength' is assigned a value but never used.","'setHomeDirectnessStrengthLast5' is assigned a value but never used.","'setHomeOnlyDirectnessStrength' is assigned a value but never used.","'setAwayXGForStrengthLast5' is assigned a value but never used.","'setAwayOnlyXGForStrength' is assigned a value but never used.","'setAwayXGAgainstStrengthLast5' is assigned a value but never used.","'setAwayOnlyXGAgainstStrength' is assigned a value but never used.","'setAwayDirectnessStrengthLast5' is assigned a value but never used.","'setAwayOnlyDirectnessStrength' is assigned a value but never used.","'setGameArrayHomeTeamHomeGames' is assigned a value but never used.","'setGameArrayAwayTeamAwayGames' is assigned a value but never used.","'setDivider' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getTeamRanksFromTopTeamsWithPartialMatch'. Either include it or remove the dependency array.",["560"],["561"],"React Hook useMemo has an unnecessary dependency: 'rounds'. Either exclude it or remove the dependency array. Outer scope values like 'rounds' aren't valid dependencies because mutating them doesn't re-render the component.",["562"],"React Hook useEffect has missing dependencies: 'derivedRoundId', 'extractMissingPlayers', 'findGameByPartialMatch', 'game.awayTeam', 'game.date', 'game.homeTeam', 'game.sofaScoreId', 'getGameIdByAwayTeam', 'getGameIdByHomeTeam', 'getMappedTeamName', and 'week'. Either include them or remove the dependency array.",["563"],"'time' is assigned a value but never used.","'paymentStatus' is assigned a value but never used.","'resultHome' is assigned a value but never used.","'resultHomeOnly' is assigned a value but never used.","'resultAway' is assigned a value but never used.","'resultAwayOnly' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'game.matches_completed_minimum'. Either include it or remove the dependency array.",["564"],"'type' is defined but never used.","'testArrayHome' is assigned a value but never used.","'testArrayAway' is assigned a value but never used.","'alpha' is assigned a value but never used.","'beta' is assigned a value but never used.","'teamGoalsHomeRollingAverage' is assigned a value but never used.","'teamGoalsAwayRollingAverage' is assigned a value but never used.","'roundXG' is defined but never used.","'teamGoalsAllRollingAverage' is assigned a value but never used.","'poissonDistribution' is defined but never used.","'calculateAverageGoals' is defined but never used.","'adjustGoalsAvg' is defined but never used.","'normalizeDifference' is defined but never used.","'findClosestProperty' is defined but never used.","'finalScore' is assigned a value but never used.","'homeAttackVsAwayDefenceComparison' is assigned a value but never used.","'awayAttackVsHomeDefenceComparison' is assigned a value but never used.","'homeOverallVsAwayOverallComparison' is assigned a value but never used.","'awayOverallVsHomeOverallComparison' is assigned a value but never used.","'homeAttackVsAwayDefenceComparisonLast5' is assigned a value but never used.","'awayAttackVsHomeDefenceComparisonLast5' is assigned a value but never used.","'homeAttackVsAwayDefenceComparisonHomeOnly' is assigned a value but never used.","'awayAttackVsHomeDefenceComparisonAwayOnly' is assigned a value but never used.","'pointsComparisonHome' is assigned a value but never used.","'pointsComparisonAway' is assigned a value but never used.","'oddsComparisonHome' is assigned a value but never used.","'oddsComparisonAway' is assigned a value but never used.","'i' is assigned a value but never used.","'homeComparisonWeighting' is assigned a value but never used.","'awayComparisonWeighting' is assigned a value but never used.","'seasonId' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'derivedRoundId'. Either include it or remove the dependency array.",["565"],"'normValue' is assigned a value but never used.","'divider' is assigned a value but never used.","'goalDiffArrayHome' is defined but never used.","'xgDiffArrayHome' is defined but never used.","'sotDiffArrayHome' is defined but never used.","'goalDiffArrayAway' is assigned a value but never used.","'xgDiffArrayAway' is assigned a value but never used.","'sotDiffArrayAway' is assigned a value but never used.","'awayTeam' is assigned a value but never used.","'homeSixGameAverage' is assigned a value but never used.","'awaySixGameAverage' is assigned a value but never used.","'getLastGameResult' is defined but never used.","'homeFormTrend' is assigned a value but never used.","'awayFormTrend' is assigned a value but never used.","'attackingMetricsHome' is assigned a value but never used.","'attackingMetricsAway' is assigned a value but never used.","'defensiveMetricsHome' is assigned a value but never used.","'defensiveMetricsAway' is assigned a value but never used.","'formPointsHome' is assigned a value but never used.","'formPointsAway' is assigned a value but never used.","'rollingGoalDiffHome' is assigned a value but never used.","'rollingGoalDiffAway' is assigned a value but never used.","'Line' is defined but never used.","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","JSXOpeningElement","'BarChart' is defined but never used.","'shouldOpen' is assigned a value but never used.","'color' is defined but never used.","'teamBValues' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"566","fix":"567"},{"desc":"568","fix":"569"},{"desc":"570","fix":"571"},{"desc":"572","fix":"573"},{"desc":"574","fix":"575"},{"desc":"576","fix":"577"},{"desc":"578","fix":"579"},{"desc":"580","fix":"581"},{"desc":"582","fix":"583"},"Update the dependencies array to be: [fetchData]",{"range":"584","text":"585"},"Update the dependencies array to be: [fixture, id]",{"range":"586","text":"587"},"Update the dependencies array to be: []",{"range":"588","text":"589"},"Update the dependencies array to be: [stats, homeForm.teamName, getTeamRanksFromTopTeamsWithPartialMatch]",{"range":"590","text":"591"},"Update the dependencies array to be: [stats, awayForm.teamName, getTeamRanksFromTopTeamsWithPartialMatch]",{"range":"592","text":"593"},"Update the dependencies array to be: [game.sofaScoreId]",{"range":"594","text":"595"},"Update the dependencies array to be: [derivedRoundId, extractMissingPlayers, findGameByPartialMatch, game.awayTeam, game.date, game.homeTeam, game.id, game.sofaScoreId, getGameIdByAwayTeam, getGameIdByHomeTeam, getMappedTeamName, week]",{"range":"596","text":"597"},"Update the dependencies array to be: [awayFiveGameAverage, firstRenderDone, awayTenGameAverage, game.completeData, game.id, game.status, homeFiveGameAverage, homeTenGameAverage, game.matches_completed_minimum]",{"range":"598","text":"599"},"Update the dependencies array to be: [derivedRoundId, id, roundId]",{"range":"600","text":"601"},[503,505],"[fetchData]",[3306,3310],"[fixture, id]",[4984,4994],"[]",[19178,19205],"[stats, homeForm.teamName, getTeamRanksFromTopTeamsWithPartialMatch]",[19394,19421],"[stats, awayForm.teamName, getTeamRanksFromTopTeamsWithPartialMatch]",[35060,35086],"[game.sofaScoreId]",[51811,51820],"[derivedRoundId, extractMissingPlayers, findGameByPartialMatch, game.awayTeam, game.date, game.homeTeam, game.id, game.sofaScoreId, getGameIdByAwayTeam, getGameIdByHomeTeam, getMappedTeamName, week]",[111333,111510],"[awayFiveGameAverage, firstRenderDone, awayTenGameAverage, game.completeData, game.id, game.status, homeFiveGameAverage, homeTenGameAverage, game.matches_completed_minimum]",[7546,7559],"[derivedRoundId, id, roundId]"]