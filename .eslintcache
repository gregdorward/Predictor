[{"/Users/gregdorward/Development/football-predictions/src/index.js":"1","/Users/gregdorward/Development/football-predictions/src/App.js":"2","/Users/gregdorward/Development/football-predictions/src/reportWebVitals.js":"3","/Users/gregdorward/Development/football-predictions/src/components/spinner.js":"4","/Users/gregdorward/Development/football-predictions/src/components/showCardPotential.js":"5","/Users/gregdorward/Development/football-predictions/src/components/createBadge.js":"6","/Users/gregdorward/Development/football-predictions/src/components/showBttsData.js":"7","/Users/gregdorward/Development/football-predictions/src/components/radio.js":"8","/Users/gregdorward/Development/football-predictions/src/components/Header.js":"9","/Users/gregdorward/Development/football-predictions/src/logic/getFixtures.js":"10","/Users/gregdorward/Development/football-predictions/src/components/createStatsDiv.js":"11","/Users/gregdorward/Development/football-predictions/src/logic/getForm.js":"12","/Users/gregdorward/Development/football-predictions/src/components/Button.js":"13","/Users/gregdorward/Development/football-predictions/src/logic/getScorePredictions.js":"14","/Users/gregdorward/Development/football-predictions/src/components/CollapsableElement.js":"15","/Users/gregdorward/Development/football-predictions/src/components/TextSection.js":"16","/Users/gregdorward/Development/football-predictions/src/logic/getStats.js":"17","/Users/gregdorward/Development/football-predictions/src/components/Div.js":"18","/Users/gregdorward/Development/football-predictions/src/components/CollapsableDiv.js":"19","/Users/gregdorward/Development/football-predictions/src/components/Increment.js":"20","/Users/gregdorward/Development/football-predictions/src/logic/getBTTSPotential.js":"21","/Users/gregdorward/Development/football-predictions/src/components/OddsRadio.js":"22","/Users/gregdorward/Development/football-predictions/src/logic/getTeamStats.js":"23","/Users/gregdorward/Development/football-predictions/src/components/HeadToHead.js":"24","/Users/gregdorward/Development/football-predictions/src/components/BulletList.js":"25","/Users/gregdorward/Development/football-predictions/src/components/Table.js":"26","/Users/gregdorward/Development/football-predictions/src/components/LeagueTable.js":"27","/Users/gregdorward/Development/football-predictions/src/components/Fixture.js":"28","/Users/gregdorward/Development/football-predictions/src/components/KofiButton.js":"29","/Users/gregdorward/Development/football-predictions/src/components/Chart.js":"30","/Users/gregdorward/Development/football-predictions/src/logic/compareFormTrend.js":"31","/Users/gregdorward/Development/football-predictions/src/components/Toggle.js":"32"},{"size":500,"mtime":1657294830145,"results":"33","hashOfConfig":"34"},{"size":14343,"mtime":1662648485151,"results":"35","hashOfConfig":"34"},{"size":362,"mtime":1642008106594,"results":"36","hashOfConfig":"34"},{"size":297,"mtime":1611654841360,"results":"37","hashOfConfig":"38"},{"size":0,"mtime":1611654832610,"results":"39","hashOfConfig":"38"},{"size":373,"mtime":1657548030451,"results":"40","hashOfConfig":"34"},{"size":0,"mtime":1611654828618,"results":"41","hashOfConfig":"38"},{"size":963,"mtime":1642008106588,"results":"42","hashOfConfig":"34"},{"size":144,"mtime":1642008106581,"results":"43","hashOfConfig":"34"},{"size":49568,"mtime":1662639411346,"results":"44","hashOfConfig":"34"},{"size":12483,"mtime":1658484931348,"results":"45","hashOfConfig":"34"},{"size":472,"mtime":1660140948512,"results":"46","hashOfConfig":"34"},{"size":273,"mtime":1642008106576,"results":"47","hashOfConfig":"34"},{"size":69858,"mtime":1662648534524,"results":"48","hashOfConfig":"34"},{"size":650,"mtime":1642008106578,"results":"49","hashOfConfig":"34"},{"size":180,"mtime":1642008106585,"results":"50","hashOfConfig":"51"},{"size":26257,"mtime":1662648313025,"results":"52","hashOfConfig":"34"},{"size":203,"mtime":1642008106578,"results":"53","hashOfConfig":"34"},{"size":595,"mtime":1614865093901,"results":"54","hashOfConfig":"38"},{"size":1347,"mtime":1660318811896,"results":"55","hashOfConfig":"34"},{"size":1434,"mtime":1662460190801,"results":"56","hashOfConfig":"34"},{"size":960,"mtime":1659349970801,"results":"57","hashOfConfig":"34"},{"size":8078,"mtime":1660141079723,"results":"58","hashOfConfig":"34"},{"size":2202,"mtime":1647339036886,"results":"59","hashOfConfig":"34"},{"size":440,"mtime":1642008106576,"results":"60","hashOfConfig":"51"},{"size":4674,"mtime":1660145164018,"results":"61","hashOfConfig":"34"},{"size":11096,"mtime":1660842410067,"results":"62","hashOfConfig":"34"},{"size":8559,"mtime":1660296797159,"results":"63","hashOfConfig":"34"},{"size":184,"mtime":1662648421812,"results":"64","hashOfConfig":"34"},{"size":3666,"mtime":1658439524476,"results":"65","hashOfConfig":"34"},{"size":18808,"mtime":1658744218730,"results":"66","hashOfConfig":"34"},{"size":402,"mtime":1659709095122,"results":"67","hashOfConfig":"34"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"z32ji8",{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1f0e5p2",{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"101"},"1eaajj",{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"70"},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"132","messages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"70"},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"/Users/gregdorward/Development/football-predictions/src/index.js",[],["137","138"],"/Users/gregdorward/Development/football-predictions/src/App.js",[],"/Users/gregdorward/Development/football-predictions/src/reportWebVitals.js",[],"/Users/gregdorward/Development/football-predictions/src/components/spinner.js",[],"/Users/gregdorward/Development/football-predictions/src/components/showCardPotential.js",[],"/Users/gregdorward/Development/football-predictions/src/components/createBadge.js",[],"/Users/gregdorward/Development/football-predictions/src/components/showBttsData.js",[],"/Users/gregdorward/Development/football-predictions/src/components/radio.js",[],"/Users/gregdorward/Development/football-predictions/src/components/Header.js",[],"/Users/gregdorward/Development/football-predictions/src/logic/getFixtures.js",[],"/Users/gregdorward/Development/football-predictions/src/components/createStatsDiv.js",[],"/Users/gregdorward/Development/football-predictions/src/logic/getForm.js",[],"/Users/gregdorward/Development/football-predictions/src/components/Button.js",[],"/Users/gregdorward/Development/football-predictions/src/logic/getScorePredictions.js",["139"],"/Users/gregdorward/Development/football-predictions/src/components/CollapsableElement.js",[],"/Users/gregdorward/Development/football-predictions/src/components/TextSection.js",[],["140","141"],"/Users/gregdorward/Development/football-predictions/src/logic/getStats.js",[],"/Users/gregdorward/Development/football-predictions/src/components/Div.js",[],"/Users/gregdorward/Development/football-predictions/src/components/CollapsableDiv.js",[],"/Users/gregdorward/Development/football-predictions/src/components/Increment.js",[],"/Users/gregdorward/Development/football-predictions/src/logic/getBTTSPotential.js",[],"/Users/gregdorward/Development/football-predictions/src/components/OddsRadio.js",[],"/Users/gregdorward/Development/football-predictions/src/logic/getTeamStats.js",[],"/Users/gregdorward/Development/football-predictions/src/components/HeadToHead.js",[],"/Users/gregdorward/Development/football-predictions/src/components/BulletList.js",[],["142","143"],"/Users/gregdorward/Development/football-predictions/src/components/Table.js",[],"/Users/gregdorward/Development/football-predictions/src/components/LeagueTable.js",[],"/Users/gregdorward/Development/football-predictions/src/components/Fixture.js",["144"],"import React, { Fragment, useState } from \"react\";\nimport { CreateBadge } from \"./createBadge\";\nimport Collapsable from \"../components/CollapsableElement\";\nimport { createStatsDiv } from \"../logic/getStats\";\nimport { renderTable } from \"../logic/getFixtures\";\n\nlet resultValue;\nvar count\nvar setCount\n\nconst text =\n  \"XG Tipping formulates predictions based on recent form data ranging from points per game to each teams attacking potency\\n Expected Goals in previous matches are used to determine whether teams might be over or underperforming and predictions are weighted as such\\n Once all fixtures have loaded, click on “Get Predictions”\\n Predictions are displayed on the right and the results on the left\\n Click on an individual fixture for detailed stats for both teams.\";\n\n  function toggle(bool) {\n    count = !bool;\n    console.log(count)\n    return count\n  }\n\n  // function stylying(bool){\n  //   if (bool === true) {\n  //     // set stats element to display flex\n  //     return { display: \"block\" };\n  //   } else {\n  //     // set stats element to display none\n  //     return { display: \"none\" };\n  //   }\n  // }\n\n  \n\nfunction GetDivider(fixture) {\n  const matchStatus = fixture.status;\n  const isPrediction = resultValue;\n\n  if (isPrediction === false && matchStatus !== \"complete\") {\n    return (\n      <div className=\"divider\" data-cy={\"divider-\" + fixture.fixture.id}>\n        {\"V\"}\n      </div>\n    );\n  } else if (isPrediction === false && matchStatus === \"complete\") {\n    return (\n      <div\n        className=\"Result\"\n        data-cy={\"result-\" + fixture.fixture.id}\n      >{`${fixture.fixture.homeGoals} - ${fixture.fixture.awayGoals}`}</div>\n    );\n  } else if (isPrediction === true && matchStatus === \"complete\") {\n    let outcome;\n    let prediction;\n\n    switch (true) {\n      case fixture.fixture.homeGoals > fixture.fixture.awayGoals:\n        outcome = 0;\n        fixture.fixture.winner = fixture.fixture.homeTeam;\n        fixture.fixture.outcome = \"homeWin\";\n        break;\n      case fixture.fixture.homeGoals === fixture.fixture.awayGoals:\n        outcome = 1;\n        fixture.fixture.winner = \"draw\";\n        fixture.fixture.outcome = \"draw\";\n\n        break;\n      case fixture.fixture.homeGoals < fixture.fixture.awayGoals:\n        outcome = 2;\n        fixture.fixture.winner = fixture.fixture.awayTeam;\n        fixture.fixture.outcome = \"awayWin\";\n\n        break;\n      default:\n        break;\n    }\n\n    switch (true) {\n      case fixture.fixture.goalsA > fixture.fixture.goalsB:\n        prediction = 0;\n        break;\n      case fixture.fixture.goalsA === fixture.fixture.goalsB:\n        prediction = 1;\n        break;\n      case fixture.fixture.goalsA < fixture.fixture.goalsB:\n        prediction = 2;\n        break;\n      default:\n        break;\n    }\n\n    if (fixture.fixture.homeGoals > 0 && fixture.fixture.awayGoals > 0) {\n      fixture.fixture.bttsOutcome = \"bttsWon\";\n    } else {\n      fixture.fixture.bttsOutcome = \"bttsLost\";\n    }\n\n    if (outcome === prediction) {\n      // console.log(fixture.fixture.game);\n      if (fixture.fixture.homeOdds !== 0) {\n        switch (true) {\n          case outcome === 0:\n            fixture.fixture.profit = fixture.fixture.homeOdds;\n            break;\n          case outcome === 1:\n            fixture.fixture.profit = fixture.fixture.drawOdds;\n            break;\n          case outcome === 2:\n            fixture.fixture.profit = fixture.fixture.awayOdds;\n            break;\n          default:\n            break;\n        }\n      } else fixture.fixture.profit = 1;\n\n      if (\n        fixture.fixture.goalsA === fixture.fixture.homeGoals &&\n        fixture.fixture.goalsB === fixture.fixture.awayGoals\n      ) {\n        fixture.fixture.exactScore = true;\n        return (\n          <Fragment>\n            <div className=\"Result\">{`${fixture.fixture.homeGoals} - ${fixture.fixture.awayGoals}`}</div>\n            <div\n              className=\"ExactScore\"\n              key={fixture.fixture.homeTeam}\n              data-cy={\"score-\" + fixture.fixture.id}\n            >{`${fixture.fixture.goalsA} - ${fixture.fixture.goalsB}`}</div>\n          </Fragment>\n        );\n      } else {\n        fixture.fixture.exactScore = false;\n        return (\n          <Fragment>\n            <div className=\"Result\">{`${fixture.fixture.homeGoals} - ${fixture.fixture.awayGoals}`}</div>\n            <div\n              className=\"CorrectScore\"\n              key={fixture.fixture.homeTeam}\n              data-cy={\"score-\" + fixture.fixture.id}\n            >{`${fixture.fixture.goalsA} - ${fixture.fixture.goalsB}`}</div>\n          </Fragment>\n        );\n      }\n      // console.log(`profit ${fixture.fixture.profit}`);\n    } else if (outcome !== prediction) {\n      if (fixture.fixture.homeOdds !== 0) {\n        fixture.fixture.profit = 0;\n      } else {\n        fixture.fixture.profit = 1;\n      }\n      // console.log(fixture.fixture.game);\n      // console.log(`profit ${fixture.fixture.profit}`);\n      fixture.fixture.exactScore = false;\n      return (\n        <Fragment>\n          <div className=\"Result\">{`${fixture.fixture.homeGoals} - ${fixture.fixture.awayGoals}`}</div>\n          <div\n            className=\"IncorrectScore\"\n            key={fixture.fixture.awayTeam}\n          >{`${fixture.fixture.goalsA} - ${fixture.fixture.goalsB}`}</div>\n        </Fragment>\n      );\n    }\n  } else {\n    return (\n      <Fragment>\n        <div className=\"KOTime\">{`${fixture.fixture.time}`}</div>\n        <div\n          className=\"score\"\n          key={fixture.fixture.awayTeam}\n        >{`${fixture.fixture.goalsA} - ${fixture.fixture.goalsB}`}</div>\n      </Fragment>\n    );\n  }\n}\n\nfunction getStyle(pointsAverageDiffBool) {\nif(pointsAverageDiffBool === true){\n  return \"individualFixtureGap\"\n} else {\n  return \"individualFixture\";\n}\n}\n\nfunction renderLeagueName(fixture) {\n  let name = fixture.leagueName;\n  if (name === null) {\n    return <div></div>;\n  } else {\n    return (\n      <div>\n        <div\n          className=\"leagueName\"\n          key={`leagueName${fixture.leagueIndex}div`}\n          onClick={() => renderTable(fixture.leagueIndex)}\n        >\n          {fixture.leagueName} &#9776;\n        </div>\n        <div\n          className=\"LeagueTable\"\n          key={`leagueName${fixture.leagueIndex}`}\n          id={`leagueName${fixture.leagueIndex}`}\n        ></div>\n      </div>\n    );\n  }\n}\n\nconst SingleFixture = ({ fixture, count }) => (\n\n  <div key={fixture.game}>\n    {renderLeagueName(fixture)}\n    <li\n      className={getStyle(fixture.pointsAverageDiff)}\n      key={fixture.id}\n      onMouseDown={() => count = toggle(count)}\n      onClick={() => createStatsDiv(fixture, count)}\n      data-cy={fixture.id}\n    >\n        \n\n      <div className=\"HomeOdds\">{fixture.fractionHome}</div>\n      <div className=\"homeTeam\">{fixture.homeTeam}</div>\n      <GetDivider\n        result={resultValue}\n        status={fixture.status}\n        fixture={fixture}\n      />\n      {/* <div className=\"divider\">{\"V\"}</div> */}\n      <div className=\"awayTeam\">{fixture.awayTeam}</div>\n      <CreateBadge\n        image={fixture.homeBadge}\n        ClassName=\"HomeBadge\"\n        alt=\"Home team badge\"\n        flexShrink={5}\n      />\n      <CreateBadge\n        image={fixture.awayBadge}\n        ClassName=\"AwayBadge\"\n        alt=\"Away team badge\"\n      />\n      <div className=\"AwayOdds\">{fixture.fractionAway}</div>\n    </li>\n    <div className={\"StatsDiv\"}>\n      <div id={\"stats\" + fixture.homeTeam}></div>\n      <Fragment>\n        <div\n          className=\"StatsContainer\"\n          data-cy={\"StatsContainer-\" + fixture.id}\n        >\n          <div className=\"HomeStats\" id={\"home\" + fixture.homeTeam}></div>\n          <div className=\"AwayStats\" id={\"away\" + fixture.awayTeam}></div>\n        </div>\n      </Fragment>\n      <div className=\"MatchHistory\" id={\"history\" + fixture.homeTeam}></div>\n    </div>\n  </div>\n);\n\nlet newText = text.split(\"\\n\").map((i) => {\n  return <p>{i}</p>;\n});\n\nconst List = ({ fixtures }) => (\n  <div>\n    <Fragment>\n      <Collapsable\n        className={\"HowToUse\"}\n        buttonText={\"Show / Hide help\"}\n        text={newText}\n      />\n    </Fragment>\n    <div id=\"Headers\"></div>\n    <ul className=\"FixtureList\" id=\"FixtureList\">\n      {fixtures.map((fixture, i) => (\n        <SingleFixture fixture={fixture} key={fixture.game} count={count}/>\n      ))}\n    </ul>\n  </div>\n);\n\nexport function Fixture(props) {\n  [count, setCount] = useState(false);\n  resultValue = props.result;\n  return <List fixtures={props.fixtures} result={resultValue} count={count}/>;\n}\n","/Users/gregdorward/Development/football-predictions/src/components/KofiButton.js",[],"/Users/gregdorward/Development/football-predictions/src/components/Chart.js",[],"/Users/gregdorward/Development/football-predictions/src/logic/compareFormTrend.js",["145"],"import { parse } from \"dotenv\";\n\nasync function getOverOrUnderText(xgSum) {\n  let overUnderAchievingSum = xgSum;\n  let text;\n  switch (true) {\n    case overUnderAchievingSum > 1.5:\n      text =\n        \"Underachieving drastically against their expected goal difference.\";\n      break;\n    case overUnderAchievingSum > 1.25 && overUnderAchievingSum <= 1.5:\n      text =\n        \"Underachieving to a large degree against their expected goal difference.\";\n      break;\n    case overUnderAchievingSum > 1 && overUnderAchievingSum <= 1.25:\n      text = \"Underachieving against their expected goal difference.\";\n      break;\n    case overUnderAchievingSum > 0.75 && overUnderAchievingSum <= 1:\n      text =\n        \"Underachieving to a small degree against their expected goal difference.\";\n      break;\n    case overUnderAchievingSum > 0.4 && overUnderAchievingSum <= 0.75:\n      text =\n        \"Underachieving slighly against their expected goal difference.\";\n      break;\n    case overUnderAchievingSum > -0.4 && overUnderAchievingSum <= 0.4:\n      text =\n        \"Roughly tracking on par with their expected goal difference.\";\n      break;\n\n    case overUnderAchievingSum < -0.4 && overUnderAchievingSum >= -0.75:\n      text =\n        \"Overachieving slighly against their expected goal difference.\";\n      break;\n    case overUnderAchievingSum < -0.75 && overUnderAchievingSum >= -1:\n      text =\n        \"Overachieving to a small degree against their expected goal difference.\";\n      break;\n    case overUnderAchievingSum < -1 && overUnderAchievingSum >= -1.25:\n      text = \"Overachieving against their expected goal difference.\";\n      break;\n    case overUnderAchievingSum < -1.25 && overUnderAchievingSum >= -1.5:\n      text =\n        \"Overachieving to a large degree against their expected goal difference.\";\n      break;\n    case overUnderAchievingSum < -1.5:\n      text =\n        \"Overachieving drastically against their expected goal difference.\";\n      break;\n    default:\n      text = \"\";\n      break;\n  }\n  return text;\n}\n\nexport async function diff(a, b) {\n  return parseFloat(a - b).toFixed(2);\n}\n\nasync function getXGDifferential(xgFor, xgAgainst, goalsFor, goalsAgainst) {\n  let xgDiff = xgFor - xgAgainst;\n  let goalDiff = goalsFor - goalsAgainst;\n  let compareXgAndGoalDiff = await diff(xgDiff, goalDiff);\n\n  return compareXgAndGoalDiff;\n}\n\nasync function getAttackingSummary(goalsRecent, goalsLongTerm) {\n\nconsole.log(goalsRecent)\nconsole.log(goalsLongTerm)\n\n\n  let text;\n  if (goalsRecent >= 3) {\n    switch (true) {\n      case goalsRecent > goalsLongTerm:\n        text = \"Free scoring and improving in front of goal recently.\";\n        break;\n      case goalsRecent === goalsLongTerm:\n        text = \"Free scoring and consistent in front of goal.\";\n        break;\n      case goalsRecent < goalsLongTerm:\n        text = \"Free scoring but less so recently.\";\n        break;\n      default:\n        break;\n    }\n  } else if (goalsRecent < 3 && goalsRecent >= 2) {\n    switch (true) {\n      case goalsRecent > goalsLongTerm:\n        text =\n          \"Impressive scoring stats and improving in front of goal recently.\";\n        break;\n      case goalsRecent === goalsLongTerm:\n        text = \"Impressive scoring stats and consistent in front of goal.\";\n        break;\n      case goalsRecent < goalsLongTerm:\n        text = \"Impressive scoring stats but less so recently.\";\n        break;\n      default:\n        break;\n    }\n  } else if (goalsRecent < 2 && goalsRecent >= 1) {\n    switch (true) {\n      case goalsRecent > goalsLongTerm:\n        text = \"Decent scoring stats and improving in front of goal recently.\";\n        break;\n      case goalsRecent === goalsLongTerm:\n        text = \"Decent scoring stats and consistent in front of goal.\";\n        break;\n      case goalsRecent < goalsLongTerm:\n        text = \"Decent scoring stats but less so recently.\";\n        break;\n      default:\n        break;\n    }\n  } else if (goalsRecent < 1 && goalsRecent > 0) {\n    switch (true) {\n      case goalsRecent > goalsLongTerm:\n        text = \"Poor scoring stats but improving in front of goal recently.\";\n        break;\n      case goalsRecent === goalsLongTerm:\n        text = \"Poor scoring stats and consistently poor in front of goal.\";\n        break;\n      case goalsRecent < goalsLongTerm:\n        text = \"Poor scoring stats showing no signs of improvement.\";\n        break;\n      default:\n        break;\n    }\n  } else if (goalsRecent === 0) {\n    switch (true) {\n      case goalsRecent === 0:\n        text = \"Woeful goal stats in recent games.\";\n        break;\n      default:\n        text = \"\";\n        break;\n    }\n  }\n  return text;\n}\n\nasync function getDefenceSummary(cleansheetStat) {\n  let text;\n  switch (true) {\n    case cleansheetStat > 80:\n      text = `Incredibly strong defensively, with ${cleansheetStat}% of their games ending in a cleansheet`;\n      break;\n    case cleansheetStat > 60 && cleansheetStat <= 80:\n      text = `Very strong defensively, with ${cleansheetStat}% of their games ending in a cleansheet`;\n      break;\n    case cleansheetStat > 40 && cleansheetStat <= 60:\n      text = `Defensively impressive, with ${cleansheetStat}% of their games ending in a cleansheet`;\n      break;\n    case cleansheetStat > 20 && cleansheetStat <= 40:\n      text = `Defensively, ${cleansheetStat}% of their games have ended in a cleansheet`;\n      break;\n    case cleansheetStat > 1 && cleansheetStat <= 20:\n      text = `Defensively frail, with only ${cleansheetStat}% of their games ending in a cleansheet`;\n      break;\n      case cleansheetStat === 0:\n        text = `Defensively weak, with ${cleansheetStat}% of their games ending in a cleansheet`;\n        break;\n    default:\n      break;\n  }\n  return text;\n}\n\nasync function GenerateFormSummary(form, lastx, recentForm) {\n  console.log(form);\n  console.log(lastx);\n  let text;\n  let ten = lastx[2];\n  let five = lastx[1];\n  let three = lastx[0];\n  let xgSum = await getXGDifferential(\n    form.XGOverall,\n    form.XGAgainstAvgOverall,\n    form.ScoredOverall / 10,\n    form.ConcededOverall / 10\n  );\n  let xgText = await getOverOrUnderText(xgSum);\n  let attackString = await getAttackingSummary(\n    form.ScoredOverall / 10,\n    recentForm.ScoredOverall / 5\n  );\n  let defenceString = await getDefenceSummary(form.CleanSheetPercentage);\n  console.log(three);\n  console.log(five);\n  console.log(ten)\n  let pointsAverageTotal =\n    (parseFloat(three) + parseFloat(five) + parseFloat(ten)) / 3;\n\n  if (pointsAverageTotal > 2.2 && three >= 2.5) {\n    console.log(1);\n    switch (true) {\n      case three > five && five >= ten:\n        text =\n          \"Outstanding recent form with solid improvement over last 10 games.\";\n        break;\n      case three > five && five < ten:\n        text =\n          \"Outstanding recent form which has improved with some inconsistency over last 10 games.\";\n        break;\n      case three === five && five > ten:\n        text = \"Outstanding recent form with most improvement in the last 5.\";\n        break;\n      case three === five && five < ten:\n        text = \"Outstanding recent form with a slight dip in the last 5.\";\n        break;\n      case three === five && five === ten:\n        text = \"Consistently outstanding form over the last 10.\";\n        break;\n      case three < five && five === ten:\n        text =\n          \"Outstanding recent form but slightly worsening in most recent results.\";\n        break;\n      case three < five && five > ten:\n        text =\n          \"Outstanding recent form but slightly fluctuating over the last 10.\";\n        break;\n      case three < five && five < ten:\n        text = \"Outstanding recent form but beginning to worsen recently.\";\n        break;\n      default:\n        break;\n    }\n  } else if (pointsAverageTotal <= 2.2 && three >= 2.5) {\n    console.log(2);\n    switch (true) {\n      case three > five && five >= ten:\n        text =\n          \"Very good recent form with solid improvement over last 10 games.\";\n        break;\n      case three > five && five < ten:\n        text =\n          \"Very good recent form which has improved with some inconsistency over last 10 games.\";\n        break;\n      case three === five && five > ten:\n        text = \"Very good recent form with most improvement in the last 5.\";\n        break;\n      case three === five && five < ten:\n        text = \"Very good recent form with a slight dip in the last 5.\";\n        break;\n      case three === five && five === ten:\n        text = \"Consistently very good form over the last 10.\";\n        break;\n      case three < five && five === ten:\n        text =\n          \"Very good recent form but slightly worsening in most recent results.\";\n        break;\n      case three < five && five > ten:\n        text =\n          \"Very good recent form but slightly fluctuating over the last 10.\";\n        break;\n      case three < five && five < ten:\n        text = \"Very good recent form but beginning to worsen recently.\";\n        break;\n      default:\n        break;\n    }\n  } else if (pointsAverageTotal > 2 && three < 2.5 && three >= 2) {\n    console.log(3);\n    switch (true) {\n      case three > five && five >= ten:\n        text =\n          \"Very good recent form with solid improvement over last 10 games.\";\n        break;\n      case three > five && five < ten:\n        text =\n          \"Very good recent form which has improved with some inconsistency over last 10 games.\";\n        break;\n      case three === five && five > ten:\n        text = \"Very good recent form with most improvement in the last 5.\";\n        break;\n      case three === five && five < ten:\n        text = \"Very good recent form with a slight dip in the last 5.\";\n        break;\n      case three === five && five === ten:\n        text = \"Very good form over the last 10.\";\n        break;\n      case three < five && five === ten:\n        text =\n          \"Very good recent form but slightly worsening in most recent results.\";\n        break;\n      case three < five && five > ten:\n        text =\n          \"Very good recent form but slightly fluctuating over the last 10.\";\n        break;\n      case three < five && five < ten:\n        text = \"Very good recent form but beginning to worsen recently.\";\n        break;\n      default:\n        break;\n    }\n  } else if (pointsAverageTotal <= 2 && three < 2.5 && three >= 2) {\n    console.log(4);\n    switch (true) {\n      case three > five && five >= ten:\n        text = \"Good recent form with solid improvement over last 10 games.\";\n        break;\n      case three > five && five < ten:\n        text =\n          \"Good recent form which has improved with some inconsistency over last 10 games.\";\n        break;\n      case three === five && five > ten:\n        text = \"Good recent form with most improvement in the last 5.\";\n        break;\n      case three === five && five < ten:\n        text = \"Good recent form with a slight dip in the last 5.\";\n        break;\n      case three === five && five === ten:\n        text = \"Good form over the last 10.\";\n        break;\n      case three < five && five === ten:\n        text =\n          \"Good recent form but slightly worsening in most recent results.\";\n        break;\n      case three < five && five > ten:\n        text = \"Good recent form but slightly fluctuating over the last 10.\";\n        break;\n      case three < five && five < ten:\n        text = \"Good recent form but beginning to worsen recently.\";\n        break;\n      default:\n        break;\n    }\n  } else if (pointsAverageTotal > 2 && three < 2 && three >= 1.5) {\n    console.log(5);\n    switch (true) {\n      case three > five && five >= ten:\n        text = \"Good recent form with solid improvement over last 10 games.\";\n        break;\n      case three > five && five < ten:\n        text =\n          \"Good recent form which has improved with some inconsistency over last 10 games.\";\n        break;\n      case three === five && five > ten:\n        text = \"Good recent form with most improvement in the last 5.\";\n        break;\n      case three === five && five < ten:\n        text = \"Good recent form with a slight dip in the last 5.\";\n        break;\n      case three === five && five === ten:\n        text = \"Good form over the last 10.\";\n        break;\n      case three < five && five === ten:\n        text =\n          \"Good recent form but slightly worsening in most recent results.\";\n        break;\n      case three < five && five > ten:\n        text = \"Good recent form but slightly fluctuating over the last 10.\";\n        break;\n      case three < five && five < ten:\n        text = \"Good recent form but worsening recently.\";\n        break;\n      default:\n        break;\n    }\n  } else if (pointsAverageTotal <= 2 && three < 2 && three >= 1.5) {\n    console.log(6);\n    switch (true) {\n      case three > five && five >= ten:\n        text = \"Average recent form with solid improvement over last 10 games.\";\n        break;\n      case three > five && five < ten:\n        text =\n          \"Average recent form which has improved with some inconsistency over last 10 games.\";\n        break;\n      case three === five && five > ten:\n        text = \"Average recent form with some improvement in the last 5.\";\n        break;\n      case three === five && five < ten:\n        text = \"Average recent form with a slight dip in the last 5.\";\n        break;\n      case three === five && five === ten:\n        text = \"Average form over the last 10.\";\n        break;\n      case three < five && five === ten:\n        text =\n          \"Average recent form but slightly worsening in most recent results.\";\n        break;\n      case three < five && five > ten:\n        text = \"Average recent form, slightly fluctuating over the last 10.\";\n        break;\n      case three < five && five < ten:\n        text = \"Average form but on the decline recently.\";\n        break;\n      default:\n        break;\n    }\n  } else if (three < 1.5 && three >= 1) {\n    console.log(7);\n    switch (true) {\n      case three > five && five >= ten:\n        text = \"Average recent form with solid improvement over last 10 games.\";\n        break;\n      case three > five && five < ten:\n        text =\n          \"Average recent form which has improved with some inconsistency over last 10 games.\";\n        break;\n      case three === five && five > ten:\n        text = \"Average recent form with most improvement in the last 5.\";\n        break;\n      case three === five && five < ten:\n        text = \"Average recent form with a slight dip in the last 5.\";\n        break;\n      case three === five && five === ten:\n        text = \"Consistently average form over the last 10.\";\n        break;\n      case three < five && five === ten:\n        text =\n          \"Average recent form but slightly worsening in most recent results.\";\n        break;\n      case three < five && five > ten:\n        text = \"Average recent form, slightly fluctuating over the last 10.\";\n        break;\n      case three < five && five < ten:\n        text = \"Average recent form, declining consistently.\";\n        break;\n      default:\n        break;\n    }\n  } else if (three < 1 && three >= 0.5) {\n    console.log(8);\n    switch (true) {\n      case three > five && five >= ten:\n        text = \"Poor recent form with gradual improvement over last 10 games.\";\n        break;\n      case three > five && five < ten:\n        text =\n          \"Poor recent form but improving with some inconsistency over last 10 games.\";\n        break;\n      case three === five && five > ten:\n        text = \"Poor recent form with some improvement shown in the last 5.\";\n        break;\n      case three === five && five < ten:\n        text = \"Poor recent form with a dip in the last 5.\";\n        break;\n      case three === five && five === ten:\n        text = \"Consistently poor form over the last 10.\";\n        break;\n      case three < five && five === ten:\n        text = \"Poor recent form, slightly worsening in most recent results.\";\n        break;\n      case three < five && five > ten:\n        text = \"Poor recent form, slightly fluctuating over the last 10.\";\n        break;\n      case three < five && five < ten:\n        text = \"Poor recent form, declining consistently.\";\n        break;\n      default:\n        text = \"Poor recent form.\";\n        break;\n    }\n  } else if (pointsAverageTotal > 1 && three < 0.5) {\n    console.log(9);\n    switch (true) {\n      case three > five && five >= ten:\n        text = \"Poor recent form with gradual improvement over last 10 games.\";\n        break;\n      case three > five && five < ten:\n        text = \"Poor recent form with a slight improvement in the last 5.\";\n        break;\n      case three === five && five > ten:\n        text = \"Poor recent form but improving slightly in the last 5.\";\n        break;\n      case three === five && five < ten:\n        text = \"Poor recent form with a dip in the last 5.\";\n        break;\n      case three === five && five === ten:\n        text = \"Consistently poor form over the last 10.\";\n        break;\n      case three < five && five === ten:\n        text = \"Poor recent form, worsening further in the last 5.\";\n        break;\n      case three < five && five > ten:\n        text = \"Poor recent form, slightly fluctuating over the last 10.\";\n        break;\n      case three < five && five < ten:\n        text = \"Poor recent form, declining consistently.\";\n        break;\n      default:\n        break;\n    }\n  } else if (pointsAverageTotal <= 1 && three < 0.5) {\n    console.log(10);\n    switch (true) {\n      case three > five && five >= ten:\n        text =\n          \"Terrible recent form with gradual improvement over last 10 games.\";\n        break;\n      case three > five && five < ten:\n        text = \"Terrible recent form with a slight improvement in the last 5.\";\n        break;\n      case three === five && five > ten:\n        text = \"Terrible recent form but improving slightly in the last 5.\";\n        break;\n      case three === five && five < ten:\n        text = \"Terrible recent form with a dip in the last 5.\";\n        break;\n      case three === five && five === ten:\n        text = \"Consistently terrible form over the last 10.\";\n        break;\n      case three < five && five === ten:\n        text = \"Terrible recent form, worsening further in the last 5.\";\n        break;\n      case three < five && five > ten:\n        text = \"Terrible recent form, slightly fluctuating over the last 10.\";\n        break;\n      case three < five && five < ten:\n        text = \"Terrible recent form, declining consistently.\";\n        break;\n      default:\n        text = \"\";\n        break;\n    }\n  } else {\n    console.log(11);\n    console.log(pointsAverageTotal);\n    console.log(three);\n    console.log(five);\n    console.log(ten);\n  }\n  return text + ` ${xgText} ${attackString} ${defenceString}`;\n}\n\nexport default GenerateFormSummary;\n","/Users/gregdorward/Development/football-predictions/src/components/Toggle.js",[],{"ruleId":"146","replacedBy":"147"},{"ruleId":"148","replacedBy":"149"},{"ruleId":"150","severity":1,"message":"151","line":985,"column":5,"nodeType":"152","messageId":"153","endLine":985,"endColumn":6},{"ruleId":"146","replacedBy":"154"},{"ruleId":"148","replacedBy":"155"},{"ruleId":"146","replacedBy":"156"},{"ruleId":"148","replacedBy":"157"},{"ruleId":"150","severity":1,"message":"158","line":9,"column":5,"nodeType":"152","messageId":"153","endLine":9,"endColumn":13},{"ruleId":"150","severity":1,"message":"159","line":1,"column":10,"nodeType":"152","messageId":"153","endLine":1,"endColumn":15},"no-native-reassign",["160"],"no-negated-in-lhs",["161"],"no-unused-vars","'i' is assigned a value but never used.","Identifier","unusedVar",["160"],["161"],["160"],["161"],"'setCount' is assigned a value but never used.","'parse' is defined but never used.","no-global-assign","no-unsafe-negation"]